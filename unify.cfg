#!KAMAILIO

#*********************************************************************************
#                                                                                #
# Debug Diretives:                                                               #
#  1 - Don't use L_ERR unless that its really an error                           #
#  2 - L_ALERT is used by CDR so don't touch and don't use this level for debug  #
#  3 - Route information must contain the Route number and call ID               #
#      i.e. xlog("L_INFO", "R3 - M=$rm ... CI=$ci\n");                           #
#  4 - Except the basic info on route 0, other info messages should be as follow:#
#      xlog("L_INFO", "RN - <Info Message String> <parameters>\n") , where       #
#      RN is request route N, or RRN reply reoute N or FRN for failure route     #
#      parameters are the headers values, avp values ...                         #
#  5 - L_ERR and LDBG should follow the same rules                               #
#  6 - If a negative response is sent to an endpoint or main server use:         #
#      append_to_reply("Warning: 399 $Ri - RN - <warning message>.\r\n");        #
#      This is valid for sl_send_reply if code > 300 or  sl_reply_error and not  #
#      404 or 415                                                                #
#                                                                                #
##################################################################################
#  WHAT CHANGED FROM PREVIOUS TEMPLATES:                                         #
#                                                                                #
#  1) Multiple Avps initialization, instead of := use $(avp(avp_name)[*]) =...   #
#  2) Aliases, instead of avp_aliases = use modparam("pv", "avp_aliases", " ...  #
#  3) TLS configuration on separated include                                     #
#  4) Some modules are deprecated                                                #
#  5) Relay t_relay changed to t_relay_to                                        #
#  6) Usage of null: just lower case is allowed (so use $null instead of NULL)   #
#  7) If(0/1) or if (true/false) id no longer allowed used  ifdef instead        #
#                                                                                #
##################################################################################



# Routes definition

#define INT_AND_SANITY_ROUTE                 0
#define NM_INIT_ROUTE                        1
#define NM_OUTBOUND_ROUTE                    2
#define QUERY_REP_LAN_TO_WAN_CALL_ROUTE      3
#define QUERY_WAN_TO_LAN_CALL_ROUTE          4
#define PROCESS_MULT_CONTACT_ROUTE           5
#define QUERY_PM_LAN_TO_WAN_CALL             6
#define MANIPULATE_VIA_ROUTE                 7
#define SSP_PROFILE_DB_ROUTE                 8
#define NM_SSM_ORIGIN_ROUTE                  9
#define NM_OUTGOING_RELAY_ROUTE             10
#define SETUP_RR_ROUTE                      11
#define SSM_TAGS_LAN_2_WAN_ROUTE            12
#define NM_CHECK_ORIGIN_ROUTE               13
#define SETUP_DIVERSION_ROUTE               14
#define CALL_FROM_OSV_ROUTE                 15
#define SSM_TAGS_BOTH_DIRECTION_ROUTE       16
#define SSM_TAGS_WAN_2_LAN_ROUTE            17
#define SSP_REGISTRATION_ROUTE              18
#define FIND_OSV_BINDING_ROUTE              19
#define PORT_MAPPING_ADD_NEW_ROUTE          20
#define PORT_MAPPING_CATALOGUE_ROUTE        21
#define NM_PORT_MAPPING_TO_OSV_ROUTE        22
#define SSM_ROUTE                           23
#define PORT_MAPPING_FROM_OSV_ROUTE         24
#define PORT_MAPPING_REPLY_HDR_ROUTE        25
#define PORT_MAPPING_SSM_REPLY_HDR_ROUTE    26
#define SIP_MANIPULATION_ROUTE              27
#define VARIABLE_INIT_ROUTE                 28
#define SSP_PROFILE_REQUESTS_ROUTE          29
#define SSP_PROFILE_RESPONSE_ROUTE          30
#define SETUP_FROM_TO_ROUTE                 31

#define SDP_MANIPULATION_ROUTE              32
#define EMERGENCY_CALL_INV_ROUTE            33
#define SSP_REQUEST_COMMON_ROUTE            34
#define GLOBAL_INIT_ROUTE                   36
#define GLOBAL_SANITY_ROUTE                 37
#define NM_OUTGOING_FORWARD_ROUTE           38
#define GLOBAL_DOS_ROUTE                    39

#define NM_PORT_MAPPING_TO_OSV_PRE_ROUTE    40
#define NM_PORT_MAPPING_TO_OSV_POST_ROUTE   41
#define PROCESS_WAN_TO_LAN_FIRST_EP_FOUND   42
#define STANDALONE_TRUNK_ROUTE              43
#define INTERNAL_REQUESTS_ROUTE             44
#define PROCESS_PSTN_DIALIN_ROUTE           46
#define QUERY_LAN_TO_WAN_FIRST_EP_FOUND     47
#define PROCESS_REQ_TO_GTC                  48

#define MSRP_REQUEST_ROUTE                  49
#define MSRP_REPLY_ROUTE                    50
#define MSRP_FINDCOREREALM_ROUTE            51
#define BCF_HEADER_MANIPULATION_ROUTE       52
#define BCF_VIA_HEADER_MANIPULATION_ROUTE   53
#define MSRP_RELAY_ROUTE                    54
#define MSRP_AUTHO_ROUTE                    55
#define MSRP_FINDCONFIG_ROUTE               56

#define BCF_INCOMING_SUBSCRIBE_ROUTE        57
#define BCF_OUTGOING_SUBSCRIBE_ROUTE        58
#define BCF_INCOMING_NOTIFY_ROUTE           59
#define BCF_OUTGOING_NOTIFY_ROUTE           60
#define BCF_CHECK_RESTRICTION_ROUTE         61
#define BCF_URN_TO_NUMBER_ROUTE             62

#define SSP_DISPATCHER_RESPONSE_ROUTE       63
#define SSP_STATUS_ROUTE                    64

#define NM_GENERAL_REPLY_ROUTE               1
#define NM_REGISTER_REPLY_ROUTE              3
#define NM_GENERAL_FAILURE_ROUTE             1
#define NM_SSP_FAILURE_ROUTE                 3

#!define PROC_ENABLE_FAILOVER $var(B_gw_failover_gb)=1;

debug = -1
memdbg = 5
memlog = 5
sip_trace = 0
fork = yes
# syn_branch = 0
children = 10

#SUSE64 New path for modules and TLS module must be loaded before any usage of libssl.
mpath = "/usr/lib64/kamailio/modules/"

####### UDP DISTRIBUTOR PARAMETERS
### Need to enable -DUSE_FRONT_END in kamailio Makefile.defs
# tcp_front_end = yes
# udp_distributor_children = 50
# listen = udp:127.0.0.1:5040
####### END - UDP DISTRIBUTOR PARAMETERS

# attention: if children > 1 the $var's have to be set per daemon values are no longer
# valid for all daemeons

# Do not change this line. Used during kamailio startup. Warning: don't add chars or spaces after the number.
# sharedmem=2700
# max_memory=999.83984375

# Do not change this line. Used during kamailio startup. Warning: don't add chars or spaces after the number. SUSE64
# privatemem=128

# LISTEN LAN
listen = tcp:192.168.22.104:5060
listen = tls:192.168.22.104:5061

listen = tls:192.168.22.104:50100


# LISTEN WAN
listen = tcp:192.168.33.101:5060
listen = tls:192.168.33.101:5061
listen = udp:192.168.33.101:5060
listen = tls:192.168.33.101:5161



# LISTEN OTHER INTERFACES - eth1 and eth2 for advantec hw


# LISTEN LOOPBACK (not configurable in GUI)
listen = tcp:127.0.0.1:5060

# LOG
log_facility = LOG_LOCAL0
log_stderror =no

# TCP
disable_tcp = no
tcp_async = yes
tcp_children = 60
tcp_max_connections = 21000
tls_max_connections = 21000
tcp_connect_timeout=4
tcp_send_timeout=3
tcp_connection_lifetime=660

tcp_rd_buf_size = 32768
tcp_ep_rd_buf_size = 65536
tcp_conn_wq_max = 32768

#TOS
tos=104

# Multiple interfaces
mhomed = yes

# SIP Conf
reply_to_via = no
sip_warning = no
check_via = no

# BlackList
# use_dst_blacklist = on
# dst_blacklist_expire = 300

# DNS support
dns = yes
disable_core_dump = no
dns_try_ipv6 = yes
dns_use_search_list = no
dns_retr_no = 2
dns_retr_time = 1
use_dns_cache = on
dns_srv_lb = on
use_dns_failover = on
comprv6addr = 0

tcp_fd_cache = no

server_header="Server: OpenScape SBC V9 R4.13.00-2/UTC-68df2f3d7fe90f5b8f1a60a6621b8951"
user_agent_header="User-Agent: OpenScape SBC V9 R4.13.00-2/UTC-68df2f3d7fe90f5b8f1a60a6621b8951"

# TLS support
disable_tls = no

# ALIAS
# Local FQDN
alias="sbcinternet2.conatel-voip.net:5060"
alias="sbcinternet2.conatel-voip.net:5060"
alias="sbcinternet2.conatel-voip.net:5061"
alias="sbcinternet2:5060"
alias="sbcinternet2:5060"
alias="sbcinternet2:5061"




################################# Modules #####################################

#loadmodule "debugger.so"
loadmodule "tls.so"
loadmodule "pv.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "db_postgres.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "textops.so"
loadmodule "jsonrpcs.so"
loadmodule "uri_db.so"
loadmodule "xlog.so"
loadmodule "nathelper.so"
#loadmodule "rtpproxy.so"
loadmodule "alias_db.so"
loadmodule "avpops.so"
#loadmodule "gflags.so"         deprecated in Kamilio 3.0
loadmodule "group.so"
loadmodule "uac_redirect.so"
#loadmodule "snmpstats.so"
loadmodule "exec.so"
#loadmodule "siptrace.so"       TODO
loadmodule "cfgutils.so"
loadmodule "statistics.so"
loadmodule "osb.so"
loadmodule "siputils.so"
loadmodule "kex.so"
loadmodule "ctl.so"
loadmodule "benchmark.so"
loadmodule "htable.so"
loadmodule "sanity.so"
loadmodule "dialoglog.so"
loadmodule "uac.so"
loadmodule "ipops.so"
loadmodule "osb_memdb.so"
loadmodule "ratelimit.so"
loadmodule "textopsx.so"
loadmodule "regex.so"
loadmodule "cfg_rpc.so"
loadmodule "corex.so"
loadmodule "tcpops.so"

################################# Modules Parameters ##########################

# ----- jsonrpcs params -----
modparam("jsonrpcs", "fifo_name", "/var/run/kamailio/sipserver.fifo")
modparam("jsonrpcs", "fifo_mode", 0665)
modparam("jsonrpcs", "fifo_user", "swrun")
modparam("jsonrpcs", "fifo_group", "sw")

# ----- ctl parameter -----
modparam("ctl", "binrpc", "unix:/var/run/kamailio/kamailio_ctl") # default
modparam("ctl", "mode", 0665)
modparam("ctl", "user", "swrun")
modparam("ctl", "group", "sw")
modparam("ctl", "binrpc_buffer_size", 4096)
modparam("ctl", "binrpc_max_body_size", 1024)


# ----- Htable Module -----
modparam("htable", "htable", "user_unauth_transition=>size=256;autoexpire=30;")
modparam("htable", "htable", "user_unauth=>size=256;autoexpire=300;")
modparam("htable", "htable", "user_unknown=>size=256;autoexpire=300;")
modparam("htable", "htable", "user_reg_rate_violator=>size=256;autoexpire=300;")
modparam("htable", "htable", "register_rate=>size=256;autoexpire=3;")
# modparam("htable", "timer_mode", 1)

# ----- Sanity Module -----
modparam("sanity", "default_checks", 0)
modparam("sanity", "uri_checks", 0)
modparam("sanity", "autodrop", 0)
# For now list all the supported values from IANA for Proxy-Require header. Eventually we could only put what is supported by OSV and OS-SBC
modparam("sanity","proxy_require","100rel,199,answermode,early-session,eventlist,from-change,geolocation-http,geolocation-sip,gin,gruu,histinfo,ice,join,multiple-refer,norefersub,outbound,path,policy,precondition,pref,privacy,recipient-list-invite,recipient-list-message,recipient-list-subscribe,replaces,resource-priority,sdp-anat,sec-agree,tdialog,timer")

# ----- ratelimit parameter every 5 seconds interval-----
modparam("ratelimit", "timer_interval", 10)
# For register it is used the hash table register_rate with interval of 1s.
modparam("ratelimit", "queue", "1:INVITE")
modparam("ratelimit", "queue", "2:NOTIFY")
modparam("ratelimit", "queue", "3:SUBSCRIBE")
modparam("ratelimit", "pipe", "1:TAILDROP:200")
modparam("ratelimit", "pipe", "2:TAILDROP:1000")
modparam("ratelimit", "pipe", "3:TAILDROP:1000")
modparam("ratelimit", "pipe", "4:FEEDBACK:80")
modparam("ratelimit", "pipe", "5:NETWORK:200000")


# ----- benchmark parameter -----
modparam("benchmark", "enable", 1)
modparam("benchmark", "loglevel", -1)
# ===== TLS  =================

modparam("tls", "tls_force_run", 1)
modparam("tls", "config", "tls.cfg")
modparam("tls", "cipher_list", "AES128-SHA:AES256-SHA:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA")
modparam("tls", "connection_timeout", 660)
modparam("tls", "tls_disable_compression", 1)
modparam("tls", "send_close_notify", 1)
modparam("tls", "renegotiation", 0)
modparam("tls", "ssl_single_context", 1)

# As avp alias is optional, it was removed. Names was kept in comments only
# ===== General AVPs =========================
# S_hdr_refto_gs=i, S_hdr_tmp_ct_gs, S_new_src_ip_gs, S_tmp_gs, S_req_ct_gs, S_pmap_int_port_gi, S_pmap_ext_port_gi, C_port_gi, S_req_via_gs, snd_via=i:210,
# S_nat_ip_gs, S_reg_ct_gs, S_req_fromh_gs, S_wan_interface_gs, S_int_ip_gs, C_tmp2_gs, S_req_toh_gs, C_req_transp_gs,
# mngmt1, mngmt2,     # for mngmt exclusive use
# S_hdr_refby_gs, C_ssp_ppi_user_gs, C_ssp_pai_user_gs, C_ssp_div_user_gs, div_params, refby_user
# S_hdr_to_user_gs, S_hdr_refby2_gs, S_hdr_to_dom_gs, C_rm_address_type_gi, S_pmap_name_gs,
# C_advertised_ip_gs, C_advertised_port_gi, C_fw_ext_ip_gs,     # neat-end nat external ip
# S_pmap_map_time_gs, S_exp_as_gi, S_pm_transport_gs, S_AccessMainIPv4_gs, S_AccessMainIPv6_gs, S_networkid_gs, S_uri_based_route_gb, S_access_control_gb
# C_new_headers_list_gs, C_new_append_headers_list_gs, C_remove_headers_list_gs,

# ===== PSTN Gateway AVPs ====================
# S_gw_rm_ip_list_gs, S_gw_id_gi, S_ses_id_gi, C_ssp_gw_profile_gs, S_gw_rm_ip_gs, S_gw_rm_fqdn_gs, S_gw_rm_port_gi, C_gw_transp_gs, C_gw_core_ip_gs,
# S_gw_core_fqdn_gs, C_gw_core_port_gi, S_gw_is_natted_gs, S_rep_home_dn_gs, S_gw_emergency_prefixes_gs, C_gw_type_gi, gw_domain, S_gw_core_ip2_gs,
# S_gw_orig_uri_gs,
# Currently, only used for H4K, but could be used for others as well.
# S_hdr_user_agent_gs, C_wan_ip_gs, C_wan_port_gs, C_wan_port_tcp_gs, C_wan_port_tls_gs, C_wan_port_udp_gs, C_port_mtls_gs, C_wan_media_ip_gs,
# C_wan_media_port_gs, C_core_media_ip_gs, C_core_media_port_gs, C_core_ip_gs, S_access_realm_profile_gs, S_core_realm_profile_gs,
# S_network_type_gi, S_contact_ip_gi,

# S_final_ruri_gs, S_hdr_from_user_gs, S_hdr_from_dom_gs,

# ===== networ ID related avp ========================
# S_network_interface_dst_gs, S_network_interface_src_gs, S_network_interface_dst_sig_gi, S_network_interface_src_sig_gi, S_sys_osv_node_gs, S_location_dom_name_gs,

# ===== Dynamic Nat AVPs ========================
# S_rm_logical_id_gs, S_rm_media_ip_gs, S_rm_media_subnet_mask_gs,

# ===== general network avp ========================
# S_subnet_mask_gs, S_subnet_ip_gs, S_associated_ep_name_gs, S_associated_ep_id_gi, S_ep_name_gs,
# C_media_fw_ext_ip_gs,# neat-end nat external ip

# ===== SIP Trunk AVPs ========================
# C_ssp_type_gi, sp_id, C_ssp_name_gs, C_ssp_reg_status_gs, C_ssp_insec_ref_by_gs, C_ssp_ppi_rather_pai_gs, C_ssp_not_snd_div_gs,
# C_ssp_tel_sub_format_gs, C_ssp_restr_num_in_fromh_gs, sp_auth_in_div, C_ssp_auth_in_pai_gs, C_ssp_auth_in_fromh_gs, C_ssp_auth_in_div_gs,
# C_ssp_privacy_support_gs, C_ssp_default_home_dn_gs, C_ssp_default_home_dn_mand_gs, C_ssp_digest_auth_realm_gs, C_ssp_digest_auth_user_gs,
# C_ssp_digest_auth_psw_gs, C_ssp_fqdn_toh_gs, C_ssp_fqdn_ruri_gs, C_ssp_refer_to_ssp_gs, C_ssp_rip_gs,
#skype AVPs
# C_ssp_service_addr_gs, C_ssp_use_sip_service_address_gs, C_ssp_business_id_dn_gs, C_ssp_business_id_dn_req_gs, C_ssp_da_supported_gs,
# C_ssp_use_to_dn_gs, C_ssp_flags_gi, C_ssp_insert_anonymous_cid_gs, C_ssp_hDn_ppi_gb,

# ===== Music on Hold AVPs ========================
# ssm_route, C_src_ip_gs, S_call_type_gi, S_rep_ip_gs, C_pmap_port_gi, C_pmap_resp_port_gi, S_pmap_id_gi,
#keyid, iskeyset,
# S_is_fqdn_gs, S_pmap_sub_expiry_gs, S_req_rrh_gs, S_rm_transp_gs,
#core_ip,
# C_core_port_gi, C_core_port_tcp_gs, C_core_port_tls_gs, C_core_port_udp_gs,

# S_gw_core_port_gi, C_gw_behind_ep_gi, S_pmap_ep_id_gi, S_network_id_gi, S_media_network_id_gi, S_access_restriction_gi, S_profile_name_gs,

# ==== Current Binding Info AVP ==============
# C_sys_current_binding_ip_gs, C_sys_current_binding_port_gi, C_sys_current_binding_transp_gs,

# S_gw_rm2_ip_gs, S_gw_rm2_fqdn_gs, S_pmap_inv_timer_gi, C_m_body_gs, C_inv_noanswr_timer_gs, C_inv_noreply_timer_gs,

# S_src_ip_gs, S_wosmo_client_ip_gs, S_wosmo_client_port_gs,

################################################
# ===== dispatcher AVPs ========================
#
# S_ds_dest_gs, S_ds_group_gs, S_ds_count_gs, S_dsattrs_gs, S_current_node_gs, S_osv_port_gs, S_ds_prefix_gs, S_ds_No_answer_timer_gs,
# S_ds_No_reply_timer_gs, S_ds_grp_name_gs,
################################################
# ===== gtc AVPs ========================
#
# S_test_dn_gs, S_tnant_id_gs, S_trunk_status_gb, S_options_enabled_gb, S_tc_dial_ms_dn_gs, S_tc_dial_lanuage_gb, S_tc_dial_dn_gs
# S_prefix_routing_gb, S_temp3_gs, S_osvall_record_gs, S_media_wan_on_sdp_gs,S_fw_media_ip_gs, S_wan_on_sdp_gs

##############################################
# ===== Emergency Call AVPs ===============

# data retrieved from table "emergency"
# S_e911_emerg_table_id_li, S_e911_subnet_id_ls, S_e911_routing_prefix_gs, S_e911_send_lin_instead_cpn_ls, S_m_body_gs, S_e911_country_gs,
# S_e911_state_gs, S_e911_district_gs, S_e911_city_gs, S_e911_street_gs, S_e911_direction_gs, S_e911_suffix_gs, S_e911_number_gs,
# S_e911_postcode_gs, S_e911_communityname_gs, S_e911_building_gs, S_e911_floor_gs, S_e911_room_gs, S_e911_ep_id_ls

# data retrieved from table "emergency_lin"
# S_e911_lin_gs

# data retrieved from table "alarm_status"
# S_alarm_status_cpu_lb, S_alarm_status_mem_lb, S_dssocket_gs,

# IOS Push Notification
# S_ct_indication_gs, S_device_token_gs

# ----- maxfwd params -----
#modparam("maxfwd", "max_limit", 70)

# ----- sl params -----
#modparam("sl", "enable_stats", 1)

# ----- tm params -----
# TODO check tm paramas (inv and fr timers)
#modparam("tm", "fr_inv_timer_avp", "$avp(C_inv_noanswr_timer_avp_gs)" ) #INVITE timeout in 3min
#modparam("tm", "fr_timer_avp", "$avp(C_inv_noreply_timer_avp_gs)") #INVITE timeout in 3min

modparam("tm", "fr_inv_timer", 360000)
modparam("tm", "fr_timer", 3000)
modparam("tm", "disable_6xx_block", 0) #necessary to set for 6xx treatments
modparam("tm", "auto_inv_100", 0)
modparam("tm", "auto_inv_100_reason", "Trying")
modparam("tm", "reparse_invite", 0)
modparam("tm", "wt_timer", 32000) # Default was 5sec, increased to 32secs.
modparam("tm", "ac_extra_hdrs", "X-Siemens-Client-Socket")

# ----- uri_db params -----
modparam("uri_db", "db_url", "postgres://sipserver:siemens*@/sipserver")
#modparam("uri_db", "uri_table", "uri")

# ----- avpops params -----
modparam("avpops", "db_url", "postgres://sipserver:siemens*@/sipserver")
modparam("avpops", "avp_table", "usr_preferences")

# ----- alias_db params -----
modparam("alias_db", "db_url", "postgres://sipserver:siemens*@/sipserver")

# ----- nathelper params -----
# Some Nathelper functionality moved to RTPProxy module in 3.1
#modparam("nathelper", "natping_interval", 60)
#modparam("nathelper", "ping_nated_only", 1)

modparam("nathelper", "received_avp", "$avp(i:1)")

# ----- group params -----
modparam("group", "db_url", "postgres://sipserver:siemens*@/sipserver")

# ----- snmpstats params -----
#modparam("snmpstats", "sipEntityType", "registrarServer")
#modparam("snmpstats", "sipEntityType", "proxyServer")
#modparam("snmpstats", "snmpgetPath", "/usr/bin")
#modparam("snmpstats", "snmpCommunity", "public")

# ----- exec parameter -----
modparam("exec", "time_to_kill", 20)

# ----- rr params -----
# Enhanced parameter used as bitfield:
# bit0 - Enable double rr (By default, 2nd RR uses IP address, port and protocol from received socket)
# bit1 - Use IP address of sending socket in the 2nd RR
# bit2 - Use port of sending socket in the 2nd RR
# bit3 - Use protocol of sending socket in the 2nd RR
# bit4 - Use sips: for TLS protocol
modparam("rr", "enable_double_rr", 3)  # bits 0, 1

# ----- sip trace parameter -----
#modparam("siptrace", "db_url", "postgres://sipserver:siemens*@/sipserver")
#modparam("siptrace", "trace_on", 1)
#modparam("siptrace", "trace_flag", 0)
#modparam("siptrace", "table", "sip_trace")

# ----- osb module parameters ----- removed for OSS/OSB V2.0
#modparam("osb", "register_alarm_critical", 1000)
#modparam("osb", "register_alarm_major",    3500)
#modparam("osb", "register_alarm_minor",    32000)
modparam("osb","groups_info_file","/etc/openbranch/addr-groups.cfg")


#modparam("topoh", "mask_key", "14df090w-DFx_Sd4Wg")
modparam("osb","shared_secret","n@hz!B,!dn@krehC~!m!r@K")

# modparam("uac","credential","99051000134765:sip.skype.com:wPfKwysScbbqsV")

modparam("uac","auth_realm_avp","$avp(S_rep_digest_realm_gs)")
modparam("uac","auth_username_avp","$avp(S_rep_digest_user_gs)")
modparam("uac","auth_password_avp","$avp(S_rep_digest_psw_gs)")

modparam("dialoglog", "max_messages", 100)           # 100 messages
modparam("dialoglog", "max_timeout", 3000)           # 6 seconds

modparam("dialoglog", "max_archive_size", 102400)    # 100kb
max_while_loops = 55000;

modparam("htable", "htable", "dlg-info=>size=8;autoexpire=86400;")
modparam("htable", "htable", "call-info=>size=8;autoexpire=180;")

modparam("tcpops", "closed_event", 1)

# port_map Table
# id | ep_ip_addr | ep_contact | ep_int_port | ep_ext_port | map_time | exp_as | sub_expiry | wan_interface | epid | contact_user | contact_domain | contact_port | vlan_tag | transport | user_agent | wan_port | realm_index
# remote_ep table
# id | name | rm_logical_id | type | profile | rm_ip | rm_fqdn | rm_port | rm_transport | core_ip | core_fqdn | core_port | route_prefix | rep_home_dn | emergency_prefixes | nat_port|nat_ip | wan_interface | rm_address_type | osv_node | location_domain_name | rm_media_ip | rm_media_subnet_mask | dns_res_status | uri_based_routing | access_control | associated_ep_name | invite_no_answer_timer | invite_no_reply_timer | access_realm_profile | core_realm_profile | received_port
# remote_subscriber table
# id | sub_name | location_domain_name | subnet_ip | subnet_mask | anchor_media | rep_home_dn | emergency_prefixes | wan_interface | access_realm_profile | core_realm_profile | received_port
# network_id table
# id | network_id_name | network_type | interface | signalling | media | ip_addr | port | osv_node | fw_ext_ip | fw_int_ip | sip_alg | access_restriction
# realm_profile table
# id | name | type | signalling_nw_id | media_nw_id
# sub_associated_network table
# id | name | access_realm | core_realm | signalling | media
# user_agent table
# id | ua_type
#
#
# functions available:
#   osb_memdb_insert("tbl_name,*|*|*|*|*|*|*|*|*|*|*");
#   osb_memdb_delete("tbl_name,*|*|*|*|*|*|*|*|*|*|*,num_reg");
#   osb_memdb_select("tbl_name,*|*|*|*|*|*|*|*|*|*|*,num_reg","||||||||||");
#   osb_memdb_nl_select("tbl_name,*|*|*|*|*|*|*|*|*|*|*,num_reg","||||||||||"); # No Lock
#   osb_memdb_update("tbl_name,*|*|*|*|*|*|*|*|*|*|*,num_reg","||||||||||");
#   osb_memdb_get_port("range");
#   osb_memdb_set_port("port","range")
#
# tlb_name = port_map
# num_reg = positive integer, empty value (max as possible)
# * = any value
# range = EXT, INT
# ----- osb_memdb module parameters -----

# Check for Table changes every 10mins.
modparam("osb_memdb", "store_tbl_interval",600);
modparam("osb_memdb", "min_ext_port", 10000)
modparam("osb_memdb", "max_ext_port", 49999)
modparam("osb_memdb", "cfg_file_path", "/etc/kamailio/osb_memdb.cfg")


# ----- Definitions/Macros -----

# ---- Remote Subcriber Parameters ----

#!define PROCESS_INITIAL_REG_ENABLED        0
#!define REM_SUB_MIN_REG_EXPIRE             300
#!define REM_SUB_MAX_REG_EXPIRE             5000
#!define REM_SUB_MAX_THROTTLE_TIMER         1800
#!define REM_SUB_UDP_THROTTLE_INTERVAL      60
#!define REM_SUB_TCP_THROTTLE_INTERVAL      60
#!define REM_SUB_QUARANTINE_REG_VIOLATOR    0
#!define REM_SUB_TLS_THROTTLE_ENABLED       1

# ---- TC MS interface ----
#!define TC_MS_ACC_CONN_AVAILABLE       "544"
#!define TC_MS_ACC_CONN_OFFLINE         "545"


# SIP CONNECT Defnition.
# Shall be used only for SIP URI's with E.164 number
#!define  URI_PARAM_USER_EQ_PHONE                0x10000

# Shall be used only for TEL URIS
#!define  URI_PARAM_PHONE_CONTEXT                0x20000

#!define  URI_TEL2SIP                            0x200000
#!define  URI_SIP2TEL                            0x400000

# Call Type Defnition
#!define SSM_CT_X_FLAGS                          0
#!define SSM_CT_X_E911                           (1<<0)
#!define SSM_CT_X_ANSIBLE_SUB                    (1<<1)
#!define SSM_CT_X_REMOTE_SUB                     (1<<2)
#!define SSM_CT_X_REMOTE_EP                      (1<<3)
#!define SSM_CT_X_UTC_REMOTE_EP                  (1<<4)
#!define SSM_CT_X_STANDALONE_ROUTE               (1<<5)

############################ Routing Session ###########################
########################################################################
# main route
########################################################################
route[0]
{
    if (is_gflag("6"))
        bm_start_timer("route-0");

    route(GLOBAL_INIT_ROUTE); #Global Variables Initializing

    xlog("L_INFO", "CI=$ci - R0 - New request - M=$rm RU=$ru FU=$fu TU=$tu RD=$rd DD=$dd DU=$du OD=$od OU=$ou IP=$var(C_si_var_gs) sp=$sp Rp=$Rp CT=$ct RIP=$var(C_ri_var_gs) conid=$conid\n");

    # -----------------------------------------------------------------
    # Global Variables Initializing
    # -----------------------------------------------------------------

    # if (!is_gflag("5"))
    #    t_set_auto_inv_100(1); # turn on automatic 100 replies for INVITE transaction

    # write kamailio statistics to a file
    osb_write_stats();

    if(!is_gflag("1"))
    {
        exec_msg("sudo /osb/bin/db_upd_ip_from_fqdn.sh -f &");

        # if the openser has been re/started initializate global variables

        # Set the global flag to not entry here after the initialization
        set_gflag("1");
        $var(S_kamailio_restarted_gi) = 1;

        # Reset transition mode global flag
        reset_gflag("9");

        # Get the operational mode
        osb_get_operational_mode("$var(S_sys_operational_mode_ls)");
        $shv(S_operational_mode_gs)=$var(S_sys_operational_mode_ls);
        xlog("L_INFO", "CI=$ci - R0 - System started in $var(S_sys_operational_mode_ls) operational mode");

        # Set Global Control Flags
        set_gflag("0");
        ##FLAG2_ACTIVATION##
        ##FLAG3_ACTIVATION##
        ##FLAG4_ACTIVATION##
        ##FLAG5_ACTIVATION##
        ##FLAG6_ACTIVATION##
        ##FLAG7_ACTIVATION##
        ##FLAG8_ACTIVATION##
        ##FLAG9_ACTIVATION##
        ##FLAG10_ACTIVATION##
        ##FLAG11_ACTIVATION##
        ##FLAG12_ACTIVATION##
        ##FLAG13_ACTIVATION##
        ##FLAG14_ACTIVATION##
        ##FLAG15_ACTIVATION##
        ##FLAG16_ACTIVATION##
        ##FLAG17_ACTIVATION##
        ##FLAG18_ACTIVATION##
        ##FLAG19_ACTIVATION##
        ##FLAG20_ACTIVATION##

        # check if  VRRP is in use
        $var(S_tmp_gs) = "";
        if($var(S_tmp_gs)!= "")
        {
            set_gflag("21");
        }
        #Flag 12 for Verizon Sepecific Changes
        set_gflag("12");
    }

    ## Cluster Mode
    $var(S_8kmode_gs) = 'geo-separated';
    ### need to set flags 10 and 25 very early ####
    ### see if this is from OSV ####
    route(NM_CHECK_ORIGIN_ROUTE);
    route(HDR_INIT_ROUTE);



    # -----------------------------------------------------------------
    # Sanity Check for Message from WAN and from OSV
    # -----------------------------------------------------------------
    if($var(S_sys_internal_msg_gb) == 0)
    {
      if(isflagset(25))
      {
         xlog("L_INFO", "CI=$ci - R0 - Check Request from $si via_top:$sel(v[1].host) via_last:$sel(v[-1].host) for trusted endpoint branch: $sel(v[1].branch) $sel(v[-1].branch)\n");
         if(is_method("REGISTER") &&  ($sel(v[1].host) != $sel(v[-1].host) || $sel(v[1].branch) != $sel(v[-1].branch))) #Check for more than 1 VIA
         {
             $var(S_via_ip_ls)= $sel(v[1].host);
             ### need to remove the brackets from ipv6
             get_ip_from_paran('$var(S_via_ip_ls)', '$var(S_via_ip_ls)');

             xlog("L_INFO", "CI=$ci - R36 - Dip remote_ep with *|*|*|*|*|$var(S_via_ip_ls)|*|*|*|*|*|*|*|*|*|*|$avp(S_src_ip_gs)|*...* \n");
             if( (osb_memdb_select("remote_ep,*|*|*|*|*|$var(S_via_p_ls)|*|*|*|*|*|*|*|*|*|*|$avp(S_src_ip_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","||||||||||||||||||||||||||||||||||||||||||||||") == 1) ||
                 (osb_memdb_select("remote_ep,*|*|*|*|*|*|$var(S_via_ip_ls)|*|*|*|*|*|*|*|*|*|$avp(S_src_ip_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","||||||||||||||||||||||||||||||||||||||||||||||") == 1))
             {
                xlog("L_INFO", "CI=$ci - R36 - Request from trusted endpoint $si\n");
                setflag(7);
             }
          }
          route(GLOBAL_DOS_ROUTE); # DOS Check
       }
       route(GLOBAL_SANITY_ROUTE); # Sanity Check
    }


    if (is_method("REGISTER|OPTIONS"))
        $var(C_call_msg_gb) = 0;
    else
        $var(C_call_msg_gb) = 1;

    # Loose route can be called once so use a flag instead
    # check for to-tag also as some cases loose_route would be false for mid-dialog requests

    $var(S_is_fssp_gb) = 0;
    $var(S_is_tssp_gb) = 0;
    $(avp(C_ssp_rip_gs)[*]) = $null;
    $(avp(C_tmp2_gs)[*]) = $null;
    $(avp(S_rep_ip_gs)[*]) = $null;

    if (has_totag() && !$var(C_mosip_message_gb))
       setflag(13);

    if ($rU == $null && $oU != $null)
        $rU = $oU;

    $(avp(C_src_ip_gs)[*]) =$null;

    #initialize avp coreip with lan main address
    $avp(C_core_ip_gs) = $var(S_lanip_4_6_gs);

    route(INTERNAL_REQUESTS_ROUTE);
    # -----------------------------------------------------------------
    # Check Operational Mode
    # -----------------------------------------------------------------
    # Not calling Route 22 here for UnRegister from SP due to Colocated WAN interface handling issue.
    if($var(S_webRtc_gi) != 1 && is_method("REGISTER") && $var(S_is_src_lan_ip_ls) == 1 &&
        ($sel(contact.expires) == 0 || (is_present_hf("Expires") && $(hdr(Expires){s.int}) == 0)))
    {
        $avp(C_port_gi)=$null;

        xlog("L_INFO","CI=$ci - R0 - UnRegister from SP arrived\n");
        #get the port
        $avp(S_reg_ct_gs) = $hdr(Contact);
        $(avp(C_tmp2_gs)[*]) = $null;
        $avp(S_reg_ct_gs) = $(avp(S_reg_ct_gs){nameaddr.nc_uri});## some send contact without bracket
        xlog("L_INFO","CI=$ci - R0 -  Contact=$avp(S_reg_ct_gs)\n");
        $var(C_ct_domain_ip_ls) = $(avp(S_reg_ct_gs){uri.host});
        $var(C_hdr_ct_user_gs) = $(avp(S_reg_ct_gs){uri.user});
        $avp(C_port_gi) = $(avp(S_reg_ct_gs){uri.port});
        xlog("L_INFO","CI=$ci - R0 -  var(C_ct_domain_ip_ls)=$var(C_ct_domain_ip_ls), var(C_hdr_ct_user_gs)=$var(C_hdr_ct_user_gs)\n");

        $avp(C_tmp2_gs) = "sip:"+$var(C_hdr_ct_user_gs)+"@"+$var(C_ct_domain_ip_ls)+":"+$avp(C_port_gi);
        #find in PM the item corresponding to this entry
        osb_memdb_select("port_map,*|*|$avp(S_reg_ct_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1","|$avp(S_int_ip_gs)|$avp(S_reg_ct_gs)||$avp(C_port_gi)||||$avp(C_wan_ip_gs)|||||||||||||||||");

        ### we got the wan_interface in $avp(C_wan_ip_gs)
        xlog("L_INFO","CI=$ci - R0 -  this is the main WAN interface: $avp(C_wan_ip_gs)\n");
        $avp(C_pmap_port_gi)=$avp(C_port_gi);

        route(FIND_OSV_BINDING_ROUTE); # Get OSV Binding

        if($avp(C_sys_current_binding_ip_gs) == "0.0.0.0")
        {
           sl_send_reply("503", "Server Unavailable - invalid binding");
           if (is_gflag("6"))
           {
               xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
               bm_log_timer("route-0");
           }
           exit;
        }

        $(avp(S_gw_id_gi)[*]) = $null;
        xlog("L_INFO","CI=$ci - R0 - dip remote_ep with *|*|*|*|*|$avp(S_int_ip_gs)|*...* \n");
        osb_memdb_select("remote_ep,*|*|*|*|*|$avp(S_int_ip_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1","$avp(S_gw_id_gi)|||||$avp(S_gw_rm_ip_gs)||||$avp(C_core_ip_gs)|$avp(S_gw_core_fqdn_gs)||||||||||||||||||||||||||||||||||||");
        if(($avp(S_gw_id_gi) != $null && $avp(S_gw_id_gi) != ""))
        {
           xlog("L_INFO","CI=$ci - R0 - entity behind ep, $avp(C_core_ip_gs),$avp(S_gw_rm_ip_gs),$avp(S_gw_core_fqdn_gs) \n");

        }
        else
           $avp(C_core_ip_gs) = $var(S_lanip_4_6_gs);

        #change the headers
        $var(C_sys_binding_port_gi) = $avp(C_sys_current_binding_port_gi);
        $ru = "sip:" + $avp(C_sys_current_binding_ip_gs) + ":" + $avp(C_sys_current_binding_port_gi) + ";transport=" + $avp(C_sys_current_binding_transp_gs);
#        $ru = "sip:" + $avp(C_sys_current_binding_ip_gs) + ";transport=" + $avp(C_sys_current_binding_transp_gs);
        if ($avp(C_ssp_pt_params_list_gs) != $null)
            osb_set_passthrough_params("$ou","$ru","$avp(C_ssp_pt_params_list_gs)");

        $var(S_ip_port_gs) = $avp(C_core_ip_gs) + ":" + $avp(C_pmap_port_gi);

        subst('/^(From:[^:]*sips?:[^>]+)@[^>;]+(.+)/\1@$avp(C_sys_current_binding_ip_gs)\2/i');
        subst('/^(To:[^:]*sips?:)([^@]+@)?[^>; ]+(.+)/\1\2$avp(C_sys_current_binding_ip_gs)\3/i');
        subst('/^(Contact:[^:]*sips?:)([^@]+@)?[^>;]+(.+)/\1\2$var(S_ip_port_gs)\3/ig');

        # Store all via headers in rcv_via
        $var(S_via_count_gi) = 0;
        $(avp(S_req_via_gs)[*]) = $null;
        while($(hdr(Via)[$var(S_via_count_gi)]) != $null)
        {
            $(avp(S_req_via_gs)[$var(S_via_count_gi)]) = "Via: " + $(hdr(Via)[$var(S_via_count_gi)]);
            $var(S_via_count_gi) = $var(S_via_count_gi) + 1;
        }
        remove_hf("Via");

        ### Bizhan TODO: need to enahnce logic for multiple access and ipv4 & ipv6
        ### we have multiple coreip (ipv4 & ipv6)
        $fs = $(ru{uri.transport}{s.tolower}) + ":"+ $avp(C_core_ip_gs);
        $var(S_log_fr_ls) = "";
        t_set_fr(360000, 6000);  # Set reply timeout for REGISTER to server
        $var(S_log_fr_ls) = "Setting FR timers to REGISTER <360000,6000>";
        xlog("L_INFO","CI=$ci - R0 - ruri changed to: $ru, FS=$fs . $var(S_log_fr_ls)\n");

        t_on_reply("NM_REGISTER_REPLY_ROUTE");
        route(SIP_HEADERS_CHANGE_ROUTE);

        if(!t_relay_to("0x03"))
        {
            xlog("L_ERR", "CI=$ci - R0 - Relay failure - Registration failed - M=$rm F=$fu T=$tu CT=$ct IP=$var(C_si_var_gs) CI=$ci DU=$du FS=$fs\n");
            append_to_reply("Warning: 399 $var(C_ri_var_gs) - R0 - Registration failed: relay error.\r\n");
            sl_reply_error();
            if (is_gflag("6"))
            {
                  xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
                  bm_log_timer("route-0");
            }
            exit;
        }

        if(!isflagset(28)) # Check if we need to save it in location table
        {
            if (is_gflag("13"))
                force_tcp_alias(0); # Add TCP alias port if changed by SIP phone. Funtion modified to avoid error logs when parameter is 0 and port is already set.
        }

        if (is_gflag("6"))
        {
            xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
            bm_log_timer("route-0");
        }
        exit;
    }

    if ($shv(S_operational_mode_gs) == "normal")
    {
        route(NM_INIT_ROUTE);
        if (is_gflag("6"))
        {
            xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
            bm_log_timer("route-0");
        }
        exit;
    }
    else
    {
        if (is_gflag("6"))
        {
            xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
            bm_log_timer("route-0");
        }
        exit;
    }
}

########################################################################
# VARIABLE_INIT_ROUTE: Initialization of source Route in Response
########################################################################
route[VARIABLE_INIT_ROUTE]
{
    if (is_gflag("6"))
        bm_start_timer("route-28");

    xlog("L_INFO", "CI=$ci - R28 - Initializing Si and RI - M=$rm SI=$si sp=:$sp CT=$ct RIP=$Ri cseq:$cs\n\n");

    # -----------------------------------------------------------------
    # Global Variables Initializing
    # -----------------------------------------------------------------
    $var(S_local_ip_gs) = "127.0.0.1";
    $var(S_local_port_gs) = "5060";
    $var(S_ms_port_gs) = "55060";

    $var(S_lanip_4_6_noparan_gs) = "192.168.22.104";
    put_ip_in_paran('$var(S_lanip_4_6_noparan_gs)', '$var(S_lanip_4_6_gs)');

    $var(C_si_var_gs) = $si;
    $var(C_ri_var_gs) = $Ri;
    $var(S_is_request_gi)= 0;
    $var(S_mod_resp_code_gi) = 0;
    $var(S_exp_li) = 0;
    $var(S_user_gs) = '';
    $var(S_dom_x_siemens_location_gs) = "";
    $var(S_x_call_type_alpha_uri_gs) = "";
    $var(S_interface_src_gs) = '';
    $var(S_old_pmap_transp_gs) = "";

    $var(C_ssm_ip_gs) = "127.0.0.1";
    $var(C_ssm_port_gi) = 5150;
    $var(C_ssm_transport_gs) = "tcp";

    $var(C_g_registerFromSrvr_gb) = 0;

    if (is_method("NOTIFY") || is_method("SUBSCRIBE"))
        $var(C_g_useSsmRecordRoute_gb) = 0;
    else
        $var(C_g_useSsmRecordRoute_gb) = 1;

    $var(C_hdr_rr_gs) = "";

    $var(S_webrtc_port_li) = 0;
    $var(S_numCore_li) = 4;

    # -----------------------------------------
    # Global Variables for SSM Header Map
    # Maximum Value is 32 bits.
    # -----------------------------------------
    $var(C_ssm_hdr_map_gi)    = 0;
    $var(C_ssm_hdr_2ND_map_gi)    = 0;
    $var(C_ssm_ep_hdr_map_gi) = 0;
    # Fture, For New ssm Headers
    # $var(C_ssm_ep_hdr_map1_gi) = 0;
    $var(S_pmap_property_changed_gb) = 0;
    $var(C_ssm_hdr_ep_map_gi)       = 0;
    $var(C_ssm_call_side_data_gs) = "";
    $var(S_rem_ep_addr_gs) = "";
    $var(S_rem_ep_port_gs) = "";
    $var(S_rem_ep_tran_gs) = "";
    $var(S_rem_uri_info_addr_gs) = "";
    $var(S_own_uri_info_addr_gs) = "";

    # -----------------------------------------
    # Global Variables for SSP
    # -----------------------------------------
    $var(C_ssp_tls_sips_scheme_gb)      = 0;
    $var(C_ssp_tls_config_gb)           = 0;
    $var(C_ssp_sip_o_tls_set_gb)        = 0;
    $var(C_ssp_is_tls_gb)               = 0;
    $var(C_ssp_tls_signalling_gb)       = 0;
    $var(C_ssp_sip_no_suffix_gb)        = 1;
    $var(C_ssp_tls_pass_thru_gb)        = 0;
    $var(C_ssp_trans_eq_tls_gb)         = 0;

    $var(C_ssp_use_tel_gb)              = 0;
    $var(C_ssp_user_eq_phone_gb)        = 0;
    $var(C_ssp_reg_mode_gb)             = 0;
    $var(C_ssp_tr118_gb)                = 0;
    $var(C_ssp_disable_silence_sup_gb)  = 0;
    $var(C_ssp_dis_FQDN_passthrough_from_gb)  = 0;
    $var(S_ssp_fwd_port_gs)             = "";
    $var(C_ssp_add_ua_gb)               = 0;
    $var(C_ssp_subst_ua_gb)             = 0;
    $var(C_ssp_rfc2543_gb)              = 0;
    $var(C_ssp_HomeDN_in_ct_gb)         = 0;
    $var(C_ssp_HomeDN_in_pai_gb)        = 0;
    $var(C_ssp_HomeDN_in_ppi_gb)        = 0;

    $var(S_signalling_gi)                    = 0;
    $var(S_media_gi)                         = 0;

    # -----------------------------------------
    # Global Variables for destination
    # -----------------------------------------
    $var(S_dest_nat_ip_gs)              = "";
    $var(S_dest_nat_port_gs)            = "";

    # -----------------------------------------
    # Global Variables for GTC
    # -----------------------------------------
    # Standalone trunk route will be enabled.
    $var(S_standalone_server_gi) = 0;
    $var(S_standalone_route_gi)  = 0;

    xlog("L_INFO", "CI=$ci - R28 - Initializing - M=$rm IP=$var(C_si_var_gs):$sp CT=$ct RIP=$var(C_ri_var_gs) cseq:$cs\n\n");

        if (is_gflag("6"))
        {
            xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
            bm_log_timer("route-28");
        }
}

# Global Variables Initializing
########################################################################
# GLOBAL_INIT_ROUTE: Global Initialization Route
########################################################################
route[GLOBAL_INIT_ROUTE]
{
    # -----------------------------------------------------------------
    # Global Variables Initializing
    # -----------------------------------------------------------------

    xlog("L_INFO", "CI=$ci - R36 - Initializing - M=$rm IP=$si:$sp  from= CT=$ct RIP=$Ri cseq:$cs\n\n");
    xlog("L_INFO", "CI=$ci - R36 - New request - M=$rm RU=$ru FU=$fu TU=$tu RD=$rd DD=$dd DU=$du OD=$od OU=$ou IP=$var(C_si_var_gs) sp=$sp Rp=$Rp CT=$ct RIP=$var(C_ri_var_gs) CI=$ci\n\n");

    $avp(S_AccessMainIPv4_gs) = "192.168.33.101";
    $avp(S_AccessMainIPv6_gs) = $null;
    $avp(S_src_ip_gs) = $si;
    $var(C_si_var_gs) = $si;
    $avp(C_ssp_uac_sent_gb) = 0;

    # ----- external load balance -----
    $avp(S_lb_ext_ip_gs) = $null;
    $avp(S_lb_ext_port_tls_gs) = 0;
    $avp(S_lb_ext_port_tcp_gs) = 0;

    route(VARIABLE_INIT_ROUTE);


    if (compare_ips('$var(C_si_var_gs)','$var(S_lanip_4_6_gs)'))
        $var(S_is_src_lan_ip_ls) = 1;
    else
        $var(S_is_src_lan_ip_ls) = 0;

    if (compare_ips('$var(C_si_var_gs)','$var(S_local_ip_gs)'))
        $var(S_is_src_loc_ip_gs) = 1;
    else
        $var(S_is_src_loc_ip_gs) = 0;

    $var(S_8kmode_gs)               = '';
    $var(S_binding_found_gs)        = 0;
    $var(S_g_rem_from_disp_name_gs) = 0;
    $var(S_g_rem_pai_disp_name_gs)  = 0;
    $var(S_g_rem_ppi_disp_name_gs)  = 0;
    $var(S_g_pai_display_gs)        = 0;
    $var(C_ssm_msg_gb)              = 0;
    $var(C_call_msg_gb)             = 0;
    $var(S_do_not_set_du_gi)        = 0;
    $var(C_duChanged_gi)            = 0;
    $var(S_routeh_port_gi)          = 0;
    $var(S_hdr_div_domain_gs)       = '';
    $var(S_hdr_pai_domain_gs)       = '';
    $var(C_sanity_fail_lb)          = 0;
    $var(S_call_to_direct_ep_gb)    = 0;
    $var(S_wan_natted_gb)           = 0;
    $var(S_NG911Call_gb)            = 0;   # BO4816
    $var(S_NG911_notification_gb)   = 0;
    $var(S_pos_li)             = 0;
    $var(S_ru1_ls)             = '';
    $var(S_ru2_ls)             = '';
    $var(S_rcvtoh1_ls)         = '';
    $var(S_rcvtoh2_ls)         = '';
    $var(S_contact1_ls)        = '';
    $var(S_contact2_ls)        = '';
    $var(S_no_contact_replacement_lb) = 0;
    $var(S_ip_port_gs)         = '';
    $var(S_found_ls)           = 0;

    $var(S_ep1_id_gi)                   = 0;
    $var(C_ep1_rm_ip_gs)                = '';
    $var(C_ep1_rm_port_gi)              = 0;
    $var(C_ep1_nat_port_gs)             = '';
    $var(C_ep1_type_gi)                 = 0;
    $var(S_ep1_rep_home_dn_gs)          = '';
    $var(C_ep1_core_ip_gs)              = '';
    $var(C_ep1_core_fqdn_gs)            = '';
    $var(C_ep1_core_port_gi)            = 0;
    $var(C_ep1_transp_gs)               = '';
    $var(C_ep1_bitmap_gi)               = 0;
    $var(S_ep1_profile_gs)              = '';
    $var(S_ep1_logical_id_gs)           = '';
    $var(C_ep1_rm_fqdn_gs)              = '';
    $var(S_ep1_nat_ip_gs)               = '';
    $var(S_ep1_rm_address_type_gi)      = 0;
    $var(S_ep1_rm_media_ip_gs)          = '';
    $var(S_ep1_media_subnet_mask_gs)    = '';
    $var(S_ep1_natted_gi)               = 0;
    $var(S_ep1_port_gi)                 = 0;

    $var(S_ep1_access_realm_profile_gs) = '';
    $var(S_ep1_core_realm_profile_gs)   = '';
    $var(S_ep1_gtc_name_gs)             = '';
    $var(C_ep1_wan_port_gi)             = 0;

    $var(C_ep2_rm_ip_gs)              = '';
    $var(C_ep2_rm_fqdn_gs)            = '';
    $var(C_ep2_rm_port_gi)            = 0;
    $var(C_ep2_transp_gs)             = '';
    $var(C_ep2_type_gi)               = 0;
    $var(C_ep2_core_ip_gs)            = '';
    $var(C_ep2_core_fqdn_gs)          = '';
    $var(C_ep2_core_port_gi)          = 0;
    $var(C_ep2_bitmap_gi)             = 0;
    $var(S_ep2_rm_address_type_gi)    = 0;
    $var(S_ep2_rm_media_ip_gs)        = '';
    $var(S_ep2_media_subnet_mask_gs)  = '';
    $var(S_ep2_core_realm_profile_gi) = '';
    $var(S_reg_exp_port_gs)           = '';
    $var(S_reg_exp_dom_gs)            = '';
    $var(S_reg_exp_transp_gs)         = '';
    $var(S_un_reg_gb)                 = 0;
    $var(S_sys_internal_msg_gb)       = 0;
    $var(S_do_second_dip_gb)          = 1;
    $var(S_donot_restore_gw_avps_gb)  = 0;
    $var(S_matched_port_gb)           = 0;
    $var(S_sys_count_gi)              = 0;
    $var(S_matched_ip_fqdn_gb)        = 0;
    $var(S_ct_port_gs)                = '';
    $var(S_cmp_port_gs)               = '';
    $var(S_ct_ip_fqdn_gs)             = '';
    $var(S_is_request_gi)             = 1;
    $var(S_mod_resp_code_gi)          = 0;
    $var(S_exp_li)                    = 0;
    $var(S_user_gs)                   = '';
    $var(S_locationDomainName_gs)     = '';
    $var(S_network_type_gi)           = 0;
    $var(S_profile_type_gi)           = 0;
    $var(S_ru_is_fqdn_gb)             = 0;
    $var(S_1stEp_osv_node_gs)         = '';

    $var(S_toh_opt_transp_gs)   = "";
    $var(S_fromh_opt_transp_gs) = "";
    $var(S_toh_opt_port_gs)     = "";
    $var(S_fromh_opt_port_gs)   = "";

    # -----------------------------------------
    # Global Variables for SSP
    # -----------------------------------------

    $avp(C_ssp_flags_gi)        = 0;
    $avp(C_ssp_type_gi)         = 0;
    $var(S_sp_trans_eq_tls_gs)  = 0;
    $var(S_ssp_ip_addr_r0_gs)   = "";
    $var(S_ssp_ip_port_r0_gs)   = "";
    $var(S_ssp_ip_addr_r1_gs)   = "";
    $var(S_ssp_ip_port_r1_gs)   = "";
    $var(S_ssp_ip_tran_r0_gs)   = "";
    $var(S_port_transp_opt_gs)  = "";
    $var(S_div_manipulated_gi)  = 0;
    $var(S_ppi_manipulated_gi)  = 0;
    $var(S_pai_manipulated_gi)  = 0;
    $var(S_from_manipulated_gi) = 0;
    $var(S_ruri_manipulated_gi) = 0;
    $var(S_div_manipulated_gi)  = 0;
    # -----------------------------------------------------------------
    # Global Variables for WOSMO
    # -----------------------------------------------------------------
    $var(S_wosmo_client_ip_gs)         = 0;
    $var(S_wosmo_client_port_gs)       = 0;
    $var(S_webRtc_gi)                  = 0;
    # -----------------------------------------------------------------
    # Global Variables for gtc
    # -----------------------------------------------------------------
    $var(S_gtc_ssp_src_gs)         = 0;
    $var(S_mediaserver_call_gi)    = 0;
    $var(S_gtc_status_gs)          = 0;
    $var(S_ssp_name_ls)            = '';
    $var(S_kamailio_restarted_gi)  = 0;
    # -----------------------------------------------------------------
    # Global Variables for gtc_pstn_dialin
    # -----------------------------------------------------------------
    $var(S_gtc_pstn_dialin_gs)               = 0;
    $var(S_LanInvoked_gi)                    = 0;
    $var(S_pstn_dialin_route_gi)             = 0;
    $var(S_final_S_ep1_id_gi)                = 0;
    $var(S_final_S_ep1_rep_home_dn_gs)       = '';
    $var(S_final_S_ep1_profile_gs)           = '';
    $var(S_network_interface_dst_gs)         = '';
    $var(S_final_S_ep1_logical_id_gs)        = '';
    $var(S_final_S_ep1_logical_id_gs)        = '';
    $var(S_final_S_ep1_rm_media_ip_gs)       = '';
    $var(S_final_S_ep1_media_subnet_mask_gs) = '';
    $var(S_final_ruri_gs)                    = '';
    $var(S_ssmip_dest_gs)                    = '';
    $var(S_media_ext_firewall_set_gb)        = 0;
    $var(S_ssm_fw_ext_ip_gs)                 = "";
    $var(S_ssm_wos_gs)                       = "";

    # -----------------------------------------------------------------
    # Global Variables for MoSIP - FRN4862
    # -----------------------------------------------------------------
    $var(C_mosip_message_gb)               = 0;
    $var(S_stateless_msg_gb)               = 0;
    $var(S_dispatch_status_li)             = 0;
    $var(S_SSP_disable_ppi_gb)             = 0;
    $var(S_SSP_disable_pai_gb)             = 0;

    $avp(S_call_type_gi)                   = 0;

    $var(C_ssm_ct_param_gi)                = 0;
    $var(S_dispatcher_rerouted_gi)         = 0;
    $var(S_select_failed_gi)               = 0;
    $var(S_proceed_li)                     = 0;
    $var(S_network_interface_media_src_gi) = 0;
    $var(S_network_media_ip_src_gs)        = $Ri;
    $var(S_media_fw_ext_ip_src_gs)         = "";
    $var(S_media_wan_on_sdp_src_gs)        = "";

    # -----------------------------------------------------------------
    # Global Variables for SIPREC
    # -----------------------------------------------------------------
    $var(C_srec_required_gi)               = 0;

    $var(S_msg_to_ssm_gb)                  = 0;
    $var(S_use_max_fr_timers_for_ssm_gb)   = 1;

    # -----------------------------------------------------------------
    # Global Variables for Standalone mode
    # -----------------------------------------------------------------
    $var(S_src_epname_gs) = "";
}


#DOS Check

# ----- Definitions/Macros -----
#!define  PROC_DOS_REG_RATE_VIOLATION  if($var(S_reg_rate_violator_gi) == 1) {$sht(user_reg_rate_violator=>$var(S_user_gs)::drop) = 1; $sht(user_reg_rate_violator=>$var(S_user_gs)::last_auth) = $Ts;}
#!define  PROC_DOS_IGNORE_WHITELIST    if(isflagset(7) || !isflagset(25)) {return(1);}
#!define  PROC_DOS_IGNORE_SIP_METHOD   if(!is_method("REGISTER")) {return(1);}
#!define  PROC_IS_PURE_IP              ( $var(S_isFqdn_ls) =~ "(.*):(.*)" || is_pure_ip($var(S_isFqdn_ls)) )

#!define  DOS_MIN_REG_RATE_QINTERVAL  300
#!define  DOS_UNKNOWN_USER_ENABLED    0
#!define  DOS_UNAUTH_USER_ENABLED     0
#!define  DOS_UNKNOWN_QINTERVAL       300
#!define  DOS_UNAUTH_QINTERVAL        300
#!define  DOS_UNAUTH_TRANS_INTERVAL   30
#!define  DOS_UNAUTH_MAX_LIMIT        3

########################################################################
# GLOBAL_DOS_ROUTE: Global Denial of Service Route
########################################################################
route[GLOBAL_DOS_ROUTE]
{
    PROC_DOS_IGNORE_SIP_METHOD # Ignore SIP Methods other than REGISTER.
    PROC_DOS_IGNORE_WHITELIST  # Ignore DOS check for Trusted Endpoints.
    $var(S_dos_unknown_enabled_li) = DOS_UNKNOWN_USER_ENABLED;
    $var(S_dos_unauth_enabled_li) = DOS_UNAUTH_USER_ENABLED;

    xlog("L_INFO", "CI=$ci - R39 - DOS Check - M=$rm IP=$avp(S_src_ip_gs):$sp cs=$cs CT=$ct RIP=$var(C_ri_var_gs) cseq:$cs rc:$T_reply_code ct_user:$(sel(contact.uri){uri.user}) \n\n");

    if($var(S_is_request_gi))
    {
        $var(S_exp_li)  = $Ts - DOS_UNAUTH_QINTERVAL; # unauthorized quarantine interval
        if(is_present_hf("Contact"))
        {
          $var(S_key_ls)  = $(sel(contact.uri){uri.host})+":"+$avp(S_src_ip_gs);
          $var(S_dn_ls)   = $(sel(contact.uri){uri.user});
        }
        else
        {
          $var(S_key_ls)  = $sel(v[-1].host)+":"+$avp(S_src_ip_gs);
          $var(S_dn_ls)   = $fU;
        }
        $var(S_user_gs) = $(var(S_key_ls){s.md5});


        xlog("L_INFO", "CI=$ci - R39 - CS=$cs DOS Check - Request user $var(S_dn_ls) cs=$cs key_input:$var(S_key_ls) user_md5:$var(S_user_gs)\n");

        if(($var(S_dos_unauth_enabled_li) == 1) && ($sht(user_unauth=>$var(S_user_gs)::drop) == 1) && ($sht(user_unauth=>$var(S_user_gs)::last_auth) > $var(S_exp_li)))
        {
            $var(S_exp_li) = $sht(user_unauth=>$var(S_user_gs)::last_auth) - $var(S_exp_li);
            # xlog("L_ERR", "CI=$ci - R39 - @DOS - Blocking request from $si:$sp cs=$cs contact:$ct for $var(S_exp_li)secs\n");
            xlog("L_ERR", "CI=$ci - R39 - Msg dropped ($rm $pr) - DOS - Blocking request from $si:$sp cs=$cs contact:$ct for $var(S_exp_li)secs\n");
            $sht(user_unauth_transition=>$au::auth_count) = 0;
            drop;
            exit;
        }
        if(($var(S_dos_unknown_enabled_li) == 1) && $sht(user_unknown=>$var(S_user_gs)::drop) == 1)
        {
            $var(S_exp_li) = $Ts - DOS_UNKNOWN_QINTERVAL; #unknown user quarantine interval
            if($sht(user_unknown=>$var(S_user_gs)::last_auth) > $var(S_exp_li))
            {
                $var(S_exp_li) = $sht(user_unknown=>$var(S_user_gs)::last_auth)- $var(S_exp_li);
                # xlog("L_ERR", "CI=$ci - R39 - @DOS - Blocking request from $si:$sp cs:$cs contact:$ct for $var(S_exp_li)secs\n");
                xlog("L_ERR", "CI=$ci - R39 - Msg dropped ($rm $pr) - DOS - Blocking request from $si:$sp cs:$cs contact:$ct for $var(S_exp_li)secs\n");
                drop;
                exit;
            }
            else
                $sht(user_unknown=>$var(S_user_gs)::drop) = 0;
        }
        if($sht(user_reg_rate_violator=>$var(S_user_gs)::drop) == 1)
        {
            $var(S_exp_li) = $Ts - DOS_MIN_REG_RATE_QINTERVAL; #Reg Rate quarantine interval
            if($sht(user_reg_rate_violator=>$var(S_user_gs)::last_auth) > $var(S_exp_li))
            {
                $var(S_exp_li) = $sht(user_reg_rate_violator=>$var(S_user_gs)::last_auth)- $var(S_exp_li);
                xlog("L_ERR", "CI=$ci - R39 - @DOS Check - Blocking Reg Rate Violator $var(S_dn_ls)@$si for $var(S_exp_li)secs\n");
                xlog("L_ERR", "CI=$ci - R39 - Msg dropped ($rm $pr) - DOS Check - Blocking Reg Rate Violator $var(S_dn_ls)@$si for $var(S_exp_li)secs - si:sp=$si:$sp\n");
                drop;
                exit;
            }
            else
                $sht(user_reg_rate_violator=>$var(S_user_gs)::drop) = 0;
        }

    }
    else
    {
         $var(S_dn_ls) = $(avp(S_reg_ct_gs){uri.user});
         $var(S_key_ls) = $(avp(S_reg_ct_gs){uri.host})+":"+$avp(S_src_ip_gs);
         $var(S_user_gs) = $(var(S_key_ls){s.md5});
         xlog("L_INFO", "CI=$ci - R39 - CS=$cs DOS Check - Response user $var(S_dn_ls) key_input:$var(S_key_ls) user_md5:$var(S_user_gs)\n");
         switch($T_reply_code)
         {
             case "0": /* Should be Request */
                 break;
             case "401":
                if($var(S_dos_unauth_enabled_li) == 0)
                  break;

                if($sht(user_unauth_transition=>$var(S_user_gs)::auth_count) == $null)
                    $sht(user_unauth_transition=>$var(S_user_gs)::auth_count) = 0;
                if($sht(user_unauth_transition=>$var(S_user_gs)::auth_count) == 0)
                {
                    $sht(user_unauth_transition=>$var(S_user_gs)::last_auth) = $Ts;
                    $sht(user_unauth_transition=>$var(S_user_gs)::dn) = $var(S_dn_ls);
                }
                xlog("L_INFO", "CI=$ci - R39 - DOS Check - 401 auth failed $var(S_dn_ls) $si ts:$sht(user_unauth_transition=>$var(S_user_gs)::last_auth) cnt:$sht(user_unauth_transition=>$var(S_user_gs)::auth_count)\n");
                if($sht(user_unauth_transition=>$var(S_user_gs)::dn) == $var(S_dn_ls))
                   $sht(user_unauth_transition=>$var(S_user_gs)::auth_count) = $sht(user_unauth_transition=>$var(S_user_gs)::auth_count) + 1;
                if($sht(user_unauth_transition=>$var(S_user_gs)::auth_count) > DOS_UNAUTH_MAX_LIMIT)
                {
                   $var(S_exp_li) = $Ts - DOS_UNAUTH_TRANS_INTERVAL;
                   if($sht(user_unauth_transition=>$var(S_user_gs)::last_auth) > $var(S_exp_li))
                   {
                      $var(S_exp_li) = DOS_UNAUTH_QINTERVAL;
                      xlog("L_ERR", "CI=$ci - R39 - @DOS Check - Blocking unauthorized user:$var(S_dn_ls) cs:$cs and request from contact:$avp(S_reg_ct_gs) source:$avp(S_src_ip_gs) for $var(S_exp_li)secs\n");
                      xlog("L_INFO", "CI=$ci - R39 - DOS Check - Blocking unauthorized user:$var(S_dn_ls) and request from contact:$avp(S_reg_ct_gs) source:$avp(S_src_ip_gs) for $var(S_exp_li)secs\n");
                      insert_hf("Warning: 399 Max Unauthorized Attempt Reached, Blocking Unauthorized User\r\n", "Warning");
                      remove_hf("WWW-Authenticate");
                      remove_hf("Warning");
                      $var(S_mod_resp_code_gi) = 403;
                      $sht(user_unauth=>$var(S_user_gs)::last_auth) = $Ts;
                      $sht(user_unauth=>$var(S_user_gs)::drop) = 1;
                   }
                   # Reset and start again
                   $sht(user_unauth_transition=>$var(S_user_gs)::auth_count) = 1;
                   $sht(user_unauth_transition=>$var(S_user_gs)::last_auth) = $Ts;
                }

                break;
             case "403":
             case "404":
                if($var(S_dos_unknown_enabled_li) == 0)
                  break;
                $var(S_exp_li) = DOS_UNKNOWN_QINTERVAL;
                xlog("L_ERR", "CI=$ci CS=$cs - R39 - @DOS Check - Blocking unknown user:$var(S_dn_ls) cs:$cs and request from contact:$avp(S_reg_ct_gs) source:$avp(S_src_ip_gs) for $var(S_exp_li)secs\n");
                xlog("L_INFO", "CI=$ci CS=$cs - R39 - DOS Check - Blocking unknown user:$var(S_dn_ls) cs:$cs and request from contact:$avp(S_reg_ct_gs) source:$avp(S_src_ip_gs) for $var(S_exp_li)secs\n");
                $sht(user_unknown=>$var(S_user_gs)::drop) = 1;
                $sht(user_unknown=>$var(S_user_gs)::last_auth) = $Ts;
                $sht(user_unknown=>$var(S_user_gs)::dn) = $var(S_dn_ls);
                if($T_reply_code == 404)
                  $var(S_mod_resp_code_gi) = 403;
                insert_hf("Warning: 399 User Not Configured, Blocking Unknown User \r\n", "Warning");
                remove_hf("Warning");
                break;
         }

    }

}

########################################################################
# INTERNAL_REQUESTS_ROUTE: route internal requests, from SP or GTC or dispatcher
########################################################################
route[INTERNAL_REQUESTS_ROUTE]
{
    if (is_gflag("6"))
       bm_start_timer("route-44");
    # -----------------------------------------------------------------
    # Survivability Provider Processing
    # -----------------------------------------------------------------
    xlog("L_INFO", "CI=$ci - R44 - Entry M=$rm rp=$rp Rp=$Rp flags=$mF CT=$ct to=$to\n");
    if($fU == "survivabilityprovider" && $var(S_is_src_lan_ip_ls) == 1)  # Only SP of this OpenBranch (SP uses lAN IP)
    {
        if(is_method("PUBLISH"))
        {
            if(!has_body())
            {
                # PUBLISH without body - i.e. SP Connectivity Check
                append_to_reply("Event: $shv(S_operational_mode_gs)\r\n");
                sl_send_reply("200","OK");
                if (is_gflag("6"))
                {
                    xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
                    bm_log_timer("route-0");
                }
                exit;
            }

            osb_store_operational_mode();
            osb_get_operational_mode("$var(S_sys_operational_mode_ls)");
            if($shv(S_operational_mode_gs) != $var(S_sys_operational_mode_ls))
            {
                $shv(S_operational_mode_gs)=$var(S_sys_operational_mode_ls);
                xlog("L_INFO", "CI=$ci - R44 - Operational mode changed to $shv(S_operational_mode_gs)\n");
            }

            switch($var(S_sys_operational_mode_ls))
            {
                case "normal":
                    reset_gflag("9");
                    osb_store_bindings();

                    # Delete all records from RTP passthrough table.
                    xlog("L_DBG", "R0 - Mlhg rtp table deleted\n\n");
                    avp_db_query("DELETE FROM mlhg_sdp");

                    # Delete LIN cache (associations to phones that may have started emergency calls)
                    xlog("L_DBG", "R0 - LIN cache deleted\n");
                    osb_memdb_update("emergency_lin,*|*|*|*|*|*|*|*,","*|*|*|*|*|*|*|");
             #       avp_db_query("UPDATE emergency_lin SET callbackDestContact='',callId=''");
                    break;

                case "transition":
                    $var(S_sys_node_gs)="NODE1";
                    if(osb_get_osv_current_binding_by_node("$var(S_sys_node_gs)", "$var(S_ip_gs)", "$var(C_port_gi)", "$var(S_transport_gs)"))
                    {
                        if($var(S_transport_gs)!="" && $var(S_transport_gs)!="udp")
                        {
#                           pv_printf("$var(S_tmp_gs)", "$var(S_transport_gs):$var(S_ip_gs):$var(C_port_gi)");
                           if(is_ipv6('$var(S_ip_gs)'))
                             $var(S_tmp_gs) = $var(S_transport_gs)+":["+$var(S_ip_gs)+"]:"+$var(C_port_gi);
                           else
                             $var(S_tmp_gs) = $var(S_transport_gs)+":"+$var(S_ip_gs)+":"+$var(C_port_gi);
                           xlog("L_ERR", "CI=$ci - R44 - In transition mode Dropping connection for $var(S_tmp_gs). N1\n");
                           osb_drop_connection("$var(S_tmp_gs)");
                        }
                    }

                    $var(S_sys_node_gs)="NODE2";
                    if(osb_get_osv_current_binding_by_node("$var(S_sys_node_gs)", "$var(S_ip_gs)", "$var(C_port_gi)", "$var(S_transport_gs)"))
                    {
                        if($var(S_transport_gs)!="" && $var(S_transport_gs)!="udp")
                        {
#                           pv_printf("$var(S_tmp_gs)", "$var(S_transport_gs):$var(S_ip_gs):$var(C_port_gi)");
                           if(is_ipv6('$var(S_ip_gs)'))
                             $var(S_tmp_gs) = $var(S_transport_gs)+":["+$var(S_ip_gs)+"]:"+$var(C_port_gi);
                           else
                             $var(S_tmp_gs) = $var(S_transport_gs)+":"+$var(S_ip_gs)+":"+$var(C_port_gi);
                           xlog("L_ERR", "CI=$ci - R44 - In transition mode Dropping connection for $var(S_tmp_gs). N2\n");
                           osb_drop_connection("$var(S_tmp_gs)");
                        }
                    }

                    set_gflag("9");
                    osb_store_bindings();
                    break;

                case "survivable":
                    reset_gflag("9");
                    osb_store_bindings();
                    break;

                default:
                    break;
            }

            append_to_reply("Event: $shv(S_operational_mode_gs)\r\n");
            sl_send_reply("200","OK");
            if (is_gflag("6"))
            {
                xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
                bm_log_timer("route-0");
            }
            exit;
        }


        if(is_method("NOTIFY"))
        {


            sl_send_reply("200","OK");
            if (is_gflag("6"))
            {
               xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
               bm_log_timer("route-0");
            }

            exit;
        }

        if(is_method("OPTIONS"))
        {
            if($var(S_standalone_server_gi))
            {
                sl_send_reply("200","OK");
                if (is_gflag("6"))
                {
                  xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
                  bm_log_timer("route-0");
                }
                xlog("L_INFO","OPTIONS Response Send to $si, Acting as StandAlone Server\n");
                exit;
            }
            ### Bizhan TODO: need to enahnce logic for multiple access and ipv4 & ipv6

            if ($(ru{uri.transport}{s.tolower}) != $null && $(ru{uri.transport}{s.tolower}) != '')
                $fs = $(ru{uri.transport}{s.tolower}) + ":" + $var(S_lanip_4_6_gs);
            else
                $fs = "udp:" + $var(S_lanip_4_6_gs);
            xlog("L_INFO", "CI=$ci - R44 - Force LAN socket for $rm: $fs \n");

            $var(S_via_count_gi) = 0;
            $avp(C_tmp2_gs) = "";
            while($(hdr(Via)[$var(S_via_count_gi)]) != $null)
            {
                    # xlog("L_INFO", "CI=$ci - R44 - $var(S_via_count_gi) --- $(hdr(Via)[$var(S_via_count_gi)])\n");
                    $(avp(S_req_via_gs)[$var(S_via_count_gi)]) = "Via: " + $(hdr(Via)[$var(S_via_count_gi)]);
                    $avp(C_tmp2_gs) = $(hdr(Via)[$var(S_via_count_gi)]) ;

                    $var(S_via_count_gi) = $var(S_via_count_gi) + 1;
                    if ($(hdr(Via)[$var(S_via_count_gi)]) == $null && $(ru{uri.port}) != $null) # LAST OR BOTTOM VIA FROM SP HAS DEFAULT 5062
                    {
                        avp_subst("$avp(C_tmp2_gs)", "/(.*):5062(.*)/\1:$(ru{uri.port})\2/i");
                    }

                    # xlog("L_INFO", "CI=$ci - R44 - $var(S_via_count_gi) --- dummy = $avp(C_tmp2_gs)\n");

                    insert_hf("Via: $avp(C_tmp2_gs)\r\n","Call-ID");
            }
            remove_hf("Via");
            $avp(C_tmp2_gs) = $null;

            $avp(C_core_ip_gs)=$var(S_lanip_4_6_gs);
            $var(S_transport_gs) = $(ru{uri.transport}{s.toupper});

            # Set Server options timeout - need to override the default value from parameter fr_timer
            t_set_fr(360000, 4000); # Set reply timeout for OPTIONS to server

            xlog("L_INFO", "CI=$ci - R44 - var(S_transport_gs)=$var(S_transport_gs). Setting FR timers to OPTIONS <360000,4000>\n");

            #$avp(C_tmp2_gs) = $(avp(S_req_via_gs)[0]);
            #remove_hf("Via");
#### TODO  the following api osb_update_parsed_via is not released yet
####            osb_update_parsed_via("$avp(C_tmp2_gs)","$avp(C_core_ip_gs),$var(S_transport_gs)",0x3,1);
####            xlog("L_INFO", "CI=$ci - R44 - manipulated via= $avp(C_tmp2_gs) \n");
            #avp_subst("$avp(C_tmp2_gs)","/(.*SIP\/2.0\/)+(.+) (.*)/\1$var(S_transport_gs) \3/i");
            #avp_subst("$avp(C_tmp2_gs)","/(.*SIP\/[^ ]*) [^:\n,]*/\1 $avp(C_core_ip_gs)/i");
            #now insert only this  via
            #insert_hf("$avp(C_tmp2_gs)\r\n","Via");


            $avp(S_req_toh_gs) = $hdr(To);
            $avp(S_req_fromh_gs) = $hdr(From);
            $avp(C_req_transp_gs) = $var(S_transport_gs);
            $avp(C_port_gi) = $sp;

            t_on_reply("NM_GENERAL_REPLY_ROUTE");

            route(SIP_HEADERS_CHANGE_ROUTE);
            if(!t_relay_to("0x03"))
            {
                xlog("L_ERR", "CI=$ci - R44 - Relay failure - options failed - M=$rm F=$fu T=$tu CT=$ct IP=$var(C_si_var_gs) CI=$ci DU=$du FS=$fs\n");
                append_to_reply("Warning: 399 $var(C_ri_var_gs) - R0 - OPTIONS failed: relay error.\r\n");
                sl_reply_error();
                if (is_gflag("6"))
                {
                    xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
                    bm_log_timer("route-0");
                }
                exit;
            }
            if (is_gflag("6"))
            {
                xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
                bm_log_timer("route-0");
            }
            exit;
        }
    } #SBC-417 added check for publish not from GTCstatusForExt
    else if($var(S_local_ip_gs) == $var(C_si_var_gs) && is_method("PUBLISH") && ($rU != "GTCstatusForExt"))
    {
        ## first lookup REP with IP:port from FROM header, if find anything then it is from gtc trunk
        ## else it is from dispatcher
        $avp(C_tmp2_gs) = $fu;
        $avp(C_port_gi) = $(avp(C_tmp2_gs){uri.port});
        $avp(C_tmp2_gs) = $(avp(C_tmp2_gs){uri.host});
        xlog("L_INFO","CI=$ci - R44 - lookup remote_ep with uri:port of FROM *|*|*|*|*|$avp(C_tmp2_gs)|*|$avp(C_port_gi)|*|....\n");
        if(osb_memdb_select("remote_ep,*|*|*|*|*|$avp(C_tmp2_gs)|*|$avp(C_port_gi)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1","$avp(S_ses_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm_ip_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)|$avp(S_tmp_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|$avp(S_rep_home_dn_gs)|$avp(S_gw_emergency_prefixes_gs)|$avp(C_pmap_port_gi)|$avp(S_nat_ip_gs)|$avp(S_rep_bitmap_gi)||$avp(S_sys_osv_node_gs)|$avp(S_location_dom_name_gs)|$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||$avp(S_uri_based_route_gb)|$avp(S_access_control_gb)|$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||||||$avp(S_linked_ep_id_gi)") != 1)
        {
            xlog("L_INFO","CI=$ci - R44 - PUBLISH from SSP, sht_print=sht_print()\n");
            #### PUBLISH from dispatcher, update ssp trunk status
            ### get the ep id from publish, ep name is included in the user part of FROM
            ### From: sip:sbc_SSP123@10.232.65.41;tag=66b3c438a9c035859a412a45a7530506-eb1f
            $avp(C_tmp2_gs) = $(fU{s.substr,4,0});
            $var(S_ssp_name_ls) = $avp(C_tmp2_gs);
            xlog("L_INFO","CI=$ci - R44 - lookup remote_ep with EP name *|$avp(C_tmp2_gs)|*|*|*|*....\n");
            $var(S_found_ls) =  0;
            $avp(S_linked_ep_id_gi) = "";
            if (osb_memdb_select("remote_ep,*|$avp(C_tmp2_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1","$avp(S_ses_id_gi)|$avp(S_ep_name_gs)|||||||||||||||||||||||||$avp(S_associated_ep_id_gi)|||||||$avp(S_trunk_status_gb)|||||||||||||$avp(S_linked_ep_id_gi)") != 1)
            {
                xlog("L_INFO","CI=$ci - R44 - failed to lookup db for EP name $avp(C_tmp2_gs) \n");
            }


            if($hdr(x-tc-status) == "offline")
               $avp(S_trunk_status_gb) = 0;
            else
               $avp(S_trunk_status_gb) = 1;

            xlog("L_INFO","CI=$ci - R44 - EP name= avp(C_tmp2_gs)=$avp(C_tmp2_gs), update REP with status=$avp(S_trunk_status_gb)\n");
            osb_memdb_update("remote_ep,*|$avp(C_tmp2_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|$avp(S_trunk_status_gb)|*|*|*|*|*|*|*|*|*|*|*|*|*");

            xlog("L_INFO","CI=$ci - R44 - received PUBLISH from dispatcher, send it to gtc trunk\n");

            if ($avp(S_linked_ep_id_gi) != "")
            {
                xlog("L_INFO","CI=$ci - R44 - dip remote_ep and found linked epid=$avp(S_linked_ep_id_gi) for EP name $avp(C_tmp2_gs),deep again to find the relevant data for associated ep\n");
                if(osb_memdb_select("remote_ep,$avp(S_linked_ep_id_gi)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1","$avp(S_ses_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm_ip_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)|$avp(S_tmp_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|$avp(S_rep_home_dn_gs)|$avp(S_gw_emergency_prefixes_gs)|$avp(C_pmap_port_gi)|$avp(S_nat_ip_gs)|$avp(S_rep_bitmap_gi)||$avp(S_sys_osv_node_gs)|$avp(S_location_dom_name_gs)|$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||$avp(S_uri_based_route_gb)|$avp(S_access_control_gb)|$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)||||||||||||||$avp(S_linked_ep_id_gi)") != 1)
                    xlog("L_INFO","CI=$ci - R44 - failed to lookup db for linked EP id = $avp(S_linked_ep_id_gi)) \n");
                else
                {
                    xlog("L_INFO","CI=$ci - R44 - found $avp(S_gw_rm_port_gi)=$avp(S_gw_rm_port_gi), use it to set ruri,avp(S_tnant_id_gs)=$avp(S_tnant_id_gs)  \n");
                    $rp = $avp(S_gw_rm_port_gi);
                    $var(S_found_ls) = 1;
                }
            }

            if ($var(S_found_ls) == 1)
            {
                t_on_reply("NM_GENERAL_REPLY_ROUTE");
                if(!t_relay_to("0x03"))
                {
                    xlog("L_ERR", "CI=$ci - R44 - Relay failure - failed sending publish to gtc- M=$rm F=$fu T=$tu CT=$ct IP=$var(C_si_var_gs) CI=$ci DU=$du FS=$fs\n");
                }
            }
        }
        else
        {
            xlog("L_INFO","CI=$ci - R44 - received PUBLISH from gtc, send 200 OK, avp(S_ses_id_gi)=$avp(S_ses_id_gi),S_test_dn_gs=$avp(S_test_dn_gs),S_tnant_id_gs=$avp(S_tnant_id_gs),S_trunk_status_gb=$avp(S_trunk_status_gb),S_options_enabled_gb=$avp(S_options_enabled_gb)\n");
            $var(S_gtc_trunkId_ls) = $avp(S_ses_id_gi);

            xlog("L_INFO","CI=$ci - R44 - PUBLISH from gtc, sht_print=sht_print()\n");
            xlog("L_INFO","CI=$ci - R44 - dip remote_ep and found linked epid=$avp(S_linked_ep_id_gi) for EP name=$avp(C_tmp2_gs),deep again to find the relevant data for linked ep\n");
            if(osb_memdb_select("remote_ep,$avp(S_linked_ep_id_gi)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1","$avp(S_ses_id_gi)|||||||||||||||||||||||||||||||||$avp(S_trunk_status_gb)|||||||||||||") != 1)
                xlog("L_INFO","CI=$ci - R44 - failed to lookup db for ssp id=$avp(S_linked_ep_id_gi) \n");

            if(is_present_hf("x-tc-tenant-id") && $hdr(x-tc-tenant-id) != "unknown")
            {
                $avp(S_tnant_id_gs) = $hdr(x-tc-tenant-id);
                xlog("L_INFO", "CI=$ci - R44 - NEW tenenat-ID= $avp(S_tnant_id_gs), updating REP\n");
            }
            else
                $avp(S_tnant_id_gs) = "*"; ## Keep old one if none received from GTC

            if($avp(S_trunk_status_gb) == 1)
                $var(S_gtc_tc_state_ls) = "available";
            else
                $var(S_gtc_tc_state_ls) = "offline";

            if(is_present_hf("x-tc-status"))
            {
                if( $hdr(x-tc-status) ==  "offline" || $hdr(x-tc-status) ==  "deleted")
                {
                    $avp(S_trunk_status_gb) = 0;
                    $var(S_gtc_tc_state_ls) = "offline";
                }
                else
                {
                    $avp(S_trunk_status_gb) = 1;
                    $var(S_gtc_tc_state_ls) = "available";
                }
                xlog("L_INFO", "CI=$ci - R44 - status= $hdr(x-tc-status), saving state=$var(S_gtc_tc_state_ls) in REP\n");

            }
            $avp(S_ses_id_gi) = $var(S_gtc_trunkId_ls);
            xlog("L_INFO", "CI=$ci - R44 - status= $hdr(x-tc-status), updating REP for rep_idex=$avp(S_ses_id_gi), teneantID= $avp(S_tnant_id_gs), set state=$avp(S_trunk_status_gb)\n");
            osb_memdb_update("remote_ep,$avp(S_ses_id_gi)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|*|*|*|*|*|*|*|*|*|*|*|*|*");
            ###  append status to 200 OK
            xlog("L_INFO", "CI=$ci - R44 -Publish from GTC received, return 200 OK with status=$var(S_gtc_tc_state_ls)\n");
            ###  send 200 OK
            append_to_reply("x-tc-status: $var(S_gtc_tc_state_ls)\r\n");
            sl_send_reply("200","OK");

        }

        if (is_gflag("6"))
        {
            xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
            bm_log_timer("route-44");
        }
        exit;
    }

}

########################################################################
# PROCESS_REQ_TO_GTC: Requests to GTC
########################################################################
route[PROCESS_REQ_TO_GTC]
{
    if (is_gflag("6"))
       bm_start_timer("route-48");
    if($sht(call-info=>$ci::sent) == 1)
    {
        xlog("L_INFO", "CI=$ci - R48 Entry - INFO related to pstn dialin \n");
        $avp(S_ep_name_gs) = $sht(call-info=>$ci::epname);
        $avp(S_tc_dial_ms_dn_gs) = $sht(call-info=>$ci::msdn);

        xlog("L_INFO", "CI=$ci - R48 Entry - INFO recieved related to pstn-dialin:avp(S_tc_dial_ms_dn_gs)=$avp(S_tc_dial_ms_dn_gs),avp(S_ep_name_gs)=$avp(S_ep_name_gs)\n");
        ### need to dip into REP to read the REP for MS
        xlog("L_INFO", "CI=$ci - R48 - dipping remote_ep for MS with *|$avp(S_ep_name_gs)|*...* \n");

        if (osb_memdb_select("remote_ep,*|$avp(S_ep_name_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","$avp(S_gw_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm_ip_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)|$avp(C_gw_core_ip_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|$avp(S_rep_home_dn_gs)||$avp(C_pmap_port_gi)|$avp(S_tmp_gs)||$avp(C_rm_address_type_gi)|$avp(S_sys_osv_node_gs)||$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||$avp(S_uri_based_route_gb)|$avp(S_access_control_gb)|$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||||||$avp(S_linked_ep_id_gi)") != 1)
        {
            xlog("L_INFO", "CI=$ci - R48 - Dip with  avp(S_ep_name_gs)=$avp(S_ep_name_gs)  not found\n");
            append_to_reply("Warning: 399 $var(C_si_var_gs) - R48 - could not find the REP element corresponding to MS read from tc_ep_ms_dialin\r\n");
            sl_send_reply("403", "Forbidden");

                t_release();

            if (is_gflag("6"))
            {
                xlog("L_INFO", "bench: $rm-$rs\n");
                bm_log_timer("route-46");
            }
            return;
        }
        else
        {
            xlog("L_INFO", "CI=$ci - R48 - Dip successful,found MS ep:  ip|fqdn|port|GWtransport= $avp(S_gw_rm_ip_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)\n");
            ### send the message to the gtc trunk
            xlog("L_INFO", "CI=$ci - R48 - INFO shall be forwarded to gtc trunk\n");
            $var(S_standalone_route_gi)  = 1;
            $var(S_pstn_dialin_route_gi)  = 1;
            $var(S_LanInvoked_gi) = 1;
            $var(C_g_useSsmRecordRoute_gb) = 0;
            $rd = $avp(S_gw_rm_ip_gs);
            $rp = $avp(S_gw_rm_port_gi);
            $fs = $avp(C_gw_transp_gs) + ":" + $var(S_lanip_4_6_gs);
            $du = "sip:" + $avp(S_gw_rm_ip_gs) + ":" + $avp(S_gw_rm_port_gi)+ ";transport=" + $avp(C_gw_transp_gs);
            $sht(call-info=>$ci::INFOsent) = 1;
            t_on_reply("NM_GENERAL_REPLY_ROUTE");

            xlog("L_INFO", "CI=$ci - R48- Relay message to gtc fs=$fs du=$du\n");
            if(!t_relay_to("0x03"))
            {
                 xlog("L_ERR", "CI=$ci - R48- Relay failure - failed to Relay message to gtc M=$rm RURI=$ru From=$fu To=$tu fs=$fs du=$du \n");
                 append_to_reply("Warning: 399 $var(C_ri_var_gs) - R48 - Relay failed: relay error.\r\n");
                 sl_reply_error();
            }

            if (is_gflag("6"))
            {
                    xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
                    bm_log_timer("route-48");
            }
            exit;
        }
    }
    if (is_gflag("6"))
    {
        xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
        bm_log_timer("route-48");
    }
}

event_route[htable:mod-init]
{
    xlog("L_INFO", "Calling SSP Table Initialisation \n");
    exec_msg("sudo /opt/openbranch/bin/cfgGenUpdateSSPStatusTable.sh &");
}

##################################################################################
event_route[tcp:closed]
##################################################################################
{
    xlog("L_CRIT", "@@ConnEvt: $proto Connection closed - conid=$conid Rcvd=$Ri:$Rp Src=$si:$sp\n");
}

##################################################################################
event_route[tcp:timeout] {
##################################################################################
    xlog("L_CRIT", "@@ConnEvt: $proto Connection timeout - conid=$conid Rcvd=$Ri:$Rp Src=$si:$sp\n");
}

##################################################################################
event_route[tcp:reset] {
##################################################################################
    xlog("L_CRIT", "@@ConnEvt: $proto Connection reset by peer - conid=$conid Rcvd=$Ri:$Rp Src=$si:$sp\n");
}




# Defines for SSM Headers.


#!define SSM_HDR_X_ORIGINAL_FLAGS             0
#!define SSM_HDR_X_ORIGINAL_RCV_TRANSPORT     1
#!define SSM_HDR_X_ORIGINAL_SOCKET            2
#!define SSM_HDR_X_FWXI                       3
#!define SSM_HDR_X_ADVI                       4
#!define SSM_HDR_X_RECV_TRANSPORT             5
#!define SSM_HDR_X_ADVP                       6
#!define SSM_HDR_X_ORIGINALPM_RESP_PORT       7
#!define SSM_HDR_X_GCP                        8
#!define SSM_HDR_X_PMP                        9
#!define SSM_HDR_X_ACBI                       10
#!define SSM_HDR_X_ACBP                       11
#!define SSM_HDR_X_ACBTR                      12
#!define SSM_HDR_X_WANIP                      13
#!define SSM_HDR_X_OSVP                       14
#!define SSM_HDR_X_AVPP                       15
#!define SSM_HDR_X_AVPPMP                     16
#!define SSM_HDR_X_RSCP                       17
#!define SSM_HDR_X_UBR                        18
#!define SSM_HDR_X_OPRP                       19
#!define SSM_HDR_X_UA                         20
#!define SSM_HDR_X_SSM_IP                     21
#!define SSM_HDR_X_RR                         22
#!define SSM_HDR_X_ORIGINAL_RR                23
#!define SSM_HDR_X_SSMDATA                    24
#!define SSM_HDR_X_ORIGINAL_EMPTYTAG          25
#!define SSM_HDR_X_ORIGINAL_DEST              26
#!define SSM_HDR_X_SEND_TRANSPORT             27
#!define SSM_HDR_X_ORIGINAL_SPRIP             28
#!define SSM_HDR_X_INVNAT                     29
#!define SSM_HDR_X_INVNRT                     30
#!define SSM_HDR_LAST                         31


#!define PROC_SET_SSM_HDR_X_ORIGINAL_FLAGS             $var(C_ssm_hdr_map_gi) = $var(C_ssm_hdr_map_gi) | (1<<SSM_HDR_X_ORIGINAL_FLAGS);
#!define PROC_SET_SSM_HDR_X_ORIGINAL_RCV_TRANSPORT     $var(C_ssm_hdr_map_gi) = $var(C_ssm_hdr_map_gi) | (1<<SSM_HDR_X_ORIGINAL_RCV_TRANSPORT);
#!define PROC_SET_SSM_HDR_X_ORIGINAL_SOCKET            $var(C_ssm_hdr_map_gi) = $var(C_ssm_hdr_map_gi) | (1<<SSM_HDR_X_ORIGINAL_SOCKET);
#!define PROC_SET_SSM_HDR_X_FWXI                       $var(C_ssm_hdr_map_gi) = $var(C_ssm_hdr_map_gi) | (1<<SSM_HDR_X_FWXI);
#!define PROC_SET_SSM_HDR_X_ADVI                       $var(C_ssm_hdr_map_gi) = $var(C_ssm_hdr_map_gi) | (1<<SSM_HDR_X_ADVI);
#!define PROC_SET_SSM_HDR_X_RECV_TRANSPORT             $var(C_ssm_hdr_map_gi) = $var(C_ssm_hdr_map_gi) | (1<<SSM_HDR_X_RECV_TRANSPORT);
#!define PROC_SET_SSM_HDR_X_ADVP                       $var(C_ssm_hdr_map_gi) = $var(C_ssm_hdr_map_gi) | (1<<SSM_HDR_X_ADVP);
#!define PROC_SET_SSM_HDR_X_ORIGINALPM_RESP_PORT       $var(C_ssm_hdr_map_gi) = $var(C_ssm_hdr_map_gi) | (1<<SSM_HDR_X_ORIGINALPM_RESP_PORT);
#!define PROC_SET_SSM_HDR_X_GCP                        $var(C_ssm_hdr_map_gi) = $var(C_ssm_hdr_map_gi) | (1<<SSM_HDR_X_GCP);
#!define PROC_SET_SSM_HDR_X_PMP                        $var(C_ssm_hdr_map_gi) = $var(C_ssm_hdr_map_gi) | (1<<SSM_HDR_X_PMP);
#!define PROC_SET_SSM_HDR_X_ACBI                       $var(C_ssm_hdr_map_gi) = $var(C_ssm_hdr_map_gi) | (1<<SSM_HDR_X_ACBI);
#!define PROC_SET_SSM_HDR_X_ACBP                       $var(C_ssm_hdr_map_gi) = $var(C_ssm_hdr_map_gi) | (1<<SSM_HDR_X_ACBP);
#!define PROC_SET_SSM_HDR_X_ACBTR                      $var(C_ssm_hdr_map_gi) = $var(C_ssm_hdr_map_gi) | (1<<SSM_HDR_X_ACBTR);
#!define PROC_SET_SSM_HDR_X_WANIP                      $var(C_ssm_hdr_map_gi) = $var(C_ssm_hdr_map_gi) | (1<<SSM_HDR_X_WANIP);
#!define PROC_SET_SSM_HDR_X_OSVP                       $var(C_ssm_hdr_map_gi) = $var(C_ssm_hdr_map_gi) | (1<<SSM_HDR_X_OSVP);
#!define PROC_SET_SSM_HDR_X_AVPP                       $var(C_ssm_hdr_map_gi) = $var(C_ssm_hdr_map_gi) | (1<<SSM_HDR_X_AVPP);
#!define PROC_SET_SSM_HDR_X_AVPPMP                     $var(C_ssm_hdr_map_gi) = $var(C_ssm_hdr_map_gi) | (1<<SSM_HDR_X_AVPPMP);
#!define PROC_SET_SSM_HDR_X_RSCP                       $var(C_ssm_hdr_map_gi) = $var(C_ssm_hdr_map_gi) | (1<<SSM_HDR_X_RSCP);
#!define PROC_SET_SSM_HDR_X_UBR                        $var(C_ssm_hdr_map_gi) = $var(C_ssm_hdr_map_gi) | (1<<SSM_HDR_X_UBR);
#!define PROC_SET_SSM_HDR_X_OPRP                       $var(C_ssm_hdr_map_gi) = $var(C_ssm_hdr_map_gi) | (1<<SSM_HDR_X_OPRP);
#!define PROC_SET_SSM_HDR_X_UA                         $var(C_ssm_hdr_map_gi) = $var(C_ssm_hdr_map_gi) | (1<<SSM_HDR_X_UA);
#!define PROC_SET_SSM_HDR_X_SSM_IP                     $var(C_ssm_hdr_map_gi) = $var(C_ssm_hdr_map_gi) | (1<<SSM_HDR_X_SSM_IP);
#!define PROC_SET_SSM_HDR_X_RR                         $var(C_ssm_hdr_map_gi) = $var(C_ssm_hdr_map_gi) | (1<<SSM_HDR_X_RR);
#!define PROC_SET_SSM_HDR_X_ORIGINAL_RR                $var(C_ssm_hdr_map_gi) = $var(C_ssm_hdr_map_gi) | (1<<SSM_HDR_X_ORIGINAL_RR);
#!define PROC_SET_SSM_HDR_X_SSMDATA                    $var(C_ssm_hdr_map_gi) = $var(C_ssm_hdr_map_gi) | (1<<SSM_HDR_X_SSMDATA);
#!define PROC_SET_SSM_HDR_X_ORIGINAL_EMPTYTAG          $var(C_ssm_hdr_map_gi) = $var(C_ssm_hdr_map_gi) | (1<<SSM_HDR_X_ORIGINAL_EMPTYTAG);
#!define PROC_SET_SSM_HDR_X_ORIGINAL_DEST              $var(C_ssm_hdr_map_gi) = $var(C_ssm_hdr_map_gi) | (1<<SSM_HDR_X_ORIGINAL_DEST);
#!define PROC_SET_SSM_HDR_X_SEND_TRANSPORT             $var(C_ssm_hdr_map_gi) = $var(C_ssm_hdr_map_gi) | (1<<SSM_HDR_X_SEND_TRANSPORT);
#!define PROC_SET_SSM_HDR_X_ORIGINAL_SPRIP             $var(C_ssm_hdr_map_gi) = $var(C_ssm_hdr_map_gi) | (1<<SSM_HDR_X_ORIGINAL_SPRIP);
#!define PROC_SET_SSM_HDR_X_INVNAT                     $var(C_ssm_hdr_map_gi) = $var(C_ssm_hdr_map_gi) | (1<<SSM_HDR_X_INVNAT);
#!define PROC_SET_SSM_HDR_X_INVNRT                     $var(C_ssm_hdr_map_gi) = $var(C_ssm_hdr_map_gi) | (1<<SSM_HDR_X_INVNRT);


#!define PROC_ISSET_SSM_HDR_X_ORIGINAL_FLAGS             ($var(C_ssm_hdr_map_gi) & (1<<SSM_HDR_X_ORIGINAL_FLAGS))
#!define PROC_ISSET_SSM_HDR_X_ORIGINAL_RCV_TRANSPORT     ($var(C_ssm_hdr_map_gi) & (1<<SSM_HDR_X_ORIGINAL_RCV_TRANSPORT))
#!define PROC_ISSET_SSM_HDR_X_ORIGINAL_SOCKET            ($var(C_ssm_hdr_map_gi) & (1<<SSM_HDR_X_ORIGINAL_SOCKET))
#!define PROC_ISSET_SSM_HDR_X_FWXI                       ($var(C_ssm_hdr_map_gi) & (1<<SSM_HDR_X_FWXI))
#!define PROC_ISSET_SSM_HDR_X_ADVI                       ($var(C_ssm_hdr_map_gi) & (1<<SSM_HDR_X_ADVI))
#!define PROC_ISSET_SSM_HDR_X_RECV_TRANSPORT             ($var(C_ssm_hdr_map_gi) & (1<<SSM_HDR_X_RECV_TRANSPORT))
#!define PROC_ISSET_SSM_HDR_X_ADVP                       ($var(C_ssm_hdr_map_gi) & (1<<SSM_HDR_X_ADVP))
#!define PROC_ISSET_SSM_HDR_X_ORIGINALPM_RESP_PORT       ($var(C_ssm_hdr_map_gi) & (1<<SSM_HDR_X_ORIGINALPM_RESP_PORT))
#!define PROC_ISSET_SSM_HDR_X_GCP                        ($var(C_ssm_hdr_map_gi) & (1<<SSM_HDR_X_GCP))
#!define PROC_ISSET_SSM_HDR_X_PMP                        ($var(C_ssm_hdr_map_gi) & (1<<SSM_HDR_X_PMP))
#!define PROC_ISSET_SSM_HDR_X_ACBI                       ($var(C_ssm_hdr_map_gi) & (1<<SSM_HDR_X_ACBI))
#!define PROC_ISSET_SSM_HDR_X_ACBP                       ($var(C_ssm_hdr_map_gi) & (1<<SSM_HDR_X_ACBP))
#!define PROC_ISSET_SSM_HDR_X_ACBTR                      ($var(C_ssm_hdr_map_gi) & (1<<SSM_HDR_X_ACBTR))
#!define PROC_ISSET_SSM_HDR_X_WANIP                      ($var(C_ssm_hdr_map_gi) & (1<<SSM_HDR_X_WANIP))
#!define PROC_ISSET_SSM_HDR_X_OSVP                       ($var(C_ssm_hdr_map_gi) & (1<<SSM_HDR_X_OSVP))
#!define PROC_ISSET_SSM_HDR_X_AVPP                       ($var(C_ssm_hdr_map_gi) & (1<<SSM_HDR_X_AVPP))
#!define PROC_ISSET_SSM_HDR_X_AVPPMP                     ($var(C_ssm_hdr_map_gi) & (1<<SSM_HDR_X_AVPPMP))
#!define PROC_ISSET_SSM_HDR_X_RSCP                       ($var(C_ssm_hdr_map_gi) & (1<<SSM_HDR_X_RSCP))
#!define PROC_ISSET_SSM_HDR_X_UBR                        ($var(C_ssm_hdr_map_gi) & (1<<SSM_HDR_X_UBR))
#!define PROC_ISSET_SSM_HDR_X_OPRP                       ($var(C_ssm_hdr_map_gi) & (1<<SSM_HDR_X_OPRP))
#!define PROC_ISSET_SSM_HDR_X_UA                         ($var(C_ssm_hdr_map_gi) & (1<<SSM_HDR_X_UA))
#!define PROC_ISSET_SSM_HDR_X_SSM_IP                     ($var(C_ssm_hdr_map_gi) & (1<<SSM_HDR_X_SSM_IP))
#!define PROC_ISSET_SSM_HDR_X_RR                         ($var(C_ssm_hdr_map_gi) & (1<<SSM_HDR_X_RR))
#!define PROC_ISSET_SSM_HDR_X_ORIGINAL_RR                ($var(C_ssm_hdr_map_gi) & (1<<SSM_HDR_X_ORIGINAL_RR))
#!define PROC_ISSET_SSM_HDR_X_SSMDATA                    ($var(C_ssm_hdr_map_gi) & (1<<SSM_HDR_X_SSMDATA))
#!define PROC_ISSET_SSM_HDR_X_ORIGINAL_EMPTYTAG          ($var(C_ssm_hdr_map_gi) & (1<<SSM_HDR_X_ORIGINAL_EMPTYTAG))
#!define PROC_ISSET_SSM_HDR_X_ORIGINAL_DEST              ($var(C_ssm_hdr_map_gi) & (1<<SSM_HDR_X_ORIGINAL_DEST))
#!define PROC_ISSET_SSM_HDR_X_SEND_TRANSPORT             ($var(C_ssm_hdr_map_gi) & (1<<SSM_HDR_X_SEND_TRANSPORT))
#!define PROC_ISSET_SSM_HDR_X_ORIGINAL_SPRIP             ($var(C_ssm_hdr_map_gi) & (1<<SSM_HDR_X_ORIGINAL_SPRIP))
#!define PROC_ISSET_SSM_HDR_X_INVNAT                     ($var(C_ssm_hdr_map_gi) & (1<<SSM_HDR_X_INVNAT))
#!define PROC_ISSET_SSM_HDR_X_INVNRT                     ($var(C_ssm_hdr_map_gi) & (1<<SSM_HDR_X_INVNRT))


#!define SSM_2ND_HDR_X_mtls                 0
#!define SSM_2ND_HDR_DS_GRP                 1
#!define SSM_2ND_HDR_RECV_ADV_SOCKET        2
#!define SSM_2ND_HDR_LAST                   3
#!define PROC_SET_SSM_HDR_X_mtls                          $var(C_ssm_hdr_2ND_map_gi) = $var(C_ssm_hdr_2ND_map_gi) | (1<<SSM_2ND_HDR_X_mtls);
#!define PROC_ISSET_SSM_HDR_X_mtls                        ($var(C_ssm_hdr_2ND_map_gi) & (1<<SSM_2ND_HDR_X_mtls))
#!define PROC_SET_SSM_HDR_HDR_DS_GRP                      $var(C_ssm_hdr_2ND_map_gi) = $var(C_ssm_hdr_2ND_map_gi) | (1<<SSM_2ND_HDR_DS_GRP);
#!define PROC_ISSET_SSM_HDR_DS_GRP                        ($var(C_ssm_hdr_2ND_map_gi) & (1<<SSM_2ND_HDR_DS_GRP))
#!define PROC_SET_SSM_RECV_ADV_SOCKET                     $var(C_ssm_hdr_2ND_map_gi) = $var(C_ssm_hdr_2ND_map_gi) | (1<<SSM_2ND_HDR_RECV_ADV_SOCKET);
#!define PROC_ISSET_SSM_RECV_ADV_SOCKET                    ($var(C_ssm_hdr_2ND_map_gi) & (1<<SSM_2ND_HDR_RECV_ADV_SOCKET))


#!define SSM_EP_HDR_X_EP1_RM_IP            0
#!define SSM_EP_HDR_X_E1T                  1
#!define SSM_EP_HDR_X_E1RF                 2
#!define SSM_EP_HDR_X_E1RP                 3
#!define SSM_EP_HDR_X_E1NP                 4
#!define SSM_EP_HDR_X_E1TR                 5
#!define SSM_EP_HDR_X_E1CI                 6
#!define SSM_EP_HDR_X_E1CP                 7
#!define SSM_EP_HDR_X_E2T                  8
#!define SSM_EP_HDR_X_E2RF                 9
#!define SSM_EP_HDR_X_E2RP                 10
#!define SSM_EP_HDR_X_E2CI                 11
#!define SSM_EP_HDR_X_E2TR                 12
#!define SSM_EP_HDR_X_GW_TRANSPORT         13
#!define SSM_EP_HDR_X_GW_CORE_PORT         14
#!define SSM_EP_HDR_X_GWBEP                15
#!define SSM_EP_HDR_X_SPT                  16
#!define SSM_EP_HDR_X_ORIGINAL_GWTYPE      17
#!define SSM_EP_HDR_X_OSPRI                18
#!define SSM_EP_HDR_X_E2AT                 19
#!define SSM_EP_HDR_X_E1AT                 20
#!define SSM_EP_HDR_X_E2CP                 21
#!define SSM_EP_HDR_X_REP_IP               22
#!define SSM_EP_HDR_X_SPF                  23
#!define SSM_EP_HDR_X_SPDHDN               24
#!define SSM_EP_HDR_X_E1RIL                25
#!define SSM_EP_HDR_X_EP2_RM_IP            26
#!define SSM_EP_HDR_X_SSPDAS               27
#!define SSM_EP_HDR_X_SSPTS                28
#!define SSM_EP_HDR_X_AVPSPN               29
#!define SSM_EP_HDR_X_GW_CALL              30
#!define SSM_EP_HDR_LAST                   31

#!define PROC_SET_SSM_EP_HDR_X_EP1_RM_IP            $var(C_ssm_hdr_ep_map_gi) = $var(C_ssm_hdr_ep_map_gi) | (1<<SSM_EP_HDR_X_EP1_RM_IP);
#!define PROC_SET_SSM_EP_HDR_X_E1T                  $var(C_ssm_hdr_ep_map_gi) = $var(C_ssm_hdr_ep_map_gi) | (1<<SSM_EP_HDR_X_E1T);
#!define PROC_SET_SSM_EP_HDR_X_E1RF                 $var(C_ssm_hdr_ep_map_gi) = $var(C_ssm_hdr_ep_map_gi) | (1<<SSM_EP_HDR_X_E1RF);
#!define PROC_SET_SSM_EP_HDR_X_E1RP                 $var(C_ssm_hdr_ep_map_gi) = $var(C_ssm_hdr_ep_map_gi) | (1<<SSM_EP_HDR_X_E1RP);
#!define PROC_SET_SSM_EP_HDR_X_E1NP                 $var(C_ssm_hdr_ep_map_gi) = $var(C_ssm_hdr_ep_map_gi) | (1<<SSM_EP_HDR_X_E1NP);
#!define PROC_SET_SSM_EP_HDR_X_E1TR                 $var(C_ssm_hdr_ep_map_gi) = $var(C_ssm_hdr_ep_map_gi) | (1<<SSM_EP_HDR_X_E1TR);
#!define PROC_SET_SSM_EP_HDR_X_E1CI                 $var(C_ssm_hdr_ep_map_gi) = $var(C_ssm_hdr_ep_map_gi) | (1<<SSM_EP_HDR_X_E1CI);
#!define PROC_SET_SSM_EP_HDR_X_E1CP                 $var(C_ssm_hdr_ep_map_gi) = $var(C_ssm_hdr_ep_map_gi) | (1<<SSM_EP_HDR_X_E1CP);
#!define PROC_SET_SSM_EP_HDR_X_E2T                  $var(C_ssm_hdr_ep_map_gi) = $var(C_ssm_hdr_ep_map_gi) | (1<<SSM_EP_HDR_X_E2T);
#!define PROC_SET_SSM_EP_HDR_X_E2RF                 $var(C_ssm_hdr_ep_map_gi) = $var(C_ssm_hdr_ep_map_gi) | (1<<SSM_EP_HDR_X_E2RF);
#!define PROC_SET_SSM_EP_HDR_X_E2RP                 $var(C_ssm_hdr_ep_map_gi) = $var(C_ssm_hdr_ep_map_gi) | (1<<SSM_EP_HDR_X_E2RP);
#!define PROC_SET_SSM_EP_HDR_X_E2CI                 $var(C_ssm_hdr_ep_map_gi) = $var(C_ssm_hdr_ep_map_gi) | (1<<SSM_EP_HDR_X_E2CI);
#!define PROC_SET_SSM_EP_HDR_X_E2TR                 $var(C_ssm_hdr_ep_map_gi) = $var(C_ssm_hdr_ep_map_gi) | (1<<SSM_EP_HDR_X_E2TR);
#!define PROC_SET_SSM_EP_HDR_X_GW_TRANSPORT         $var(C_ssm_hdr_ep_map_gi) = $var(C_ssm_hdr_ep_map_gi) | (1<<SSM_EP_HDR_X_GW_TRANSPORT);
#!define PROC_SET_SSM_EP_HDR_X_GW_CORE_PORT         $var(C_ssm_hdr_ep_map_gi) = $var(C_ssm_hdr_ep_map_gi) | (1<<SSM_EP_HDR_X_GW_CORE_PORT);
#!define PROC_SET_SSM_EP_HDR_X_GWBEP                $var(C_ssm_hdr_ep_map_gi) = $var(C_ssm_hdr_ep_map_gi) | (1<<SSM_EP_HDR_X_GWBEP);
#!define PROC_SET_SSM_EP_HDR_X_SPT                  $var(C_ssm_hdr_ep_map_gi) = $var(C_ssm_hdr_ep_map_gi) | (1<<SSM_EP_HDR_X_SPT);
#!define PROC_SET_SSM_EP_HDR_X_ORIGINAL_GWTYPE      $var(C_ssm_hdr_ep_map_gi) = $var(C_ssm_hdr_ep_map_gi) | (1<<SSM_EP_HDR_X_ORIGINAL_GWTYPE);
#!define PROC_SET_SSM_EP_HDR_X_OSPRI                $var(C_ssm_hdr_ep_map_gi) = $var(C_ssm_hdr_ep_map_gi) | (1<<SSM_EP_HDR_X_OSPRI);
#!define PROC_SET_SSM_EP_HDR_X_E2AT                 $var(C_ssm_hdr_ep_map_gi) = $var(C_ssm_hdr_ep_map_gi) | (1<<SSM_EP_HDR_X_E2AT);
#!define PROC_SET_SSM_EP_HDR_X_E1AT                 $var(C_ssm_hdr_ep_map_gi) = $var(C_ssm_hdr_ep_map_gi) | (1<<SSM_EP_HDR_X_E1AT);
#!define PROC_SET_SSM_EP_HDR_X_E2CP                 $var(C_ssm_hdr_ep_map_gi) = $var(C_ssm_hdr_ep_map_gi) | (1<<SSM_EP_HDR_X_E2CP);
#!define PROC_SET_SSM_EP_HDR_X_REP_IP               $var(C_ssm_hdr_ep_map_gi) = $var(C_ssm_hdr_ep_map_gi) | (1<<SSM_EP_HDR_X_REP_IP);
#!define PROC_SET_SSM_EP_HDR_X_SPF                  $var(C_ssm_hdr_ep_map_gi) = $var(C_ssm_hdr_ep_map_gi) | (1<<SSM_EP_HDR_X_SPF);
#!define PROC_SET_SSM_EP_HDR_X_SPDHDN               $var(C_ssm_hdr_ep_map_gi) = $var(C_ssm_hdr_ep_map_gi) | (1<<SSM_EP_HDR_X_SPDHDN);
#!define PROC_SET_SSM_EP_HDR_X_E1RIL                $var(C_ssm_hdr_ep_map_gi) = $var(C_ssm_hdr_ep_map_gi) | (1<<SSM_EP_HDR_X_E1RIL);
#!define PROC_SET_SSM_EP_HDR_X_EP2_RM_IP            $var(C_ssm_hdr_ep_map_gi) = $var(C_ssm_hdr_ep_map_gi) | (1<<SSM_EP_HDR_X_EP2_RM_IP);
#!define PROC_SET_SSM_EP_HDR_X_SSPDAS               $var(C_ssm_hdr_ep_map_gi) = $var(C_ssm_hdr_ep_map_gi) | (1<<SSM_EP_HDR_X_SSPDAS);
#!define PROC_SET_SSM_EP_HDR_X_SSPTS                $var(C_ssm_hdr_ep_map_gi) = $var(C_ssm_hdr_ep_map_gi) | (1<<SSM_EP_HDR_X_SSPTS);
#!define PROC_SET_SSM_EP_HDR_X_AVPSPN               $var(C_ssm_hdr_ep_map_gi) = $var(C_ssm_hdr_ep_map_gi) | (1<<SSM_EP_HDR_X_AVPSPN);
#!define PROC_SET_SSM_EP_HDR_X_GW_CALL              $var(C_ssm_hdr_ep_map_gi) = $var(C_ssm_hdr_ep_map_gi) | (1<<SSM_EP_HDR_X_GW_CALL);

#!define PROC_ISSET_SSM_EP_HDR_X_EP1_RM_IP          ($var(C_ssm_hdr_ep_map_gi) & (1<<SSM_EP_HDR_X_EP1_RM_IP))
#!define PROC_ISSET_SSM_EP_HDR_X_E1T                ($var(C_ssm_hdr_ep_map_gi) & (1<<SSM_EP_HDR_X_E1T))
#!define PROC_ISSET_SSM_EP_HDR_X_E1RF               ($var(C_ssm_hdr_ep_map_gi) & (1<<SSM_EP_HDR_X_E1RF))
#!define PROC_ISSET_SSM_EP_HDR_X_E1RP               ($var(C_ssm_hdr_ep_map_gi) & (1<<SSM_EP_HDR_X_E1RP))
#!define PROC_ISSET_SSM_EP_HDR_X_E1NP               ($var(C_ssm_hdr_ep_map_gi) & (1<<SSM_EP_HDR_X_E1NP))
#!define PROC_ISSET_SSM_EP_HDR_X_E1TR               ($var(C_ssm_hdr_ep_map_gi) & (1<<SSM_EP_HDR_X_E1TR))
#!define PROC_ISSET_SSM_EP_HDR_X_E1CI               ($var(C_ssm_hdr_ep_map_gi) & (1<<SSM_EP_HDR_X_E1CI))
#!define PROC_ISSET_SSM_EP_HDR_X_E1CP               ($var(C_ssm_hdr_ep_map_gi) & (1<<SSM_EP_HDR_X_E1CP))
#!define PROC_ISSET_SSM_EP_HDR_X_E2T                ($var(C_ssm_hdr_ep_map_gi) & (1<<SSM_EP_HDR_X_E2T))
#!define PROC_ISSET_SSM_EP_HDR_X_E2RF               ($var(C_ssm_hdr_ep_map_gi) & (1<<SSM_EP_HDR_X_E2RF))
#!define PROC_ISSET_SSM_EP_HDR_X_E2RP               ($var(C_ssm_hdr_ep_map_gi) & (1<<SSM_EP_HDR_X_E2RP))
#!define PROC_ISSET_SSM_EP_HDR_X_E2CI               ($var(C_ssm_hdr_ep_map_gi) & (1<<SSM_EP_HDR_X_E2CI))
#!define PROC_ISSET_SSM_EP_HDR_X_E2TR               ($var(C_ssm_hdr_ep_map_gi) & (1<<SSM_EP_HDR_X_E2TR))
#!define PROC_ISSET_SSM_EP_HDR_X_GW_TRANSPORT       ($var(C_ssm_hdr_ep_map_gi) & (1<<SSM_EP_HDR_X_GW_TRANSPORT))
#!define PROC_ISSET_SSM_EP_HDR_X_GW_CORE_PORT       ($var(C_ssm_hdr_ep_map_gi) & (1<<SSM_EP_HDR_X_GW_CORE_PORT))
#!define PROC_ISSET_SSM_EP_HDR_X_GWBEP              ($var(C_ssm_hdr_ep_map_gi) & (1<<SSM_EP_HDR_X_GWBEP))
#!define PROC_ISSET_SSM_EP_HDR_X_SPT                ($var(C_ssm_hdr_ep_map_gi) & (1<<SSM_EP_HDR_X_SPT))
#!define PROC_ISSET_SSM_EP_HDR_X_ORIGINAL_GWTYPE    ($var(C_ssm_hdr_ep_map_gi) & (1<<SSM_EP_HDR_X_ORIGINAL_GWTYPE))
#!define PROC_ISSET_SSM_EP_HDR_X_OSPRI              ($var(C_ssm_hdr_ep_map_gi) & (1<<SSM_EP_HDR_X_OSPRI))
#!define PROC_ISSET_SSM_EP_HDR_X_E2AT               ($var(C_ssm_hdr_ep_map_gi) & (1<<SSM_EP_HDR_X_E2AT))
#!define PROC_ISSET_SSM_EP_HDR_X_E1AT               ($var(C_ssm_hdr_ep_map_gi) & (1<<SSM_EP_HDR_X_E1AT))
#!define PROC_ISSET_SSM_EP_HDR_X_E2CP               ($var(C_ssm_hdr_ep_map_gi) & (1<<SSM_EP_HDR_X_E2CP))
#!define PROC_ISSET_SSM_EP_HDR_X_REP_IP             ($var(C_ssm_hdr_ep_map_gi) & (1<<SSM_EP_HDR_X_REP_IP))
#!define PROC_ISSET_SSM_EP_HDR_X_SPF                ($var(C_ssm_hdr_ep_map_gi) & (1<<SSM_EP_HDR_X_SPF))
#!define PROC_ISSET_SSM_EP_HDR_X_SPDHDN             ($var(C_ssm_hdr_ep_map_gi) & (1<<SSM_EP_HDR_X_SPDHDN))
#!define PROC_ISSET_SSM_EP_HDR_X_E1RIL              ($var(C_ssm_hdr_ep_map_gi) & (1<<SSM_EP_HDR_X_E1RIL))
#!define PROC_ISSET_SSM_EP_HDR_X_EP2_RM_IP          ($var(C_ssm_hdr_ep_map_gi) & (1<<SSM_EP_HDR_X_EP2_RM_IP))
#!define PROC_ISSET_SSM_EP_HDR_X_SSPDAS             ($var(C_ssm_hdr_ep_map_gi) & (1<<SSM_EP_HDR_X_SSPDAS))
#!define PROC_ISSET_SSM_EP_HDR_X_SSPTS              ($var(C_ssm_hdr_ep_map_gi) & (1<<SSM_EP_HDR_X_SSPTS))
#!define PROC_ISSET_SM_EP_HDR_X_AVPSPN              ($var(C_ssm_hdr_ep_map_gi) & (1<<SSM_EP_HDR_X_AVPSPN))
#!define PROC_ISSET_SSM_EP_HDR_X_GW_CALL            ($var(C_ssm_hdr_ep_map_gi) & (1<<SSM_EP_HDR_X_GW_CALL))



#!define PROC_SET_CSEQ_TRACK_UPDATES  if( $sht(dlg-info=>$ci-$ft::cseq-track) == 0 ) $sht(dlg-info=>$ci-$ft::cseq-track) = 1;


########################################################################
# route SSM_TAGS_BOTH_DIRECTION: Both Directions - populate ep related fields (called in SSM_ORIGIN_ROUTE)
# input pseudo-variables: $avp(C_core_ip_gs), $avp(C_ep1_rm_addr_type_gi), $avp(C_ep2_rm_addr_type_gi), $avp(C_gw_behind_ep_gi), $avp(C_gw_type_gi),
#                         $avp(C_pmap_port_gi), $avp(C_port_gi), $avp(C_req_transp_gs), $avp(C_ssp_da_supported_gs), $avp(C_ssp_name_gs),
#                         $avp(C_ssp_rip_gs), $avp(C_ssp_type_gi), $avp(C_sys_current_binding_ip_gs), $avp(C_sys_current_binding_port_gi), $avp(C_sys_current_binding_transp_gs),
#                         $avp(C_wan_ip_gs), $avp(S_rep_ip_gs), $avp(S_uri_based_route_gb), $var(C_ep1_core_ip_gs), $var(C_ep1_core_port_gi),
#                         $var(C_ep1_nat_port_gs), $var(C_ep1_rm_fqdn_gs), $var(C_ep1_rm_ip_gs), $var(C_ep1_rm_port_gi), $var(C_ep1_transp_gs),
#                         $var(C_ep1_type_gi), $var(C_ep2_core_ip_gs), $var(C_ep2_core_port_gi), $var(C_ep2_rm_fqdn_gs), $var(C_ep2_rm_ip_gs),
#                         $var(C_ep2_rm_port_gi), $var(C_ep2_transp_gs), $var(C_ep2_type_gi), $var(C_fs_gs), $var(C_general_core_port_gi),
#                         $var(C_hdr_rcv_transp_gs), $var(C_rs_core_port_gi), $var(C_sys_osv_port_gi), $var(S_dynamic_peer_found_gb)
# output pseudo-variables: $avp(C_advertised_ip_gs), $avp(C_advertised_port_gi), $avp(C_core_ip_gs), $avp(C_core_port_gi), $avp(C_ep1_rm_addr_type_gi),
#                          $avp(C_ep2_rm_addr_type_gi), $avp(C_fw_ext_ip_gs), $avp(C_gw_behind_ep_gi), $avp(C_gw_core_ip_gs), $avp(C_gw_core_port_gi),
#                          $avp(C_gw_transp_gs), $avp(C_gw_type_gi), $avp(C_pmap_port_gi), $avp(C_pmap_resp_port_gi), $avp(C_port_gi),
#                          $avp(C_remove_headers_list_gs), $avp(C_req_transp_gs), $avp(C_rm_address_type_gi), $avp(C_ssp_da_supported_gs), $avp(C_ssp_name_gs),
#                          $avp(C_ssp_rip_gs), $avp(C_ssp_type_gi), $avp(C_sys_current_binding_ip_gs), $avp(C_sys_current_binding_port_gi), $avp(C_sys_current_binding_transp_gs),
#                          $avp(C_wan_ip_gs), $avp(S_gw_core_ip2_gs), $avp(S_rep_ip_gs), $avp(S_uri_based_route_gb), $var(C_ep1_core_ip_gs),
#                          $var(C_ep1_core_port_gi), $var(C_ep1_nat_port_gs), $var(C_ep1_rm_fqdn_gs), $var(C_ep1_rm_ip_gs), $var(C_ep1_rm_port_gi),
#                          $var(C_ep1_transp_gs), $var(C_ep1_type_gi), $var(C_ep2_core_ip_gs), $var(C_ep2_core_port_gi), $var(C_ep2_rm_fqdn_gs),
#                          $var(C_ep2_rm_ip_gs), $var(C_ep2_rm_port_gi), $var(C_ep2_transp_gs), $var(C_ep2_type_gi), $var(C_fs_gs),
#                          $var(C_general_core_port_gi), $var(C_hdr_rcv_transp_gs), $var(C_rs_core_port_gi), $var(C_ssp_skype_to_ssp_gb), $var(C_sys_osv_port_gi),
#                          $var(S_dynamic_peer_found_gb)
# input headers: X-advi, X-advp, X-acbi, X-avppmp, X-avpp,
#                X-avpspn, X-acbp, X-acbtr, X-e1ci, X-e1cp,
#                X-e1np, X-e1at, X-e1rf, X-ep1_rm_ip, X-e1rp,
#                X-e1tr, X-e1t, X-e2ci, X-e2cp, X-e2at,
#                X-e2rf, X-ep2_rm_ip, X-e2rp, X-e2tr, X-ep2_type,
#                X-fwxi, X-gcp, X-gw-core-port, X-gw-transport, X-gwbep,
#                X-keyset, X-original-flags, X-Original-gwtype, X-oprp, X-original-rcv-transport,
#                X-Original-Socket, X-ospri, X-originalpm-resp-port, X-osvp, X-pmp,
#                X-recv_transport, X-rep_ip, X-rscp, X-spt, X-SSM-User-Agent,
#                X-sspdas, X-sspsts, X-ubr, X-wanip
# input flags: 10, 11, 15, g6
# changed flags: 2
########################################################################


route[SSM_TAGS_BOTH_DIRECTION_ROUTE]
{
    if (is_gflag("6"))
        bm_start_timer("route-16");

    xlog("L_INFO", "CI=$ci - R16 (SSM tags both dir)- Entry M=$rm avp(C_wan_ip_gs)=$avp(C_wan_ip_gs), avp(C_core_ip_gs)=$avp(C_core_ip_gs) rp=$rp Rp=$Rp flags=$mF to=$to ct=$ct\n");

    if ($hdr(X-ssm-hdr-map) != $null)
        $var(C_ssm_hdr_map_gi) = $(hdr(X-ssm-hdr-map){s.int});
    remove_hf( "X-ssm-hdr-map");

    $var(C_count_li) = 0;

    xlog("L_INFO","CI=$ci - R16 C_ssm_hdr_map_gi= $var(C_ssm_hdr_map_gi)\n");

    while ($var(C_count_li) <  SSM_HDR_LAST )
    {
        if ($var(C_ssm_hdr_map_gi) & (1<<$var(C_count_li)) )
        {
            xlog("L_INFO", "CI=$ci - R16 SSM_HDR at position $var(C_count_li)\n");
            switch ($var(C_count_li))
            {

            case SSM_HDR_X_ORIGINAL_FLAGS:
#restore flags:
#read original flags
                $mf = $(hdr(X-original-flags){s.int});
                xlog("L_INFO", "CI=$ci - R16 - original flags restored $mf\n");
#remove the socket header field
                remove_hf( "X-original-flags");
                break;

            case SSM_HDR_X_ORIGINAL_RCV_TRANSPORT:
#read X-original-rcv-transport header field
                $avp(C_req_transp_gs)= $hdr(X-original-rcv-transport);
                xlog("L_INFO", "CI=$ci - R16 - X-original-rcv-transport restored $avp(C_req_transp_gs)\n");
#remove the socket header field
                remove_hf( "X-original-rcv-transport");
                break;

            case SSM_HDR_X_ORIGINAL_SOCKET:
#read original socket from the original socket header field
                $var(C_fs_gs)= $hdr(X-Original-Socket);
                xlog("L_INFO", "CI=$ci - R16- using socket variable:  $var(C_fs_gs) \n");

#remove the socket header field
                remove_hf( "X-Original-Socket");
                break;

            case SSM_HDR_X_ORIGINAL_SPRIP:
                remove_hf( "X-Original-sprip");
                break;

            case SSM_HDR_X_FWXI:
                $avp(C_fw_ext_ip_gs) = $hdr(X-fwxi);
                remove_hf( "X-fwxi");
                break;

            case SSM_HDR_X_INVNAT:
                $avp(C_inv_noanswr_timer_gs) = $hdr(X-invnat);
                remove_hf( "X-invnat");
                break;

            case SSM_HDR_X_INVNRT:
                $avp(C_inv_noreply_timer_gs) = $hdr(X-invnrt);
                remove_hf( "X-invnrt");
                break;

            case SSM_HDR_X_ADVI:
                $avp(C_advertised_ip_gs) = $hdr(X-advi);
                remove_hf( "X-advi");
                break;

            case SSM_HDR_X_ADVP:
                $avp(C_advertised_port_gi) = $hdr(X-advp);
                remove_hf( "X-advp");
                break;
            case SSM_HDR_X_RECV_TRANSPORT:
                $var(C_hdr_rcv_transp_gs) = $hdr(X-recv_transport);
                xlog("L_INFO", "CI=$ci - R16 - restored var(C_hdr_rcv_transp_gs)=$var(C_hdr_rcv_transp_gs)\n");
                remove_hf( "X-recv_transport");
                break;
            case SSM_HDR_X_GCP:
                if (isflagset(10))
                {
                    $var(C_general_core_port_gi) = $hdr(X-gcp);
                    xlog("L_INFO", "CI=$ci - R16 - restored var(C_general_core_port_gi)=$var(C_general_core_port_gi)\n");
                }
                remove_hf( "X-gcp");
                break;
            case SSM_HDR_X_PMP:
                $avp(C_pmap_port_gi) = $hdr(X-pmp);
                xlog("L_INFO", "CI=$ci - R16 - restored avp(C_pmap_port_gi)=$avp(C_pmap_port_gi)\n");
                remove_hf( "X-pmp");
                break;
            case SSM_HDR_X_ACBI:
                $avp(C_sys_current_binding_ip_gs) = $hdr(X-acbi);
                # Add brackets to the current binding ip if it is IPv6
                put_ip_in_paran('$avp(C_sys_current_binding_ip_gs)', '$avp(C_sys_current_binding_domain_gs)');
                xlog("L_INFO", "CI=$ci - R16 - restored avp(C_sys_current_binding_ip_gs)=$avp(C_sys_current_binding_ip_gs)\n");
                remove_hf( "X-acbi");
                break;
            case SSM_HDR_X_ACBP:
                $avp(C_sys_current_binding_port_gi) = $hdr(X-acbp);
                xlog("L_INFO", "CI=$ci - R16 - restored avp(C_sys_current_binding_port_gi)=$avp(C_sys_current_binding_port_gi)\n");
                remove_hf( "X-acbp");
                break;
            case SSM_HDR_X_ACBTR:
                $avp(C_sys_current_binding_transp_gs) = $hdr(X-acbtr);
                xlog("L_INFO", "CI=$ci - R16 - restored avp(C_sys_current_binding_transp_gs)=$avp(C_sys_current_binding_transp_gs)\n");
                remove_hf( "X-acbtr");
                break;
            case SSM_HDR_X_WANIP:
                if ($hdr(X-wanip) !=$null)
                {
                    $avp(C_wan_ip_gs) = $hdr(X-wanip);
                    xlog("L_INFO", "CI=$ci - R16 - restored avp(C_wan_ip_gs)=$avp(C_wan_ip_gs)\n");
                }
                remove_hf( "X-wanip");
                break;
            case SSM_HDR_X_OSVP:
                $var(C_sys_osv_port_gi) = $hdr(X-osvp);
                xlog("L_INFO", "CI=$ci - R16 - restored var(C_sys_osv_port_gi)=$var(C_sys_osv_port_gi)\n");
                remove_hf( "X-osvp");
                break;
            case SSM_HDR_X_AVPP:
                remove_hf( "X-avpp");
                break;
            case SSM_HDR_X_AVPPMP:
                #$avp(C_pmap_port_gi) = $hdr(X-avppmp);
                remove_hf( "X-avppmp");
                xlog("L_INFO", "CI=$ci - R16 - RS: restored avp(C_pmap_port_gi)=$avp(C_pmap_port_gi)\n");
                break;
            case SSM_HDR_X_RSCP:
                $var(C_rs_core_port_gi) = $hdr(X-rscp);
                xlog("L_INFO", "CI=$ci - R16 - restored var(C_rs_core_port_gi)=$var(C_rs_core_port_gi)\n");
                remove_hf( "X-rscp");
                break;
            case SSM_HDR_X_UBR:
                $avp(S_uri_based_route_gb) = $hdr(X-ubr);
                $var(S_dynamic_peer_found_gb) = 1;
                xlog("L_INFO", "CI=$ci - R16 - restored avp(S_uri_based_route_gb)=$avp(S_uri_based_route_gb), var(S_dynamic_peer_found_gb)=$var(S_dynamic_peer_found_gb)\n");
                remove_hf( "X-ubr");
                break;
            case SSM_HDR_X_OPRP:
                $avp(C_pmap_resp_port_gi) = $hdr(X-oprp);
#remove the gw_transport header field
                break;
            case SSM_HDR_X_UA:
                remove_hf( "X-SSM-User-Agent");
                break;


            }
        }
        $var(C_count_li) = $var(C_count_li) + 1;
    }
    $avp(C_ssp_rip_gs) = $null;
    $var(C_count_li) = 0;
    $avp(C_gw_behind_ep_gi)=0;
    $avp(C_ssp_type_gi)=0;

    if(is_present_hf("X-ssm-ep-hdr-map"))
    {
       $var(C_ssm_hdr_ep_map_gi) = $(hdr(X-ssm-ep-hdr-map){s.int});
       remove_hf( "X-ssm-ep-hdr-map");
       xlog("L_INFO","CI=$ci - R16 C_ssm_hdr_ep_map_gi= $var(C_ssm_hdr_ep_map_gi)\n");
    }
    while ($var(C_ssm_hdr_ep_map_gi) && ($var(C_count_li) <  SSM_EP_HDR_LAST))
    {
        if ($var(C_ssm_hdr_ep_map_gi) & (1<<$var(C_count_li)) )
        {
            xlog("L_INFO", "CI=$ci - R16 SSM_EP_HDR at position $var(C_count_li)\n");
            switch ($var(C_count_li))
            {
            case SSM_EP_HDR_X_EP1_RM_IP:
                $var(C_ep1_rm_ip_gs) = $hdr(X-ep1_rm_ip);
                xlog("L_INFO", "CI=$ci - R16 - restored var(C_ep1_rm_ip_gs)=$var(C_ep1_rm_ip_gs)\n");
                remove_hf( "X-ep1_rm_ip");
                break;
            case SSM_EP_HDR_X_E1T:
                $var(C_ep1_type_gi) = $(hdr(X-e1t){s.select,0,;});
                $avp(S_call_type_gi) = 0;
                if($(hdr(X-e1t){param.value,ct}))
                    $avp(S_call_type_gi) = $(hdr(X-e1t){param.value,ct}{s.int});
                if($avp(S_call_type_gi) & SSM_CT_X_STANDALONE_ROUTE)
                {
                   $var(S_standalone_route_gi) = 1;
                   xlog("L_INFO", "CI=$ci - R16 - restored bit SSM_CT_X_STANDALONE_ROUTE is SET\n");
                }
                xlog("L_INFO", "CI=$ci - R16 - restored var(C_ep1_type_gi)=$var(C_ep1_type_gi) call_type=$avp(S_call_type_gi)\n");
                remove_hf( "X-e1t");
                break;
            case SSM_EP_HDR_X_E1RF:
                $var(C_ep1_rm_fqdn_gs) = $hdr(X-e1rf);
                xlog("L_INFO", "CI=$ci - R16 - restored var(C_ep1_rm_fqdn_gs)=$var(C_ep1_rm_fqdn_gs)\n");
                remove_hf( "X-e1rf");
                break;
            case SSM_EP_HDR_X_E1RP:
                $var(C_ep1_rm_port_gi) = $hdr(X-e1rp);
                xlog("L_INFO", "CI=$ci - R16 - restored var(C_ep1_rm_port_gi)=$var(C_ep1_rm_port_gi)\n");
                remove_hf( "X-e1rp");
                break;
            case SSM_EP_HDR_X_E1NP:
                $var(C_ep1_nat_port_gs) = $hdr(X-e1np);
                xlog("L_INFO", "CI=$ci - R16 - restored var(C_ep1_nat_port_gs)=$var(C_ep1_nat_port_gs)\n");
                remove_hf( "X-e1np");
                break;
            case SSM_EP_HDR_X_E1TR:
                $var(C_ep1_transp_gs) = $hdr(X-e1tr);
                xlog("L_INFO", "CI=$ci - R16 - restored var(C_ep1_transp_gs)=$var(C_ep1_transp_gs)\n");
                remove_hf( "X-e1tr");
                break;
            case SSM_EP_HDR_X_E1CI:
                $var(C_ep1_core_ip_gs) = $(hdr(X-e1ci){s.select,0,;});
                $var(C_ep1_core_fqdn_gs) = $(hdr(X-e1ci){s.select,1,;});
                xlog("L_INFO", "CI=$ci - R16 - restored var(C_ep1_core_ip_gs)=$var(C_ep1_core_ip_gs)\n");
                xlog("L_INFO", "CI=$ci - R16 - restored var(C_ep1_core_fqdn_gs)=$var(C_ep1_core_fqdn_gs)\n");
                remove_hf( "X-e1ci");
                break;
            case SSM_EP_HDR_X_E1CP:
                $var(C_ep1_core_port_gi) = $hdr(X-e1cp);
                xlog("L_INFO", "CI=$ci - R16 - restored var(C_ep1_core_port_gi)=$var(C_ep1_core_port_gi)\n");
                remove_hf( "X-e1cp");
                break;
            case SSM_EP_HDR_X_E2T:
                $var(C_ep2_type_gi) = $hdr(X-e2t);
                xlog("L_INFO", "CI=$ci - R16 - restored var(C_ep2_type_gi)=$var(C_ep2_type_gi)\n");
                remove_hf("X-e2t");
                break;
            case SSM_EP_HDR_X_E2RF:
                $var(C_ep2_rm_fqdn_gs) = $hdr(X-e2rf);
                xlog("L_INFO", "CI=$ci - R16 - restored var(C_ep2_rm_fqdn_gs)=$var(C_ep2_rm_fqdn_gs)\n");
                remove_hf( "X-e2rf");
                break;
            case SSM_EP_HDR_X_E2RP:
                $var(C_ep2_rm_port_gi) = $hdr(X-e2rp);
                xlog("L_INFO", "CI=$ci - R16 - restored var(C_ep2_rm_port_gi)=$var(C_ep2_rm_port_gi)\n");
                remove_hf( "X-e2rp");
                break;
            case SSM_EP_HDR_X_E2CI:
                $var(C_ep2_core_ip_gs) = $(hdr(X-e2ci){s.select,0,;});
                $var(C_ep2_core_fqdn_gs) = $(hdr(X-e2ci){s.select,1,;});
                xlog("L_INFO", "CI=$ci - R16 - restored var(C_ep2_core_ip_gs)=$var(C_ep2_core_ip_gs) var(C_ep2_core_fqdn_gs)=$var(C_ep2_core_fqdn_gs)\n");
                remove_hf( "X-e2ci");
                break;
            case SSM_EP_HDR_X_E2TR:
                $var(C_ep2_transp_gs) = $hdr(X-e2tr);
                xlog("L_INFO", "CI=$ci - R16 - restored var(C_ep2_transp_gs)=$var(C_ep2_transp_gs)\n");
                remove_hf( "X-e2tr");
                break;
            case SSM_EP_HDR_X_GW_TRANSPORT:
                $avp(C_gw_transp_gs) = $hdr(X-gw-transport);
#remove the gw_transport header field
                break;
            case SSM_EP_HDR_X_GW_CORE_PORT:
                $avp(C_gw_core_port_gi) = $hdr(X-gw-core-port);
                break;
            case SSM_EP_HDR_X_GWBEP:
                $avp(C_gw_behind_ep_gi)=$hdr(X-gwbep);
                xlog("L_INFO", "CI=$ci - R16- avp(C_gw_behind_ep_gi)=:  $avp(C_gw_behind_ep_gi)\n");
                remove_hf( "X-gwbep");
                break;
            case SSM_EP_HDR_X_SPT:
                $avp(C_ssp_type_gi)=$hdr(X-spt);
                xlog("L_INFO", "CI=$ci - R16- var(C_ssp_type_gi)=:  $avp(C_ssp_type_gi)\n");
                remove_hf( "X-spt");
                break;
            case SSM_EP_HDR_X_ORIGINAL_GWTYPE:
#read original socket from the X-Original-gwtype header field
                $avp(C_gw_type_gi) = $hdr(X-Original-gwtype);
                xlog("L_INFO", "CI=$ci - R16- X-Original-gwtype restored:  $avp(C_gw_type_gi)\n");
#remove the socket header field
                remove_hf( "X-Original-gwtype");
                break;
            case SSM_EP_HDR_X_OSPRI:
                $avp(C_ssp_rip_gs) = $hdr(X-ospri);
                setflag(2);  #TODO: may not be needed as mF would restore the flags.
                xlog("L_INFO", "CI=$ci - R16 - X-ospri restored: $avp(C_ssp_rip_gs)\n");
                break;
            case SSM_EP_HDR_X_E2AT:
                $avp(C_ep2_rm_addr_type_gi) = $hdr(X-e2at);
                xlog("L_INFO", "CI=$ci - R16 - restored avp(C_ep2_rm_addr_type_gi)=$avp(C_ep2_rm_addr_type_gi)\n");
                remove_hf( "X-e2at");
                break;
            case SSM_EP_HDR_X_E1AT:
                $avp(C_ep1_rm_addr_type_gi) = $hdr(X-e1at);
                xlog("L_INFO", "CI=$ci - R16 - restored avp(C_ep1_rm_addr_type_gi)=$avp(C_ep1_rm_addr_type_gi)\n");
                remove_hf( "X-e1at");
                break;

            case SSM_EP_HDR_X_E2CP:
                $var(C_ep2_core_port_gi) = $hdr(X-e2cp);
                xlog("L_INFO", "CI=$ci - R16 - restored var(C_ep2_core_port_gi)=$var(C_ep2_core_port_gi)\n");
                remove_hf( "X-e2cp");
                break;
            case SSM_EP_HDR_X_REP_IP:
                $avp(S_rep_ip_gs) = $hdr(X-rep_ip);
                xlog("L_INFO", "CI=$ci - R16 - restored S_rep_ip_gs:  $avp(S_rep_ip_gs)\n");
                remove_hf( "X-rep_ip");
                break;
            case SSM_EP_HDR_X_SPF:
                $avp(C_ssp_flags_gi) = $hdr(X-spf);
                remove_hf( "X-spf");
                break;
            case SSM_EP_HDR_X_SPDHDN:
                $avp(C_ssp_default_home_dn_gs) = $hdr(X-spdhdn);
                remove_hf( "X-spdhdn");
                break;

            case SSM_EP_HDR_X_EP2_RM_IP:
                $var(C_ep2_rm_ip_gs) = $hdr(X-ep2_rm_ip);
                xlog("L_INFO", "CI=$ci - R16 - restored var(C_ep2_rm_ip_gs)=$var(C_ep2_rm_ip_gs)\n");
                remove_hf( "X-ep2_rm_ip");
                break;
            case SSM_EP_HDR_X_SSPDAS:
#read X-sspdas
                $avp(C_ssp_da_supported_gs) = $hdr(X-sspdas);
                xlog("L_INFO", "CI=$ci - R16 - avp(C_ssp_da_supported_gs) restored $avp(C_ssp_da_supported_gs)\n");
#remove the socket header field
                remove_hf( "X-sspdas");
                break;

            case SSM_EP_HDR_X_SSPTS:
#read X-sspsts
                $var(C_ssp_skype_to_ssp_gb) = $hdr(X-sspsts);
                xlog("L_INFO", "CI=$ci - R16 - var(C_ssp_skype_to_ssp_gb) restored $var(C_ssp_skype_to_ssp_gb)\n");
#remove the socket header field
                remove_hf( "X-sspsts");
                break;
##############################   SKYPE   ####################
            case SSM_EP_HDR_X_AVPSPN:
                $avp(C_ssp_name_gs) = $hdr(X-avpspn);
                $avp(C_ssp_gw_profile_gs) = $avp(C_ssp_name_gs);
                xlog("L_INFO", "CI=$ci - R16 - restored avp(C_ssp_name_gs)=$avp(C_ssp_name_gs)\n");
                remove_hf( "X-avpspn");
                break;
            }
        }
        $var(C_count_li) = $var(C_count_li) + 1;
    }

    if ($avp(C_ep1_rm_addr_type_gi) ==1 || $avp(C_ep2_rm_addr_type_gi)==1)
        $avp(C_rm_address_type_gi) = 1;


    $var(C_count_li) = 0;

    if(is_present_hf("X-ssm-2nd-hdr-map"))
    {
       $var(C_ssm_hdr_2ND_map_gi) = $(hdr(X-ssm-2nd-hdr-map){s.int});
       remove_hf( "X-ssm-2nd-hdr-map");
       xlog("L_INFO","CI=$ci - R16 C_ssm_hdr_2ND_map_gi= $var(C_ssm_hdr_2ND_map_gi)\n");
    }
    while ($var(C_ssm_hdr_2ND_map_gi) && ($var(C_count_li) <  SSM_2ND_HDR_LAST))
    {
        if ($var(C_ssm_hdr_2ND_map_gi) & (1<<$var(C_count_li)) )
        {
            xlog("L_INFO", "CI=$ci - R16 SSM_2ND_HDR at position $var(C_count_li)\n");
            switch ($var(C_count_li))
            {
            case SSM_2ND_HDR_X_mtls:
                $avp(C_port_mtls_gs) = $hdr(X-mtls);
                xlog("L_INFO", "CI=$ci - R16 - restored avp(C_port_mtls_gs)=$avp(C_port_mtls_gs)\n");
                remove_hf( "X-mtls");
                break;

            case SSM_2ND_HDR_DS_GRP:
                $avp(S_ds_grp_name_gs) = $hdr(X-ds_grp);
                xlog("L_INFO", "CI=$ci - R16 - restored avp(S_ds_grp_name_gs)=$avp(S_ds_grp_name_gs)\n");
                remove_hf( "X-ds_grp");
                break;
            case SSM_2ND_HDR_RECV_ADV_SOCKET:
                $avp(S_recv_adv_socket_gs) = $hdr(X-recv-adv-socket);
                xlog("L_INFO", "CI=$ci - R16 - restored avp(S_recv_adv_socket_gs)=$avp(S_recv_adv_socket_gs)\n");
                remove_hf( "X-recv-adv-socket");
                break;
            }

        }
        $var(C_count_li) = $var(C_count_li) + 1;
    }

    if(is_present_hf("X-final_ruri")) {
         #read final ruri from the X-final_ruri header field
         xlog("L_INFO", "CI=$ci - R16- removin X-final_ruri\n");

         #remove the socket header field
         $avp(C_remove_headers_list_gs) = "X-final_ruri";
    }

    if(is_present_hf("X-SSM-Call-Side-Data"))
    {
        $var(C_ssm_call_side_data_gs) = $hdr(X-SSM-Call-Side-Data);
        $var(S_rem_addr_ls) = $(var(C_ssm_call_side_data_gs){param.value,rm-addr});
        if ($(var(S_rem_addr_ls){s.len}) != 0)
        {
            $var(S_rem_ep_addr_gs) = $(var(S_rem_addr_ls){s.select,0,~});
            $var(S_rem_ep_port_gs) = $(var(S_rem_addr_ls){s.select,1,~});
            $var(S_rem_ep_tran_gs) = $(var(S_rem_addr_ls){s.select,2,~});
            $du = "sip:" + $var(S_rem_ep_addr_gs) + ":" + $var(S_rem_ep_port_gs) + ";transport=" + $var(S_rem_ep_tran_gs);
            xlog("L_INFO", "CI=$ci - R16 - Remote socket found in X-SSM-Call-Side-Data. DU=$du\n");
        }
        $var(S_rem_uri_info_addr_gs) = $(var(C_ssm_call_side_data_gs){param.value,rem-info});
        if (not_empty("$var(S_rem_uri_info_addr_gs)") && $td != $var(S_rem_uri_info_addr_gs))
        {
            $td = $var(S_rem_uri_info_addr_gs);
            xlog("L_INFO", "CI=$ci - R16 - To domain changed to $td\n");
        }
        $var(S_own_uri_info_addr_gs) = $(var(C_ssm_call_side_data_gs){param.value,own-info});
        if (not_empty("$var(S_own_uri_info_addr_gs)") && $fd != $var(S_own_uri_info_addr_gs))
        {
            $fd = $var(S_own_uri_info_addr_gs);
            xlog("L_INFO", "CI=$ci - R16 - From domain changed to $fd\n");
        }
    }
    if (isflagset(11))
    {
        $avp(C_port_gi) = $var(C_rs_core_port_gi);
        if (isflagset(10))
            $avp(C_pmap_port_gi) = $var(C_general_core_port_gi);
        $avp(C_req_transp_gs)= $var(C_hdr_rcv_transp_gs);
        xlog("L_INFO", "CI=$ci - R16 - RS: restored avp(C_port_gi)=$avp(C_port_gi)\n");
    }
    else
    {
        $avp(C_port_gi) = $var(C_ep1_core_port_gi);

        if (isflagset(15) && isflagset(10))
            $avp(C_pmap_port_gi) = $var(C_general_core_port_gi);

        if (isflagset(10))
        {
            if ($avp(C_gw_behind_ep_gi) != 0)
            {
                $avp(C_req_transp_gs) = $var(C_ep2_transp_gs); ## Only used in R25, Use Transport towards REP forsetting the contact
                $avp(S_gw_core_ip2_gs) = $var(C_ep2_core_ip_gs);
                $avp(S_gw_core_fqdn_gs) = $var(C_ep2_core_fqdn_gs);
                $avp(C_gw_core_port_gi) = $var(C_ep2_core_port_gi);
                $avp(C_port_gi) = $var(C_ep2_core_port_gi);
                xlog("L_INFO", "CI=$ci - R16 - GW behind EP avp(C_port_gi)=$avp(C_port_gi)\n");
            }
            else
            {
                $avp(C_req_transp_gs) = $var(C_ep1_transp_gs); ## Only used in R25, Use Transport towards REP forsetting the contact
                $avp(C_gw_core_ip_gs) = $var(C_ep1_core_ip_gs);
                $avp(S_gw_core_fqdn_gs) = $var(C_ep1_core_fqdn_gs);
                $avp(C_gw_core_port_gi) = $var(C_ep1_core_port_gi);
            }


            $avp(C_core_port_gi) = $var(C_ep1_core_port_gi);
        }
        else
            $avp(C_req_transp_gs)= $var(C_hdr_rcv_transp_gs);

        $avp(C_core_ip_gs) = $var(C_ep1_core_ip_gs);   #this always point to ep1

    }

    if (is_gflag("6"))
    {
        xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
        bm_log_timer("route-16");
    }
}


########################################################################
# route SSM_ROUTE: RTP Proxy
# input pseudo-variables: $avp(C_pmap_port_gi), $avp(C_req_transp_gs), $avp(C_src_ip_gs), $avp(C_ssp_rip_gs), $avp(C_sys_current_binding_transp_gs),
#                         $avp(C_tmp2_gs), $avp(S_rep_ip_gs), $avp(S_tmp_gs), $var(C_call_msg_gb), $var(C_duChanged_gi),
#                         $var(C_g_useSsmRecordRoute_gb), $var(C_new_toh_hdr_gs), $var(C_ri_var_gs), $var(C_si_var_gs), $var(C_ssm_msg_gb),
#                         $var(S_sys_count_gi), $var(S_sys_r_ins_count_gi)
# output pseudo-variables: $avp(C_new_append_headers_list_gs), $avp(C_new_headers_list_gs), $avp(C_pmap_resp_port_gi), $avp(C_remove_headers_list_gs), $avp(C_src_ip_gs),
#                          $avp(C_tmp2_gs), $avp(S_rep_ip_gs), $avp(S_tmp_gs), $var(C_duChanged_gi), $var(C_new_rr_hdr_gs),
#                          $var(C_new_toh_hdr_gs), $var(C_rr_preset_hdr_gs), $var(S_sys_count_gi), $var(S_sys_r_ins_count_gi)
# input headers: From, Record-Route, Route, To, X-e1ril,
#                X-e1tr, X-gw-call, X-Original-dest, X-Original-emptytag, X-oprp,
#                X-Original-RR, X-ospri, X-rep_ip, X-rRR, X-send_transport,
#                X-SSM-IP, X-SSMData
# input flags: 10, g6
# changed flags:
########################################################################


route[SSM_ROUTE]
{
    if (is_gflag("6"))
        bm_start_timer("route-23");

    xlog("L_INFO", "CI=$ci - R23 (SSM)- Entry flags=$mF CT=$ct CI=$ci, tt=$tt, avp(C_pmap_port_gi)=$avp(C_pmap_port_gi), avp(C_req_transp_gs)=$avp(C_req_transp_gs) C_call_msg_gb=$var(C_call_msg_gb) C_ssm_msg_gb=$var(C_ssm_msg_gb)\n");
    xlog("L_INFO", "CI=$ci - R23 - Code:$rs Reason=$rr M=$rm avp(C_src_ip_gs)=$avp(C_src_ip_gs) rp=$rp Rp=$Rp RU=$ru FU=$fu TU=$tu RD=$rd DD=$dd DU=$du OD=$od OU=$ou IP=$var(C_si_var_gs) RIP=$var(C_ri_var_gs)\n\n");
    # Make sure this is a request, could use is_method as well ?

    if ($var(C_call_msg_gb) == 1)
    {
        if ($var(C_ssm_msg_gb) == 1)
        {
           # Removing all internal headers
           ## first all "final_" prefixed headers
           if (is_present_hf("final_X-e1t"))
               remove_hf( "final_X-e1t");

           if (is_present_hf("final_X-ep1_rm_ip"))
               remove_hf( "final_X-ep1_rm_ip");
           if (is_present_hf("final_X-ep1_rm_ip"))
               remove_hf( "final_X-ep1_rm_ip");
           if (is_present_hf("final_X-e1rf"))
               remove_hf( "final_X-e1rf");
           if (is_present_hf("final_X-e1rp"))
               remove_hf( "final_X-e1rp");
           if (is_present_hf("final_X-e1np"))
               remove_hf( "final_X-e1np");
           if (is_present_hf("final_X-e1tr"))
               remove_hf( "final_X-e1tr");
           if (is_present_hf("final_X-e1ci"))
               remove_hf( "final_X-e1ci");
           if (is_present_hf("final_X-e1cp"))
               remove_hf( "final_X-e1cp");
           if (is_present_hf("final_X-e1at"))
               remove_hf( "final_X-e1at");
           if (is_present_hf("final_X-rscp"))
               remove_hf( "final_X-rscp");
           if (is_present_hf("final_X-gcp"))
               remove_hf( "final_X-gcp");
           if (is_present_hf("final_X-avpp"))
               remove_hf( "final_X-avpp");
           if (is_present_hf("final_X-oprp"))
               remove_hf( "final_X-oprp");
           if (is_present_hf("final_X-acbi"))
               remove_hf( "final_X-acbi");
           if (is_present_hf("final_X-acbp"))
               remove_hf( "final_X-acbp");
           if (is_present_hf("final_X-acbtr"))
               remove_hf( "final_X-acbtr");
           if (is_present_hf("final_X-wanip"))
               remove_hf( "final_X-wanip");
           if (is_present_hf("final_X-osvp"))
               remove_hf( "final_X-osvp");
           if (is_present_hf("final_X-invnat"))
               remove_hf( "final_X-invnat");
           if (is_present_hf("final_X-invnrt"))
               remove_hf( "final_X-invnrt");
           if (is_present_hf("final_X-avpspn"))
               remove_hf( "final_X-avpspn");
           if (is_present_hf("final_X-spf")){
               remove_hf( "final_X-spf");
               xlog("L_INFO", "CI=$ci - R-23- removed final_X-spf\n");
           }
           if (is_present_hf("X-final_ruri")){
            #   $ru = $hdr(X-final_ruri);
               xlog("L_INFO", "CI=$ci - R-23- retrived ruri= $ru\n");
               remove_hf( "X-final_ruri");
           }
           if(is_present_hf("X-SSM-Call-Side-Data"))
               remove_hf( "X-SSM-Call-Side-Data");

           if ($tt == $null || $tt == "")
              $var(C_new_toh_hdr_gs)=$(var(C_new_toh_hdr_gs){s.selectstr,0,";tag="});

            $var(C_ssm_hdr_map_gi) = 0;
            $var(C_ssm_hdr_ep_map_gi) = 0;
            $var(C_ssm_hdr_2ND_map_gi) = 0;
            if (is_present_hf("X-ssm-hdr-map"))
            {
            $var(C_ssm_hdr_map_gi) = $(hdr(X-ssm-hdr-map){s.int});
            remove_hf( "X-ssm-hdr-map");
            }
            if (is_present_hf("X-ssm-ep-hdr-map"))
            {
               $var(C_ssm_hdr_ep_map_gi) = $(hdr(X-ssm-ep-hdr-map){s.int});
               remove_hf( "X-ssm-ep-hdr-map");
            }
            if (is_present_hf("X-ssm-2nd-hdr-map"))
            {
               $var(C_ssm_hdr_2ND_map_gi) = $(hdr(X-ssm-ep-hdr-map){s.int});
               remove_hf( "X-ssm-2nd-hdr-map");
            }
            if(!$var(C_ssm_hdr_map_gi) || !$var(C_ssm_hdr_map_gi))
              return;

           if( PROC_ISSET_SSM_EP_HDR_X_OSPRI ){
              remove_hf( "X-ospri");
              xlog("L_INFO", "CI=$ci - R23 - X-ospri removed: $avp(C_ssp_rip_gs)\n");
           }

           if(PROC_ISSET_SSM_EP_HDR_X_REP_IP){
              $avp(S_rep_ip_gs) = $hdr(X-rep_ip);
              xlog("L_INFO", "CI=$ci - R23.3 - restored S_rep_ip_gs:  $avp(S_rep_ip_gs)\n");
              remove_hf( "X-rep_ip");

           }

           if(PROC_ISSET_SSM_HDR_X_SSM_IP){
              remove_hf( "X-SSM-IP");
           }

           if(PROC_ISSET_SSM_HDR_X_RR) ## only possible with var(C_g_useSsmRecordRoute_gb) and var(C_call_msg_gb) set in R25
           {
               #copy it to the RR field
               $var(S_pmap_rr_ls)= $hdr(X-rRR);
               remove_hf( "X-rRR");
               ## CODE FROM R25

               if (is_present_hf("Record-Route"))
               {
                  $var(S_pmap_rr_ls) = "<sip:"+$var(S_pmap_rr_ls)+";lr;ftag="+$ft+";oss=oss-09.04.13.00-2>";
                  xlog("L_INFO", "CI=$ci - R23 - ADDING local Record-Route $var(S_pmap_rr_ls)\n");
                  append_hf("Record-Route: $var(S_pmap_rr_ls)\r\n","Call-ID");

                  $(avp(C_tmp2_gs)[*]) = $null;

                  $avp(C_tmp2_gs) = $(hdr(Record-Route)[*]); # RR could be seperate or comma seperated or combination. Combine all to make it comma seperated.
                  xlog("L_INFO", "CI=$ci - R23 - COMPLETE Record-Route C_tmp2_gs, $(avp(C_tmp2_gs)[*])\n");

                  $var(S_sys_count_gi) = 0;
                  while($(avp(C_tmp2_gs){s.select,$var(S_sys_count_gi),,}{s.len}))
                  {
                      xlog("L_INFO", "CI=$ci - R23 - FOUND Record-Route rcv_rr, $var(S_sys_count_gi) : $(avp(C_tmp2_gs){s.select,$var(S_sys_count_gi),,})\n");
                      $var(S_sys_count_gi) = $var(S_sys_count_gi) + 1;
                  }
                  $var(S_sys_count_gi) = $var(S_sys_count_gi) - 1;


                  $var(S_sys_r_ins_count_gi) = 0;
                  while($(avp(C_tmp2_gs){s.select,$var(S_sys_r_ins_count_gi),,}{s.len}))
                  {
                      if ($var(S_sys_r_ins_count_gi) == 0) # Replace the top entry pointing to access OS-SBC with new one pointing to core
                      {
                          xlog("L_INFO", "CI=$ci - R23 - SKIPPING local Record-Route rcv_rr, $var(S_sys_r_ins_count_gi) : $(avp(C_tmp2_gs){s.select,$var(S_sys_r_ins_count_gi),,})\n");
                      }
                      else
                      {
                          xlog("L_INFO", "CI=$ci - R23 - STORING Record-Route rcv_rr, $var(S_sys_r_ins_count_gi) : $(avp(C_tmp2_gs){s.select,$var(S_sys_r_ins_count_gi),,})\n");
                          append_hf("Record-Route: $(avp(C_tmp2_gs){s.select,$var(S_sys_r_ins_count_gi),,})\r\n","Call-ID");
                      }
                      $var(S_sys_r_ins_count_gi) = $var(S_sys_r_ins_count_gi) + 1;
                   }

                   $(avp(C_tmp2_gs)[*]) = $null;

                   xlog("L_INFO", "R23  - 4K, RR is preserved towards SSM\n");

                   remove_hf("Record-Route");
               }
               else
               {
                   xlog("L_INFO", "CI=$ci - R23.2 - setting record-route with $var(S_pmap_rr_ls)\n");
                   $var(C_rr_preset_hdr_gs) = $var(S_pmap_rr_ls) + ";oss=oss-09.04.13.00-2";
                   record_route_preset("$var(C_rr_preset_hdr_gs)");
               }
           }

           #lets restore the flags
           if(PROC_ISSET_SSM_HDR_X_ORIGINAL_RR)
           {
              #copy it to the RR field
              $(avp(C_tmp2_gs)[*]) = $null;
              $avp(C_tmp2_gs)= $hdr(X-Original-RR);
              #remove the orginal RR header field
              remove_hf( "X-Original-RR");
           }
           if(PROC_ISSET_SSM_EP_HDR_X_GW_CALL){
              #remove the orginal RR header field
              remove_hf( "X-gw-call");
           }
           if(PROC_ISSET_SSM_HDR_X_SSMDATA)
              #remove the ssm header
              remove_hf( "X-SSMData");

           if(PROC_ISSET_SSM_HDR_X_OPRP){
              $avp(C_pmap_resp_port_gi) = $hdr(X-oprp);
              #remove the gw_transport header field
              remove_hf( "X-oprp");
           }
           if(PROC_ISSET_SSM_HDR_X_ORIGINAL_EMPTYTAG){
              #remove the X-Original-emptytag header field
              remove_hf( "X-Original-emptytag");
           }
           if(PROC_ISSET_SSM_EP_HDR_X_E1RIL){
              #remove the X-Original-emptytag header field
              remove_hf( "X-e1ril");
           }
           if(PROC_ISSET_SSM_HDR_X_ORIGINAL_DEST) {
              $avp(C_src_ip_gs)=$hdr(X-Original-dest);   ## Header is removed towards the end...

              #order of param is sip(s), ip and port;transport=tcp;  sip:10.233.20.106:5060;
              xlog("L_INFO", "CI=$ci - R23 - $(avp(C_src_ip_gs){uri.host})\n");
              $avp(C_src_ip_gs) = $(avp(C_src_ip_gs){uri.host});
              xlog("L_INFO", "CI=$ci - R23- Code:$rs X-Original-dest:  $du, sourceip: $avp(C_src_ip_gs) \n");
           }
           else
           {
               xlog("L_INFO", "CI=$ci - R23- Code:$rs X-Original-dest:  the bitmap in header not set but it maybe pstn dialin \n");
               if(is_present_hf("X-Original-dest"))
               {
                  $avp(C_src_ip_gs)= $hdr(X-Original-dest);
                  xlog("L_INFO", "CI=$ci - R23- found header X-Original-dest: $avp(C_src_ip_gs) it is pstn dialin \n");
               }
           }
           if(PROC_ISSET_SSM_HDR_X_SEND_TRANSPORT) {
              #remove the X-send_transport header field
              remove_hf( "X-send_transport");
           }
           # Original Via handling for CSBC was moved to MANIPULATE_VIA_ROUTE route with flag $var(S_add_via_gb) disabled.
           # Read original dest from the X-Original-dest header field
           $(avp(S_tmp_gs)[*]) = $null;
           $var(S_fwd_vlan_lb)=0;
           $var(S_ssp_reg_lb)=0;

           # Precedence for setting DU
           # 1) For SIP-Rec
           # 2) For Forward VLAN or stored SSP registation address using $hdr(X-Original-dest)
           # 3) For established socket using $var(S_rem_ep_addr_gs)
           # 4) For Route header
           # 5) From $hdr(X-Original-dest)

           if (not_empty("$var(S_rem_ep_addr_gs)") && $var(C_duChanged_gi) == 0)
           {
                $du = "sip:" + $var(S_rem_ep_addr_gs) + ":" + $var(S_rem_ep_port_gs) + ";transport=" + $var(S_rem_ep_tran_gs);
                $var(C_duChanged_gi) = 1;
           }
           if ($var(C_g_useSsmRecordRoute_gb) == 1 && is_present_hf("Route"))
           {
              $var(S_snd_ip_addr_ls) = '';
              $var(S_snd_ip_port_ls) = '';
              $var(S_snd_ip_tran_ls) = '';
              $var(S_route_uri_ls) = $(hdr(Route)[0]{s.select,0,,}{nameaddr.uri});
              if (!isflagset(10))
              {
                 if ($(var(S_route_uri_ls){s.len}) != 0)
                 {
                     if ($(var(S_route_uri_ls){param.value,comIP}{s.len}) != 0)
                     {
                          $var(S_route_uri_ls) = $(var(S_route_uri_ls){param.value,comIP});
                          $var(S_com_ip_addr_r0_ls) = $(var(S_route_uri_ls){s.select,0,~});   #whatever comes after "~"
                          $var(S_com_ip_port_r0_ls) = $(var(S_route_uri_ls){s.select,1,~});   #whatever comes after next "~"
                          $var(S_com_ip_tran_r0_ls) = $(var(S_route_uri_ls){s.select,2,~});   #whatever comes after next "~"

                          xlog("L_INFO", "CI=$ci -R23 -  found Route 0 com_ip_addr=$var(S_com_ip_addr_r0_ls), com_ip_port=$var(S_com_ip_port_r0_ls), com_ip_tran=$var(S_com_ip_tran_r0_ls)\n");

                          # Override the ru set in R22
                          if($(var(S_com_ip_addr_r0_ls){s.len}) != 0) {
                              osb_set_uri("$ru","$var(S_com_ip_addr_r0_ls),$var(S_com_ip_port_r0_ls),$(var(S_com_ip_tran_r0_ls){s.tolower}),",0x3C);
                              xlog("L_INFO", "CI=$ci -R23 -  Updated ru=$ru\n");
                          }
                     }

                     if ($(hdr(Route)[1]) != $null)
                          $var(S_route_uri_ls) = $(hdr(Route)[1]{s.select,0,,}{nameaddr.uri});
                     else
                     {
                          $var(S_route_uri_ls) = '';

                          # No Route 1 found, Use Route 0 for du as well.
                          $var(S_snd_ip_addr_ls) = $var(S_com_ip_addr_r0_ls);
                          $var(S_snd_ip_port_ls) = $var(S_com_ip_port_r0_ls);
                          $var(S_snd_ip_tran_ls) = $var(S_com_ip_tran_r0_ls);
                     }
                 }
              }

              if ($(var(S_route_uri_ls){s.len}) != 0)
              {
                 # Message from SSM dealing with RR and Route header, find the destination based on top most Route
                 $var(S_snd_ip_addr_ls) = $(var(S_route_uri_ls){uri.host});
                 $var(S_snd_ip_port_ls) = $(var(S_route_uri_ls){uri.port});
                 if ($(var(S_route_uri_ls){uri.transport}) != '')
                    $var(S_snd_ip_tran_ls) = $(var(S_route_uri_ls){uri.transport}{s.tolower});
              }

              if ($(var(S_snd_ip_addr_ls){s.len}) != 0)
              {
                 xlog("L_INFO", "CI=$ci - R23 - Using Route S_snd_ip_addr_ls=$var(S_snd_ip_addr_ls), S_snd_ip_port_ls=$var(S_snd_ip_port_ls), S_snd_ip_tran_ls=$var(S_snd_ip_tran_ls)\n");

                 # Make sure its not NAT, if NAT then use the X-Original-dest else give precedence to Route header coming in from SSM if enabled and populated
                 if(PROC_ISSET_SSM_HDR_X_ORIGINAL_RR)
                 {
                    $avp(S_tmp_gs) = $(hdr(X-Original-RR){param.value,nat});
                    if ($avp(S_tmp_gs) != $null && $(avp(S_tmp_gs){s.len}) != 0 && $(avp(S_tmp_gs){s.int}) == 1)
                        $var(S_snd_ip_addr_ls) = "";  # NAT, continue as usual and process the X-Original-dest
                    $var(S_fwd_vlan_lb) = $(hdr(X-Original-RR){param.exist,fwd_vlan});
                    $var(S_ssp_reg_lb) = $(hdr(X-Original-RR){param.exist,ssp_reg});
                 }

                 if ( $var(S_snd_ip_addr_ls) != "")
                 {
                     put_ip_in_paran('$var(S_snd_ip_addr_ls)', '$var(S_snd_ip_addr_ls)');
                     $(avp(S_tmp_gs)[*]) = $null;
                     $avp(S_tmp_gs) = "sip:" + $var(S_snd_ip_addr_ls);

                     if($var(S_snd_ip_port_ls) != "" && $var(S_snd_ip_port_ls) != 0)
                        $avp(S_tmp_gs) = $avp(S_tmp_gs)+":"+$var(S_snd_ip_port_ls);

                     if (isflagset(10))
                     {
                        if (PROC_ISSET_SSM_EP_HDR_X_E1TR)
                           $var(S_snd_ip_tran_ls) = $hdr(X-e1tr);
                     }
                     else if $var(S_standalone_route_gi)
                           $var(S_snd_ip_tran_ls) = $hdr(X-e1tr);
                     else
                        $var(S_snd_ip_tran_ls) = $avp(C_sys_current_binding_transp_gs);

                     if ($var(S_snd_ip_tran_ls) != '')
                        $avp(S_tmp_gs) = $avp(S_tmp_gs)+";transport="+$var(S_snd_ip_tran_ls);

                     if (isflagset(10))
                     {
                         if ($var(C_duChanged_gi) == 0)
                         {
                             $du = $avp(S_tmp_gs);
                             $var(C_duChanged_gi) = 1;
                             xlog("L_INFO", "CI=$ci - R23 - registerFromSrvr is set and Send IP from Route is populated, avp(S_tmp_gs)=$avp(S_tmp_gs), Changed du=$du\n");
                         }
                     }
                 }
              }

              # Remove top most Route header
              if (!isflagset(10))
              {
                  $(avp(C_tmp2_gs)[*]) = $null;
                  $var(S_sys_count_gi) = 0;
                  while($(hdr(Route)[$var(S_sys_count_gi)]) != $null)
                  {
                     $(avp(C_tmp2_gs)[$var(S_sys_count_gi)]) =  $(hdr(Route)[$var(S_sys_count_gi)]);
                     xlog("L_INFO", "R23  - Route C_tmp2_gs, $var(S_sys_count_gi) $(avp(C_tmp2_gs)[$var(S_sys_count_gi)])\n");
                     $var(S_sys_count_gi) = $var(S_sys_count_gi) + 1;
                  }

                  $var(S_sys_count_gi) = $var(S_sys_count_gi) - 2; # Don't put the top most Route

                  while($var(S_sys_count_gi) >= 0)
                  {
                     insert_hf("Route: $(avp(C_tmp2_gs)[$var(S_sys_count_gi)])\r\n","Call-ID");

                     $var(S_sys_count_gi) = $var(S_sys_count_gi) - 1;
                  }
                  $(avp(C_tmp2_gs)[*]) = $null;
                  remove_hf("Route");
              }
           }

           if(PROC_ISSET_SSM_HDR_X_ORIGINAL_DEST)
           {

              # Make sure du is not changed above
              if ($var(C_duChanged_gi) == 0 || $var(S_fwd_vlan_lb) || $var(S_ssp_reg_lb)) {
                  $du = $hdr(X-Original-dest);
                  $var(C_duChanged_gi) = 1;
                  xlog("L_INFO", "CI=$ci - R23 - Changed du=$du\n");
              }

              #remove the socket header field
              remove_hf( "X-Original-dest");
           }
           if(is_present_hf("X-Original-Route"))
           {
              remove_hf("X-Original-Route");
           }
       }
       else
       {

           # force ssm socket
           # Do not set SSM du here as original du is used to set other headers to SSM
           # Only set du and fs just before the relay
           xlog("L_INFO","CI=$ci - R23 - Message to be sent to SSM du = $du  rP = $rP \n");
           xlog("L_INFO","CI=$ci - R23 - ssm socket forced\n");
       }
    }

    if (is_gflag("6"))
    {
        xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
        bm_log_timer("route-23");
    }

}


########################################################################
# route SSM_COMMON_TAGS_ROUTE: SSM common tags for SSM
#       Set common tags for SSM
# input pseudo-variables: $avp(C_advertised_ip_gs), $avp(C_advertised_port_gi), $avp(C_fw_ext_ip_gs), $avp(C_ssp_da_supported_gs), $var(C_hdr_rcv_transp_gs),
#                         $var(C_hdr_rr_gs), $var(C_hdr_send_transp_gs), $var(C_original_dest_gs), $var(C_original_socket_gs), $var(C_ssm_data_dst_gs),
#                         $var(C_ssm_data_src_gs), $var(C_ssm_ip_dst_gs), $var(C_ssm_ip_src_gs), $var(C_ssp_skype_to_ssp_gb)
# output pseudo-variables: $avp(C_new_headers_list_gs), $avp(C_remove_headers_list_gs)
# input headers: X-Siemens-Call-Type
# input flags:
# changed flags:
########################################################################

route[SSM_COMMON_TAGS_ROUTE]
{
    if (is_gflag("6"))
        bm_start_timer("route-cmn-tags");

    insert_hf("X-Original-Socket: $var(C_original_socket_gs)\r\n", "Call-ID");
    insert_hf("X-original-flags: $mf\r\n", "Call-ID");

    if ($(var(C_original_dest_gs){s.len}))
    {
        insert_hf("X-Original-dest: $var(C_original_dest_gs)\r\n", "Call-ID");
        PROC_SET_SSM_HDR_X_ORIGINAL_DEST;
    }

    insert_hf("X-recv_transport: $var(C_hdr_rcv_transp_gs)\r\n", "Call-ID");
    insert_hf("X-send_transport: $var(C_hdr_send_transp_gs)\r\n", "Call-ID");
    insert_hf("X-SSM-IP: $var(C_ssm_ip_src_gs);src\r\n", "Call-ID");
    insert_hf("X-SSM-IP: $var(C_ssm_ip_dst_gs);dst\r\n", "Call-ID");
    insert_hf("X-SSMData: $var(C_ssm_data_dst_gs)\r\n", "Call-ID");
    insert_hf("X-advi: $avp(C_advertised_ip_gs)\r\n", "Call-ID");

    PROC_SET_SSM_HDR_X_ORIGINAL_SOCKET;
    PROC_SET_SSM_HDR_X_ORIGINAL_FLAGS;
    PROC_SET_SSM_HDR_X_RECV_TRANSPORT;
    PROC_SET_SSM_HDR_X_SEND_TRANSPORT;
    PROC_SET_SSM_HDR_X_SSM_IP;
    PROC_SET_SSM_HDR_X_SSMDATA;
    PROC_SET_SSM_HDR_X_ADVI;

    if ($(var(S_final_ruri_gs){s.len}) && $var(S_pstn_dialin_route_gi))
    {
        insert_hf( "X-final_ruri: $var(S_final_ruri_gs)\r\n", "Call-ID");
        xlog("L_INFO","CI=$ci - R16.1 - sending ruri in X-final_ruri: $var(S_final_ruri_gs) \n");
    }

    if($avp(C_ssp_da_supported_gs) == 'y')
    {
        insert_hf( "X-sspdas: $avp(C_ssp_da_supported_gs)\r\n", "Call-ID");
        PROC_SET_SSM_EP_HDR_X_SSPDAS;
        if($var(C_ssp_skype_to_ssp_gb) == 1)
        {
            insert_hf( "X-sspsts: $var(C_ssp_skype_to_ssp_gb)\r\n", "Call-ID");
            PROC_SET_SSM_EP_HDR_X_SSPTS
        }
    }

    if ($(var(C_ssm_data_src_gs){s.len}))
        insert_hf( "X-SSMData: $var(C_ssm_data_src_gs)\r\n", "Call-ID");

    if ($(var(C_hdr_rr_gs){s.len}))
    {
        insert_hf( "X-Original-RR: $var(C_hdr_rr_gs)\r\n", "Call-ID");
        PROC_SET_SSM_HDR_X_ORIGINAL_RR;
    }

    if ($avp(C_advertised_port_gi) != $null && $avp(C_advertised_port_gi) != 0)
    {
        insert_hf( "X-advp: $avp(C_advertised_port_gi)\r\n", "Call-ID");
        PROC_SET_SSM_HDR_X_ADVP;
    }

    if($avp(C_fw_ext_ip_gs) != $null && $avp(C_fw_ext_ip_gs) != '')
    {
        insert_hf( "X-fwxi: $avp(C_fw_ext_ip_gs)\r\n", "Call-ID");
        PROC_SET_SSM_HDR_X_FWXI;
    }

    if (is_present_hf("X-Siemens-Call-Type"))
    {
        # SSM can not handle unknown headers with case mismatch
        remove_hf( "X-Siemens-Call-Type");
        insert_hf( "X-Siemens-Call-Type: $hdr(X-Siemens-Call-Type)\r\n", "Call-ID");
    }

    if ($var(C_srec_required_gi) == 1)
    {
        insert_hf( "X-SIPREC-Req: yes\r\n", "Call-ID");
    }

    if (is_gflag("6"))
    {
        xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
        bm_log_timer("route-cmn-tags");
    }

}

########################################################################
# route SDP_MANIPULATION_ROUTE:
# input pseudo-variables: $avp(C_m_body_gs), $avp(C_send_only_gb), $avp(C_ssp_type_gi)
# output pseudo-variables: $avp(C_m_body_gs)
# input headers: Content-Type
# input flags: 10, g6
# changed flags:
########################################################################
route[SDP_MANIPULATION_ROUTE]
{
    if (is_gflag("6"))
        bm_start_timer("route-32");

    xlog("L_INFO", "CI=$ci - R32 (SDP Man)- Entry, SP TYPE=$avp(C_ssp_type_gi) M=$rm Code:$rs Reason=$rr\n\n");

    $(avp(C_m_body_gs)[*]) = $null;
    if ($avp(C_ssp_type_gi) == 7) # MS LYNC
    {
        if (isflagset(10))
        {
            xlog("L_INFO", "CI=$ci - R32 - flag(10) set\n");
            # Response to OSV, suppress the crypto 1 line if need be
            if(($T_reply_code >= 180 && $T_reply_code < 300) && ($rm == "INVITE"))
            {
                if($hdr(Content-Type) == "application/sdp" ||
                   ($hdr(Content-Type) == "multipart/mixed" && search_body("Content-Type:.*application/sdp")))
                {
                    if (search_body("a=crypto:1 AES_CM_128_HMAC_SHA1_80(.*)[1-9]:[1-9]") && search_body("a=crypto:2 AES_CM_128_HMAC_SHA1_80"))
                    {
                        xlog("L_INFO", "CI=$ci - R32 - Response from MS-Lync with two Crypto lines. Remove the Master Key crypto line 1 from SDP\n");
                        $avp(C_m_body_gs) = $rb;
                        avp_subst("$avp(C_m_body_gs)", "/a=crypto:1 AES_CM_128_HMAC_SHA1_80.*\r\n//ig");
                        subst_body('/v=.*$/$avp(C_m_body_gs)/igs');
                    }
                }
            }
            # Request from OSV, suppress the Life Time
            else if (is_method("INVITE|ACK"))
            {
                if($hdr(Content-Type) == "application/sdp" ||
                   ($hdr(Content-Type) == "multipart/mixed" && search_body("Content-Type:.*application/sdp")))
                {
                    if (search_body("a=crypto(.*)\|.*"))
                    {
                        xlog("L_INFO", "CI=$ci - R25 - Request to MS-Lync with Lifetime in Crypto. Remove Life Time from Crypto in SDP\n");
                        $avp(C_m_body_gs) = $rb;
                        avp_subst("$avp(C_m_body_gs)", "/a=crypto(.*)\|.*\r\n/a=crypto\1\r\n/ig");
                        subst_body('/v=.*$/$avp(C_m_body_gs)/igs');
                    }
                }
            }
            # If SSP, X-Siemens* headers should not be send forward
            if($var(C_ep1_type_gi)==5)
            {
                remove_hf_re("^X-Siemens-");
            }
        }
        else
        {
            # Response to MS Lync, suppress the crypto 1 line if need be
            if(($T_reply_code >= 180 && $T_reply_code < 300) && ($rm == "INVITE"))
            {
                if($(hdr(Content-Type){s.tolower}) == "application/sdp" || ($(hdr(Content-Type){s.tolower}) == "multipart/mixed" && search_body("Content-Type:.*application/sdp")))
                {
                    if (search_body("a=crypto(.*)\|.*"))
                    {
                        xlog("L_INFO", "CI=$ci - R25 - Response to MS-Lync with Lifetime in Crypto. Remove Life Time from Crypto in SDP\n");
                        $avp(C_m_body_gs) = $rb;
                        avp_subst("$avp(C_m_body_gs)", "/a=crypto(.*)\|.*\r\n/a=crypto\1\r\n/ig");
                        subst_body('/v=.*$/$avp(C_m_body_gs)/igs');
                    }
                }
            }
            # Request from MS LYNC, suppress the crypto 1 line if need be
            else if (is_method("INVITE"))
            {
                if($hdr(Content-Type) == "application/sdp" ||
                   ($hdr(Content-Type) == "multipart/mixed" && search_body("Content-Type:.*application/sdp")))
                {
                    if (search_body("a=crypto:1 AES_CM_128_HMAC_SHA1_80(.*)[1-9]:[1-9]") && search_body("a=crypto:2 AES_CM_128_HMAC_SHA1_80"))
                    {
                        xlog("L_INFO", "CI=$ci - R32 - Request from MS-Lync with two Crypto lines. Remove the Master Key crypto line 1 from SDP\n");
                        $avp(C_m_body_gs) = $rb;
                        avp_subst("$avp(C_m_body_gs)", "/a=crypto:1 AES_CM_128_HMAC_SHA1_80.*\r\n//ig");
                        subst_body('/v=.*$/$avp(C_m_body_gs)/igs');
                    }
                }
            }
        }
    }
    else
    {
        if (isflagset(10) && ($avp(C_send_only_gb) == 1))
        {
            xlog("L_INFO", "CI=$ci - R32 - flag(10) set\n");
            # Response to OSV, suppress the crypto 1 line if need be
            if(($T_reply_code >= 180 && $T_reply_code < 300) && ($rm == "INVITE"))
            {
                if($hdr(Content-Type) == "application/sdp" ||
                   ($hdr(Content-Type) == "multipart/mixed" && search_body("Content-Type:.*application/sdp")))
                {
                    # Offer from OSV with sendonly and the answer is sendrecv, change it to recvonly
                    if (search_body("a=sendrecv"))
                    {
                        $avp(C_m_body_gs) = $rb;
                        xlog("L_INFO", "CI=$ci - R32 - Response From OSV to MS-Lync for the request with sendonly SDP\n");
                        avp_subst("$avp(C_m_body_gs)", "/a=sendrecv.*\r\n/a=recvonly\r\n/ig");
                        subst_body('/v=.*$/$avp(C_m_body_gs)/igs');
                    }
                }
            }
        }
    }


    if (is_gflag("6"))
    {
        xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
        bm_log_timer("route-32");
    }
}

#Sanity Check
# Global Variables Initializing
########################################################################
# route GLOBAL_SANITY_ROUTE: Global Sanity Route
# input pseudo-variables: $avp(C_tmp2_gs), $avp(C_wan_ip_gs), $var(B_append_msg_gs), $var(B_pmap_src_addr_gs), $var(B_reason_msg_gs),
#                         $var(B_return_to_route_gb), $var(C_ri_var_gs), $var(C_si_var_gs), $var(S_sys_internal_msg_gb), $var(S_sys_rand_gi)
# output pseudo-variables: $avp(C_tmp2_gs), $var(B_append_msg_gs), $var(B_reason_msg_gs), $var(B_return_code_gs), $var(B_return_to_route_gb),
#                          $var(S_sys_rand_gi)
# input headers: Call-Id, Contact, Content-Length, Content-Type, From,
#                Ruri, T, To, User-Agent
# input flags: 25, g14, g6
# changed flags: 10, 12
########################################################################
#!define  URI_USER_LEN           128
#!define  URI_HOST_LEN           128
#!define  HDR_LEN_DEFAULT        512
#!define  HDR_LEN_CALLID         256
#!define  HDR_LEN_PARAMS         256
#!define  HDR_LEN_USERNAME       128
#!define  HDR_MAX_PORTRANGE      65535
#!define  HDR_MAX_PORTLEN        5

route[GLOBAL_SANITY_ROUTE]
{
    xlog("L_INFO", "CI=$ci - R37 (Global Sanity) - M=$rm IP=$var(C_si_var_gs) SP=$sp CT=$ct RIP=$var(C_ri_var_gs) cseq:$cs bodysize($bs), content-length($cl)\n\n");
    xlog("L_INFO", "CI=$ci - R37 - Sanity Check len - M=$rm message_length = $msg(len) from-len=$(hdr(From){s.len}) to-len=$(hdr(To){s.len}) ct-len=$(hdr(Contact){s.len})\n\n");
    $var(C_sanity_fail_lb) = 0;
    # Don't run sanity route on internal traffic
    if ($Ri == $si)
    {
        xlog("L_INFO", "CI=$ci - R37 (Global Sanity) - Route skipped (internal traffic)\n");
        return;
    }

    # -----------------------------------------------------------------
    # Sanity Check Init
    # -----------------------------------------------------------------
    if (isflagset(25)) # Message from WAN
    {
       # OVERLOAD CHECK
        if (!(is_gflag("14") && isflagset(1)) && $var(S_sys_internal_msg_gb) == 0 &&
           (!is_method("OPTIONS|BYE|ACK|CANCEL")) )
        {
            $shv(S_sys_overload_state_gs) = "";
            # CHECK INVITE, REGISTER against TAILDROP
            if (is_method("NOTIFY") || is_method("SUBSCRIBE") || (is_method("INVITE") && !has_totag())) {
                if (!rl_check())
                    $shv(S_sys_overload_state_gs) = "Rate Limiting";
            }

            if (is_method("REGISTER"))
            {
                if ($sht(register_rate=>$Ts::counter) == $null)
                    $sht(register_rate=>$Ts::counter) = 1;
                else
                    $sht(register_rate=>$Ts::counter) = $sht(register_rate=>$Ts::counter) + 1;
                if ($sht(register_rate=>$Ts::counter) > 1000)
                    $shv(S_sys_overload_state_gs) = "Rate Limiting";
            }

            if ($shv(S_sys_overload_state_gs) == "") {
                # CHECK ALL for CPU Load
                if (!rl_check_pipe("4"))
                    $shv(S_sys_overload_state_gs) = "System Limiting";
            }

            if ($shv(S_sys_overload_state_gs) == "") {
                # CHECK ALL for NETWORK RX QUEUE
                if (!rl_check_pipe("5"))
                    $shv(S_sys_overload_state_gs) = "Network Limiting";
            }

            if ($shv(S_sys_overload_state_gs) != ""){
                xlog("L_WARN", "CI=$ci - R0 - M=$rm, IP=$var(C_si_var_gs), RIP=$var(C_ri_var_gs) - Overload State $shv(S_sys_overload_state_gs)\n");

                $var(S_sys_rand_gi) = ($RANDOM / 71582789); # Random Value from 10 to 30
                if ($var(S_sys_rand_gi) < 10) # MUST BE HIGHER THAN MONITORING INTERVAL WHICH IS 5 SECS
                    $var(S_sys_rand_gi) = 10 + ($RANDOM / 214748365); # Random Value from 1 to 10

                append_to_reply("Warning: 399 $var(C_ri_var_gs) - R0 - Overload $shv(S_sys_overload_state_gs)\r\n");
                append_to_reply("Retry-After: $var(S_sys_rand_gi)\r\n");
                sl_send_reply("503", "Server Unavailable - $shv(S_sys_overload_state_gs)");
                exit;
            }
        }
        #Block sip scanner Attacks
        if (($ua != $null && ($(ua{re.subst,/ //g}{s.tolower})=~"sipsscuser|sipvicious|friendly-scanner|sundayddr")) || ($(fU{s.tolower}) =~"sipsscuser|sipvicious"))
        {
            xlog("L_ERR", "CI=$ci - R37 - Msg dropped ($rm $pr) - UA not in allowed list or sip scanner attack si:sp=$si:$sp var(C_si_var_gs)=$var(C_si_var_gs) ua=$ua fU=$fU\n");
            drop;
            $var(C_sanity_fail_lb)=1;
        }
        else if($fu==$null || $ci==$null || $tu== $null)
        {
            xlog("L_ERR", "CI=$ci - R37 - Msg dropped ($rm $pr) - SIP 400 - Bad Request - RURI=$ru F=$fu T=$tu si:sp=$si:$sp IPv=$var(C_si_var_gs)\n");
            $var(B_return_code_gs) = "400"; $var(B_reason_msg_gs)= "Bad Request"; $var(B_append_msg_gs) = "Warning: 399 " + $Ri + " - R-A040 - Sanity check failed: mandatory header equals null."; $var(B_return_to_route_gb) = 0;
            drop;
            $var(C_sanity_fail_lb)=1;
        }
        else if ($var(C_sip_compliance_gb) == 0 || ($var(C_sip_compliance_gb) == 1 && (!is_method("CANCEL") && !is_method("ACK"))))
        {
            if (!sanity_check("999") || !sanity_check("1024", "255"))
            {
                xlog("L_ERR","CI=$ci - R37 - Msg dropped ($rm $pr) - Invalid SIP Header. si:sp=$si:$sp\n");
                drop;
                $var(C_sanity_fail_lb)=1;
            }
        }

        if(($(hdr(From){s.len}) > HDR_LEN_DEFAULT) || ($(hdr(To){s.len}) > HDR_LEN_DEFAULT) || ($(hdr(Call-ID){s.len}) > HDR_LEN_CALLID)|| ($(hdr(Contact){s.len}) > HDR_LEN_DEFAULT))
        {
            xlog("L_ERR","CI=$ci - R37 - Msg dropped ($rm $pr) - Header length greater than defined size, from source ip = $var(C_si_var_gs)\n");
            drop;
            $var(C_sanity_fail_lb)=1;
        }
        else if($(fU{s.len}) > URI_USER_LEN || $(tU{s.len}) > URI_USER_LEN || $(rU{s.len}) > URI_USER_LEN || $(sel(contact.uri.user){s.len}) > HDR_LEN_USERNAME)
        {
            xlog("L_ERR","CI=$ci - R37 - Msg dropped ($rm $pr) - URI user length greater than defined size, from source ip = $var(C_si_var_gs)\n");
            drop;
            $var(C_sanity_fail_lb)=1;
        }
        else if($(fd{s.len}) > URI_HOST_LEN || $(td{s.len}) > URI_HOST_LEN || $(rd{s.len}) > URI_HOST_LEN || $(sel(contact.uri.host){s.len}) > HDR_LEN_USERNAME)
        {
            xlog("L_ERR","CI=$ci - R37 - Msg dropped ($rm $pr) - URI host length greater than defined size, from source ip = $var(C_si_var_gs)\n");
            drop;
            $var(C_sanity_fail_lb)=1;
        }
        else if((($(hdr(From){s.len}) - $(fu{s.len})) > HDR_LEN_PARAMS) || (($(hdr(To){s.len}) - $(tu{s.len})) > HDR_LEN_PARAMS))
        {
            xlog("L_ERR","CI=$ci - R37 - Msg dropped ($rm $pr) - Header Param length greater than defined size(HDR_LEN_PARAMS), from source ip = $var(C_si_var_gs)\n");
            drop;
            $var(C_sanity_fail_lb)=1;
        }
        else if(($(rU{s.len}) > HDR_LEN_USERNAME) || ($(tU{s.len})> HDR_LEN_USERNAME) || ($(fU{s.len}) > HDR_LEN_USERNAME) || $(sel(contact.uri){uri.user}{s.len}) > HDR_LEN_USERNAME )
        {
            xlog("L_ERR","CI=$ci - R37 - Msg dropped ($rm $pr) - Header UserName length greater than defined size(HDR_LEN_USERNAME), from source ip = $var(C_si_var_gs)\n");
            drop;
            $var(C_sanity_fail_lb)=1;
        }
        else if(($sel(from.uri.port) != $null && $(sel(from.uri.port){s.len}) > HDR_MAX_PORTLEN || $(sel(from.uri.port){s.int})  > HDR_MAX_PORTRANGE) ||
           ($sel(to.uri.port)   != $null && $(sel(to.uri.port){s.len})   > HDR_MAX_PORTLEN || $(sel(to.uri.port){s.int})    > HDR_MAX_PORTRANGE) ||
           ($sel(ruri.port)     != $null  && $(sel(ruri.port){s.len})     > HDR_MAX_PORTLEN || $(sel(ruri.port){s.int})      > HDR_MAX_PORTRANGE) ||
           ($sel(contact.uri.port) != $null && $(sel(contact.uri.port){s.len}) > HDR_MAX_PORTLEN || $(sel(contact.uri.port){s.int}) > HDR_MAX_PORTRANGE) )
        {
            xlog("L_ERR","CI=$ci - R37 - Msg dropped ($rm $pr) - Header URI Port Range greater than the (HDR_MAX_PORTRANGE) from source ip = $var(C_si_var_gs) \n");
            drop;
            $var(C_sanity_fail_lb)=1;
        }
        else if ((($ru =~ "^(tels?):") && !($ru =~ "((^(tels?):[\+0-9]+)$)|((^(tels?):[\+0-9]+);)")) ||
                 (($fu =~ "^(tels?):") && !($fu =~ "((^(tels?):[\+0-9]+)$)|((^(tels?):[\+0-9]+);)")) ||
                 (($tu =~ "^(tels?):") && !($tu =~ "((^(tels?):[\+0-9]+)$)|((^(tels?):[\+0-9]+);)")) )
        {
            xlog("L_ERR","CI=$ci - R37 - Msg dropped ($rm $pr) - 416 Unsupported tels URI Scheme. si:sp=$si:$sp\n");
            drop;
            $var(C_sanity_fail_lb)=1;
        }
        # URI Validation in tu and fu for sip:(username@)(hostname/IPV4/IPV6)(:port).
        # username, port can be optional
        else if(!($ru =~ "urn:service:(sos|counseling).*"))
        {
            if (!($ru =~ "^((sips?)|(tels?)):") ||
                (($fu =~ "^sips?:") && !pcre_match("$fu","(?i)(sips?):((([[0-9a-zA-Z\-\&\=\+\,\;\?\-\_\.\!\~\*\/\'\)\(#\$$]|%[0-9a-fA-F][0-9a-fA-F])+@)?((\[(:?[:0-9A-Fa-f]+)\])|([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])(\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9]))*)(:[0-9]{4,5})?(;?(.*))?)$$")) ||
                (($tu =~ "^sips?:") && !pcre_match("$tu","(?i)(sips?):((([[0-9a-zA-Z\-\&\=\+\,\;\?\-\_\.\!\~\*\/\'\)\(#\$$]|%[0-9a-fA-F][0-9a-fA-F])+@)?((\[(:?[:0-9A-Fa-f]+)\])|([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])(\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9]))*)(:[0-9]{4,5})?(;?(.*))?)$$")))
            {
                xlog("L_ERR","CI=$ci - R37 - Msg dropped ($rm $pr) - 416 Unsupported URI Scheme user@host:port fu=$fu tu=$tu si:sp=$si:$sp\n");
                drop;
                $var(C_sanity_fail_lb)=1;
            }
        }

        # Validate Defined URI parameters like transport, ttl, method, maddr and user
        # validate FROM uri params
        else if($(sel(f.uri.params){s.len})  && ((pcre_match("$fu", "(?i)^.*transport.*" ) && !pcre_match("$fu", "(?i)^.*;transport=(tcp|tls|udp);?.*$$"))
            || (pcre_match("$fu", "(?i)^.*;user=.*")   && !pcre_match("$fu","(?i)^.*;user=([a-zA-Z0-9\-\.\!\%\*\_\+\`\'\~]+);?.*$$"))
            || (pcre_match("$fu", "(?i)^.*;ttl=.*")    && !pcre_match("$fu","(?i)^.*;ttl=[0-9]{0,3};?.*$$"))
            || (pcre_match("$fu", "(?i)^.*;maddr=.*")  && !pcre_match("$fu","(?i)^.*;maddr=[a-z0-9\.\-\]\[\:]+;?.*$$"))
            || (pcre_match("$fu", "(?i)^.*;method=.*") && !pcre_match("$fu","(?i)^.*;method=[a-z]+(;.*)?$$")) ))
        {
            xlog("L_ERR","CI=$ci - Msg dropped ($rm $pr) - R37 - 416 Unsupported From URI Params $fu - si:sp=$si:$sp\n");
            drop;
            $var(C_sanity_fail_lb)=1;
        }
        # validate TO uri params
        else if($(sel(t.uri.params){s.len})  && ((pcre_match("$tu", "(?i)^.*transport.*" ) && !pcre_match("$tu", "(?i)^.*;transport=(tcp|tls|udp);?.*$$"))
            || (pcre_match("$tu", "(?i)^.*;user=.*")   && !pcre_match("$tu","(?i)^.*;user=([a-zA-Z0-9\-\.\!\%\*\_\+\`\'\~]+);?.*$$"))
            || (pcre_match("$tu", "(?i)^.*;ttl=.*")    && !pcre_match("$tu","(?i)^.*;ttl=[0-9]{0,3};?.*$$"))
            || (pcre_match("$tu", "(?i)^.*;maddr=.*")  && !pcre_match("$tu","(?i)^.*;maddr=[a-z0-9\.\-\]\[\:]+;?.*$$"))
            || (pcre_match("$tu", "(?i)^.*;method=.*") && !pcre_match("$tu","(?i)^.*;method=[a-z]+(;.*)?$$")) ))
        {
            xlog("L_ERR","CI=$ci - R37 - Msg dropped ($rm $pr) - 416 Unsupported TO URI Params $tu - si:sp=$si:$sp\n");
            drop;
            $var(C_sanity_fail_lb)=1;
        }
        # validate RU uri params
        else if($(sel(ruri.params){s.len})  && ((pcre_match("$tu", "(?i)^.*transport.*" ) && !pcre_match("$tu", "(?i)^.*;transport=(tcp|tls|udp);?.*$$"))
            || (pcre_match("$ru", "(?i)^.*;user=.*")   && !pcre_match("$ru","(?i)^.*;user=([a-zA-Z0-9\-\.\!\%\*\_\+\`\'\~]+);?.*$$"))
            || (pcre_match("$ru", "(?i)^.*;ttl=.*")    && !pcre_match("$ru","(?i)^.*;ttl=[0-9]{0,3};?.*$$"))
            || (pcre_match("$ru", "(?i)^.*;maddr=.*")  && !pcre_match("$ru","(?i)^.*;maddr=[a-z0-9\.\-\]\[\:]+;?.*$$"))
            || (pcre_match("$ru", "(?i)^.*;method=.*") && !pcre_match("$ru","(?i)^.*;method=[a-z]+(;.*)?$$")) ))
        {
            xlog("L_ERR","CI=$ci - R37 - Msg dropped ($rm $pr) - 416 Unsupported RURI Params $ru - si:sp=$si:$sp\n");
            drop;
            $var(C_sanity_fail_lb)=1;
        }
        else if (!($ru =~ "urn:service:(sos|counseling).*")){
            if(!($fu =~ "^(tels?):") && ((search("From:.*[<>].*")) && !search("From:[^<>]*([\"].*[\"])?[^<>]*<sips?:[^<>]*>[^<>]*(\r\n)") )
            || (!($tu =~ "^(tels?):") && (search("To:.*[<>].*"))   && !search("To:[^<>]*([\"].*[\"])?[^<>]*<sips?:[^<>]*>[^<>]*(\r\n)")) )
            {
                xlog("L_ERR","CI=$ci - R37 - Msg dropped ($rm $pr) - Invalid AQUOT(< >) in From/To Header from source ip = $var(C_si_var_gs)\n");
        drop;
        $var(C_sanity_fail_lb)=1;
            }
    }
        else if ( (($ru =~ "^(tels?):") && !($ru =~ "((^(tels?):[\+0-9]+)$)|((^(tels?):[\+0-9]+);)")) ||
                 (($fu =~ "^(tels?):") && !($fu =~ "((^(tels?):[\+0-9]+)$)|((^(tels?):[\+0-9]+);)")) ||
                 (($tu =~ "^(tels?):") && !($tu =~ "((^(tels?):[\+0-9]+)$)|((^(tels?):[\+0-9]+);)")) )
        {
            xlog("L_ERR","CI=$ci - R37 - Msg dropped ($rm $pr) - 416 Unsupported tels URI Scheme. si:sp=$si:$sp\n");
            drop;
            $var(C_sanity_fail_lb)=1;
        }

        #Checking for CRLF in the format SIP Message<CR or LF><CRLF>BODY.
        else if ($ci == $null || !search("(.*)[\r\n](\r\n)(.*)"))
        {
            xlog("L_ERR", "CI=$ci - R37 -  Msg dropped ($rm $pr) - Dropping $rm from $var(C_si_var_gs):$sp contact:$ct cseq:$cs cl:$cl No CRLF at the End of Message\n");
            drop;
            $var(C_sanity_fail_lb)=1;
        }
        #Checking CallID as per RFC 3261, section 25.1
        else if (pcre_match("$ci", "[^a-zA-Z0-9@\-\.!%\*_\+`'~\(\)<>:\"/\\\[\]\?{}]"))
        {
            xlog("L_ERR", "CI=$ci - R37 - Msg dropped ($rm $pr) - Dropping $rm from $var(C_si_var_gs): Invalid CallID Format\n");
            drop;
            $var(C_sanity_fail_lb)=1;
        }
        else if (($bs != $cl) || ($cl && !is_present_hf("Content-Type")))# bodysize and content length is not matching or content type missing
        {
            xlog("L_ERR", "CI=$ci - R37 - Msg dropped ($rm $pr) - Dropping $rm from $var(C_si_var_gs):$sp contact:$ct cseq:$cs bodysize($bs)!=content-length($cl) contentType:$cT \n");
            drop;
            $var(C_sanity_fail_lb)=1;
        }
        else if($ft == $null) # check for from tag(mandatory parameter)
        {
            if ($var(C_sip_compliance_gb) != 1)
            {
                xlog("L_ERR","CI=$ci - R37 - Msg dropped ($rm $pr) - Missing from tag from source ip = $var(C_si_var_gs)\n");
                drop;
                $var(C_sanity_fail_lb)=1;
            }
            else
            {
                xlog("L_ERR","CI=$ci - R37 - Not dropping the message (Missing from tag from source ip) due to SIP compliance.\n");
            }
        }
        else  if((search("From:.*tag[ ]*?=.*;tag[ ]*?=.*(\r\n)")) || (search("To:.*tag=.*;tag=.*(\r\n)")))
        {
            xlog("L_ERR","CI=$ci - R37 - Msg dropped ($rm $pr) - Invalid from/to tags from source ip = $var(C_si_var_gs)\n");
            drop;
            $var(C_sanity_fail_lb)=1;
        }
        else if(pcre_match("$fd", ";?&=+,") || pcre_match("$td", ";?&=+,") || pcre_match("$rd", ";?&=+,"))
        {
            xlog("L_ERR", "CI=$ci - R37 - Msg dropped ($rm $pr) - Reserved char on domain. si:sp=$si:$sp\n");
            drop;
            $var(C_sanity_fail_lb)=1;
        }
        else  if((search("Contact:.*q[ ]*?=.*;q[ ]*?=.*(\r\n)")))
        {
            xlog("L_ERR","CI=$ci - R37 - Msg dropped ($rm $pr) - Multiple q params in Contact from source ip = $var(C_si_var_gs)\n");
            drop;
            $var(C_sanity_fail_lb)=1;
        }
        else if(is_present_hf("Contact"))
        {
            if(pcre_match("$sel(contact.uri.host)", ";?&=+,"))
            {
                xlog("L_ERR", "CI=$ci - R37 - Msg dropped ($rm $pr) - Reserved char on contact domain. si:sp=$si:$sp\n");
                drop;
                $var(C_sanity_fail_lb)=1;
            }
        }
    }
    else #from LAN
    {
        if(is_method("REGISTER"))
        {
            $var(S_register_from_srv_lb) = 0;
            if ($var(S_register_from_srv_lb) == 1)
            {
                # Request is coming in from LAN, but the REGISTER would have from domain pointing to SSP, force flag 10 here
                setflag(10);
                setflag(12);
                xlog("L_INFO", "CI=$ci - R37 -  Registration from OSV si=$var(C_si_var_gs), RU=$ru Ri=$var(C_ri_var_gs), fd=$fd ct=$ct\n");
            }
            else
            {
                # trying to register from LAN side while in CSBC mode-> not allowed
                xlog("L_ERR", "CI=$ci - R37 -  Registration failed unable to determine source Ri=$var(C_ri_var_gs), avp(C_wan_ip_gs)=$avp(C_wan_ip_gs)\n");
                append_to_reply("Warning: 399 $var(C_ri_var_gs) - R37 - Registration failed unable to determine source.\r\n");
                sl_send_reply("403", "Forbidden");
                $var(C_sanity_fail_lb)=1;
            }
        }
    }
    if(!$var(C_sanity_fail_lb))
    {
        if(msg:len > 25000)
        {
            xlog("L_ERR", "CI=$ci - R37 - SIP 513 - Message Overflow - M=$rm RURI=$ru F=$fu T=$tu IP=$var(C_si_var_gs) CI=$ci\n");
            append_to_reply("Warning: 399 $var(C_ri_var_gs) - R37 - Sanity check failed: msg too long.\r\n");
            sl_send_reply("513", "Message Overflow");
            $var(C_sanity_fail_lb)=1;
        }

        # long contact header will not fit in avps if > 3072
        else if((is_method("REGISTER")) && ($(hdr(Contact){s.escape.common}{s.len}) > 3072))
        {
            xlog("L_ERR", "R0 - SIP 513 - Message Overflow - M=$rm RURI=$ru F=$fu T=$tu IP=$var(C_si_var_gs) CI=$ci CT=$ct\n");
            append_to_reply("Warning: 399 $var(C_ri_var_gs) - R37 - Sanity check failed: contact too long.\r\n");
            sl_send_reply("513", "Message Overflow");
            $var(C_sanity_fail_lb)=1;
        }

        else if( !is_method("OPTIONS") && !mf_process_maxfwd_header("70"))
        {
            xlog("L_ERR", "CI=$ci - R37 - SIP 483 - Too many hops - M=$rm RURI=$ru F=$fu T=$tu IP=$var(C_si_var_gs) CI=$ci\n");
            append_to_reply("Warning: 399 $var(C_ri_var_gs) - R37 - Sanity check failed: too many hops.\r\n");
            sl_send_reply("483", "Too Many Hops ");
            $var(C_sanity_fail_lb)=1;
        }
        else if (is_present_hf("Require") && search("Require:.*sdp-anat.*(\r\n)"))
        {
            xlog("L_ERR", "CI=$ci - R37 - SIP 420 - Bad Extension - Sdp-anat is not supported in Require field\n");

            append_to_reply("Warning: 399 $var(C_ri_var_gs) - R37 - Sanity check failed: sdp-anat is not supported in Require field.\r\n");
            sl_send_reply("420", "Bad Extension");
            $var(C_sanity_fail_lb)=1;
        }
    }
    if($var(C_sanity_fail_lb) == 1)
    {
        if (is_gflag("6"))
        {
            xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
            bm_log_timer("route-37");
        }
        exit;
    }
}


########################################################################
# route SSP_REQUEST_COMMON_ROUTE:
# input pseudo-variables: $avp(B_cdr_ref_by_param_gs), $avp(B_extra_flags_gi), $avp(C_ssp_auth_in_div_gs), $avp(C_ssp_auth_in_fromh_gs), $avp(C_ssp_auth_in_pai_gs),
#                         $avp(C_ssp_business_id_dn_gs), $avp(C_ssp_business_id_dn_req_gs), $avp(C_ssp_default_home_dn_gs), $avp(C_ssp_default_home_dn_mand_gs),
#                         $avp(C_ssp_flags_gi), $avp(C_ssp_fqdn_ruri_gs), $avp(C_ssp_fqdn_toh_gs),
#                         $avp(C_ssp_from_user_gs), $avp(C_ssp_gw_profile_gs), $avp(C_ssp_insec_ref_by_gs), $avp(C_ssp_insert_anonymous_cid_gs), $avp(C_ssp_name_gs),
#                         $avp(C_ssp_not_snd_div_gs), $avp(C_ssp_ppi_rather_pai_gs), $avp(C_ssp_privacy_support_gs), $avp(C_ssp_refer_to_ssp_gs), $avp(C_ssp_reg_status_gs),
#                         $avp(C_ssp_restr_num_in_fromh_gs), $avp(C_ssp_service_addr_gs), $avp(C_ssp_tel_sub_format_gs), $avp(C_ssp_type_gi), $avp(C_ssp_use_sip_service_address_gs),
#                         $avp(C_ssp_use_to_dn_gs), $avp(C_wan_ip_gs), $avp(C_ssp_div_user_gs), $avp(C_ssp_pai_user_gs), $avp(C_ssp_ppi_user_gs),
#                         $var(B_append_msg_gs), $var(B_cdr_performed_gb), $var(B_cdr_replaces_params_gs), $var(B_cdr_trk_id_gs), $var(B_reason_msg_gs),
#                         $var(B_return_to_route_gb), $var(C_lanip_4_6_gs), $var(C_si_var_gs), $var(C_sp_var_gi), $var(C_is_fssp_gb),
#                         $var(C_is_tssp_gb), $var(C_ssp_is_tls_gb), $var(C_ssp_tls_config_gb), $var(C_ssp_tls_signalling_gb), $var(C_ssp_tls_sips_scheme_gb),
#                         $var(C_ssp_trans_eq_tls_gs)
# output pseudo-variables: $avp(C_ssp_auth_in_div_gs), $avp(C_ssp_auth_in_fromh_gs), $avp(C_ssp_auth_in_pai_gs), $avp(C_ssp_business_id_dn_gs), $avp(C_ssp_business_id_dn_req_gs),
#                          $avp(C_ssp_da_supported_gs), $avp(C_ssp_default_home_dn_gs), $avp(C_ssp_default_home_dn_mand_gs),
#                          $avp(C_ssp_div_user_gs), $avp(C_ssp_flags_gi), $avp(C_ssp_fqdn_ruri_gs), $avp(C_ssp_fqdn_toh_gs),
#                          $avp(C_ssp_from_user_gs), $avp(C_ssp_insec_ref_by_gs), $avp(C_ssp_insert_anonymous_cid_gs), $avp(C_ssp_name_gs),
#                          $avp(C_ssp_not_snd_div_gs), $avp(C_ssp_pai_user_gs), $avp(C_ssp_ppi_rather_pai_gs), $avp(C_ssp_ppi_user_gs), $avp(C_ssp_privacy_support_gs),
#                          $avp(C_ssp_refer_to_ssp_gs), $avp(C_ssp_reg_status_gs), $avp(C_ssp_restr_num_in_fromh_gs), $avp(C_ssp_service_addr_gs), $avp(C_ssp_tel_sub_format_gs),
#                          $avp(C_ssp_type_gi), $avp(C_ssp_use_sip_service_address_gs), $avp(C_ssp_use_to_dn_gs),
#                          $avp(C_ssp_div_user_gs), $avp(C_ssp_pai_user_gs), $avp(C_ssp_ppi_user_gs), $var(B_append_msg_gs), $var(B_cdr_performed_gb),
#                          $var(B_cdr_trk_id_gs), $var(B_reason_msg_gs), $var(B_return_code_gs), $var(B_return_to_route_gb), $var(C_ssp_sip_no_suffix_gb),
#                          $var(C_ssp_sip_o_tls_set_gb), $var(C_ssp_tls_config_gb), $var(C_ssp_tls_signalling_gb), $var(C_ssp_tls_sips_scheme_gb), $var(C_ssp_trans_eq_tls_gs)
# input headers: Call-Id, Contact, Diversion, From, P-Asserted-Identity,
#                P-Preferred-Identity, To
# input flags: 1, 15, 25, g6, e15
# changed flags:
########################################################################
route[SSP_REQUEST_COMMON_ROUTE]
{

    xlog("L_INFO", "CI=$ci - R-A440 - Entry Profile: $avp(C_ssp_gw_profile_gs) rd=$rd, Ct=$ct - flags=$mF - db_load_only=$var(S_ssp_db_load_only_gb) - avp(C_ssp_flags_gi)=$avp(C_ssp_flags_gi)\n");
    if (is_gflag("6"))
       bm_start_timer("route-34");

    if(isflagset(1))
    {
        if (is_present_hf("P-Preferred-Identity") && !is_avp_set("$avp(C_ssp_ppi_user_gs)"))
        {
            $avp(C_ssp_ppi_user_gs) = $pU;
            $avp(B_hdr_ppi_user_gs) = $avp(C_ssp_ppi_user_gs);
        }

        if (is_present_hf("Diversion") && !is_avp_set("$avp(C_ssp_div_user_gs)"))
            $avp(C_ssp_div_user_gs) = $(hdr(Diversion)[0]{nameaddr.uri}{uri.user}); # gets only the user from the first uri in diversion header

        if(is_present_hf("P-Asserted-Identity"))
        {
            if (!is_avp_set("$avp(C_ssp_pai_user_gs)"))
                $avp(C_ssp_pai_user_gs) = $(ai{uri.user});

            # This should be like CSBC once we implement the FRN4254 for OSB.
            $var(C_new_pai_hdr_gs) = $(hdr(P-Asserted-Identity)[*]);



        }


    }




    if(avp_check("$avp(C_ssp_flags_gi)","and/i:512/g") )
        $avp(C_ssp_hDn_pai_gb)   = 1;

    if(avp_check("$avp(C_ssp_flags_gi)","and/i:1024/g") )
        $avp(C_ssp_hDn_ppi_gb)   = 1;

    if(is_present_hf("P-Asserted-Identity")  && $avp(C_ssp_hDn_pai_gb)  == 1)
    {
        ## PAI is present && the C_ssp_hDn_ppi_gb is set, only the PAI should be converted
        $avp(C_ssp_pai_user_gs) = $avp(C_ssp_default_home_dn_gs);
        xlog("L_INFO", "CI=$ci - R-A440 - PAI is present && the C_ssp_hDn_pai_gb is set, avp(C_ssp_pai_user_gs)=$avp(C_ssp_pai_user_gs) \n");
    }
    if(is_present_hf("P-Preferred-Identity") && $avp(C_ssp_hDn_ppi_gb)  == 1)
    {
        ## PAI is present && the C_ssp_hDn_ppi_gb is set, only the PPI should be converted
        $avp(C_ssp_ppi_user_gs) = $avp(C_ssp_default_home_dn_gs);
        xlog("L_INFO", "CI=$ci - R-A440 - PPI is present && the C_ssp_hDn_ppi_gb is set, avp(C_ssp_ppi_user_gs)=$avp(C_ssp_ppi_user_gs) \n");
    }

    if(avp_check("$avp(C_ssp_flags_gi)","and/i:2048/g"))
       $var(C_ssp_trans_eq_tls_gs)   = 1;
    else if(avp_check("$avp(C_ssp_flags_gi)","and/i:4096/g"))
       $var(C_ssp_tls_sips_scheme_gb)= 1;
    else if(avp_check("$avp(C_ssp_flags_gi)","and/i:8192/g"))
       $var(C_ssp_tls_config_gb)     = 1;

    if(avp_check("$avp(C_ssp_flags_gi)","and/i:16384/g"))
        $var(C_ssp_use_tel_gb)       = 1;
    if(avp_check("$avp(C_ssp_flags_gi)","and/i:32768/g"))
        $var(C_ssp_user_eq_phone_gb)  = 1;

    if($avp(C_ssp_ua_to_gi) > 0)
        $var(C_ssp_add_ua_gb) = 1;

    if($avp(C_ssp_ua_to_gi) == 2)
        $var(C_ssp_subst_ua_gb) = 1;

    if(!$var(C_ssp_tls_signalling_gb) && $var(C_ssp_is_tls_gb))
    {

       xlog("L_INFO", "CI=$ci - R-A440 - sp over tls config trans_eq_tls=$var(C_ssp_trans_eq_tls_gs) sips_scheme=$var(C_ssp_tls_sips_scheme_gb) tls_config=$var(C_ssp_tls_config_gb)\n");
       if($var(C_ssp_tls_sips_scheme_gb))
       {
           $var(C_ssp_sip_o_tls_set_gb) = 1; # Remove transport=tls
           $var(C_ssp_sip_no_suffix_gb) = 0; # Don't use sip, but sips
       }
       else if($var(C_ssp_tls_config_gb))
       {
           $var(C_ssp_sip_o_tls_set_gb) = 1; # Remove transport=tls
           $var(C_ssp_sip_no_suffix_gb) = 1; # Don't use sips
       }
       else if($var(C_ssp_trans_eq_tls_gs))
       {
           $var(C_ssp_sip_no_suffix_gb) = 1;  # Don't use sips
       }
       $var(C_ssp_tls_signalling_gb) = 1;
       xlog("L_INFO", "CI=$ci -R-A440 - $ru ssp sip_o_tls set\n");
    }

    # Request to SSP
    if( isflagset(1) )
    {

###### Removing Silence Suppression ---------------------------------------------------------------------------------

        if ( avp_check("$avp(C_ssp_flags_gi)","and/i:524288/g") &&
             $hdr(Content-Type) == "application/sdp" ||
             ($hdr(Content-Type) == "multipart/mixed" && search_body("Content-Type:.*application/sdp")) )
        {
            xlog("L_INFO", "CI=$ci -R-A440 - Removing silence suppression from SDP on REQUEST because B_ssp_disable_silence_sup_gb flag is set.\n");
            if (!is_avp_set("$avp(C_m_body_gs)"))
                $avp(C_m_body_gs) = $rb;

            avp_subst("$avp(C_m_body_gs)", "/a=.*silenceSupp.*\r\n//ig");

                subst_body('/v=.*$/$avp(C_m_body_gs)/igs');

        }


###### User Agent Handling  ------------------------------------------------------------------------------------------

        if ( $var(C_ssp_subst_ua_gb) && $var(C_hdr_ua_gi) == 1)
        {
            if($avp(C_ssp_ua_gs)!=$null){
                $var(C_new_ua_hdr_gs) = "";
                $var(C_new_ua_hdr_gs) = $avp(C_ssp_ua_gs);
                xlog("L_INFO", "CI=$ci -R-A440 - SSP UA Replaced - ua=$var(C_new_ua_hdr_gs)\n");
            }
            else
                xlog("L_INFO", "CI=$ci -R-A440 - not able to REPLACE ua because C_ssp_ua_gs=$avp(C_ssp_ua_gs)\n");

        }
        else if ( $var(C_ssp_add_ua_gb) && $var(C_hdr_ua_gi) == 0)
        {
            if($avp(C_ssp_ua_gs)!=$null){
                $var(C_new_ua_hdr_gs) = "";
                $var(C_new_ua_hdr_gs) = $avp(C_ssp_ua_gs);
                xlog("L_INFO", "CI=$ci -R-A440 - SSP UA Add - ua=$var(C_new_ua_hdr_gs)\n");
            }
            else
                xlog("L_INFO", "CI=$ci -R-A440 - not able to ADD ua because C_ssp_ua_gs=$avp(C_ssp_ua_gs)\n");
        }
        else
        {
            #$var(C_new_ua_hdr_gs) = "";
            xlog("L_INFO", "CI=$ci -R-A440 -  SSP UA PassThru - ua=$var(C_new_ua_hdr_gs)\n");
        }

    }

    if (is_gflag("6"))
    {
        xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
        bm_log_timer("route-34");
    }
}


########################################################################
# route SSP_RESPONSE_COMMON_ROUTE:
# input pseudo-variables: $avp(C_ssp_flags_gi), $avp(C_ssp_gw_profile_gs), $avp(C_ssp_not_snd_div_gs), $avp(C_ssp_ppi_rather_pai_gs), $avp(C_ssp_privacy_support_gs),
#                         $avp(C_ssp_pai_user_gs), $avp(C_ssp_ppi_user_gs)
# output pseudo-variables: $avp(C_ssp_div_user_gs), $avp(C_ssp_pai_user_gs), $avp(C_ssp_ppi_user_gs), $var(C_ssp_sip_o_tls_set_gb), $var(S_ssp_tls_config_gb),
#                          $var(C_ssp_tls_sips_scheme_gb), $var(C_ssp_trans_eq_tls_gs)
# input headers: Diversion, P-Asserted-Identity, P-Preferred-Identity, To
# input flags: 1, 2
# changed flags:
########################################################################
route[SSP_RESPONSE_COMMON_ROUTE]
{
    xlog("L_INFO", "CI=$ci - R-A443 Entry Profile: $avp(C_ssp_gw_profile_gs) - Flags: $mF sp_flags=$avp(C_ssp_flags_gi)\n");

    if (is_gflag("6"))
        bm_start_timer("route-A443");

     if(isflagset(2))
     {

###### Removing Silence Suppression ---------------------------------------------------------------------------------

        if ( avp_check("$avp(C_ssp_flags_gi)","and/i:524288/g") &&
             $hdr(Content-Type) == "application/sdp" ||
             ($hdr(Content-Type) == "multipart/mixed" && search_body("Content-Type:.*application/sdp")) )
        {
            xlog("L_INFO", "CI=$ci -R-A440 - Removing silence suppression from SDP on REQUEST because B_ssp_disable_silence_sup_gb flag is set.\n");
            if (!is_avp_set("$avp(C_m_body_gs)"))
                $avp(C_m_body_gs) = $rb;

            avp_subst("$avp(C_m_body_gs)", "/a=.*silenceSupp.*\r\n//ig");
            subst_body('/v=.*$/$avp(C_m_body_gs)/igs');
        }


###### User Agent Handling  ------------------------------------------------------------------------------------------

        if ( $var(C_ssp_subst_ua_gb) && $var(C_hdr_ua_gi) == 1)
        {
            if($avp(C_ssp_ua_gs)!=$null){
                $var(C_new_ua_hdr_gs) = "";
                $var(C_new_ua_hdr_gs) = $avp(C_ssp_ua_gs);
                xlog("L_INFO", "CI=$ci -R-A440 - SSP UA Replaced - ua=$var(C_new_ua_hdr_gs)\n");
            }
            else
                xlog("L_INFO", "CI=$ci -R-A440 - not able to replace ua because C_ssp_ua_gs=$avp(C_ssp_ua_gs)\n");

        }
        else if ( $var(C_ssp_add_ua_gb) && $var(C_hdr_ua_gi) == 0)
        {
            if($avp(C_ssp_ua_gs)!=$null){
                $var(C_new_ua_hdr_gs) = "";
                $var(C_new_ua_hdr_gs) = $avp(C_ssp_ua_gs);
                xlog("L_INFO", "CI=$ci -R-A440 - SSP UA Add - ua=$var(C_new_ua_hdr_gs)\n");
            }
            else
                xlog("L_INFO", "CI=$ci -R-A440 - not able to ADD ua because C_ssp_ua_gs=$avp(C_ssp_ua_gs)\n");
        }
        else
        {
            #$var(C_new_ua_hdr_gs) = "";
            xlog("L_INFO", "CI=$ci -R-A440 - SSP UA PassThru - ua=$var(C_new_ua_hdr_gs)\n");
        }

     }


     if (is_gflag("6"))
     {
         xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
         bm_log_timer("route-A443");
     }

}

########################################################################
# route HDR_INIT_ROUTE: Headers initialization
# input pseudo-variables:
# output pseudo-variables: $avp(C_new_append_headers_list_gs), $avp(C_new_headers_list_gs), $avp(C_remove_headers_list_gs), $var(C_hdr_rr_set_gb), $var(C_new_accept_hdr_gs),
#                          $var(C_new_alert_info_hdr_gs), $var(C_new_content_type_hdr_gs), $var(C_new_cseq_hdr_gs), $var(C_new_ct_hdr_gs), $var(C_new_div_hdr_gs),
#                          $var(C_new_expires_hdr_gs), $var(C_new_fromh_hdr_gs), $var(C_new_pai_hdr_gs), $var(C_new_path_hdr_gs), $var(C_new_ppi_hdr_gs),
#                          $var(C_new_privacy_hdr_gs), $var(C_new_refby_hdr_gs), $var(C_new_refto_hdr_gs), $var(C_new_replaces_hdr_gs), $var(C_new_retry_after_hdr_gs),
#                          $var(C_new_route_hdr_gs), $var(C_new_rr_hdr_gs), $var(C_new_rr_params_list_gs), $var(C_new_toh_hdr_gs), $var(C_new_ua_hdr_gs),
#                          $var(C_new_via_hdr_gs), $var(C_new_warning_hdr_gs), $var(C_rr_preset_hdr_gs)
# input headers: Accept, Alert-Info, Contact, Content-Type, CSeq,
#                Diversion, Expires, From, P-Asserted-Identity, P-Preferred-Identity,
#                Path, Privacy, Record-Route, Refer-To, Referred-By,
#                Replaces, Retry-After, Route, To, User-Agent,
#                Via, Warning
# input flags:
# changed flags:
########################################################################
route[HDR_INIT_ROUTE]
{

    $var(C_hdr_ua_gi) = 0;

    # User-Agent header
    if ($hdr(User-Agent) != $null)
    {
        $var(C_new_ua_hdr_gs) = $hdr(User-Agent);
        $var(C_hdr_ua_gi) = 1;
    }
    else
        $var(C_new_ua_hdr_gs) = "";

}
########################################################################
# route SIP_HEADERS_CHANGE_ROUTE: Change all headers
# input pseudo-variables: $avp(C_new_append_headers_list_gs), $avp(C_new_headers_list_gs), $avp(C_remove_headers_list_gs), $var(C_hdr_rr_set_gb), $var(C_new_accept_hdr_gs),
#                         $var(C_new_alert_info_hdr_gs), $var(C_new_content_type_hdr_gs), $var(C_new_cseq_hdr_gs), $var(C_new_ct_hdr_gs), $var(C_new_div_hdr_gs),
#                         $var(C_new_expires_hdr_gs), $var(C_new_fromh_hdr_gs), $var(C_new_pai_hdr_gs), $var(C_new_path_hdr_gs), $var(C_new_ppi_hdr_gs),
#                         $var(C_new_privacy_hdr_gs), $var(C_new_refby_hdr_gs), $var(C_new_refto_hdr_gs), $var(C_new_replaces_hdr_gs), $var(C_new_retry_after_hdr_gs),
#                         $var(C_new_route_hdr_gs), $var(C_new_rr_hdr_gs), $var(C_new_rr_params_list_gs), $var(C_new_toh_hdr_gs), $var(C_new_ua_hdr_gs),
#                         $var(C_new_via_hdr_gs), $var(C_new_warning_hdr_gs), $var(C_rr_preset_hdr_gs)
# output pseudo-variables: $avp(C_new_append_headers_list_gs), $avp(C_new_headers_list_gs)
# input headers: Accept, Alert-Info, Contact, Content-Type, CSeq,
#                Diversion, Expires, From, P-Asserted-Identity, P-Preferred-Identity,
#                Path, Privacy, Record-Route, Refer-To, Referred-By,
#                Replaces, Retry-After, Route, To, User-Agent,
#                Via, Warning
# input flags:
# changed flags:
########################################################################
route[SIP_HEADERS_CHANGE_ROUTE]
{
    if (is_gflag("6"))
         bm_start_timer("route-R-A910");

    if(!$var(C_ssm_msg_gb))
    {
    xlog("L_INFO", "CI=$ci -R-A910 - C_ssm_hdr_map_gi=$var(C_ssm_hdr_map_gi) C_ssm_hdr_ep_map_gi=$var(C_ssm_hdr_ep_map_gi),var(C_ssm_hdr_2ND_map_gi)=$var(C_ssm_hdr_2ND_map_gi)\n");
    if($var(C_ssm_hdr_map_gi))
       insert_hf("X-ssm-hdr-map: $var(C_ssm_hdr_map_gi)\r\n", "Call-ID");
    if($var(C_ssm_hdr_ep_map_gi))
       insert_hf("X-ssm-ep-hdr-map: $var(C_ssm_hdr_ep_map_gi)\r\n", "Call-ID");
    if($var(C_ssm_hdr_2ND_map_gi))
       insert_hf("X-ssm-2nd-hdr-map: $var(C_ssm_hdr_2ND_map_gi)\r\n", "Call-ID");
    if (not_empty("$var(C_ssm_call_side_data_gs)"))
        insert_hf( "X-SSM-Call-Side-Data: $var(C_ssm_call_side_data_gs)\r\n", "Call-ID");
    }

    # User-Agent header
    if (($var(C_hdr_ua_gi)  && $hdr(User-Agent) != $var(C_new_ua_hdr_gs)) || ($var(C_hdr_ua_gi) == 0 && $(var(C_new_ua_hdr_gs){s.len})))
    {
        if ($var(C_new_ua_hdr_gs)!=$null && $var(C_new_ua_hdr_gs) != 0){
            remove_hf("User-Agent");  # Do nothing if header is not available
            insert_hf("User-Agent: $var(C_new_ua_hdr_gs)\r\n", "Call-ID");
            xlog("L_INFO", "R-A910 - User-Agent hdr changed: $var(C_new_ua_hdr_gs)\n");
        }
    }

    if (is_gflag("6"))
    {
        xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
        bm_log_timer("route-R-A910");
    }
}

########################################################################
# route CSEQ_TRACK_UPDATES_ROUTE: Route for Cseq manipulation with DA
########################################################################
route[CSEQ_TRACK_UPDATES_ROUTE]
{
    xlog("L_INFO", "CI=$ci -R-A920 (CSEQ_TRACK_UPDATES_ROUTE) - Entry Cseq=$cs M=$rm Cseq Tracking=$sht(dlg-info=>$ci-$ft::cseq-track)\n");

    $var(C_trackCseqUpdEnable_lb) = 1;

    if($var(C_trackCseqUpdEnable_lb) == 0)
    {
        xlog("L_INFO", "CI=$ci -R-A920 - CSeq tracking not enabled. \n");
        return;
    }


    if($sht(dlg-info=>$ci-$ft::cseq-track) == 0)
    {
        xlog("L_INFO", "CI=$ci -R-A920 - CSeq tracking not needed. \n");
        return;
    }

    if( $ru != $null) ##REQUEST
    {

        ## Save incoming CSeq
        $sht(dlg-info=>$ci-$ft::cseq-in) = $cs;

        ## Save incoming Method
        if( $sht(dlg-info=>$ci-$ft::cseq-method) != $rm && !is_method("ACK") && !is_method("CANCEL"))
        {
            $sht(dlg-info=>$ci-$ft::cseq-method) = $rm;
        }

        xlog("L_INFO", "CI=$ci -R-A920 - Request -  ft=$ft method: $sht(dlg-info=>$ci-$ft::cseq-method) cseq-in: $sht(dlg-info=>$ci-$ft::cseq-in) cseq-out: $sht(dlg-info=>$ci-$ft::cseq-out) \n");


        if( $rm == $sht(dlg-info=>$ci-$ft::cseq-method) )
        {

            if( $sht(dlg-info=>$ci-$ft::cseq-out) == $null )
                $sht(dlg-info=>$ci-$ft::cseq-out) = $sht(dlg-info=>$ci-$ft::cseq-in);
            else if( $(sht(dlg-info=>$ci-$ft::cseq-in){s.int}) > $(sht(dlg-info=>$ci-$ft::cseq-out){s.int}) )
                $sht(dlg-info=>$ci-$ft::cseq-out) = $sht(dlg-info=>$ci-$ft::cseq-in);
            else if( $(sht(dlg-info=>$ci-$ft::cseq-in){s.int}) <= $(sht(dlg-info=>$ci-$ft::cseq-out){s.int}) )
                $sht(dlg-info=>$ci-$ft::cseq-out) = $(sht(dlg-info=>$ci-$ft::cseq-out){s.int}) + 1;

            subst('/^CSeq: [0-9]+([^0-9].*)$/CSeq: $sht(dlg-info=>$ci-$ft::cseq-out)\1/ig');

            ##$var(C_new_cseq_hdr_gs) = $(sht(dlg-info=>$ci-$ft::cseq-out){s.escape.common}) + " " + $rm;

            xlog("L_INFO", "CI=$ci -R-A920 - CSeq updated - in: $cs out: $sht(dlg-info=>$ci-$ft::cseq-out) \n");
        }
        else if( (is_method("ACK") || is_method("CANCEL")) && $sht(dlg-info=>$ci-$ft::cseq-method) == "INVITE")
        {
            ##$var(C_new_cseq_hdr_gs) = $(sht(dlg-info=>$ci-$ft::cseq-out){s.escape.common}) + " " + $rm;
            subst('/^CSeq: [0-9]+([^0-9].*)$/CSeq: $sht(dlg-info=>$ci-$ft::cseq-out)\1/ig');
            xlog("L_INFO", "CI=$ci -R-A920 - CSeq updated - in: $cs out: $sht(dlg-info=>$ci-$ft::cseq-out) \n");
        }
    }
    else  ## RESPONSE
    {
        xlog("L_INFO", "CI=$ci -R-A920 - Response - ft=$ft method: $sht(dlg-info=>$ci-$ft::cseq-method) cseq-in: $sht(dlg-info=>$ci-$ft::cseq-in) cseq-out: $sht(dlg-info=>$ci-$ft::cseq-out) \n");

        if( $rm == $sht(dlg-info=>$ci-$ft::cseq-method) && $cs != $sht(dlg-info=>$ci-$ft::cseq-in) )
        {
            ###$var(C_new_cseq_hdr_gs) = $(sht(dlg-info=>$ci-$ft::cseq-in){s.escape.common}) + " " + $rm;
            subst('/^CSeq: [0-9]+([^0-9].*)$/CSeq: $sht(dlg-info=>$ci-$ft::cseq-in)\1/ig');

            xlog("L_INFO", "CI=$ci -R-A920 - CSeq updated - in: $cs out: $sht(dlg-info=>$ci-$ft::cseq-in) \n");
        }
    }
}


########################################################################
#NM_INIT_ROUTE: Initial call route
########################################################################
route[NM_INIT_ROUTE]
{
    if (is_gflag("6"))
        bm_start_timer("route-1");

    xlog("L_INFO", "CI=$ci - R1 - Entry  - M=$rm CI=$ci cseq=$cs\n");

    xlog("L_INFO", "CI=$ci - R1 - Using binding $avp(C_sys_current_binding_transp_gs):$avp(C_sys_current_binding_ip_gs):$avp(C_sys_current_binding_port_gi)\n");

    $avp(S_pmap_name_gs) = "port_map";

    #Dummy Header to show the version of OSS and the end the message with double CRLF.
    if(!isflagset(10) && ($var(C_ssm_msg_gb) == 1 || $var(C_call_msg_gb) == 0))
       append_hf("X-Siemens-OSS: OpenScape SBC V9 R4.13.00-2/UTC-68df2f3d7fe90f5b8f1a60a6621b8951\r\n");

    if(is_method("NOTIFY"))
    {
        # NOTIFY going to Voice with "application/csta+xml" header (From GTC or another SBC)
        if(!isflagset(10) && $hdr(content-Type) == "application/csta+xml")
        {
            # Gives OSV more time to answer
            $avp(S_no_reply_timer_gi) = 32000;
            t_set_fr(360000, "$avp(S_no_reply_timer_gi)");
            xlog("L_INFO", "CI=$ci - R1 - Gtc NOTIFY message contains header 'content-Type=application/csta+xml'. Setting FR timers to <360000, $avp(S_no_reply_timer_gi)>\n");
        }
    }

    if ($var(C_ssm_msg_gb) == 1)
    {
        # If Register From SIP Server is set then SSM takes care of Route handling from LAN to WAN which is being done in SSM_ROUTE
        route(NM_SSM_ORIGIN_ROUTE); # Get OSV Binding
        exit;
    }

    if(isflagset(10))
    {
       route(CORE_ROUTE_HDR_HANDLING);
    }
    xlog("L_INFO", "CI=$ci - R1 - End of flag(10) var(S_port_transp_opt_gs)=$var(S_port_transp_opt_gs) \n");

    xlog("L_INFO", "CI=$ci - R1 - var(S_is_src_lan_ip_ls)=$var(S_is_src_lan_ip_ls),var(S_webRtc_gi)=$var(S_webRtc_gi) flags=$mF\n");
    ### following dip should not be performed for sp initiated requests such as Register/UnRegister ...
    if($var(S_is_src_lan_ip_ls) == 0 || $var(S_webRtc_gi) == 1)
    {
        if(isflagset(25))
        {
            $var(S_pmap_deep_counter_gi)=1;
            route(QUERY_WAN_TO_LAN_CALL); # WAN to LAN
            if(!is_method("REGISTER") && !isflagset(5) && $var(C_call_msg_gb) == 1 && $var(S_pmap_deep_failed_gb) ==1)
            {
               $var(S_pmap_deep_counter_gi)=2;
               $avp(S_pmap_name_gs) = "partner_pm";
               route(QUERY_WAN_TO_LAN_CALL);
            }
        }
        else
        {
            $var(S_pmap_deep_counter_gi)=1;
            route(QUERY_PM_LAN_TO_WAN_CALL); # LAN to WAN
            if (!isflagset(5) && $var(S_pmap_deep_failed_gb) == 1 && $var(C_call_msg_gb) == 1)
            {
               $var(S_pmap_deep_counter_gi)= 2;
               $avp(S_pmap_name_gs) = "partner_pm";
               route(QUERY_PM_LAN_TO_WAN_CALL);
            }
        }
    }

    if (isflagset(10))
    {
       if($avp(C_wan_ip_gs) == $null || $avp(C_wan_ip_gs) == '')
       {
          ### this is from LAN, reading pm/rep must have resolved wanip already
          xlog("L_INFO", "CI=$ci - R1 - failure in wan-lan binding mapping. OSV binding: $avp(C_sys_current_binding_transp_gs):$avp(C_sys_current_binding_ip_gs):$avp(C_sys_current_binding_port_gi), exit\n");
          t_release();
          if (is_gflag("6"))
          {
              xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
              bm_log_timer("route-1");
          }
          exit;
       }
    }
    else
    {
       #this is coming from WAN
       if (is_present_hf("Route"))
            remove_hf("Route");
    }

    $var(C_sys_osv_port_gi) = $avp(C_core_port_gi);

    $(avp(S_tmp_gs)[*]) = $null;
    $avp(S_hdr_to_dom_gs) = $null;
    if($fU != $null)
    {
       $avp(S_tmp_gs) = $fU;
    }


    if(isflagset(12)) # REGSITER FROM OSV or H4000
    {
        $avp(S_reg_ct_gs) = $hdr(Contact);
        avp_subst("$avp(S_reg_ct_gs)","/^.*(sips?:[^>]+).*/\1/ig");
    }
    else if(is_method("REGISTER"))
    {
        route(REGISTER_REQ);
    }
    if(!isflagset(10))
    {
        #verify if uri is a gw ep
        if ($var(C_mosip_message_gb))
        {
            # Call Discpatcher
            $var(S_stateless_msg_gb) = 0;
            route(NM_OUTGOING_FORWARD_ROUTE);
            exit;
        }

        if($var(S_webRtc_gi) == 0 || $var(S_is_src_lan_ip_ls) == 0)
        {
            if($var(S_wan_natted_gb) == 1)
            {
                setbflag(8); # branch flag

                xlog("L_INFO", "CI=$ci - R1 - Branch flag for Natted set\n");
                $var(C_hdr_rr_gs)= ";fwan=yes";
                xlog("L_INFO", "CI=$ci - R1 - var(S_webRtc_gi)=$var(S_webRtc_gi), setting var(C_hdr_rr_gs)=$var(C_hdr_rr_gs), \n");
            }
            else
            {
                # add record route
                if(!is_method("ACK") && !is_method("BYE") )
                {
                    $var(C_hdr_rr_gs)= ";fwan=yes";
                    xlog("L_INFO", "CI=$ci - R1 - var(S_webRtc_gi)=$var(S_webRtc_gi), setting var(C_hdr_rr_gs)=$var(C_hdr_rr_gs), \n");
                }
            }
        }
        else
            $var(C_hdr_rr_gs)= "";
    }

    # -----------------------------------------------------------------
    # CANCEL and BYE handling
    # -----------------------------------------------------------------
    if(is_method("CANCEL|BYE"))
    {
        if($var(C_ssm_msg_gb) == 1)
        {
            #call route 23 and then send it further
            route(SSM_ROUTE);
            route(MANIPULATE_VIA_ROUTE);

            xlog("L_INFO", "CI=$ci - R1 - message M=$rm is being sent to ssm\n");
            t_on_reply("NM_GENERAL_REPLY_ROUTE");
            route(SIP_HEADERS_CHANGE_ROUTE);
            if (t_relay_to("0x03") < 0)
            {
                xlog("L_ERR", "CI=$ci - R1 - Relay failure - M=$rm F=$fu T=$tu CT=$ct IP=$var(C_si_var_gs) DU=$du FS=$fs\n");
            }
            if (is_gflag("6"))
            {
                xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
                bm_log_timer("route-1");
            }
            exit;
        }
        xlog("L_INFO", "CI=$ci - R1 - Delete RTPproxy session\n");
    }

    t_set_auto_inv_100(1); # turn on automatic 100 replies for INVITE transaction

    if(is_method("REFER"))
        sl_send_reply("100","Trying");

    if(isflagset(13))
    {
        route(ESTABLISHED_DLG_REQ);
    }
    else
    {
        route(INITIAL_REQ);
    }

    if (is_gflag("6"))
    {
        xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
        bm_log_timer("route-1");
    }
    exit;
}

########################################################################
#NM_SSM_ORIGIN_ROUTE: Requests received from SSM (2nd transaction)
########################################################################
route[NM_SSM_ORIGIN_ROUTE]
{
    if (is_gflag("6"))
        bm_start_timer("route-9");

    xlog("L_INFO", "CI=$ci - R9 - Entry M=$rm, avp(C_src_ip_gs)=$avp(C_src_ip_gs) src_ip=$src_ip CI=$ci flags=$mF\n ");
    if(is_method("INVITE"))
       sl_send_reply("100","Trying");

    #need to set ssm_rcv_via
    # Store all via headers in ssm_rcv_via
    $var(S_via_count_gi) = 0;
    $(avp(S_req_via_gs)[*]) = $null;
    $avp(S_is_srec_gs) = $null;

    if ($hdr(X-Original-RR) =~ "(.*)twan=yes(.*)" || is_present_hf("X-gw-call")) {
       xlog("L_INFO", "CI=$ci - R9 - Message $rm from SSM  OSV->WAN. Setting flag 10\n");
       setflag(10); # incoming call from OSV
    }
    #add the 2nd ep related info in SSM
    if(is_present_hf("Via"))
    {
       while($(hdr(Via)[$var(S_via_count_gi)]) != $null)
       {
           $(avp(S_req_via_gs)[$var(S_via_count_gi)]) = "Via: " + $(hdr(Via)[$var(S_via_count_gi)]);
           $var(S_via_count_gi) = $var(S_via_count_gi) + 1;
       }
    }
    route(SSM_TAGS_BOTH_DIRECTION_ROUTE);
    if(isflagset(26) && is_method("INVITE") && !isflagset(13) && $sht(call-info=>$ci::INFOsent) !=1)
        $var(S_stored_fs_gs) = $var(C_fs_gs);
    else if(is_method("INVITE") && $sht(call-info=>$ci::INFOsent) ==1)
        xlog("L_INFO", "CI=$ci - R9 - socket was already set before: var(C_fs_gs)=$var(C_fs_gs)\n");

    if(isflagset(10) && isflagset(11))
    {
        $avp(C_core_port_gi) = $var(C_sys_osv_port_gi); # Should really be in R16
    }
    if(!isflagset(10) && isflagset(15) && $var(C_ep1_transp_gs) == "tls" && $avp(C_sys_current_binding_transp_gs) == "tls" && $(hdr(Via)[0]) =~ "x-oscar-transport=mtls")
    {
        osb_set_via_params(";x-oscar-transport=mtls");
        xlog("L_INFO", "CI=$ci R9  - setting x-oscar-transport=mtls\n");
    }


    if(is_present_hf("X-SIPREC-Req") || ($sht(call-info=>$ci::SREC) == 1))
    {
        xlog("L_INFO", "CI=$ci - R9 - It is a SIPREC call.\n");
        route(SIPREC_CALL_ROUTE);
        $avp(S_is_srec_gs) = 'yes';
        $sht(call-info=>$ci::SREC) = 1;
    }

    xlog("L_INFO", "CI=$ci - R9 - now avp(C_port_gi)=$avp(C_port_gi), avp(C_advertised_port_gi)=$avp(C_advertised_port_gi)\n");

    ###########################################################

    #read and store the Record-Route for usage in the other direction
    $var(S_rr_count_gi) = 0;
    $(avp(S_req_rrh_gs)[*]) = $null;
    if(is_present_hf("Record-Route"))
    {
        while($(hdr(Record-Route)[$var(S_rr_count_gi)]) != $null)
        {
            $(avp(S_req_rrh_gs)[$var(S_rr_count_gi)]) =  "Record-Route: " +$(hdr(Record-Route)[$var(S_rr_count_gi)]);
            xlog("L_INFO", "R9  - rcv_rr, $var(S_rr_count_gi) $(avp(S_req_rrh_gs)[$var(S_rr_count_gi)])\n");
            $var(S_rr_count_gi) = $var(S_rr_count_gi) + 1;
        }

        if (isflagset(10) && $var(C_g_useSsmRecordRoute_gb) != 1)
            remove_hf("Record-Route");
        else
            xlog("L_INFO", "R9  - 4K, RR is preserved towards SSM\n");
    }

    if (!isflagset(10) && $var(S_standalone_route_gi) == 0 ) {
       if(is_present_hf("X-Original-Socket")){
          $avp(C_tmp2_gs) = $hdr(X-Original-Socket);

          #order of param is transport, ip and port
          xlog("L_INFO", "CI=$ci - R9 - Extracting RR using [$avp(C_tmp2_gs)] \n");
          get_first_ip_from_str('$avp(C_tmp2_gs)', '$avp(S_tmp_gs)');
          put_ip_in_paran('$avp(S_tmp_gs)', '$avp(S_tmp_gs)');
          $avp(C_tmp2_gs) = $avp(S_tmp_gs)+":"+$(avp(C_tmp2_gs){s.select,-1,:})+";transport="+$(avp(C_tmp2_gs){s.select,0,:});
          xlog("L_INFO", "CI=$ci - R9 - Setting RR to [$avp(C_tmp2_gs)] \n");

          if (is_method("INVITE")) {
              if (not_empty(" $avp(C_ssp_rip_gs)"))
                  $avp(C_tmp2_gs) = $avp(C_tmp2_gs)+";fossp";

              if(not_empty("$avp(S_rep_ip_gs)"))
                  $avp(C_tmp2_gs) = $avp(C_tmp2_gs)+";gwIP="+$avp(S_rep_ip_gs);
          }

          record_route_preset("$avp(C_tmp2_gs);oss=oss-09.04.13.00-2");
          xlog("L_INFO", "CI=$ci - R9 - presetting record-route with $avp(C_tmp2_gs)\n");
       }
    }
    route(SSM_ROUTE);


    if ($sht(call-info=>$ci::INFOsent) == $null || $sht(call-info=>$ci::INFOsent) !=1 )
       route(MANIPULATE_VIA_ROUTE);
    xlog("L_INFO", "CI=$ci - LR: R9 - pstnDialin verification: flag infosent=$sht(call-info=>$ci::INFOsent)\n");

    ### Not needed as the SSM BYE's towards MS and corresponding 200 OK would clear the entire hash table for this call id
    ### Keep for the case when the BYEs 200 OK doesn't make it
    if (is_method("ACK") && $sht(call-info=>$ci::refer) == 1) ### Response for INVITE sent by the SSM, no PM and set refer to 0 to allow normal processing later
    {
        xlog("L_INFO", "CI=$ci - R9 - PSTN Dial-IN final ACK is received, reset the refer flag");
        sht_rm_name_re("call-info=>^$ci::(sent|msdn|duMS|fsMS|epname|INFOsent|MSport|refer|srcip|srctransp|srcport|dialindn)");
    }
    if(is_method("INVITE") && $sht(call-info=>$ci::INFOsent) ==1)
    {
        $fs = "tcp:" + $var(S_local_ip_gs) + ":" + $var(S_local_port_gs);
        ## we need to update the rU in ruri with original DN
        xlog("L_INFO", "CI=$ci - LR: R9 - dipping tc_ep_ms_dialin with *|$sht(call-info=>$ci::epname)|$sht(call-info=>$ci::dialindn)|*|$rU\n");
        if (osb_memdb_select("tc_ep_ms_dialin,*|$sht(call-info=>$ci::epname)|$sht(call-info=>$ci::dialindn)|*|$rU,1","||$avp(S_tc_dial_ms_dn_gs)||") != 1)
            if (osb_memdb_select("tc_ep_ms_dialin,*|*|$sht(call-info=>$ci::dialindn)|*|$rU,1","||$avp(S_tc_dial_ms_dn_gs)||") != 1)
                osb_memdb_select("tc_ep_ms_dialin,*|*|*|*|$rU,1","||$avp(S_tc_dial_ms_dn_gs)||");
        xlog("L_INFO", "CI=$ci - R9 - found dialed DN=$avp(S_tc_dial_ms_dn_gs)\n");
        $rU = $avp(S_tc_dial_ms_dn_gs);
        xlog("L_INFO", "CI=$ci - R9 - this is reprocessed Invite, no need to set socket to send to gtc, du=$du, updating ruri=$ru\n");
        $du = $null;

        ### If INVITE is coming in from SSM in response to REFER then it has the Contact based on MS EP, replace it with local Contact
        if (!isflagset(13)) {
            $avp(S_req_ct_gs) = $hdr(Contact);
            osb_update_uri("$avp(S_req_ct_gs)","$var(S_local_ip_gs),$var(S_local_port_gs),$var(C_ep1_transp_gs)",0x1C);
            subst('/^Contact:.*$/Contact: $avp(S_req_ct_gs)\r/ig');
        }
    }
    else if(is_method("BYE|INVITE|INFO") && $sht(call-info=>$ci::sent) == 1)
    {
        $avp(S_cseq_gs) = $sht(call-info=>$ci::cseq);
        $avp(S_cseq_gs) = $(avp(S_cseq_gs){s.int})+1;
        $var(S_cseq_gs) = $(avp(S_cseq_gs){s.int}) ;
        $sht(call-info=>$ci::cseq) = $var(S_cseq_gs);

        subst('/^CSeq: [0-9]+([^0-9].*)$/CSeq: $var(S_cseq_gs)\1/ig');
        xlog("L_INFO", "CI=$ci - R9 - Message $rm-$rs manipulated cSeq=$var(S_cseq_gs) towards MS, avp(S_cseq_gs)=$avp(S_cseq_gs)\n");

        ## this tells us that BYE was initiated from MS, sent to SSM with the header
        if (is_present_hf("X-Original-Socket")){
            $fs = $hdr(X-Original-Socket);
            xlog("L_INFO", "CI=$ci - R9 - restored fs=$fs and remove header\n");
            remove_hf("X-Original-Socket");

            if (is_present_hf("X-Original-dest")){
                $du = $hdr(X-Original-dest);
                xlog("L_INFO", "CI=$ci - R9 - restored du=$du and remove header\n");
                remove_hf("X-Original-dest");
            }
        }
        else if ($var(C_fs_gs))
        {
            $fs = $var(C_fs_gs);
        }

        xlog("L_INFO", "CI=$ci - R9 - $rm before REFER from SSM, using fs=$fs and du=$du\n");
    }
    else
    {
        $fs = $var(C_fs_gs);
        xlog("L_INFO", "CI=$ci - R9 - not initial Invite, socket set: $fs, var(S_stored_fs_gs)=$var(S_stored_fs_gs)\n");
        if(is_method("BYE") && $sht(call-info=>$ci::INFOsent) ==1)
        {
            $avp(S_cseq_gs) = $sht(call-info=>$ci::cseq);
            $avp(S_cseq_gs) = $(avp(S_cseq_gs){s.int})+1;
            $var(S_cseq_gs) = $(avp(S_cseq_gs){s.int}) ;
            subst('/^CSeq: [0-9]+([^0-9].*)$/CSeq: $var(S_cseq_gs)\1/ig');
            xlog("L_INFO", "CI=$ci - R9 - Message $rm-$rs manipulated cSeq=$var(S_cseq_gs) towards MS, avp(S_cseq_gs)=$avp(S_cseq_gs)\n");
        }
    }
    if(isflagset(26) && is_method("INVITE") && !isflagset(13) && $sht(call-info=>$ci::INFOsent) !=1)
    {
        xlog("L_INFO", "CI=$ci - R9 - this is initial Invite, forcing socket var(S_stored_fs_gs)=$var(S_stored_fs_gs)\n");
        $fs = $var(S_stored_fs_gs);
        xlog("L_INFO", "CI=$ci - R9 - this is pstn dialin, need to store the data in call-info, cseq=$cs\n");
        $sht(call-info=>$ci::sent) = 1; ## this flag indicates that Invite was sent to MS
        $sht(call-info=>$ci::duMS) = $du;
        $sht(call-info=>$ci::fsMS) = $var(S_stored_fs_gs);
        $sht(call-info=>$ci::cseq) = $cs;
        $sht(call-info=>$ci::MSport) = $rp;
    }

    $var(S_log_fr_ls) = "";
    if (isflagset(10))
    {
        if($avp(C_inv_noanswr_timer_gs) != $null && $avp(C_inv_noanswr_timer_gs) != '' &&
            $avp(C_inv_noreply_timer_gs) != $null && $avp(C_inv_noreply_timer_gs) != '')
        {
            t_set_fr("$(avp(C_inv_noanswr_timer_gs){s.int})","$(avp(C_inv_noreply_timer_gs){s.int})"); # Set reply timeout
            $var(S_log_fr_ls) = "Setting FR timers to rep <" + $avp(C_inv_noanswr_timer_gs) + "," + $avp(C_inv_noreply_timer_gs) + ">";
        }
        else if (isflagset(11))
        {
            t_set_fr(360000, 3000); # Set timers for remote subscriber
            $var(S_log_fr_ls) = "Setting FR timers to rsub <360000,3000>";
        }
    }
    else if (!$var(S_standalone_server_gi) && $avp(S_no_reply_timer_gi) == $null)
    {
        t_set_fr(360000, 6000); # Set reply timeout to core side for non-invite messages
        $var(S_log_fr_ls) = "Setting FR timers to coresideNoInv <360000,6000>";
    }

    xlog("L_INFO", "CI=$ci - R9 - Message $rm-$rs sent to original destination $du, socket=$fs,cSeq=$avp(C_tmp2_gs),rp=$rp,var(C_ssm_msg_gb)=$var(C_ssm_msg_gb). $var(S_log_fr_ls)\n");

    t_on_reply("NM_GENERAL_REPLY_ROUTE");

    xlog("L_INFO", "CI=$ci - R9 - var(S_standalone_route_gi)=$var(S_standalone_route_gi), avp(C_gw_type_gi)=$avp(C_gw_type_gi), avp(C_ssp_da_supported_gs)=$avp(C_ssp_da_supported_gs)\n");
    if ($var(S_standalone_route_gi) && $avp(C_ssp_da_supported_gs) == 'y')
    {
        $avp(S_rep_digest_realm_gs) = $sht(dlg-info=>$ci-$ft::ssp-da-realm);
        $avp(S_rep_digest_user_gs)  = $sht(dlg-info=>$ci-$ft::ssp-da-user);
        $avp(S_rep_digest_psw_gs)   = $(sht(dlg-info=>$ci-$ft::ssp-da-psw){s.decode.base64});

        xlog("L_INFO", "CI=$ci - R9 - SSP Calls in Standalone mode with DA enabled.\n");
        PROC_SET_CSEQ_TRACK_UPDATES
        t_on_failure("STANDALONE_SSP_FAILURE_ROUTE");
    }
    else
        t_on_failure("NM_GENERAL_FAILURE_ROUTE");


    xlog("L_INFO", "CI=$ci - R9 - Message $rm-$rs avp(C_fw_ext_ip_gs)=$avp(C_fw_ext_ip_gs) \n");
    ## by now we should have advertised IP if fw was provisioned
    xlog("L_INFO", "CI=$ci - R9 - Message $rm-$rs flags=$mf, advertisedIp = $avp(C_advertised_ip_gs),  advertisedPort = $avp(C_advertised_port_gi) FS=$fs\n");
    if((isflagset(10) || $var(S_standalone_server_gi))  && !isflagset(26))
    {
        if ($avp(C_advertised_ip_gs) != $null && $avp(C_advertised_ip_gs) != '')
        {
            xlog("L_INFO", "CI=$ci - R9 - using advertised ip & port\n");
            put_ip_in_paran('$avp(C_advertised_ip_gs)', '$avp(C_advertised_ip_gs)');
            osb_set_adv_address('$avp(C_advertised_ip_gs)');
            osb_set_adv_port('$avp(C_advertised_port_gi)');
        }
    }

    route(SIP_HEADERS_CHANGE_ROUTE);
    xlog("L_INFO", "CI=$ci - R9 - Message $rm-$rs var(C_ssm_msg_gb)=$var(C_ssm_msg_gb),var(C_duChanged_gi)=$var(C_duChanged_gi)\n");


    route(CSEQ_TRACK_UPDATES_ROUTE);
    if(!t_relay_to("0x03"))
    {
        xlog("L_ERR", "CI=$ci - R9 - Relay failure - Failed to send request. M=$rm RURI=$ru From=$fu To=$tu DU=$du FS=$fs\n");

            sl_reply_error();
            t_release();
    }


    if (is_gflag("6"))
    {
        xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
        bm_log_timer("route-9");
    }
}

########################################################################
#NM_CHECK_ORIGIN_ROUTE: Check source EP from Via header/src IP
########################################################################
route[NM_CHECK_ORIGIN_ROUTE]
{
    if (is_gflag("6"))
        bm_start_timer("route-13");

    xlog("L_INFO", "CI=$ci - R13 - Entry M=$rm, avp(C_src_ip_gs)=$avp(C_src_ip_gs) src_ip=$src_ip mode=$var(S_8kmode_gs) flags=$mF\n");

    $var(S_tmp_gs) = $var(C_si_var_gs);

    xlog("L_INFO", "CI=$ci - R13 - var(S_local_ip_gs)=$var(S_local_ip_gs) \n");
    if($var(S_8kmode_gs) != "clustered" )
    {
        if($si != $var(S_local_ip_gs) && osb_get_osv_binding_info("$var(S_tmp_gs)", "$var(S_sys_node_gs)", "$var(S_binding_ls)"))
        {
            setflag(10); # incoming call from OSV

            if (is_gflag("6"))
            {
                xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
                bm_log_timer("route-13");
            }
            return(1);
        }
    }

    $(avp(C_tmp2_gs)[*]) = $null;
    # Setting groups for source ip
    osb_ip_group("$var(S_tmp_gs)","$avp(C_tmp2_gs)");
    xlog("L_INFO", "CI=$ci - R13 - after osb_ip_group, var(S_tmp_gs)=$var(S_tmp_gs),var(S_local_ip_gs)=$var(S_local_ip_gs) \n");

    if (is_gflag("6"))
    {
        xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
        bm_log_timer("route-13");
    }

    # Check if source ip is in the trusted group (8000)
    if ($avp(C_tmp2_gs)=="8000")
    {
        setflag(10);
        xlog("L_INFO", "CI=$ci -R13 - Message $rm from Trusted Server IP\n");
    }

    if ($fU == "msadapter")
    {
        xlog("L_INFO", "CI=$ci - R13 - fU=$fU is msadapter \n");
        $var(C_mosip_message_gb) = 1;
        if (is_present_hf("X-AEP")) {
            $var(S_sys_internal_msg_gb) = 1;
            setflag(10);
        }
    }

    # Moved from Init_and_Sanity file
    if ($var(S_is_src_lan_ip_ls) == 1)
    {
        xlog("L_INFO", "CI=$ci - R13 - var(S_is_src_lan_ip_ls)=$var(S_is_src_lan_ip_ls) \n");
        if($ua == "SIP alive check" || $ua ==  "OpenScape Branch")
        {
            ## OPTIONS or UNREGISTER from SP
            $var(S_sys_internal_msg_gb) = 1;
            setflag(10);
        }

        if (is_method("REGISTER") && is_present_hf("X-Siemens-Service-Provider"))
        {
            route(SSP_REGISTRATION_ROUTE);
            exit;
        }
    }


    if(($sp == $var(C_ssm_port_gi)) && ((($var(C_si_var_gs) == $var(C_ssm_ip_gs)) || ($var(C_ri_var_gs) == $var(C_ssm_ip_gs)))))
    {
       xlog("L_INFO", "CI=$ci - R13 - Request from SSM\n");
       $var(C_ssm_msg_gb) = 1;
       $var(S_sys_internal_msg_gb) = 1;
    }

    if ($var(S_sys_internal_msg_gb) != 1)
    {
        ## get the source ip from via
        if ($sel(v[1].port) != $null) # Port is  present
             $var(S_rm_via_port_li) = $sel(v[1].port);

        xlog("L_INFO", "CI=$ci - R13 - var(S_rm_via_port_li)=$var(S_rm_via_port_li)\n");
        if ($ua =~ "OpenScape Mobile Client - WebRTC.*" ||
            ($var(S_is_src_lan_ip_ls) == 1 && ($var(S_rm_via_port_li) >= $var(S_webrtc_port_li) && $var(S_rm_via_port_li) < ($var(S_webrtc_port_li) + $var(S_numCore_li)))))
        {
            $var(S_webRtc_gi) = 1;
        }
    }

    if (is_present_hf("X-Siemens-Client-IP"))
    {
        if(is_method("REGISTER") && $var(S_webRtc_gi) == 1)
            $var(S_wosmo_client_ip_gs) = $hdr(X-Siemens-Client-IP);
        remove_hf("X-Siemens-Client-IP");
    }

    if($var(S_webRtc_gi) == 1)
    {
        resetflag(10);
        setflag(25);
        xlog("L_INFO", "CI=$ci - R13 - Request from WebRTC, mf=$mF\n");
    }
    else if(isflagset(10))
    {
        xlog("L_INFO", "CI=$ci - R13 - Request from OSV\n");
    }
    else if($var(S_is_src_lan_ip_ls) == 0 && $var(C_ssm_msg_gb) != 1)
    {
        ## now this is not from osv, check see if this is from sp
        xlog("L_INFO", "CI=$ci - R13 - Request from WAN\n");
        setflag(25); # incoming call from WAN
    }

    if (is_gflag("6"))
    {
        xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
        bm_log_timer("route-13");
    }

    return(1);
}

########################################################################
#FIND_OSV_BINDING_ROUTE: Find OSV binding address
########################################################################
route[FIND_OSV_BINDING_ROUTE]
{
    if (is_gflag("6"))
        bm_start_timer("route-19");
    xlog("L_INFO", "CI=$ci - R19 - Entry M=$rm, avp(C_src_ip_gs)=$avp(C_src_ip_gs) src_ip=$src_ip CI=$ci mode=$var(S_8kmode_gs) flags=$mF\n");

    if ($var(S_standalone_server_gi))
    {
        xlog("L_INFO", "CI=$ci - R19 - Standalone mode - current binding check is not necessary\n");
    }
    else if($var(S_8kmode_gs) != "clustered" )
    {
        if(isflagset(10))
        {
            $var(S_tmp_gs)=$fd;
            if(!osb_get_osv_current_binding("$var(S_tmp_gs)", "$avp(C_sys_current_binding_ip_gs)", "$avp(C_sys_current_binding_port_gi)", "$avp(C_sys_current_binding_transp_gs)"))
            {
                xlog("L_ERR", "CI=$ci - R19 - binding IP=$var(S_tmp_gs) not available\n");
            }
            else
            {
               if ($avp(S_sys_osv_node_gs) == "")
                   osb_get_osv_binding_info("$avp(C_sys_current_binding_ip_gs)", "$avp(S_sys_osv_node_gs)", "$var(S_sys_osv_type_ls)");

               xlog("L_INFO", "CI=$ci - R19 - avp(S_sys_osv_node_gs)=$avp(S_sys_osv_node_gs), avp(C_sys_current_binding_ip_gs)=$avp(C_sys_current_binding_ip_gs),avp(C_sys_current_binding_transp_gs)=$avp(C_sys_current_binding_transp_gs),avp(C_wan_ip_gs)=$avp(C_wan_ip_gs)\n");

               # avp(C_wan_ip_gs) should not be empty here as it is read in R4 for REP and R6 from PM for direct subscribers

               xlog("L_INFO", "CI=$ci - R19  -  avp(S_network_interface_dst_gs)=$avp(S_network_interface_dst_gs), avp(C_wan_ip_gs)=$avp(C_wan_ip_gs) ,avp(C_fw_ext_ip_gs)=$avp(C_fw_ext_ip_gs)\n");
            }

        }
        else
        {
            # if from wan->lan, R4 must have set the wan intercae and netw_id
            #now need to deep into network_id table and get the osv_node
            # if from lan->wan, R6 must have also set the wan interface and netw_id

            xlog("L_INFO", "CI=$ci - R19  -  avp(S_network_interface_dst_gs)=$avp(S_network_interface_dst_gs), avp(S_sys_osv_node_gs)=$avp(S_sys_osv_node_gs),avp(C_fw_ext_ip_gs)=$avp(C_fw_ext_ip_gs) \n");

            # get the active binding
            # use osv_node to get the current binding
            if(!osb_get_osv_current_binding_by_node("$avp(S_sys_osv_node_gs)", "$avp(C_sys_current_binding_ip_gs)", "$avp(C_sys_current_binding_port_gi)", "$avp(C_sys_current_binding_transp_gs)"))
            {
                xlog("L_INFO", "CI=$ci - R19.1 - binding IP not available for node=$avp(S_sys_osv_node_gs), avp(C_wan_ip_gs)=$avp(C_wan_ip_gs)\n");

                if ($avp(S_sys_osv_node_gs) == "NODE1" || $avp(S_sys_osv_node_gs) == "node1")
                   $avp(S_sys_osv_node_gs) = "NODE2";
                else
                   $avp(S_sys_osv_node_gs) = "NODE1";

                if(!osb_get_osv_current_binding_by_node("$avp(S_sys_osv_node_gs)", "$avp(C_sys_current_binding_ip_gs)", "$avp(C_sys_current_binding_port_gi)", "$avp(C_sys_current_binding_transp_gs)"))
                    xlog("L_ERR", "CI=$ci - R19.2 - binding IP=$var(S_tmp_gs) not available for both nodes, avp(C_wan_ip_gs)=$avp(C_wan_ip_gs)\n");
                else
                    xlog("L_INFO", "CI=$ci - R19 - avp(S_sys_osv_node_gs)=$avp(S_sys_osv_node_gs),avp(C_sys_current_binding_ip_gs)=$avp(C_sys_current_binding_ip_gs),avp(C_sys_current_binding_transp_gs)=$avp(C_sys_current_binding_transp_gs),avp(C_wan_ip_gs)=$avp(C_wan_ip_gs)\n");
            }
            else
                xlog("L_INFO", "CI=$ci - R19 - avp(S_sys_osv_node_gs)=$avp(S_sys_osv_node_gs),avp(C_sys_current_binding_ip_gs)=$avp(C_sys_current_binding_ip_gs),avp(C_sys_current_binding_transp_gs)=$avp(C_sys_current_binding_transp_gs),avp(C_wan_ip_gs)=$avp(C_wan_ip_gs)\n");

        }
    }
    else if($var(S_binding_found_gs) == 0)
    {
        if(not_empty("$avp(S_cluster_server_grp_gs)"))
        {
            $var(S_temp_node_ls) = $avp(S_cluster_server_grp_gs);
        }
        else
        {
            $var(S_temp_node_ls) = $avp(S_sys_osv_node_gs);
        }

        if(is_method("NOTIFY|PRACK") || $avp(S_sys_stick_with_commServer_sv_gi) == 1)
        {
            $(avp(S_server_ip_ls)[*]) = $null;
            $(avp(S_server_port_ls)[*]) = $null;
            $(avp(S_server_proto_ls)[*]) = $null;
            osb_memdb_nl_select("port_map,*|$si|*|$sp|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1","|||||||||||||||||||||$avp(S_server_ip_ls)|$avp(S_server_port_ls)|$avp(S_server_proto_ls)||");
            xlog("L_INFO", "CI=$ci - R19 - $rm or StickWithCommServer=$avp(S_sys_stick_with_commServer_sv_gi) configured, dipping with $si and $sp result $avp(S_server_ip_ls),$avp(S_server_port_ls),$avp(S_server_proto_ls)\n");
        }
        if(not_empty("$avp(S_server_ip_ls)"))
        {
            $var(S_server_ip_ls) = $avp(S_server_ip_ls);
            $var(S_server_port_ls) = $avp(S_server_port_ls);
            $var(S_server_proto_ls) = $avp(S_server_proto_ls);
        }
        else
        {
            $var(S_server_ip_ls) = "*";
            $var(S_server_port_ls) = "*";
            $var(S_server_proto_ls) = "*";
        }

        if($var(S_temp_node_ls) == "Any")
        {
            $var(S_temp_node_ls) = "*";
                $var(S_temp_uri_ls) = '';

                if(is_method("REGISTER"))
                    $var(S_temp_uri_ls)=$(ct{nameaddr.uri}{uri.user});
                else
                    $var(S_temp_uri_ls)=$rU;

                if($var(S_temp_uri_ls) != "" && $var(S_temp_uri_ls) != '')
                {
                    $(avp(C_sys_current_binding_ip_gs)[*]) = $null;

                    xlog("L_INFO", "CI=$ci - R19 - Selecting SIP server that best matches $var(S_temp_uri_ls) and $var(S_temp_node_ls)\n");
                    if(osb_memdb_nl_select_best_match("osv_all,*|*|*|$var(S_server_ip_ls)|$var(S_server_port_ls)|$(var(S_server_proto_ls){s.toupper})|*|$var(S_temp_node_ls)|$var(S_temp_uri_ls)|*|*|*,","$avp(S_osvall_record_gs)|||$avp(C_sys_current_binding_ip_gs)|$avp(C_sys_current_binding_port_gi)|$avp(C_sys_current_binding_transp_gs)|$avp(S_ds_grp_name_gs)|$avp(S_ds_group_gs)|$avp(S_ds_prefix_gs)|$avp(S_ds_No_answer_timer_gs)|$avp(S_ds_No_reply_timer_gs)|",8))
                        $avp(S_osv_port_gs) = $avp(C_sys_current_binding_port_gi);
                    else if(osb_memdb_nl_select_best_match("osv_all,*|*|*|$var(S_server_ip_ls)|$var(S_server_port_ls)|$(var(S_server_proto_ls){s.toupper})|*|$var(S_temp_node_ls)||*|*|*,","$avp(S_osvall_record_gs)|||$avp(C_sys_current_binding_ip_gs)|$avp(C_sys_current_binding_port_gi)|$avp(C_sys_current_binding_transp_gs)|$avp(S_ds_grp_name_gs)|$avp(S_ds_group_gs)|$avp(S_ds_prefix_gs)|$avp(S_ds_No_answer_timer_gs)|$avp(S_ds_No_reply_timer_gs)|",8))
                        $avp(S_osv_port_gs) = $avp(C_sys_current_binding_port_gi);
                    else
                        xlog("L_ERR", "CI=$ci - R19 - No matches found!\n");
                }
                else
                {
                    $var(S_temp_node_ls) = "NODE1";
                    xlog("L_INFO", "CI=$ci - R19 - Get osv current binding by node\n");
                    if(!osb_get_osv_current_binding_by_node("$var(S_temp_node_ls)", "$avp(C_sys_current_binding_ip_gs)", "$avp(C_sys_current_binding_port_gi)", "$avp(C_sys_current_binding_transp_gs)"))
                        xlog("L_ERR", "CI=$ci - R19.2 - Any binding IP=$var(S_tmp_gs) not available for both nodes, avp(C_wan_ip_gs)=$avp(C_wan_ip_gs)\n");
                }
                xlog("L_INFO", "CI=$ci - R19 - avp(S_sys_osv_node_gs)=$avp(S_sys_osv_node_gs),avp(C_sys_current_binding_ip_gs)=$avp(C_sys_current_binding_ip_gs),avp(C_sys_current_binding_transp_gs)=$avp(C_sys_current_binding_transp_gs),avp(C_wan_ip_gs)=$avp(C_wan_ip_gs)\n");
        }
        else
        {
            $avp(S_sys_osv_node_gs) = "NODE1";
            $var(S_tmp_gs)=$fd;
            xlog("L_INFO", "CI=$ci - R19 - avp(S_sys_osv_node_gs)=$avp(S_sys_osv_node_gs),avp(C_sys_current_binding_ip_gs)=$avp(C_sys_current_binding_ip_gs) \n");

                xlog("L_INFO", "CI=$ci - R19 - this is clustered mode,var(S_tmp_gs)=$var(S_tmp_gs), dipping into osv_all with *|*|*|*|*|*|*|$var(S_temp_node_ls)|*|*|*|* \n");
                $var(S_memdb_return_li) = osb_memdb_select("osv_all,*|*|*|$var(S_server_ip_ls)|$var(S_server_port_ls)|$(var(S_server_proto_ls){s.toupper})|*|$var(S_temp_node_ls)|*|*|*|*,","|$avp(S_sys_osv_node_gs)||$avp(C_sys_current_binding_ip_gs)|$avp(C_sys_current_binding_port_gi)|$avp(C_sys_current_binding_transp_gs)||||||");
            if ($var(S_memdb_return_li) == 1)
            {
                xlog("L_INFO", "CI=$ci - R19 - found sourceIP= $var(S_tmp_gs) in osv_all,var(S_temp_node_ls)=$var(S_temp_node_ls),avp(C_sys_current_binding_ip_gs)=$avp(C_sys_current_binding_ip_gs), avp(C_sys_current_binding_port_gi)=$avp(C_sys_current_binding_port_gi)\n");
            }
        }
    }

    if(not_empty("$avp(C_fw_ext_ip_gs)"))
        $avp(C_advertised_ip_gs) = $avp(C_fw_ext_ip_gs);
    else if(not_empty("$avp(S_lb_ext_ip_gs)"))
        $avp(C_advertised_ip_gs) = $avp(S_lb_ext_ip_gs);
    else if(not_empty("$avp(C_fwd_ep_ip_gs)"))
    {
        $avp(C_advertised_ip_gs) = $avp(C_fwd_ep_ip_gs);
        $avp(S_fwd_ep_used_gb) = 1;
    }
    else
        $avp(C_advertised_ip_gs) = $avp(C_wan_ip_gs);

    put_ip_in_paran('$avp(C_advertised_ip_gs)', '$avp(C_advertised_ip_gs)');
    if($avp(C_sys_current_binding_ip_gs) != $null && $avp(C_sys_current_binding_ip_gs) != '')
      put_ip_in_paran('$avp(C_sys_current_binding_ip_gs)', '$avp(C_sys_current_binding_ip_gs)');

    if (is_gflag("6"))
    {
        xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
        bm_log_timer("route-19");
    }
}

########################################################################
#CALL_FROM_OSV_ROUTE: Final process for request from core side
########################################################################
route[CALL_FROM_OSV_ROUTE]
{
    if (is_gflag("6"))
        bm_start_timer("route-15");

   xlog("L_INFO", "CI=$ci - R15 - Entry M=$rm avp(C_wan_ip_gs)=$avp(C_wan_ip_gs), avp(C_core_ip_gs)=$avp(C_core_ip_gs), avp(S_int_ip_gs)=$avp(S_int_ip_gs), var(S_webRtc_gi)=$var(S_webRtc_gi), rp=$rp Rp=$Rp flags=$mF to=$to ct=$ct\n");

   #incoming from 8k to local subscriber
   if(($var(C_ssm_msg_gb) == 0) && ($var(C_call_msg_gb) == 1))
   {
       if($var(S_webRtc_gi) == 0 || !compare_ips('avp(S_int_ip_gs)', '$var(S_lanip_4_6_gs)')) # Not WRTC or WRTC from WAN
       {
           $var(C_hdr_rr_gs)= ";twan=yes";
           xlog("L_INFO", "CI=$ci - R15 - setting var(C_hdr_rr_gs)=$var(C_hdr_rr_gs), \n");
       }
       else
           $var(C_hdr_rr_gs)= "";
   }
   put_ip_in_paran('$avp(C_wan_ip_gs)', '$avp(C_wan_ip_gs)');
   $var(S_portmap_bypass_lb) = 0;
   if (is_method("REFER") && $sht(call-info=>$ci::INFOsent) == 1)
   {
        $var(S_portmap_bypass_lb) = 1;
        xlog("L_INFO", "CI=$ci - R15 - Port map is not performed for Resp. of INVITE generated from SSM after REFER\n");
   }
   else
        route(PORT_MAPPING_FROM_OSV_ROUTE); # external to internal ip/port conversion


   if($retcode==1 || $var(S_portmap_bypass_lb)) # ip/port conversion OK?
   {
       if(is_method("INVITE"))
       {
           # Send call information to CDR simulating ACC
           if(is_present_hf("Referred-By"))
           {
               if(!is_avp_set("$avp(S_hdr_refby2_gs)"))
               {
                   $(avp(S_hdr_refby2_gs)[*]) = $hdr(Referred-By);
               }
               # Referred-By is used for some blind transfer scenarios
               $avp(S_hdr_refby_gs) = ";referred_by" + $(hdr(Referred-By){nameaddr.nc_uri}{s.select,0,;});
           }

           # if (!isflagset(13) && $var(C_ssm_msg_gb) != 1)
           #    dialog_log("INVITE timestamp=$Ts;call_id=$ci;from_tag=$ft;to_tag=$tt;calling_id=inc;called_id=term;orig_dialled=$tU;orig-uri=$oU;r-uri=$rU;contact=$ct$var(S_cdr_replaces_param_gs);port=$sp;protocol=$pr$avp(S_hdr_refby_gs);f-uri=$fU;\n");

       }
       t_on_reply("NM_GENERAL_REPLY_ROUTE");

       if(($var(C_ssm_msg_gb) == 0) && ($var(C_call_msg_gb) == 1))
       {
          route(SSM_TAGS_LAN_2_WAN_ROUTE);

          route(SIP_HEADERS_CHANGE_ROUTE);

          $fs = $var(C_ssm_transport_gs) + ":" + $var(C_ssm_ip_gs);
          $du = "sip:" + $var(C_ssm_ip_gs) + ":" + $var(C_ssm_port_gi) + ";transport=" + $var(C_ssm_transport_gs);

          xlog("L_INFO", "CI=$ci - R15- Relay message to SSM fs=$fs du=$du\n");
          if(!t_relay_to())
          {
              xlog("L_ERR", "CI=$ci - R15- Failed to relay message to SSM. M=$rm RURI=$ru From=$fu To=$tu DU=$du FS=$fs\n");

              append_to_reply("Warning: 399 $avp(C_wan_ip_gs) - R15 - Failure in port mapping, port not found.\r\n");
              sl_send_reply("404", "Not Found");
              if (is_gflag("6"))
              {
                  xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
                  bm_log_timer("route-15");
              }
              exit;
          }
       }
       else
       {

           if (isflagset(11))
           {
               if ($(ru{uri.transport}{s.tolower}) != $null && $(ru{uri.transport}{s.tolower}) != '')
                  $avp(C_tmp2_gs)=$(ru{uri.transport}{s.tolower}) + ":"+$avp(C_wan_ip_gs);
               else
                  $avp(C_tmp2_gs)="udp:"+$avp(C_wan_ip_gs);
               xlog("L_INFO", "CI=$ci - R15 - Direct Sub -Socket is:$avp(C_tmp2_gs)\n");
           }
           else
           {
               $avp(C_tmp2_gs)=$var(C_ep1_transp_gs) + ":"+$avp(C_wan_ip_gs);
               xlog("L_INFO", "CI=$ci - R15 - REP call -Socket is:$avp(C_tmp2_gs)\n");
           }
           $fs = $avp(C_tmp2_gs);

          $var(S_log_fr_ls) = "";
          if($avp(C_inv_noanswr_timer_gs) != $null && $avp(C_inv_noanswr_timer_gs) != '' &&
            $avp(C_inv_noreply_timer_gs) != $null && $avp(C_inv_noreply_timer_gs) != '')
          {
              t_set_fr("$(avp(C_inv_noanswr_timer_gs){s.int})","$(avp(C_inv_noreply_timer_gs){s.int})"); # Set reply timeout
              $var(S_log_fr_ls) = "Setting FR timers to rep <" + $avp(C_inv_noanswr_timer_gs) + "," + $avp(C_inv_noreply_timer_gs) + ">";
          }
          else if (isflagset(11))
          {
              t_set_fr(360000,3000); # Set reply timers for remote subscriber
              $var(S_log_fr_ls) = "Setting FR timers to rsub <360000,3000>";
          }
          xlog("L_INFO", "CI=$ci - R15 - Force WAN socket set: $fs, du=$du . $var(S_log_fr_ls)\n");

          ## by now we should have advertised IP if fw was provisioned
          xlog("L_INFO", "CI=$ci - R15 - Message $rm-$rs using advertisedIp = $avp(C_advertised_ip_gs),  advertisedPort = $avp(C_advertised_port_gi)\n");
          if(isflagset(10))
          {
              put_ip_in_paran('$avp(C_advertised_ip_gs)', '$avp(C_advertised_ip_gs)');
              osb_set_adv_address('$avp(C_advertised_ip_gs)');
              osb_set_adv_port('$avp(C_advertised_port_gi)');

          }
          route(SIP_HEADERS_CHANGE_ROUTE);
          $var(S_relay_stat_gi) = t_relay_to("0x03");
          if($var(S_relay_stat_gi) < 0)
          {

              xlog("L_ERR", "CI=$ci - R15 - Relay failure - var(S_relay_stat_gi)=$var(S_relay_stat_gi), M=$rm RURI=$ru From=$fu To=$tu DU=$du FS=$fs delete pm avp(S_pmap_ext_port_gi)=$avp(S_pmap_ext_port_gi)\n");
              append_to_reply("Warning: 399 $var(C_ri_var_gs) - R15 - Relay failure.\r\n");
              if (isflagset(11) && is_method("OPTIONS"))
                  t_reply("404","Not Found");     # It will cause unregister on OSV
              else
                  t_reply("480","Temporarily Unavailable");
          }
       }
       if (is_gflag("6"))
       {
            xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
            bm_log_timer("route-15");
       }
       exit;
   }
   else
   {
       xlog("L_ERR", "CI=$ci - R15 - Port Mapping: External Port Not Found for CT=$ct, M=$rm\n");
       if(is_method("INVITE"))
       {
           # if (!isflagset(13) && $var(C_ssm_msg_gb) != 1)
           #    dialog_log("RESPONSE timestamp=$Ts;call_id=$ci;from_tag=$ft;to_tag=$tt;code=404;reason=Not Found;\n");

           append_to_reply("Warning: 399 $avp(C_wan_ip_gs) - R15 - Failure in port mapping, port not found.\r\n");
           sl_send_reply("404", "Not Found");
           if (is_gflag("6"))
           {
               xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
               bm_log_timer("route-15");
           }
           exit;
       }
   }
}


########################################################################
#REGISTRATER_REQ: Process registration from remote subscriber
########################################################################
route[REGISTER_REQ]
{
    xlog("L_INFO", "CI=$ci - R1r - Entry Register req flags=$mF CT=$ct cseq=$cs\n");
    $avp(S_hdr_user_agent_gs) = $ua;
    # -----------------------------------------------------------------
    # Registration handling static endpoints
    # -----------------------------------------------------------------
    if (is_gflag("21"))
    {
        # check if registration is to virtual address
        $avp(S_tmp_gs) = "";
        avp_subst("$avp(S_tmp_gs)", "/.*:(.*):.*/\1/ig");
        if($avp(S_tmp_gs)!= "" && $avp(S_tmp_gs) == $var(C_ri_var_gs))
        {
            # trying to register to physical address instead of virtual, refuse registartion
            xlog("L_ERR", "CI=$ci - R1r - Registration failed (mandatory virtual address)- F=$fu T=$tu CT=$ct IP=$var(C_si_var_gs) RD=$rd CI=$ci cseq=$cs\n");
            append_to_reply("Warning: 399 $var(C_ri_var_gs) - R1r - Registration failed:(mandatory virtual address).\r\n");
            sl_send_reply("403", "Forbidden");
            if (is_gflag("6"))
            {
                xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
                bm_log_timer("route-1");
            }
            exit;
        }
    }

    if ($shv(S_operational_mode_gs) != "normal")
    {
        xlog("L_ERR", "CI=$ci - R1r - Registration is not replied when csbc is in survivability mode\n");
        if (is_gflag("6"))
        {
            xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
            bm_log_timer("route-1");
        }
        exit;
    }

    $var(S_expire_gi)=3600;
    ## $avp(S_reg_ct_gs) = $hdr(Contact);
    if ($hdr(Contact) =~ "(.*)[Ee]xpires=(.*)")
    {
        $avp(C_tmp2_gs) = $null;
        ## $avp(S_reg_ct_gs) = $hdr(Contact);
        $var(S_expire_gi)=$sel(contact.expires);
    }
    else if (is_present_hf("Expires"))
        $var(S_expire_gi)=$(hdr(Expires){s.int});

    ## $avp(S_reg_ct_gs) = $(avp(S_reg_ct_gs){nameaddr.nc_uri});## some send contact without bracket

    #save contact to deleted later on if OSV refuses the registration
    $avp(S_hdr_tmp_ct_gs) = $avp(S_reg_ct_gs);

    #first check to see if the source is an ep
    if(is_avp_set("$avp(S_tmp_gs)") && !(isflagset(27)||isflagset(8)))
    {
        #this is  remote sub not coming from an ep
        xlog("L_INFO", "CI=$ci - R1r - maybe not be a sub behind an ep\n");
    }

    if(is_avp_set("$avp(S_reg_ct_gs)"))
    {
        #this is not a static ep
        if(isflagset(27) || isflagset(8))
        {
            xlog("L_INFO", "CI=$ci - R1r - not a static ep, but a sub behind an ep\n");
        }
        else
        {
            xlog("L_INFO", "CI=$ci - R1r - a remote sub \n");
        }
    }
    else
    {
        resetflag(27);
        resetflag(8);
    }

    # check number of registered contacts
    $var(S_min_expires_li) = REM_SUB_MIN_REG_EXPIRE;
    if ( $var(S_expire_gi) != 0 && $var(S_expire_gi) < $var(S_min_expires_li) )
    {
        xlog("L_INFO", "CI=$ci - R1r - Registration failed with Expire value $var(S_expire_gi) less than allow value $var(S_min_expires_li) - F=$fu T=$tu CT=$ct  IP=$var(C_si_var_gs) RD=$rd cseq=$cs\n");
        append_to_reply("Min-Expires: $var(S_min_expires_li)\r\n");
        append_to_reply("Warning: 399 $var(C_ri_var_gs) - R1r - Registration received contact header with an Expire value below the minimum allowable value.\r\n");

        sl_send_reply("423", "Interval Too Brief");
        # Marking as Reg Rate Violation, Blocking for min expire interval
        $var(S_reg_rate_violator_gi) = REM_SUB_QUARANTINE_REG_VIOLATOR;
        PROC_DOS_REG_RATE_VIOLATION

        if (is_gflag("6"))
        {
            xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
            bm_log_timer("route-1");
        }
        exit;
    }

    #throttling done only for remote subs
    if(isflagset(11))
    {
       # check if the source port is different from the port in Via, received test and RFC1918
       if((is_present_hf("Contact") && $(hdr(Contact){s.substr,0,1}) != "*"))
       {
          $var(S_tls_throttling_enabled_lb) = REM_SUB_TLS_THROTTLE_ENABLED;
          $var(S_transport_gs) = "UDP"; # init to UDP, null causes comparison with TLS below to report error trace

          if ($(ru{uri.transport}{s.tolower}) != $null)
             $var(S_transport_gs)=$(ru{uri.transport}{s.toupper});

          if (!($avp(S_hdr_user_agent_gs)=~"(.*)OpenScape Mobile Client(.*)") && (($var(S_tls_throttling_enabled_lb) == 1 && $var(S_transport_gs) == "TLS") || $var(S_transport_gs) != "TLS"))
          {
            if($(var(S_transport_gs){s.tolower}) == "udp")
              $var(S_sys_throttling_timer_gi)= REM_SUB_UDP_THROTTLE_INTERVAL;
            else
              $var(S_sys_throttling_timer_gi)= REM_SUB_TCP_THROTTLE_INTERVAL;

            $var(S_sys_throttle_threshold_li) = REM_SUB_MAX_THROTTLE_TIMER;

            if ($var(S_wan_natted_gb))
            {
              setbflag(8);
              fix_nated_register();
            }
#           force_rport();
            setflag(17); # Re-Use NAT flag to indicate throttling for REGISTER
            if($var(S_pmap_property_changed_gb) !=1 && !isflagset(28) && ($var(S_expire_gi) > 0) && ($var(S_sys_throttling_timer_gi) > 0))
            {
                # if incoming expiry is less than throttling timer then use the expire instead.
                if ($var(S_expire_gi) < $var(S_sys_throttling_timer_gi))
                    $var(S_sys_throttling_timer_gi) = $var(S_expire_gi);

                # Randomize the throttlingTimer towards Subscriber by 10 percent.
                $var(S_sys_throttling_timer_gi) = $var(S_sys_throttling_timer_gi) - ($RANDOM / (2147483648 / ($var(S_sys_throttling_timer_gi) * 10/100)));

                # For OSMO, force the throttling to 10 mins
#                if($var(S_sys_throttling_timer_gi) < 600 && $avp(S_hdr_user_agent_gs)=~"(.*)OpenScape Mobile Client(.*)")
#                   $var(S_sys_throttling_timer_gi)=600;

                $avp(S_reg_ct_gs) = $hdr(Contact);
                $avp(S_reg_ct_gs) = $(avp(S_reg_ct_gs){nameaddr.nc_uri});## some send contact without bracket
                $avp(S_tmp_gs)=$null;
                $avp(C_tmp2_gs)=$null;
                $avp(S_pmap_sub_expiry_gs)=$null;
                $var(S_pmap_exp_as_li) = $avp(S_exp_as_gi);
                if($var(S_pmap_exp_as_li)==-3  )
                {
                    xlog("L_INFO", "CI=$ci - R1r - previous Register is awaiting response from OSV, discard this Register\n");
                    exit;
                }
                else if($var(S_pmap_exp_as_li)==-1 || $var(S_pmap_exp_as_li)==-2)
                {
                    #this is the second Register request -> ep is legitimate and not fraud
                    #proceed to send to 8K
                    xlog("L_INFO", "CI=$ci - R1r - second Register request ->legitimate,proceed to 8k\n");
                }
                else if(is_avp_set("$avp(S_pmap_map_time_gs)") && $var(S_pmap_exp_as_li)>0)
                {
                  $var(S_reg_currrent_time_gi) = $(Ts{s.int});
                  $var(S_map_time_li)     = $(avp(S_pmap_map_time_gs){s.int});

                  if ($var(S_reg_currrent_time_gi) >= $var(S_map_time_li))  ## Else, Should only happen in case of time change, allow REGISTER to be sent to OSV
                  {
                    $var(S_map_time_li) = $var(S_map_time_li) - $var(S_sys_throttling_timer_gi);  ## Allow 1 throttlingTimer/REGISTER grace

                    #$var(S_pmap_exp_as_li) corresponds to port map (fixed)
                    #$var(S_map_time_li) corresponds to the time when the Register came in and went to OSV

                    # Use the smallest of the expiry and the throttleThreshold to send Regsiter to OSV
                    if ($var(S_sys_throttle_threshold_li) > $var(S_pmap_exp_as_li))
                        $var(S_sys_throttle_threshold_li) = $var(S_pmap_exp_as_li);

                    # Randomize the throttlingTimer towards Subscriber by 10 percent.
                    $var(S_sys_throttle_threshold_li) = $var(S_sys_throttle_threshold_li) - ($RANDOM / (2147483648 / ($var(S_sys_throttle_threshold_li) * 10/100)));

                    $var(S_expiry_to_osv_li) = $var(S_map_time_li) + $var(S_sys_throttle_threshold_li);
                    xlog("L_INFO", "CI=$ci - R1r -  var(S_reg_currrent_time_gi)=$var(S_reg_currrent_time_gi) expirytoOSV=$var(S_expiry_to_osv_li), var(S_pmap_sub_expiry_gi)=$var(S_pmap_sub_expiry_gi), var(S_sys_throttling_timer_gi)=$var(S_sys_throttling_timer_gi), var(S_sys_throttle_threshold_li)=$var(S_sys_throttle_threshold_li), var(S_map_time_li)=$var(S_map_time_li)\n");

                    if($var(S_reg_currrent_time_gi)  < $var(S_expiry_to_osv_li))
                    {
                        # if expiration time is still not close to the end don't send to 8k handle locally
                        $var(S_pmap_sub_expiry_gi) = $var(S_reg_currrent_time_gi) + $var(S_sys_throttling_timer_gi);

                        # If the source port is changed then we need to update it so that future messages would use the correct socket

                        osb_memdb_update("port_map,$avp(S_pmap_id_gi)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","*|$var(C_si_var_gs)|$avp(S_reg_ct_gs)|$sp|*|*|*|$var(S_pmap_sub_expiry_gi)|$var(C_ri_var_gs)|$var(S_ep_id_gi)|$(avp(S_reg_ct_gs){uri.user})|$(avp(S_reg_ct_gs){uri.domain})|$(avp(S_reg_ct_gs){uri.port})|*|$avp(S_pm_transport_gs)|*|$avp(C_wan_port_gs)|$avp(S_core_realm_profile_gs)|$avp(S_wosmo_client_ip_gs)|*|*|*|*|*|*|*");

                        $(avp(S_tmp_gs)[*]) = $ct;
                        osb_set_ct_expires("$avp(S_tmp_gs)","$var(S_sys_throttling_timer_gi)");


                        append_to_reply("Contact:$avp(S_tmp_gs)\r\n");
                        if(search("X-Siemens-Proxy-State"))# Acting Like 8k Response
                        {
                            append_to_reply("Supported: x-oscar-susvr, x-oscar-opu\r\n");
                        }
                        if(proto==TLS)
                        {
                            append_to_reply("server-property: connectivity-check\r\n");
                        }
                        force_rport();
                        sl_send_reply("200","OK");
                        if (is_gflag("6"))
                        {
                            xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
                            bm_log_timer("route-1");
                        }
                        exit;
                    }
                  }
                }
            }
          }
          xlog("L_INFO", "CI=$ci - R1r - Registration with Nat Flag cseq=$cs\n");
       }
    }

    # -----------------------------------------------------------------
    # Registration handling dynamic endpoints
    # -----------------------------------------------------------------
    if(isflagset(5) || $avp(C_gw_behind_ep_gi) !=0) {
       $avp(S_req_ct_gs) = $hdr(Contact);

        if ($avp(C_gw_behind_ep_gi) !=0)
            $avp(C_pmap_port_gi) = $var(C_ep2_core_port_gi);
        else
            $avp(C_pmap_port_gi) = $var(C_ep1_core_port_gi);
    }
    else{
       route(PORT_MAPPING_CATALOGUE_ROUTE); # port mapping

       if ($avp(S_pmap_ext_port_gi) > 0 && !isflagset(11) && !isflagset(15))
       {
          if (isflagset(8) || isflagset(27)) {
               setflag(15);
               xlog("L_INFO", "CI=$ci - R1r - sub behind branch, new port map entry added $avp(S_pmap_ext_port_gi), set flag 15 \n");
            }
            else {
               setflag(11);
               xlog("L_INFO", "CI=$ci - R1r - direct sub, new port map entry added $avp(S_pmap_ext_port_gi), set flag 11 \n");
            }
        }
    }

    if(is_present_hf("User-Agent"))
        $avp(S_hdr_user_agent_gs) = $ua;

    xlog("L_INFO", "CI=$ci - R1r - ua=$avp(S_hdr_user_agent_gs)\n");

    $var(S_proc_initial_regster_li) = PROCESS_INITIAL_REG_ENABLED;

    if ($var(S_proc_initial_regster_li) == 0)
    {
        #change the expiry to 10 seconds if exp_as==-1
        if ($avp(S_exp_as_gi) == -1 && isflagset(11))
        {
            if($var(S_is_src_lan_ip_ls) == 1 && $ua ==  "OpenScape Branch") # SP sent for UNREGISTER and port_map not found. Send 200 OK back.
            {
                xlog("L_INFO","CI=$ci - R1r - Unregister received from SP but no port_map entry found - F=$fu T=$tu CT=$ct IP=$var(C_si_var_gs) RD=$rd CI=$ci\n");
                sl_send_reply("200","OK");
            }
            else
            {
                $var(S_sys_rand_gi) = ($RANDOM / 71582789); # Random Value from 10 to 30
                if ($var(S_sys_rand_gi) < 10)
                    $var(S_sys_rand_gi) = $var(S_sys_rand_gi) + 10;
                xlog("L_WARN","CI=$ci - R1r - Request postponed to avoid overload (Initial register blocked) - F=$fu T=$tu CT=$ct IP=$var(C_si_var_gs) RD=$rd CI=$ci, retry after $var(S_sys_rand_gi) seconds\n");
                append_to_reply("Retry-After: $var(S_sys_rand_gi)\r\n");
                force_rport();
                sl_send_reply("503", "Server Unavailable");
            }
            if (is_gflag("6"))
            {
                xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
                bm_log_timer("route-1");
            }
            exit;
        }
    }

    if($var(S_dom_x_siemens_location_gs)!= '')
    {
        insert_hf("X-Siemens-Location: $var(S_dom_x_siemens_location_gs)\r\n", "To");
    }
    route(NM_PORT_MAPPING_TO_OSV_ROUTE); # header transformation
    route(NM_PORT_MAPPING_TO_OSV_PRE_ROUTE);### none OSV related headers manipulated
    route(NM_PORT_MAPPING_TO_OSV_POST_ROUTE);### only OSV related headers manipulated

    route(SSM_ROUTE); # Set rtpProxy if needed

    t_on_reply("NM_REGISTER_REPLY_ROUTE");

    route(NM_OUTGOING_RELAY_ROUTE); # relay
    if($retcode !=1)
    {
        xlog("L_ERR", "CI=$ci - R1r/R10 - Registration failed - M=$rm F=$fu T=$tu CT=$ct IP=$var(C_si_var_gs) CI=$ci\n");
        append_to_reply("Warning: 399 $var(C_ri_var_gs) - R1r - Registration failed: fail in relay in R10.\r\n");
        sl_reply_error();
        if (is_gflag("6"))
        {
            xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
            bm_log_timer("route-1");
        }
        exit;
    }

    if(!isflagset(28)) # Check if we need to save it in location table
    {
        if (is_gflag("13"))
            force_tcp_alias(0); # Add TCP alias port if changed by SIP phone. Funtion modified to avoid error logs when parameter is 0 and port is already set.
    }

    if (is_gflag("6"))
    {
        xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
        bm_log_timer("route-1");
    }
    exit;
}

########################################################################
#CORE_ROUTE_HDR_HANDLING: Handle Route header from core side request
########################################################################
route[CORE_ROUTE_HDR_HANDLING]
{
    xlog("L_INFO", "CI=$ci - R1t - Entry Core Route hdr handling M=$rm ssm_msg=$var(C_ssm_msg_gb) NG911Call=$var(S_NG911Call_gb)\n");
    # Unfortunately, remove_hf deletes all the Route, we just need to delete the top most and preserve the rest
    if (is_present_hf("Route"))
    {

        # INITIAL REQUEST OR NG911 Call - Only remove top most Route Header
        if ((has_totag()) || $var(S_NG911Call_gb) == 1)
        {
            $var(S_r_count_gi) = 0;
            $(avp(C_tmp2_gs)[*]) = $null;
            while($(hdr(Route)[$var(S_r_count_gi)]) != $null)
            {
                $(avp(C_tmp2_gs)[$var(S_r_count_gi)]) =  $(hdr(Route)[$var(S_r_count_gi)]);
                xlog("L_INFO", "CI=$ci -R1t - Route dummy, $var(S_r_count_gi) $(hdr(Route)[$var(S_r_count_gi)])\n");
                $var(S_r_count_gi) = $var(S_r_count_gi) + 1;
            }

            remove_hf("Route");
            $var(S_r_count_gi) = $var(S_r_count_gi) - 1;
            $var(S_r_count_gi) = $var(S_r_count_gi) - 1; # Don't put the top most Route
            while($var(S_r_count_gi) >= 0)
            {
                insert_hf("Route: $(avp(C_tmp2_gs)[$var(S_r_count_gi)])\r\n","Route");
                $var(S_r_count_gi) = $var(S_r_count_gi) - 1;
            }
            $(avp(C_tmp2_gs)[*]) = $null;
        }
        else
        {
            remove_hf("Route");
        }

        if ($var(C_ssm_msg_gb) == 0) # Do it only for the first time
        {
            $(avp(C_tmp2_gs)[*]) = $null;
            $avp(C_tmp2_gs) = $(hdr(Route)[0]);

            $var(S_route_uri_ls) = $(hdr(Route)[0]{s.select,0,,}{nameaddr.uri});
            #need to get the port from the top most Route
            $(avp(C_port_gi)[*]) = $(var(S_route_uri_ls){uri.port});
            $var(S_routeh_port_gi) = $avp(C_port_gi);
            $var(S_ssp_fwd_port_gs) = $(var(S_route_uri_ls){param.value,fwdport});
            $var(S_route_uri_ls) = $(var(S_route_uri_ls){param.value,gwIP});
            if ($(var(S_route_uri_ls){s.len}) != 0)
            {
                $var(S_ssp_ip_addr_r0_gs) = $(var(S_route_uri_ls){s.select,0,~});   #whatever comes after "~"
                $var(S_ssp_ip_port_r0_gs) = $(var(S_route_uri_ls){s.select,1,~});   #whatever comes after next "~"
                $var(S_ssp_ip_tran_r0_gs) = $(var(S_route_uri_ls){s.select,2,~});   #whatever comes after next "~"
                $var(S_port_transp_opt_gs) = $(var(S_route_uri_ls){s.select,3,~});
                $avp(S_rep_ip_gs) = $var(S_ssp_ip_addr_r0_gs);

                if ($ft != $(var(S_route_uri_ls){param.value,ftag}))  # Request from called party
                {
                    $var(S_toh_opt_transp_gs) = $(var(S_port_transp_opt_gs){s.select,0,-});
                    $var(S_toh_opt_port_gs) = $(var(S_port_transp_opt_gs){s.select,1,-});
                    $var(S_fromh_opt_transp_gs) = $(var(S_port_transp_opt_gs){s.select,2,-});
                    $var(S_fromh_opt_port_gs) = $(var(S_port_transp_opt_gs){s.select,3,-});
                    xlog("L_INFO", "CI=$ci -R1t - var(S_toh_opt_transp_gs)=$var(S_toh_opt_transp_gs) var(S_toh_opt_port_gs)=$var(S_toh_opt_port_gs) var(S_fromh_opt_transp_gs)=$var(S_fromh_opt_transp_gs) var(S_fromh_opt_port_gs)=$var(S_fromh_opt_port_gs)\n");
                }
                else
                {
                    $var(S_fromh_opt_transp_gs) = $(var(S_port_transp_opt_gs){s.select,0,-});
                    $var(S_fromh_opt_port_gs) = $(var(S_port_transp_opt_gs){s.select,1,-});
                    $var(S_toh_opt_transp_gs) = $(var(S_port_transp_opt_gs){s.select,2,-});
                    $var(S_toh_opt_port_gs) = $(var(S_port_transp_opt_gs){s.select,3,-});
                    xlog("L_INFO", "CI=$ci -R1t - var(S_fromh_opt_transp_gs)=$var(S_fromh_opt_transp_gs) var(S_fromh_opt_port_gs)=$var(S_fromh_opt_port_gs) var(S_toh_opt_transp_gs)=$var(S_toh_opt_transp_gs) var(S_toh_opt_port_gs)=$var(S_toh_opt_port_gs)\n");
                }

                xlog("L_INFO", "CI=$ci -R1t -  found Route 0 avp(rep_ip)=ssp_ip_addr=$var(S_ssp_ip_addr_r0_gs), ssp_ip_port=$var(S_ssp_ip_port_r0_gs), ssp_ip_tran=$var(S_ssp_ip_tran_r0_gs)\n");

                if ($(hdr(Route)[1]) != $null)
                {
                    $var(S_route_uri_ls) = $(hdr(Route)[1]{s.select,0,,}{nameaddr.uri});
                    if ($(var(S_route_uri_ls){s.len}) != 0)
                    {
                        $var(S_ssp_ip_addr_r1_gs) = $(var(S_route_uri_ls){uri.host});
                        $var(S_ssp_ip_port_r1_gs) = $(var(S_route_uri_ls){uri.port});
                        xlog("L_INFO", "CI=$ci -R1t -  found Route 1 ssp_ip_addr=$var(S_ssp_ip_addr_r1_gs), ssp_ip_port=$var(S_ssp_ip_port_r1_gs)\n");
                    }
                }

                if ($avp(C_tmp2_gs) =~ ".*;tossp")
                {
                    $var(S_is_tssp_gb) = 1;
                    # setflag(1); ### SET FLAG BASED ON THE DIRECTION OF INVITE/REINVITE
                }

                if ($avp(C_tmp2_gs) =~ ".*;fossp")
                {
                    $var(S_is_fssp_gb) = 1;
                    # setflag(2); ### SET FLAG BASED ON THE DIRECTION OF INVITE/REINVITE
                }

                if ($var(S_is_tssp_gb) == 1 || $var(S_is_fssp_gb) == 1)
                {
                    $avp(C_ssp_rip_gs) = $var(S_ssp_ip_addr_r0_gs);
                    xlog("L_INFO", "CI=$ci - R1t - SSP call, is_tssp=$var(S_is_tssp_gb), is_fssp=$var(S_is_fssp_gb), rip=$avp(C_ssp_rip_gs)\n");
                }
            }

            $(avp(C_tmp2_gs)[*]) = $null;
        }
    }
}

########################################################################
#INITIAL_REQ: Handle initial request (without To tag)
########################################################################
route[INITIAL_REQ]
{
    xlog("L_INFO", "CI=$ci - R1i Entry - M=$rm flags=$mF\n");
    # -----------------------------------------------------------------
    # strict route handling
    # -----------------------------------------------------------------

    # -----------------------------------------------------------------
    # CANCEL and ACK handling - strict
    # -----------------------------------------------------------------
    if(is_method("CANCEL") || is_method("ACK"))
    {
        if(t_check_trans())
        {
            t_on_reply("NM_GENERAL_REPLY_ROUTE");
        }
    }

    # -----------------------------------------------------------------
    # INVITE handling - strict
    # -----------------------------------------------------------------
    if(is_method("INVITE"))
    {
        setflag(3);
        # CDR xfer information
        if(is_present_hf("Replaces"))
        {
            $avp(S_tmp_gs) = $(hdr(Replaces)[0]{s.select,0,;});
            $var(S_cdr_replaces_param_gs)= ";Replaces=" + $avp(S_tmp_gs);
        }
        else
            $var(S_cdr_replaces_param_gs)="";
    }



    # -----------------------------------------------------------------
    # General routing
    # -----------------------------------------------------------------
    if (isflagset(10))   # Request from 8k
    {
        #verify if uri is a gw ep
        if ($var(C_mosip_message_gb))
        {
            # Call Discpatcher
            $var(S_stateless_msg_gb) = 0;
            route(NM_OUTGOING_FORWARD_ROUTE);
            exit;
        }

        # not using lookup because of dual invites for KSs
        if(is_method("INVITE"))
        {   # Send call information to CDR simulating ACC
            if(is_present_hf("Referred-By"))
            {
                $avp(S_hdr_refby_gs) = ";referred_by" + $(hdr(Referred-By){nameaddr.nc_uri}{s.select,0,;});
            }
            # if (!isflagset(13) && $var(C_ssm_msg_gb) != 1)
            #    dialog_log("INVITE timestamp=$Ts;call_id=$ci;from_tag=$ft;to_tag=$tt;calling_id=inc;called_id=term;orig_dialled=$tU;orig-uri=$oU;r-uri=$rU;contact=$ct$var(S_cdr_replaces_param_gs);port=$sp;protocol=$pr$avp(S_hdr_refby_gs);f-uri=$fU;\n");
        }

        route(CALL_FROM_OSV_ROUTE); # Initial dialog request
    }
    else # Request to OSV
    {
        # outgoing (routed by 8k)
        if(is_method("INVITE"))
        {   # Send call information to CDR simulating ACC
            if(is_present_hf("Referred-By"))
            {
                $avp(S_hdr_refby_gs) = ";referred_by" + $(hdr(Referred-By){nameaddr.nc_uri}{s.select,0,;});
            }

            # if (!isflagset(13) && $var(C_ssm_msg_gb) != 1)
            #    dialog_log("INVITE timestamp=$Ts;call_id=$ci;from_tag=$ft;to_tag=$tt;calling_id=orig;called_id=out;orig_dialled=$tU;r-uri=$rU;orig-uri=$oU;contact=$ct$var(S_cdr_replaces_param_gs);port=$sp;protocol=$pr$avp(S_hdr_refby_gs);f-uri=$fU;\n");
        }

        t_on_reply("NM_GENERAL_REPLY_ROUTE");

        if (isflagset(25)) ### request is coming from WAN/access side
        {
            if(isflagset(16))
                route(EMERGENCY_CALL_INV_ROUTE);
            route(NM_PORT_MAPPING_TO_OSV_ROUTE); # header transformation
            route(NM_PORT_MAPPING_TO_OSV_PRE_ROUTE);### none OSV related headers manipulated
            route(NM_PORT_MAPPING_TO_OSV_POST_ROUTE);### only OSV related headers manipulated
        }
        route(NM_OUTGOING_RELAY_ROUTE); # relay request
        if (is_gflag("6"))
        {
            xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
            bm_log_timer("route-1");
        }
        exit;
    }
}

########################################################################
#ESTABLISHED_DLG_REQ: Handle established dialog request (with To tag)
########################################################################
route[ESTABLISHED_DLG_REQ]
{
    xlog("L_INFO", "CI=$ci - R1e-LR Entry - M=$rm to-tag=$tt\n");
    xlog("L_INFO", "CI=$ci - R1e-LR refer-flag in  htab=$sht(call-info=>$ci::refer)\n");
    ## check to see if this is INFO & pstn dialin related
    if ($sht(call-info=>$ci::sent) == 1)
    {
        if( is_method("INFO")) #####  || (is_method("BYE") && $sht(call-info=>$ci::refer) == 1))
        {
            xlog("L_INFO", "CI=$ci - R1e-LR Entry - $rm recieved with tt=$tt\n");
            route(PROCESS_REQ_TO_GTC);
        }
        else if( is_method("REFER"))
        {
            xlog("L_INFO", "CI=$ci - R1e-LR Entry - REFERR recieved with tt=$tt, will be sent to SSM\n");
            if($sht(call-info=>$ci::sent) == 1)
            {
                xlog("L_INFO", "CI=$ci - R1e-LR Entry - REFERR related to pstn dialin \n");
                $avp(S_ep_name_gs) = $sht(call-info=>$ci::epname);
                $avp(S_tc_dial_ms_dn_gs) = $sht(call-info=>$ci::msdn);
                ### set flag in htab
                $sht(call-info=>$ci::refer) = 1;
                xlog("L_INFO", "CI=$ci - R1e-LR Entry - REFERR flag in htab set: $sht(call-info=>$ci::refer)\n");

                xlog("L_INFO", "CI=$ci - R1e-LR Entry - REFERR recieved related to pstn-dialin:avp(S_tc_dial_ms_dn_gs)=$avp(S_tc_dial_ms_dn_gs),avp(S_ep_name_gs)=$avp(S_ep_name_gs)\n");
                ### need to dip into REP to read the REP for MS
                xlog("L_INFO", "CI=$ci - R1e - dipping remote_ep for MS with *|*|*|*|*|$sel(via[1].host)|*...* \n");
                if (osb_memdb_select("remote_ep,*|$avp(S_ep_name_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","$avp(S_gw_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm_ip_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)|$avp(C_gw_core_ip_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|$avp(S_rep_home_dn_gs)||$avp(C_pmap_port_gi)|$avp(S_tmp_gs)|$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|$avp(S_sys_osv_node_gs)||$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||$avp(S_uri_based_route_gb)|$avp(S_access_control_gb)|$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||$avp(S_fwd_vlan_addr_port_gs)||||$avp(S_linked_ep_id_gi)") != 1)
                {
                    xlog("L_INFO", "CI=$ci - R1e - Dip with  avp(S_ep_name_gs)=$avp(S_ep_name_gs)  not found\n");
                    append_to_reply("Warning: 399 $var(C_si_var_gs) - R1e - could not find the REP element corresponding to MS read from tc_ep_ms_dialin\r\n");
                    sl_send_reply("403", "Forbidden");

                    t_release();

                    if (is_gflag("6"))
                    {
                        xlog("L_INFO", "bench: $rm-$rs\n");
                        bm_log_timer("route-46");
                    }
                    return;
                }
                else
                {
                    xlog("L_INFO", "CI=$ci - R1e - Dip successful,found MS ep:  ip|fqdn|port|GWtransport= $avp(S_gw_rm_ip_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)\n");
                    ### send the message to the gtc trunk
                    xlog("L_INFO", "CI=$ci - R1e - REFERR shall be forwarded to ssm\n");
                    $var(S_standalone_route_gi)  = 1;
                    $var(S_pstn_dialin_route_gi)  = 1;
                    $var(S_LanInvoked_gi) = 1;
                    $var(C_g_useSsmRecordRoute_gb) = 0;
                    $rd = $avp(S_gw_rm_ip_gs);
                    $rp = $avp(S_gw_rm_port_gi);
                    ### SEND IT TO ssm
                    route(CALL_FROM_OSV_ROUTE); # Established dialog request
                }
            }
        }
        else if( is_method("BYE"))
        {
            #### this is pstnDialin related, coming either from MS or from SSM
            #### find the related data
            $avp(S_ep_name_gs) = $sht(call-info=>$ci::epname);
            xlog("L_INFO", "CI=$ci - R1e - dipping remote_ep for GTC with *|$avp(S_ep_name_gs)|*...* \n");
            if (osb_memdb_select("remote_ep,*|$avp(S_ep_name_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","$avp(S_gw_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm_ip_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)|$avp(C_gw_core_ip_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|$avp(S_rep_home_dn_gs)||$avp(C_pmap_port_gi)|$avp(S_tmp_gs)|$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|$avp(S_sys_osv_node_gs)||$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||$avp(S_uri_based_route_gb)|$avp(S_access_control_gb)|$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||$avp(S_fwd_vlan_addr_port_gs)||||$avp(S_linked_ep_id_gi)") != 1)
            {
                xlog("L_INFO", "CI=$ci - R1e - Dip with  avp(S_ep_name_gs)=$avp(S_ep_name_gs)  not found\n");
                append_to_reply("Warning: 399 $var(C_si_var_gs) - R1e - could not find the REP element corresponding to MS read from tc_ep_ms_dialin\r\n");
                sl_send_reply("403", "Forbidden");

                t_release();

                if (is_gflag("6"))
                {
                    xlog("L_INFO", "bench: $rm-$rs\n");
                    bm_log_timer("route-46");
                }
                return;
            }
            else
            {
                xlog("L_INFO", "CI=$ci - R1e - Dip successful,found ep:  ip|fqdn|port|GWtransport= $avp(S_gw_rm_ip_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)\n");
            }

            if ($sel(v[1].port) == $sht(call-info=>$ci::MSport)) # Port is  MS port
            {
                $var(C_ct_domain_ip_ls) = $sht(call-info=>$ci::srcip);
                $var(C_ct_domain_transp_ls) = $sht(call-info=>$ci::srctransp);
                $var(C_ct_domain_port_ls) = $sht(call-info=>$ci::srcport);
                xlog("L_INFO", "CI=$ci - R1e - BYE received from MS, forward to ssm, $var(C_ct_domain_ip_ls): $var(C_ct_domain_port_ls)\n");
                $var(S_standalone_route_gi)  = 1;
                $var(S_pstn_dialin_route_gi)  = 1;
                $var(S_LanInvoked_gi) = 1;
                $var(C_g_useSsmRecordRoute_gb) = 0;
                ### change the rp with avp for core port
                if ($var(C_ct_domain_port_ls) == "tls")
                    $var(S_sip_suffix_gs) = "s";
                else
                    $var(S_sip_suffix_gs) = "";
                $var(S_sip_suffix_gs) = "sip" + $var(S_sip_suffix_gs);
                xlog("L_INFO", "CI=$ci - R1e - var(S_sip_suffix_gs)=$var(S_sip_suffix_gs),avp(C_gw_core_ip_gs)=$avp(C_gw_core_ip_gs),avp(C_gw_core_port_gi)=$avp(C_gw_core_port_gi),avp(C_gw_transp_gs)=$avp(C_gw_transp_gs) \n");
                $ru = $var(S_sip_suffix_gs)+":"+$var(C_ct_domain_ip_ls)+":"+$var(C_ct_domain_port_ls)+";transport="+$var(C_ct_domain_transp_ls);
                xlog("L_INFO", "CI=$ci - R1e - changed ru to $ru \n");
                ## add original socket
                $var(C_original_socket_gs) = $avp(C_gw_transp_gs)+":" +  $var(S_lanip_4_6_noparan_gs) + ":" + $avp(C_gw_core_port_gi);
                insert_hf("X-Original-Socket: $var(C_original_socket_gs)\r\n", "Call-ID");
                xlog("L_INFO", "CI=$ci - R1e - stored  var(C_original_socket_gs)=$var(C_original_socket_gs),\n");

                $var(C_original_dest_gs) = "sip:" + $rd + ":" + $rp + ";transport="+$rP+";";
                insert_hf("X-Original-dest: $var(C_original_dest_gs)\r\n", "Call-ID");
                if ($avp(C_ssp_pt_params_list_gs) != $null)
                    osb_set_passthrough_params("$ou","$ru","$avp(C_ssp_pt_params_list_gs)");
                ### SEND IT TO ssm
                $fs = $var(C_ssm_transport_gs) + ":" + $var(C_ssm_ip_gs);
                $du = "sip:" + $var(C_ssm_ip_gs) + ":" + $var(C_ssm_port_gi) + ";transport=" + $var(C_ssm_transport_gs);

                xlog("L_INFO", "CI=$ci - R1e- Relay message to SSM fs=$fs du=$du\n");
                if(!t_relay_to())
                    xlog("L_ERR", "CI=$ci - R1e- Relay failure - Failed to relay message to SSM, M=$rm RURI=$ru From=$fu To=$tu DU=$du FS=$fs\n");
                if (is_gflag("6"))
                {
                    xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
                    bm_log_timer("route-1");
                }
                exit;
            }
        }
        else if(is_method("UPDATE"))
        {
            xlog("L_INFO", "CI=$ci - R1e- Workaroud during PSTN dial-in - Update is not sent to MS but it is responded with 200 OK\n");
            sl_send_reply("200","OK");
            exit;
        }
    }

    if( isflagset(10) && ($var(C_call_msg_gb) == 1))
    {   #if this is a Request coming from 8K
        if($var(S_webRtc_gi) == 0)
        {
            $var(C_hdr_rr_gs)= ";twan=yes";
            xlog("L_INFO", "CI=$ci - R1e - var(S_webRtc_gi)=$var(S_webRtc_gi), setting var(C_hdr_rr_gs)=$var(C_hdr_rr_gs), \n");
        }
    }

    if(!has_totag() && !is_method("ACK") && !is_method("CANCEL"))
    {
        xlog("L_ERR", "CI=$ci - R1e - SIP 403 - Loose Routing Rejected - M=$rm RURI=$ru F=$fu T=$tu IP=$var(C_si_var_gs) CI=$ci\n");

        # if (is_method("INVITE") && $var(C_ssm_msg_gb) != 1)
        #    dialog_log("RESPONSE timestamp=$Ts;call_id=$ci;from_tag=$ft;to_tag=$tt;code=403;reason=Loose-Routing Rejected;\n");

        append_to_reply("Warning: 399 $var(C_ri_var_gs) - R1e - Loose-Routing Rejected.\r\n");
        sl_send_reply("403", "Loose-Routing Rejected");
        if (is_gflag("6"))
        {
            xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
            bm_log_timer("route-1");
        }
        exit;
    }

    # -----------------------------------------------------------------
    # BYE handling - loose
    # -----------------------------------------------------------------

    setflag(6); # to be used in acc - call start
    route(NM_OUTBOUND_ROUTE); # outbound

    if (is_gflag("6"))
    {
        xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
        bm_log_timer("route-1");
    }
    exit;
}



########################################################################
# route NM_OUTBOUND_ROUTE: outbound-route
# input pseudo-variables: $avp(C_gw_transp_gs), $avp(C_wan_ip_gs), $var(C_call_msg_gb), $var(C_fs_gs), $var(C_ri_var_gs),
#                         $var(C_ssm_msg_gb), $var(S_bracker_wan_ip_ls), $var(S_relay_stat_gi)
# output pseudo-variables: $var(C_fs_gs), $var(S_bracker_wan_ip_ls), $var(S_relay_stat_gi)
# input headers: Call-Id, From, To
# input flags: 1, 10, 11, 13, 4, g6
# changed flags:
########################################################################
route[NM_OUTBOUND_ROUTE]
{
    if (is_gflag("6"))
        bm_start_timer("route-2");

    xlog("L_INFO", "CI=$ci - R2 - Entry M=$rm CI=$ci, RP=$rp \n");

    t_on_reply("NM_GENERAL_REPLY_ROUTE");


    if (isflagset(4))
    {
        xlog("L_INFO", "CI=$ci - R2 - flag(4) is set\n");
        append_branch();
    }

    if(isflagset(10)) # Request from 8k
    {

        route(PORT_MAPPING_FROM_OSV_ROUTE); # internal to external ip/port conversion

        if($retcode ==-1) # ip/port conversion OK?
        {
            xlog("L_ERR", "CI=$ci - R2 - Port Mapping: External Port Not Found for CT=$ct\n");

            # if (!isflagset(13) && is_method("INVITE") && $var(C_ssm_msg_gb) != 1)
            #    dialog_log("RESPONSE timestamp=$Ts;call_id=$ci;from_tag=$ft;to_tag=$tt;code=404;reason=Not Found;\n");

            append_to_reply("Warning: 399 $var(C_ri_var_gs) - R2 - Failure in port mapping, port not found.\r\n");
            sl_send_reply("404","Not Found");
            if (is_gflag("6"))
            {
                xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
                bm_log_timer("route-2");
            }
            exit;
        }

        if(($var(C_ssm_msg_gb) == 0) && ($var(C_call_msg_gb) == 1))
        {
           route(SSM_TAGS_LAN_2_WAN_ROUTE);
           $var(S_to_access_gb) = 1;
           route(SSM_RELAY);
           exit;
        }
        else
        {
           $var(S_bracker_wan_ip_ls) = $avp(C_wan_ip_gs);
           put_ip_in_paran('$var(S_bracker_wan_ip_ls)', '$var(S_bracker_wan_ip_ls)');
           if(isflagset(11))
           {
              if ($(ru{uri.transport}{s.tolower}) != $null && $(ru{uri.transport}{s.tolower}) != '')
                  $var(C_fs_gs) = $(ru{uri.transport}{s.tolower}) + ":"+$var(S_bracker_wan_ip_ls);
              else
                  $var(C_fs_gs) = "udp:"+$var(S_bracker_wan_ip_ls);
           }
           else
              $var(C_fs_gs) = $avp(C_gw_transp_gs)+":"+$var(S_bracker_wan_ip_ls);
           xlog("L_INFO", "CI=$ci - R2- using the socket variable $var(C_fs_gs)\n");
        }

        $fs = $var(C_fs_gs);

        #### FRN5807
        $var(S_log_fr_ls) = "";
        if($avp(C_inv_noanswr_timer_gs) != $null && $avp(C_inv_noanswr_timer_gs) != '' &&
           $avp(C_inv_noreply_timer_gs) != $null && $avp(C_inv_noreply_timer_gs) != '')
        {
            t_set_fr("$(avp(C_inv_noanswr_timer_gs){s.int})","$(avp(C_inv_noreply_timer_gs){s.int})"); # Set reply timeout
            $var(S_log_fr_ls) = "Setting FR timers to rep <" + $avp(C_inv_noanswr_timer_gs) + "," + $avp(C_inv_noreply_timer_gs) + ">";
        }
        else if(isflagset(11) && $avp(S_no_reply_timer_gi) == $null)
        {
            t_set_fr(360000, 3000); # Set reply timeout of remote subscriber
            $var(S_log_fr_ls) = "Setting FR timers to rsub <360000,3000>";
        }
        xlog("L_INFO", "CI=$ci - R2 - socket set: $fs . $var(S_log_fr_ls)\n");

        route(SIP_HEADERS_CHANGE_ROUTE);

        $var(S_relay_stat_gi) = t_relay_to("0x03");
        if($var(S_relay_stat_gi) < 0)
        {
            if (is_method("OPTIONS") && isflagset(1) && not_empty("$avp(S_ep_name_gs)"))
            {
                $var(S_ssp_state_li) = "Not Connected";
                $var(S_ssp_alarm_state_li) = 1;
                xlog("L_INFO", "CI=$ci - R2 - Setting connection state='$var(S_ssp_state_li)' for ssp=$avp(S_ep_name_gs)\n");
                xlog("L_ALERT", "@larm: 5, 68, $var(S_ssp_alarm_state_li), @$avp(S_ep_name_gs) $avp(S_ep_name_gs)");
                osb_memdb_update("ssp_status,$avp(S_ep_name_gs)|*|*|*|*|*,","*|*|*|$var(S_ssp_state_li)|*|*");
            }
            xlog("L_ERR", "CI=$ci - R2 - Relay failure - var(S_relay_stat_gi)=$var(S_relay_stat_gi), M=$rm RURI=$ru From=$fu To=$tu DU=$du FS=$fs\n");
            append_to_reply("Warning: 399 $var(C_ri_var_gs) - R2 - Relay failure.\r\n");
            if (isflagset(11) && is_method("OPTIONS"))
                t_reply("404","Not Found");     # It will cause unregister on OSV
            else
                t_reply("480","Temporarily Unavailable");
        }
        if (is_gflag("6"))
        {
            xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
            bm_log_timer("route-2");
        }
    }
    else # Request to OSV
    {
        route(NM_PORT_MAPPING_TO_OSV_ROUTE); # header transformation (common parts, sets the variables)
        route(NM_PORT_MAPPING_TO_OSV_PRE_ROUTE);### none OSV related headers manipulated
        route(NM_PORT_MAPPING_TO_OSV_POST_ROUTE);### only OSV related headers manipulated

        route(SSM_ROUTE); # Set rtpProxy if needed


        route(NM_OUTGOING_RELAY_ROUTE); # relay request
        if (is_gflag("6"))
        {
            xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
            bm_log_timer("route-2");
        }
        exit;
    }
}



########################################################################
# route QUERY_REP_LAN_TO_WAN_CALL_ROUTE: Route for dipping - OSV (LAN) to WAN
########################################################################
route[QUERY_REP_LAN_TO_WAN_CALL_ROUTE]
{
    if (is_gflag("6"))
       bm_start_timer("route-3");

    $avp(C_fwd_ep_ip_gs)          = "";
    $avp(C_fwd_ep_port_tcp_gs)    = "";
    $avp(C_fwd_ep_port_tls_gs)    = "";
    $avp(C_fwd_ep_port_udp_gs)    = "";
    $avp(S_fwd_ep_used_gb)        = 0;

    $avp(C_gw_behind_ep_gi)       = 0;
    $var(S_first_ep_found_gi)     = 0;
    $var(S_sys_count_gi)          = 0;
    $var(S_ssm_rm_ip_gs)          = "";
    $var(S_ssm_fqdn_ls)           = "";
    $var(S_dynamic_peer_found_gb) =  0;

    xlog("L_INFO", "CI=$ci - R3 - Entry M=$rm CI=$ci, rd=$rd, Rp=$Rp, rp=$rp, avp(C_port_gi)=$avp(C_port_gi),avp(C_wan_ip_gs)=$avp(C_wan_ip_gs), avp(S_int_ip_gs)=$avp(S_int_ip_gs) \n");

    $avp(C_req_transp_gs) = $(pr{s.tolower});  # Store received transport to use in reply route
    $var(C_hdr_rcv_transp_gs) = $avp(C_req_transp_gs);

    xlog("L_INFO", "CI=$ci - R3 - avp(C_req_transp_gs)=$avp(C_req_transp_gs)\n");

    $var(S_isFqdn_ls) = $rd;
    if(!PROC_IS_PURE_IP)
    {
       #this is case of fqdn, this must be gw, try to access the remote ep using fqdn
       xlog("L_INFO", "CI=$ci - R3 -  this is fqdn case\n");

       #set the avp for fqdn
       $avp(S_is_fqdn_gs)=1;
    }

    if($ru =~ "urn:service:(sos|counseling).*")
    {
       $var(S_NG911Call_gb) = 1;
       xlog("L_INFO", "CI=$ci - R3 - NG911 Call \n");
    }

    ## store the avp in temporary variable
    $var(C_inv_noanswr_timer_gs) = $avp(C_inv_noanswr_timer_gs);
    $var(C_inv_noreply_timer_gs) = $avp(C_inv_noreply_timer_gs);

    ## Clear gw avps
    $(avp(S_gw_id_gi)[*])                 = $null;
    $(avp(S_ses_id_gi)[*])                = $null;
    $(avp(C_gw_type_gi)[*])               = $null;
    $(avp(C_ssp_gw_profile_gs)[*])        = $null;
    $(avp(S_gw_rm_ip_gs)[*])              = $null;
    $(avp(S_gw_rm_ip_list_gs)[*])         = $null;
    $(avp(S_gw_rm_fqdn_gs)[*])            = $null;
    $(avp(S_gw_rm_port_gi)[*])            = $null;
    $(avp(C_gw_transp_gs)[*])             = $null;
    $(avp(S_rep_bitmap_gi)[*])            = $null;
    $(avp(C_gw_core_ip_gs)[*])            = $null;
    $(avp(S_gw_core_fqdn_gs)[*])          = $null;
    $(avp(C_gw_core_port_gi)[*])          = $null;
    $(avp(S_gw_emergency_prefixes_gs)[*]) = $null;
    $(avp(S_rm_logical_id_gs)[*])         = $null;
    $(avp(S_gw_is_natted_gs)[*])          = $null;
    $(avp(S_networkid_gs)[*])             = $null;
    $(avp(S_rm_media_ip_gs)[*])           = $null;
    $(avp(S_rm_media_subnet_mask_gs)[*])  = $null;
    $(avp(S_uri_based_route_gb)[*])       = $null;
    $(avp(S_access_control_gb)[*])        = $null;
    $(avp(S_associated_ep_id_gi)[*])      = $null;
    $(avp(C_inv_noanswr_timer_gs)[*])     = $null;
    $(avp(C_inv_noreply_timer_gs)[*])     = $null;
    $(avp(S_rep_home_dn_gs)[*])           = $null;
    $(avp(S_outbnd_pxy_ip_gs)[*])         = $null;
    $(avp(S_rep_reg_addr_gs)[*])          = $null;
    $(avp(S_rep_digest_realm_gs)[*])      = $null;
    $(avp(S_rep_digest_user_gs)[*])       = $null;
    $(avp(S_rep_digest_psw_gs)[*])        = $null;
    $(avp(S_linked_ep_id_gi)[*])          = $null;

    $var(S_queryport_li)                  = $Rp;
    $var(S_query_ip_ls)                   = $var(C_ri_var_gs);

    $var(S_tmp_gs)                        = $avp(C_pmap_port_gi);
    $(avp(S_tmp_gs)[*])                   = $null;

    $var(S_int_ip_gs)                     = '';


    xlog("L_INFO", "CI=$ci - R3 - var(S_pmap_found_in_portmap_gb)=$var(S_pmap_found_in_portmap_gb), avp(S_int_ip_gs)=$avp(S_int_ip_gs) \n");
    if(!is_method("INVITE") && isflagset(13) && $sht(call-info=>$ci::sent) == 1)
    {
        xlog("L_INFO", "CI=$ci - R3 - Request $rm received for pstn dialin call \n");
        $var(S_memdb_attempt_ls) = 1;
        $avp(S_tc_dial_ms_dn_gs) = $sht(call-info=>$ci::msdn);
        $avp(S_ep_name_gs) = $sht(call-info=>$ci::epname);
        xlog("L_INFO", "CI=$ci - LR: R3 - dipping tc_ep_ms_dialin with *|$avp(S_ep_name_gs)|*|*|$avp(S_tc_dial_ms_dn_gs)\n");
        $var(S_memdb_return_gi) = osb_memdb_select("tc_ep_ms_dialin,*|$avp(S_ep_name_gs)|*|*|$avp(S_tc_dial_ms_dn_gs),1","$avp(S_ses_id_gi)|$avp(S_ep_name_gs)||$avp(S_tc_dial_lanuage_gb)|");
        if($var(S_memdb_attempt_ls) == 1)
        {
            xlog("L_INFO", "CI=$ci - R3 - found  ms_dn: $avp(S_tc_dial_ms_dn_gs), avp(S_ep_name_gs)=$avp(S_ep_name_gs),avp(S_tc_dial_lanuage_gb)=$avp(S_tc_dial_lanuage_gb)\n");
            $var(S_gtc_pstn_dialin_gs)     = 1;   ## global variable for pstn_dialin
            $var(S_LanInvoked_gi) = 1;
            $var(S_first_ep_found_gi) = 1;
            if( $sht(call-info=>$ci::refer) == 0)
            {
                ### call special route for pstn_dialin
                # This route will exit if the destination is configured for PSTN dial-in route
                route(PROCESS_PSTN_DIALIN_ROUTE);
            }
        }
    }
    if($var(S_pmap_found_in_portmap_gb) == 1 && $avp(S_int_ip_gs) != $null) # PM but Remote EP not found earlier
    {
        $var(S_int_ip_gs) = $avp(S_int_ip_gs);
        xlog("L_INFO", "CI=$ci - R3 - lookup remote_ep using target address: avp(S_int_ip_gs)=$avp(S_int_ip_gs) \n");
        ### Case where OSV doesnt send Route but Sub is behind EP. For OSB 50i cases we need to elimintae the GW entry from the dip result
        xlog("L_INFO", "CI=$ci - R3 - lookup remote_ep using target address: avp(S_int_ip_gs)=$avp(S_int_ip_gs) \n");

        if (osb_memdb_select("remote_ep,*|*|*|3|*|$avp(S_int_ip_gs)|*|*|*|*|*|*|*|*|*|*|$avp(S_int_ip_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","$avp(S_gw_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm_ip_list_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)|$avp(C_gw_core_ip_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|$avp(S_rep_home_dn_gs)||$avp(C_pmap_port_gi)|$avp(S_tmp_gs)|$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|$avp(S_sys_osv_node_gs)||$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||$avp(S_uri_based_route_gb)|$avp(S_access_control_gb)|$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||$avp(S_fwd_vlan_addr_port_gs)||||$avp(S_linked_ep_id_gi)") != 1)
        {
            osb_memdb_select("remote_ep,*|*|*|4|*|$avp(S_int_ip_gs)|*|*|*|*|*|*|*|*|*|*|$avp(S_int_ip_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","$avp(S_gw_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm_ip_list_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)|$avp(C_gw_core_ip_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|$avp(S_rep_home_dn_gs)||$avp(C_pmap_port_gi)|$avp(S_tmp_gs)|$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|$avp(S_sys_osv_node_gs)||$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||$avp(S_uri_based_route_gb)|$avp(S_access_control_gb)|$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||$avp(S_fwd_vlan_addr_port_gs)||||$avp(S_linked_ep_id_gi)");
        }

        if(!is_avp_set("$avp(S_gw_id_gi)")) {
           xlog("L_INFO", "CI=$ci - R3 - lookup remote_ep using target address: avp(S_int_ip_gs)=$avp(S_int_ip_gs) Failed\n");
           return;
        }
    }
    else if(is_method("REGISTER") && $var(S_sys_internal_msg_gb) && isflagset(10) && is_present_hf("X-Siemens-Service-Provider")) ### SSP REGISTER FROM SP
    {
        $var(S_ssp_ls) = $hdr(X-Siemens-Service-Provider);  ## this contains now the ep name
        $(avp(S_gw_id_gi)[*]) = $null;
        xlog("L_INFO", "CI=$ci - R3 - dipping into remote_ep *|$var(S_ssp_ls)|*...* \n");
        # Check first resolved addresses
        if(osb_memdb_select("remote_ep,*|$var(S_ssp_ls)|*|5|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|0|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","$avp(S_gw_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm_ip_list_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)|$avp(C_gw_core_ip_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|$avp(S_rep_home_dn_gs)||$avp(C_pmap_port_gi)|$avp(S_tmp_gs)|$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|$avp(S_sys_osv_node_gs)||$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||$avp(S_uri_based_route_gb)|$avp(S_access_control_gb)|$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)|$avp(S_outbnd_pxy_ip_gs)|$avp(S_outbnd_pxy_fqdn_gs)|$avp(S_outbnd_pxy_port_gs)|$avp(S_rep_reg_addr_gs)|$avp(S_rep_reg_port_gs)|$avp(S_fwd_vlan_addr_port_gs)||||$avp(S_linked_ep_id_gi)") != 1)
        {
            if(osb_memdb_select("remote_ep,*|$var(S_ssp_ls)|*|5|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","$avp(S_gw_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm_ip_list_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)|$avp(C_gw_core_ip_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|$avp(S_rep_home_dn_gs)||$avp(C_pmap_port_gi)|$avp(S_tmp_gs)|$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|$avp(S_sys_osv_node_gs)||$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||$avp(S_uri_based_route_gb)|$avp(S_access_control_gb)|$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)|$avp(S_outbnd_pxy_ip_gs)|$avp(S_outbnd_pxy_fqdn_gs)|$avp(S_outbnd_pxy_port_gs)|$avp(S_rep_reg_addr_gs)|$avp(S_rep_reg_port_gs)|$avp(S_fwd_vlan_addr_port_gs)||||$avp(S_linked_ep_id_gi)") != 1)
            {
                xlog("L_INFO", "CI=$ci - R3 -  SSP register failed to read the remote_ep table for ep: $var(S_ssp_ls)\n");
            }
        }
        if (not_empty("$avp(S_gw_id_gi)"))
            xlog("L_INFO", "CI=$ci - R3 -  SSP register found ep $var(S_ssp_ls), id: $avp(S_gw_id_gi)\n");
    }
    else if((isflagset(1) || isflagset(2)) && $avp(C_ssp_rip_gs) != $null)
    {
        # sp_rip may also contain port
        $avp(C_ssp_rip_gs) = $(avp(C_ssp_rip_gs){s.select,0,-});
        $(avp(S_rep_digest_psw_hash_gs)[*]) = $null;

        xlog("L_INFO", "CI=$ci - R3 - SSP lookup remote_ep using C_ssp_rip_gs address: $avp(C_ssp_rip_gs)\n");
        if(osb_memdb_select("remote_ep,*|*|*|*|*|$avp(C_ssp_rip_gs)|*|*|*|$var(S_query_ip_ls)|*|$var(S_queryport_li)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","$avp(S_gw_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm_ip_list_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)|$avp(C_gw_core_ip_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|$avp(S_rep_home_dn_gs)||$avp(C_pmap_port_gi)|$avp(S_tmp_gs)|$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|$avp(S_sys_osv_node_gs)||$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||$avp(S_uri_based_route_gb)|$avp(S_access_control_gb)|$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)|$avp(S_outbnd_pxy_ip_gs)|$avp(S_outbnd_pxy_fqdn_gs)|$avp(S_outbnd_pxy_port_gs)|||$avp(S_fwd_vlan_addr_port_gs)|$avp(S_rep_digest_realm_gs)|$avp(S_rep_digest_user_gs)|$avp(S_rep_digest_psw_hash_gs)|$avp(S_linked_ep_id_gi)") != 1)
            osb_memdb_select("remote_ep,*|*|*|*|*|$avp(C_ssp_rip_gs)|*|*|*|$var(S_query_ip_ls)|*|$avp(C_port_gi)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","$avp(S_gw_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm_ip_list_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)|$avp(C_gw_core_ip_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|$avp(S_rep_home_dn_gs)||$avp(C_pmap_port_gi)|$avp(S_tmp_gs)|$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|$avp(S_sys_osv_node_gs)||$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||$avp(S_uri_based_route_gb)|$avp(S_access_control_gb)|$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)|$avp(S_outbnd_pxy_ip_gs)|$avp(S_outbnd_pxy_fqdn_gs)|$avp(S_outbnd_pxy_port_gs)|||$avp(S_fwd_vlan_addr_port_gs)|$avp(S_rep_digest_realm_gs)|$avp(S_rep_digest_user_gs)|$avp(S_rep_digest_psw_hash_gs)|$avp(S_linked_ep_id_gi)");

        if ($avp(S_rep_digest_psw_hash_gs) != $null)
            $avp(S_rep_digest_psw_gs) = $(avp(S_rep_digest_psw_hash_gs){s.decode.base64});
    }

    # FRN4862: Query remote endpoint to MoSIP message, using just IP and gw_type
    if($var(C_mosip_message_gb))
    {
        if (is_present_hf("X-AEP")) {
            $var(S_aep_ls) = $hdr(X-AEP);  ## this contains the associated endpoint id
            remove_hf("X-AEP");
        }

        if ($(var(S_aep_ls){s.int}) > 0)
        {
            xlog("L_INFO", "CI=$ci - R3 - lookup remote_ep using Associated EP ID to MoSIP message: var(S_aep_ls)=$var(S_aep_ls),RURI=$ru,Rp=$Rp,rp=$rp,Ri=$var(C_ri_var_gs),avp(C_port_gi)=$avp(C_port_gi) \n");

            if(osb_memdb_select("remote_ep,$var(S_aep_ls)|*|*|3|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","$avp(S_gw_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm_ip_list_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)|$avp(C_gw_core_ip_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|$avp(S_rep_home_dn_gs)||$avp(C_pmap_port_gi)|$avp(S_tmp_gs)|$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|$avp(S_sys_osv_node_gs)||$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||$avp(S_uri_based_route_gb)|$avp(S_access_control_gb)|$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||$avp(S_fwd_vlan_addr_port_gs)||||$avp(S_linked_ep_id_gi)") != 1)
               osb_memdb_select("remote_ep,$var(S_aep_ls)|*|*|4|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","$avp(S_gw_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm_ip_list_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)|$avp(C_gw_core_ip_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|$avp(S_rep_home_dn_gs)||$avp(C_pmap_port_gi)|$avp(S_tmp_gs)|$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|$avp(S_sys_osv_node_gs)||$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||$avp(S_uri_based_route_gb)|$avp(S_access_control_gb)|$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||$avp(S_fwd_vlan_addr_port_gs)||||$avp(S_linked_ep_id_gi)");
        }
        else
        {
            $var(S_query_ip_ls) = $rd;
            xlog("L_INFO", "CI=$ci - R3 - lookup remote_ep using ruri address to MoSIP message: var(S_query_ip_ls)=$var(S_query_ip_ls),RURI=$ru,Rp=$Rp,rp=$rp,Ri=$var(C_ri_var_gs),avp(C_port_gi)=$avp(C_port_gi) \n");

            # FRN4862: find EP without using port, this should return a list of IP's, so we need to search
            if(osb_memdb_select("remote_ep,*|*|*|3|*|$var(S_query_ip_ls)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","$avp(S_gw_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm_ip_list_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)|$avp(C_gw_core_ip_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|$avp(S_rep_home_dn_gs)||$avp(C_pmap_port_gi)|$avp(S_tmp_gs)|$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|$avp(S_sys_osv_node_gs)||$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||$avp(S_uri_based_route_gb)|$avp(S_access_control_gb)|$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||$avp(S_fwd_vlan_addr_port_gs)||||$avp(S_linked_ep_id_gi)") != 1)
               osb_memdb_select("remote_ep,*|*|*|4|*|$var(S_query_ip_ls)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","$avp(S_gw_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm_ip_list_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)|$avp(C_gw_core_ip_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|$avp(S_rep_home_dn_gs)||$avp(C_pmap_port_gi)|$avp(S_tmp_gs)|$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|$avp(S_sys_osv_node_gs)||$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||$avp(S_uri_based_route_gb)|$avp(S_access_control_gb)|$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||$avp(S_fwd_vlan_addr_port_gs)||||$avp(S_linked_ep_id_gi)");
        }

        if($avp(S_gw_id_gi) == $null) {
            xlog("L_ERR", "CI=$ci - R3 - Unable to find MoSIP destination, dropping message? ...\n");
            drop();
            exit;
        }

        # CHECK: FRN4862 -> Verify if we need to set variable to dynamic peer
        # if($avp(S_gw_id_gi) != $null)
        #    $var(S_dynamic_peer_found_gb) =  1;
    }

    if($avp(S_gw_id_gi) == $null)
    {
        xlog("L_INFO", "CI=$ci - R3 - lookup remote_ep using target address: var(S_query_ip_ls)=$var(S_query_ip_ls),var(S_queryport_li)=$var(S_queryport_li),Rp=$Rp,rp=$rp,Ri=$var(C_ri_var_gs),avp(C_port_gi)=$avp(C_port_gi) \n");
        xlog("L_INFO", "CI=$ci - R3 - dipping with *|*|*|*|*|$var(S_ssp_ip_addr_r0_gs)|*|*|*|$var(S_query_ip_ls)|*|$var(S_queryport_li)|*...* \n");

        $(avp(S_rep_digest_psw_hash_gs)[*]) = $null;

        # Check first with gwIP parameter from Route header in order to reuse same resolved address when FQDN has more than one resolved IP
        if (not_empty("$var(S_ssp_ip_addr_r0_gs)"))
        {
            if(osb_memdb_select("remote_ep,*|*|*|*|*|$var(S_ssp_ip_addr_r0_gs)|*|*|*|$var(S_query_ip_ls)|*|$var(S_queryport_li)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","$avp(S_gw_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm_ip_list_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)|$avp(C_gw_core_ip_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|$avp(S_rep_home_dn_gs)||$avp(C_pmap_port_gi)|$avp(S_tmp_gs)|$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|$avp(S_sys_osv_node_gs)||$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||$avp(S_uri_based_route_gb)|$avp(S_access_control_gb)|$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)|$avp(S_outbnd_pxy_ip_gs)|$avp(S_outbnd_pxy_fqdn_gs)|$avp(S_outbnd_pxy_port_gs)|||$avp(S_fwd_vlan_addr_port_gs)|$avp(S_rep_digest_realm_gs)|$avp(S_rep_digest_user_gs)|$avp(S_rep_digest_psw_hash_gs)|$avp(S_linked_ep_id_gi)") != 1)
                osb_memdb_select("remote_ep,*|*|*|*|*|$var(S_ssp_ip_addr_r0_gs)|*|*|*|$var(S_query_ip_ls)|*|$avp(C_port_gi)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","$avp(S_gw_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm_ip_list_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)|$avp(C_gw_core_ip_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|$avp(S_rep_home_dn_gs)||$avp(C_pmap_port_gi)|$avp(S_tmp_gs)|$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|$avp(S_sys_osv_node_gs)||$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||$avp(S_uri_based_route_gb)|$avp(S_access_control_gb)|$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)|$avp(S_outbnd_pxy_ip_gs)|$avp(S_outbnd_pxy_fqdn_gs)|$avp(S_outbnd_pxy_port_gs)|||$avp(S_fwd_vlan_addr_port_gs)|$avp(S_rep_digest_realm_gs)|$avp(S_rep_digest_user_gs)|$avp(S_rep_digest_psw_hash_gs)|$avp(S_linked_ep_id_gi)");
        }
        if($avp(S_gw_id_gi) == $null)
        {
            if(osb_memdb_select("remote_ep,*|*|*|*|*|*|*|*|*|$var(S_query_ip_ls)|*|$var(S_queryport_li)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","$avp(S_gw_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm_ip_list_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)|$avp(C_gw_core_ip_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|$avp(S_rep_home_dn_gs)||$avp(C_pmap_port_gi)|$avp(S_tmp_gs)|$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|$avp(S_sys_osv_node_gs)||$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||$avp(S_uri_based_route_gb)|$avp(S_access_control_gb)|$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)|$avp(S_outbnd_pxy_ip_gs)|$avp(S_outbnd_pxy_fqdn_gs)|$avp(S_outbnd_pxy_port_gs)|||$avp(S_fwd_vlan_addr_port_gs)|$avp(S_rep_digest_realm_gs)|$avp(S_rep_digest_user_gs)|$avp(S_rep_digest_psw_hash_gs)|$avp(S_linked_ep_id_gi)") != 1)
                osb_memdb_select("remote_ep,*|*|*|*|*|*|*|*|*|$var(S_query_ip_ls)|*|$avp(C_port_gi)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","$avp(S_gw_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm_ip_list_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)|$avp(C_gw_core_ip_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|$avp(S_rep_home_dn_gs)||$avp(C_pmap_port_gi)|$avp(S_tmp_gs)|$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|$avp(S_sys_osv_node_gs)||$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||$avp(S_uri_based_route_gb)|$avp(S_access_control_gb)|$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)|$avp(S_outbnd_pxy_ip_gs)|$avp(S_outbnd_pxy_fqdn_gs)|$avp(S_outbnd_pxy_port_gs)|||$avp(S_fwd_vlan_addr_port_gs)|$avp(S_rep_digest_realm_gs)|$avp(S_rep_digest_user_gs)|$avp(S_rep_digest_psw_hash_gs)|$avp(S_linked_ep_id_gi)");
        }

        if ($avp(S_rep_digest_psw_hash_gs) != $null)
                $avp(S_rep_digest_psw_gs) = $(avp(S_rep_digest_psw_hash_gs){s.decode.base64});

        if ($avp(S_gw_id_gi) != $null && $avp(S_gw_rm_fqdn_gs) == $rd && ($avp(C_gw_type_gi)==1 || $avp(C_gw_type_gi)==9))
            $var(S_dynamic_peer_found_gb) =  1;
    }

    xlog("L_INFO", "CI=$ci - R3 -  gwid=$avp(S_gw_id_gi)-gw_rm_ip_list=$avp(S_gw_rm_ip_list_gs)-rm_fqdn=$avp(S_gw_rm_fqdn_gs); avp(S_tmp_gs)=$avp(S_tmp_gs); avp(C_pmap_port_gi)=$avp(C_pmap_port_gi), avp(S_access_realm_profile_gs)=$avp(S_access_realm_profile_gs),avp(C_wan_ip_gs)=$avp(C_wan_ip_gs),avp(S_core_realm_profile_gs)=$avp(S_core_realm_profile_gs),avp(S_access_realm_profile_gs)=$avp(S_access_realm_profile_gs), avp(S_outbnd_pxy_ip_gs)=$avp(S_outbnd_pxy_ip_gs), avp(S_outbnd_pxy_fqdn_gs)=$avp(S_outbnd_pxy_fqdn_gs), avp(S_outbnd_pxy_port_gs)=$avp(S_outbnd_pxy_port_gs)\n");

    if($avp(S_gw_id_gi) == $null )
    {
        ### this is case of fqdn, this must be gw, try to access the remote ep using fqdn (dynamic peering)
        $var(S_query_ip_ls) = $rd;
        xlog("L_INFO", "CI=$ci - R3 - lookup remote_ep using ruri: var(S_query_ip_ls)=$var(S_query_ip_ls),var(S_queryport_li)=$var(S_queryport_li),Rp=$Rp,rp=$rp,Ri=$var(C_ri_var_gs),avp(C_port_gi)=$avp(C_port_gi) \n");
        if(osb_memdb_select("remote_ep,*|*|*|*|*|$var(S_query_ip_ls)|*|$var(S_queryport_li)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","$avp(S_gw_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm_ip_list_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)|$avp(C_gw_core_ip_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|$avp(S_rep_home_dn_gs)||$avp(C_pmap_port_gi)|$avp(S_tmp_gs)|$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|$avp(S_sys_osv_node_gs)||$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||$avp(S_uri_based_route_gb)|$avp(S_access_control_gb)|$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||$avp(S_fwd_vlan_addr_port_gs)||||$avp(S_linked_ep_id_gi)") != 1)
           osb_memdb_select("remote_ep,*|*|*|*|*|*|$var(S_query_ip_ls)|*|$var(S_queryport_li)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","$avp(S_gw_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm_ip_list_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)|$avp(C_gw_core_ip_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|$avp(S_rep_home_dn_gs)||$avp(C_pmap_port_gi)|$avp(S_tmp_gs)|$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|$avp(S_sys_osv_node_gs)||$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||$avp(S_uri_based_route_gb)|$avp(S_access_control_gb)|$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||$avp(S_fwd_vlan_addr_port_gs)||||$avp(S_linked_ep_id_gi)");

        if($avp(S_gw_id_gi) != $null )
            $var(S_dynamic_peer_found_gb) =  1;
    }


    if(not_empty("$avp(S_gw_id_gi)"))
    {
        #### we may have found a list of IPs, should now check if they corespond to Dynamic peering
        ## only if not already known that it is dynamic peering
        xlog("L_INFO", "CI=$ci - R3 - checking the UBR\n");
        xlog("L_INFO", "CI=$ci - R3 - 1st EP found gw_id=$avp(S_gw_id_gi), type=$avp(C_gw_type_gi), avp(S_gw_is_natted_gs)=$avp(S_gw_is_natted_gs)\n");

        if ($avp(C_gw_type_gi) == 5) # Check outbound proxy associated
        {
            if (not_empty("$avp(S_outbnd_pxy_fqdn_gs)") || not_empty("$avp(S_outbnd_pxy_ip_gs)"))
            {
                $avp(C_outbnd_pxy_address_type_gi) = $avp(C_rm_address_type_gi);
                $avp(C_outbnd_pxy_transp_gs) = $avp(C_gw_transp_gs);
                osb_memdb_select("remote_ep,$avp(S_associated_ep_id_gi)|*|*|4|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","||||||||||||||||||||||||||||||||||||||||||$avp(S_fwd_vlan_addr_port_gs)||||");
                xlog("L_INFO", "CI=$ci - R3 - Outbound proxy found. fwd-vlan=$avp(S_fwd_vlan_addr_port_gs)\n");
            }
            else if(not_empty("$avp(S_associated_ep_id_gi)"))
            {
                if (osb_memdb_select("remote_ep,$avp(S_associated_ep_id_gi)|*|*|4|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","$avp(S_outbnd_pxy_id_gi)|||||$avp(S_outbnd_pxy_ip_gs)|$avp(S_outbnd_pxy_fqdn_gs)|$avp(S_outbnd_pxy_port_gs)|$avp(C_outbnd_pxy_transp_gs)|||$avp(C_outbnd_pxy_core_port_gi)|||||||$avp(C_outbnd_pxy_address_type_gi)||||||||||||||||||||||||$avp(S_fwd_vlan_addr_port_gs)||||") == 1)
                    xlog("L_INFO", "CI=$ci - R3 - SSP lookup remote_ep with outbound proxy associated: id=$avp(S_outbnd_pxy_id_gi) ip=$avp(S_outbnd_pxy_ip_gs) fqdn=$avp(S_outbnd_pxy_fqdn_gs) port=$avp(S_outbnd_pxy_port_gs) transp=$avp(C_outbnd_pxy_transp_gs) core port=$avp(C_outbnd_pxy_core_port_gi) address type=$avp(C_outbnd_pxy_address_type_gi) fwd-vlan=$avp(S_fwd_vlan_addr_port_gs)\n");
            }

            // Get registration IP to set du (for scenarios with DNS SRV)
            if (is_method("INVITE|CANCEL") && !has_totag()) // Only on first invite
            {
                if (osb_memdb_select("ssp_status,$avp(S_ep_name_gs)|*|*|*|Registered|*,","|||||$avp(S_SSP_registered_uri_gs)") != 1)
                    xlog("L_INFO", "CI=$ci - R3 - SSP '$avp(S_ep_name_gs)' is not registered\n");
                else
                    xlog("L_INFO", "CI=$ci - R3 - SSP '$avp(S_ep_name_gs)' registered with uri $avp(S_SSP_registered_uri_gs)\n");
            }
        }

        if($avp(C_gw_type_gi)==6)
        {
            if(is_method("REGISTER|OPTIONS"))
            {
                xlog("L_INFO", "CI=$ci - R3 - GTC Endpoint, send local response.\n");

                if(is_method("REGISTER"))
                {
                     if ($hdr(Contact) =~ "(.*)[Ee]xpires=(.*)")
                     {
                          $var(S_expire_gi)=$sel(contact.expires);
                          append_to_reply("Contact: $ct\r\n");
                     }
                     else
                     {
                          if (is_present_hf("Expires"))
                              $var(S_expire_gi)=$(hdr(Expires){s.int});
                          else
                              $var(S_expire_gi)=3600;

                          append_to_reply("Contact: $ct;expires=$var(S_expire_gi)\r\n");
                     }
                 }

                 sl_send_reply("200","OK");
                 t_release();

                 if (is_gflag("6"))
                 {
                     xlog("L_INFO", "bench: $rm-$rs\n");
                     bm_log_timer("route-3");
                 }
                 exit;
            }
            else
            {
                ### verify if it is pstn_dialin
                ### do dip into tc_ep_ms_dialin table with $rU
                $var(S_dn_ls) =  $rU;
                ## Remove + sign for GNF format
                if($var(S_dn_ls) =~ "^\+"){
                   $var(S_dn_ls) =  $(rU{s.strip,1});
                }
                $var(S_memdb_attempt_ls) = 0;

                if(is_method("INVITE") && !isflagset(13)){
                    $var(S_memdb_attempt_ls) = 1;
                    xlog("L_INFO", "CI=$ci - R3.1 - dipping tc_ep_ms_dialin with *|$avp(S_ep_name_gs)|$var(S_dn_ls)|*|*\n");
                    $var(S_memdb_return_gi) = osb_memdb_select("tc_ep_ms_dialin,*|$avp(S_ep_name_gs)|$var(S_dn_ls)|*|*,1","$avp(S_ses_id_gi)|$avp(S_ep_name_gs)||$avp(S_tc_dial_lanuage_gb)|$avp(S_tc_dial_ms_dn_gs)");
                }
                else
                {
                    if($sht(call-info=>$ci::sent) == 1)
                    {
                        $var(S_memdb_attempt_ls) = 1;
                        $avp(S_tc_dial_ms_dn_gs) = $sht(call-info=>$ci::msdn);
                        xlog("L_INFO", "CI=$ci - LR:R3.1 - dipping tc_ep_ms_dialin with *|$sht(call-info=>$ci::epname)|*|*|$avp(S_tc_dial_ms_dn_gs)\n");
                        $var(S_memdb_return_gi) = osb_memdb_select("tc_ep_ms_dialin,*|$sht(call-info=>$ci::epname)|*|*|$avp(S_tc_dial_ms_dn_gs),1","$avp(S_ses_id_gi)|$avp(S_ep_name_gs)||$avp(S_tc_dial_lanuage_gb)|");
                        if($var(S_memdb_return_gi) != 1)
                            $var(S_memdb_return_gi) = osb_memdb_select("tc_ep_ms_dialin,*|*|*|*|$avp(S_tc_dial_ms_dn_gs),1","$avp(S_ses_id_gi)|$avp(S_ep_name_gs)||$avp(S_tc_dial_lanuage_gb)|");
                    }
                }
                if($var(S_memdb_return_gi) != 1)
                {
                    xlog("L_INFO", "CI=$ci - R3.1 - no ms_dn found for the dialled digit:$rU\n");
                }
                else if($var(S_memdb_attempt_ls) == 1)
                {
                   xlog("L_INFO", "CI=$ci - R3.1 - for the dialled digit:$rU,found  ms_dn: $avp(S_tc_dial_ms_dn_gs), avp(S_ep_name_gs)=$avp(S_ep_name_gs),avp(S_tc_dial_lanuage_gb)=$avp(S_tc_dial_lanuage_gb)\n");
                   $var(S_gtc_pstn_dialin_gs)     = 1;   ## global variable for pstn_dialin
                   $var(S_LanInvoked_gi) = 1;
                   $var(S_first_ep_found_gi) = 1;
                   route(QUERY_LAN_TO_WAN_FIRST_EP_FOUND);
                   if ($sht(call-info=>$ci::refer) == 0)
                   {
                       ### call special route for pstn_dialin
                       # This route will exit if the destination is configured for PSTN dial-in route
                       xlog("L_INFO", "CI=$ci - R3.1 - after R47, we have: C_wan_ip_gs|C_wan_port_tcp_gs|C_wan_port_tls_gs|C_wan_port_udp_gs|C_fw_ext_ip_gs=$avp(C_wan_ip_gs)|$avp(C_wan_port_tcp_gs)|$avp(C_wan_port_tls_gs)|$avp(C_wan_port_udp_gs)||$avp(C_fw_ext_ip_gs)\n");

                       route(FIND_OSV_BINDING_ROUTE);
                       route(PROCESS_PSTN_DIALIN_ROUTE);
                   }
                }
            }
        }

        if($var(S_dynamic_peer_found_gb) != 1 && $avp(S_uri_based_route_gb) == 1)
        {
            $var(S_sys_count_gi) = 0;
            while($(avp(S_gw_id_gi)[$var(S_sys_count_gi)]) != $null  &&  $var(S_dynamic_peer_found_gb) != 1)
            {
                ## for initial INVITE check against $rd
                ## for non-initial INVITE check against domain in route header
                if($avp(S_rep_ip_gs) != $null && $avp(S_rep_ip_gs) !=0)
                   $var(S_ip_to_check_gb) = $avp(S_rep_ip_gs);
                else
                   $var(S_ip_to_check_gb) = $rd;
                if($(avp(S_gw_rm_ip_list_gs)[$var(S_sys_count_gi)]) != $var(S_ip_to_check_gb) && $(avp(S_gw_rm_fqdn_gs)[$var(S_sys_count_gi)]) != $var(S_ip_to_check_gb))
                    $var(S_dynamic_peer_found_gb) = 0;
                else
                    $var(S_dynamic_peer_found_gb) = 1;

                $var(S_sys_count_gi) = $var(S_sys_count_gi) +1;
            }
            xlog("L_INFO", "CI=$ci - R3 - var(S_dynamic_peer_found_gb)=$var(S_dynamic_peer_found_gb),var(S_ip_to_check_gb)=$var(S_ip_to_check_gb),avp(S_access_control_gb)=$avp(S_access_control_gb)\n");
            if($var(S_dynamic_peer_found_gb) == 0 && $avp(S_access_control_gb) ==1)
            {
                 ## reject with a 403 (forbidden) response
                 append_to_reply("Warning: 399  - R3 - UBR enabled but no match found.\r\n");
                 sl_send_reply("403", "Forbidden");
                 xlog("L_INFO", "CI=$ci - R3 -  Source IP=$si UBR enabled but no match found. exit\n");
                 t_release();

                 if (is_gflag("6"))
                 {
                     xlog("L_INFO", "bench: $rm-$rs\n");
                     bm_log_timer("route-3");
                 }
                 exit;
            }
            else
                $var(S_dynamic_peer_found_gb) = 1;

        }

        $var(S_first_ep_found_gi) = 1;

        # Check signaling realm/network ID
        route(QUERY_LAN_TO_WAN_FIRST_EP_FOUND);

        ## FRN4848, try to identify dynamic peering
        $var(S_sys_count_gi) = 0;
        $var(S_tmp_count_li) = 0;

        $var(S_access_control_gb) = $avp(S_access_control_gb);
        xlog("L_INFO", "CI=$ci - R3.1  -access control =$var(S_access_control_gb), avp(S_gw_id_gi)= $avp(S_gw_id_gi),var(S_dynamic_peer_found_gb)=$var(S_dynamic_peer_found_gb)\n");

        ## now we need to consider access_restriction:
        ## if ep found, and access restrictions=1 ---> 403

        if($avp(S_access_restriction_gi) == 2 && $avp(S_gw_id_gi) != $null )
        {
            xlog("L_INFO", "CI=$ci - R3  -S_access_restriction_gi allows only remote subs no EP\n");
            append_to_reply("Warning: 399 $var(C_si_var_gs) - R3 - access restriction is set for ep .\r\n");
            sl_send_reply("403", "Forbidden");

            t_release();

            if (is_gflag("6"))
            {
                xlog("L_INFO", "bench: $rm-$rs\n");
                bm_log_timer("route-6");
            }
            exit;
        }
        else if($var(S_access_control_gb) != 0 && $avp(S_gw_id_gi) == $null)    ## access control is set
        {
            xlog("L_INFO", "CI=$ci - R3  -access control is set and no ep found\n");
            append_to_reply("Warning: 399 $var(C_si_var_gs) - R3 - access control is set and no ep found.\r\n");
            sl_send_reply("403", "Forbidden");

            t_release();

            if (is_gflag("6"))
            {
                xlog("L_INFO", "bench: $rm-$rs\n");
                bm_log_timer("route-6");
            }
            exit;
        }
        else
            xlog("L_INFO", "CI=$ci - R3  -access control =$var(S_access_control_gb), avp(S_gw_id_gi)= $avp(S_gw_id_gi),var(S_dynamic_peer_found_gb)=$var(S_dynamic_peer_found_gb)\n");

        ### now set the AVP for reply  depending on the transport  ######
        if (not_empty("$avp(C_outbnd_pxy_transp_gs)"))
            $var(S_dest_transp_ls) = $avp(C_outbnd_pxy_transp_gs);
        else
            $var(S_dest_transp_ls) = $avp(C_gw_transp_gs);

        if($var(S_dest_transp_ls) == "tcp")
            $avp(C_wan_port_gs) = $avp(C_wan_port_tcp_gs);
        else if($var(S_dest_transp_ls) == "tls")
        {
            if (not_empty("$avp(C_port_mtls_gs)") && avp_check("$avp(S_rep_bitmap_li)","and/i:4/g")) # Check mtls
                $avp(C_wan_port_gs) = $avp(C_port_mtls_gs);
            else
                $avp(C_wan_port_gs) = $avp(C_wan_port_tls_gs);
        }
        else
            $avp(C_wan_port_gs) = $avp(C_wan_port_udp_gs);

        $avp(C_advertised_port_gi) = $avp(C_wan_port_gs);

        xlog("L_INFO", "CI=$ci - R3  - AVPs are set: avp(C_wan_port_gs)=$avp(C_wan_port_gs), avp(C_advertised_port_gi)=$avp(C_advertised_port_gi)\n");

        ## now we need to check if dispatcher logic should be applied or not
        ## this is needed to set correct OSV binding parameter

        ## do not need to perform this, as this is already read from other tables
        route(FIND_OSV_BINDING_ROUTE); # Get OSV Binding

        ## rm_ip gets overwritten with fqdn, it would be needed for comparison with nat_ip
        $var(S_stored_rm_ip_ls) = $avp(S_gw_rm_ip_list_gs);

        ## du setting allows fqdn so use fqdn if present.
        if ($avp(S_gw_rm_fqdn_gs) != $null && $avp(S_gw_rm_fqdn_gs) != '')
            $avp(S_gw_rm_ip_gs) = $avp(S_gw_rm_fqdn_gs);
        else
            $avp(S_gw_rm_ip_gs) = $avp(S_gw_rm_ip_list_gs);

        $avp(S_gw_orig_uri_gs) = $avp(S_gw_rm_ip_gs);

        xlog("L_INFO", "CI=$ci - R3 - 1st ep found, gw_id=$avp(S_gw_id_gi), avp(S_sys_osv_node_gs)=$avp(S_sys_osv_node_gs),avp(S_network_interface_dst_gs)=$avp(S_network_interface_dst_gs), gw_rm_ip=$avp(S_gw_rm_ip_gs), type=$avp(C_gw_type_gi),avp(C_wan_ip_gs)=$avp(C_wan_ip_gs),nat_ip=avp(S_tmp_gs)=$avp(S_tmp_gs),avp(S_uri_based_route_gb)=$avp(S_uri_based_route_gb),avp(S_access_realm_profile_gs)=$avp(S_access_realm_profile_gs)\n");

        $avp(S_ses_id_gi) = $avp(S_gw_id_gi);
        $avp(S_int_ip_gs) = $avp(S_gw_rm_ip_gs);
        if($avp(S_tmp_gs) == $null || $avp(S_tmp_gs) == "")
        {
            xlog("L_INFO", "CI=$ci - R3 -  nat_ip empty read, set it to rm_ip\n");
            $avp(S_tmp_gs) = $avp(S_gw_rm_ip_gs);
        }
        ### save this into var, it relates to signalling, AVP would be overwritten with media
        $var(S_network_interface_dst_gs) = $avp(S_network_interface_dst_gs);
        ### we need to read now the media IP   #########
        ### dip into realm_profile table to read the signalling_nw_id using type = access
        $var(S_profile_type_gi) = 0;  #1="signalling" and 0= "media"
        if(osb_memdb_nl_select("realm_profile,*|$avp(S_access_realm_profile_gs)|*|*|*|*,1","||||$avp(S_media_nw_id_gs)|") != 1)
        {
            xlog("L_ERR", "CI=$ci - R3.1 - could not identify media in realm_profile using  avp(S_access_realm_profile_gs)=$avp(S_access_realm_profile_gs)  \n");
        #    return;
        }
        xlog("L_INFO", "CI=$ci - R3.1 - did read avp(S_media_nw_id_gs)=$avp(S_media_nw_id_gs) from avp(S_access_realm_profile_gs)=$avp(S_access_realm_profile_gs) for Media\n");
        ### dip into network_id table to read the wanip using the S_media_nw_id_gs
        $(avp(C_media_fw_ext_ip_gs)[*]) = $null;
        $var(S_network_type_gi) = 1;  #1="access" and 0= "core"
        xlog("L_INFO", "CI=$ci - R3 - dipping into network_id for media IP with avp(S_media_nw_id_gs)=$avp(S_media_nw_id_gs) \n");
        #--- Check media network ID access side
        if (osb_memdb_nl_select("network_id,*|$avp(S_media_nw_id_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1",
                "|||$avp(S_network_interface_dst_gs)|||$avp(C_wan_media_ip_gs)|$avp(C_wan_media_port_gs)|||||||||$avp(C_media_fw_ext_ip_gs)|$avp(S_media_wan_on_sdp_gs)|$avp(S_msrp_port_gs)|") != 1)
        {
            xlog("L_ERR", "CI=$ci - R3.1 - could not identify dest media network_id using avp(S_media_nw_id_gs)=$avp(S_media_nw_id_gs)\n");
            append_to_reply("Warning: 399 $var(C_si_var_gs) - R3 - could not identify dest media network_id using avp(S_media_nw_id_gs)=$avp(S_media_nw_id_gs)\r\n");
            sl_send_reply("403", "Forbidden");

            t_release();

            if (is_gflag("6"))
            {
                xlog("L_INFO", "bench: $rm-$rs\n");
                bm_log_timer("route-3");
            }
            exit;
        }
        xlog("L_INFO", "CI=$ci - R3.1 -  read C_media_fw_ext_ip_gs=$avp(C_media_fw_ext_ip_gs), avp(S_sig_nw_id_gs)=$avp(S_sig_nw_id_gs), avp(S_media_nw_id_gs)=$avp(S_media_nw_id_gs) and avp(S_network_interface_dst_gs)=$avp(S_network_interface_dst_gs) avp(C_wan_media_ip_gs)=$avp(C_wan_media_ip_gs),avp(C_wan_ip_gs)=$avp(C_wan_ip_gs),avp(C_fw_ext_ip_gs)=$avp(C_fw_ext_ip_gs),avp(S_access_restriction_gi)=$avp(S_access_restriction_gi) \n");
        $var(S_network_interface_media_dst_gi) = $avp(S_network_interface_dst_gs);

        if(not_empty("$avp(C_media_fw_ext_ip_gs)"))
        {
            xlog("L_INFO", "CI=$ci - R3.1 - firewall set for this media networkid= $avp(S_network_interface_dst_media_gi)\n");
            $var(S_media_ext_firewall_set_gb) = 1;
        }

        ### dip into realm_profile table to read the media_nw_id using type = core
        $var(S_profile_type_gi) = 0;  #1="signalling" and 0= "media"
        if(osb_memdb_nl_select("realm_profile,*|$avp(S_core_realm_profile_gs)|*|*|*|*,1","||||$avp(S_media_nw_id_gs)|") != 1)
        {
            xlog("L_ERR", "CI=$ci - R3.1 - could not identify media in realm_profile using  avp(S_core_realm_profile_gs)=$avp(S_core_realm_profile_gs)  \n");
        #    return;
        }
        xlog("L_INFO", "CI=$ci - R3.1 - did read avp(S_media_nw_id_gs)=$avp(S_media_nw_id_gs) from avp(S_core_realm_profile_gs)=$avp(S_core_realm_profile_gs) for Media for the source\n");
        ### dip into network_id table to read the wanip using the S_media_nw_id_gs
        $var(S_network_type_gi) = 1;  #1="access" and 0= "core"
        xlog("L_INFO", "CI=$ci - R3 - dipping into network_id for media IP with avp(S_sig_nw_id_gs)=$avp(S_sig_nw_id_gs) \n");
        #--- Check media network ID core side
        if (osb_memdb_nl_select("network_id,*|$avp(S_media_nw_id_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1",
                "|||$avp(S_network_interface_src_gs)|||$avp(C_core_media_ip_gs)|$avp(C_core_media_port_gs)||||||||||||") != 1)
        {
            xlog("L_ERR", "CI=$ci - R3.1 - could not identify src media network_id using avp(S_media_nw_id_gs)=$avp(S_media_nw_id_gs)  \n");
            append_to_reply("Warning: 399 $var(C_si_var_gs) - R3 - could not identify src media network_id using avp(S_media_nw_id_gs)=$avp(S_media_nw_id_gs)\r\n");
            sl_send_reply("403", "Forbidden");

            t_release();

            if (is_gflag("6"))
            {
                xlog("L_INFO", "bench: $rm-$rs\n");
                bm_log_timer("route-3");
            }
            exit;
        }
        xlog("L_INFO", "CI=$ci - R3.1 -  $avp(S_core_realm_profile_gs) read avp(S_sig_nw_id_gs)=$avp(S_sig_nw_id_gs) and avp(S_network_interface_src_gs)=$avp(S_network_interface_src_gs)  \n");


        #prepare the variables for SSM
        $var(S_ep1_id_gi)                   = $avp(S_gw_id_gi);
        $var(C_ep1_rm_ip_gs)                = $avp(S_gw_rm_ip_gs);
        $var(C_ep1_rm_fqdn_gs)              = $avp(S_gw_rm_fqdn_gs);
        $var(C_ep1_rm_port_gi)              = $avp(S_gw_rm_port_gi);
        $var(C_ep1_nat_port_gs)             = $avp(C_pmap_port_gi);
        $var(S_ep1_rm_ip_list_gs)           = $avp(S_gw_rm_ip_list_gs);
        $var(S_ep1_nat_ip_gs)               = $avp(S_tmp_gs);
        put_ip_in_paran('$var(S_ep1_nat_ip_gs)', '$var(S_ep1_nat_ip_gs)');
        $avp(S_nat_ip_gs)                   = $var(S_ep1_nat_ip_gs);
        xlog("L_INFO", "CI=$ci - R3 -  avp(S_nat_ip_gs)=$avp(S_nat_ip_gs) After putting brackets ep var(S_ep1_nat_ip_gs)=$var(S_ep1_nat_ip_gs)\n");
        $var(C_ep1_transp_gs)               = $avp(C_gw_transp_gs);
        $var(C_ep1_bitmap_gi)               = $avp(S_rep_bitmap_gi);
        $var(C_ep1_type_gi)                 = $avp(C_gw_type_gi);
        $var(S_ep1_profile_gs)              = $avp(C_ssp_gw_profile_gs);
        $var(S_ep1_rep_home_dn_gs)          = $avp(S_rep_home_dn_gs);
        $var(C_ep1_core_ip_gs)              = $avp(C_gw_core_ip_gs);
        $var(C_ep1_core_fqdn_gs)            = $avp(S_gw_core_fqdn_gs);
        $var(C_ep1_core_port_gi)            = $avp(C_gw_core_port_gi);
        $var(S_ep1_rm_address_type_gi)      = $avp(C_rm_address_type_gi);
        $var(S_ep1_logical_id_gs)           = $avp(S_rm_logical_id_gs);
        if($avp(S_rm_media_ip_gs) != $null && $avp(S_rm_media_ip_gs) != '')
            $var(S_ep1_rm_media_ip_gs)      = $avp(S_rm_media_ip_gs);
        $var(S_ep1_media_subnet_mask_gs)    = $avp(S_rm_media_subnet_mask_gs);
        $var(S_ep1_access_realm_profile_gs) = $avp(S_access_realm_profile_gs);
        $var(S_ep1_core_realm_profile_gs)   = $avp(S_core_realm_profile_gs);

        $var(S_ep1_S_uri_based_route_gb)    = $avp(S_uri_based_route_gb);


        # Use this variable to log EP1 data in next if/else statement
        $var(S_log_ls) = "\nvar(S_ep1_id_gi)                  =" + $var(S_ep1_id_gi) +
                         "\nvar(C_ep1_rm_ip_gs)               =" + $var(C_ep1_rm_ip_gs) +
                         "\nvar(C_ep1_rm_fqdn_gs)             =" + $var(C_ep1_rm_fqdn_gs) +
                         "\nvar(C_ep1_rm_port_gi)             =" + $var(C_ep1_rm_port_gi) +
                         "\nvar(C_ep1_nat_port_gs)            =" + $var(C_ep1_nat_port_gs) +
                         "\nvar(S_ep1_rm_ip_list_gs)          =" + $var(S_ep1_rm_ip_list_gs) +
                         "\nvar(S_ep1_nat_ip_gs)              =" + $var(S_ep1_nat_ip_gs) +
                         "\nvar(C_ep1_transp_gs)              =" + $var(C_ep1_transp_gs) +
                         "\nvar(C_ep1_bitmap_gi)              =" + $var(C_ep1_bitmap_gi) +
                         "\nvar(C_ep1_type_gi)                =" + $var(C_ep1_type_gi) +
                         "\nvar(S_ep1_profile_gs)             =" + $var(S_ep1_profile_gs) +
                         "\nvar(S_ep1_rep_home_dn_gs)         =" + $var(S_ep1_rep_home_dn_gs) +
                         "\nvar(C_ep1_core_ip_gs)             =" + $var(C_ep1_core_ip_gs) +
                         "\nvar(C_ep1_core_fqdn_gs)           =" + $var(C_ep1_core_fqdn_gs) +
                         "\nvar(C_ep1_core_port_gi)           =" + $var(C_ep1_core_port_gi) +
                         "\nvar(S_ep1_rm_address_type_gi)     =" + $var(S_ep1_rm_address_type_gi) +
                         "\nvar(S_ep1_logical_id_gs)          =" + $var(S_ep1_logical_id_gs) +
                         "\nvar(S_ep1_rm_media_ip_gs)         =" + $var(S_ep1_rm_media_ip_gs) +
                         "\nvar(S_ep1_media_subnet_mask_gs)   =" + $var(S_ep1_media_subnet_mask_gs) +
                         "\nvar(S_ep1_access_realm_profile_gs)=" + $var(S_ep1_access_realm_profile_gs) +
                         "\nvar(S_ep1_core_realm_profile_gs)  =" + $var(S_ep1_core_realm_profile_gs) +
                         "\nvar(S_ep1_S_uri_based_route_gb)   =" + $var(S_ep1_S_uri_based_route_gb) ;


        xlog("L_INFO", "CI=$ci - R3 - avp(C_wan_ip_gs)=$avp(C_wan_ip_gs) avp(C_core_ip_gs)=$avp(C_core_ip_gs) \n");

        if ($rp ==  $avp(C_gw_core_port_gi) &&
            (compare_ips('$rd', '$avp(C_gw_core_ip_gs)') ||
             $(rd{s.tolower}) == $(avp(S_gw_rm_fqdn_gs){s.tolower}) ||
             $(rd{s.tolower}) == $(avp(S_gw_core_fqdn_gs){s.tolower})
            ))
        {
            # RURI points to First EP, then set a flag for this so that it gets same treatment as a gw
            setflag(5);
            xlog("L_INFO", "CI=$ci - R3  -  Call to direct endpoint\n");
        }

        if($avp(C_gw_type_gi)==4 && !isflagset(5))
        {
            xlog("L_INFO", "CI=$ci - R3  -  This is an entity behind a proxy so set branch flag: $var(S_log_ls)\n");
            setflag(27);
        }
        else if(($avp(C_gw_type_gi)==3 || $avp(C_gw_type_gi)==8) && !isflagset(5))
        {
            xlog("L_INFO", "CI=$ci - R3  -  This is an entity behind a sbc so set sbc flag: $var(S_log_ls) \n");
            setflag(8);
        }
        else if(($avp(C_gw_type_gi)==1)||($avp(C_gw_type_gi)==7)||($avp(C_gw_type_gi)==9)) #Type 7 is a PSAP Remote Ep
        {
            xlog("L_INFO", "CI=$ci - R3  -  This is a gw so set gw flag: $var(S_log_ls) \n");
            setflag(5);

            #TODO: Check if following variables setting is really needed.
            # $avp(C_pmap_port_gi) = $var(C_ep1_rm_port_gi);
            $avp(C_tmp2_gs) = $avp(S_gw_rm_ip_gs);
        }
        else if($avp(C_gw_type_gi)==5)
        {
            setflag(5);
            if($avp(C_gw_transp_gs) == "tls")
               $var(C_ssp_is_tls_gb) = 1;
            setflag(1);

            xlog("L_INFO", "CI=$ci - R3 - This is a ssp so set flag 1: $var(S_log_ls)\n");

            # Read SSP profile
            $var(C_ssp_gw_profile_gs) = $(avp(C_ssp_gw_profile_gs)[0]);
            route(SSP_PROFILE_DB_ROUTE);
            route(SSP_PROFILE_REQUESTS_ROUTE);

            if( !isflagset(13) && is_method("INVITE") )
            {
                if($hdr(Authorization) != $null || $hdr(Proxy-Authorization) != $null)
                {

                    xlog("L_INFO", "CI=$ci - R3 - This request contains authorization header. Check if call-id was previously challenged.\n");


                    $var(S_log_ls) = "\nssp-da-challenged=" + $sht(call-info=>$ci-$ft::ssp-da-challenged) +
                                     "\nssp-da-rep-id    =" + $sht(call-info=>$ci-$ft::ssp-da-rep-id) +
                                     "\nssp-da-ip        =" + $sht(call-info=>$ci-$ft::ssp-da-ip) +
                                     "\nssp-da-port      =" + $sht(call-info=>$ci-$ft::ssp-da-port) +
                                     "\nssp-da-du        =" + $sht(call-info=>$ci-$ft::ssp-da-du) ;



                    xlog("L_INFO", "CI=$ci - R3 - Digest data in htab: $var(S_log_ls)\n");


                    if( $sht(call-info=>$ci-$ft::ssp-da-challenged) == 1 && $sht(call-info=>$ci-$ft::ssp-da-rep-id) == $avp(S_gw_id_gi) )
                    {

                        xlog("L_INFO", "CI=$ci - R3 - This request is the next attempt to a previous challenged INVITE.\n");

                        # This SSP is configured in terms of DNS-SRV.
                        # The du shall be set with last ip used in order to make the authorization reach the correct server

                        $sht(call-info=>$ci-$ft::ssp-da-du) = "sip:" + $sht(call-info=>$ci-$ft::ssp-da-ip) + ":" + $sht(call-info=>$ci-$ft::ssp-da-port) + ";transport=" + $avp(C_gw_transp_gs);
                        xlog("L_INFO", "CI=$ci - R3 - Setting htab du= $sht(call-info=>$ci-$ft::ssp-da-du)\n");
                    }
                    else
                    {
                        xlog("L_INFO", "CI=$ci - R3 - Remote endpoint does not match previous challenged endpoint or call id not challenged. Clearing the htab.\n");
                        sht_rm_name_re("call-info=>^$ci-$ft::(ssp-da-challenged|ssp-da-rep-id|ssp-da-ip|ssp-da-port|ssp-da-du)");
                    }
                }
                # SSP in terms of DNS-SRV and Digest Auth supported
                else if( $var(S_ep1_rm_address_type_gi) == 1 && $avp(C_ssp_da_supported_gs) == 'y' )
                {
                    sht_rm_name_re("call-info=>^$ci-$ft::(ssp-da-challenged|ssp-da-rep-id|ssp-da-ip|ssp-da-port|ssp-da-du)");
                    $sht(call-info=>$ci-$ft::ssp-da-rep-id) = $var(S_ep1_id_gi);
                    xlog("L_INFO", "CI=$ci - R3 - Saving remote ep id to be used in case of digest authentication response.\n");
                }
            }

            #TODO: Check if following variables setting is really needed.
            $avp(C_tmp2_gs) = $avp(S_gw_rm_ip_gs);

        }
        else if($avp(C_gw_type_gi)==6)
        {
            $var(S_ep1_gtc_name_gs) = $avp(S_ep_name_gs);

            xlog("L_INFO", "CI=$ci - R3 - GTC trunk: $var(S_log_ls)\n");
            xlog("L_INFO", "CI=$ci - R3 - Using var(S_ep1_gtc_name_gs)=$var(S_ep1_gtc_name_gs) for signalling to ssm\n");
        }

        $var(S_nat_port_ls) = $avp(C_pmap_port_gi);

        $avp(C_pmap_port_gi) = $var(S_tmp_gs);
        if($avp(S_gw_is_natted_gs) == 1)
        {
            $var(S_ep1_natted_gi) = 1;
            $var(S_wan_natted_gb) = 1;
            xlog("L_INFO", "CI=$ci - R3  -  ep is behind NAT, $avp(S_gw_rm_port_gi) != $var(S_nat_port_ls) ,var(S_ep1_nat_ip_gs)=$var(S_ep1_nat_ip_gs)\n");
        }
        else
        {
            $var(S_ep1_natted_gi) = 0;
            xlog("L_INFO", "CI=$ci - R3  -  ep is not natted, $avp(S_gw_rm_port_gi) != $var(S_nat_port_ls) ,var(S_ep1_nat_ip_gs)=$var(S_ep1_nat_ip_gs)\n");
        }

        # GW_TYPE should be 3 or 4 (SBC or Proxy)
        if($var(C_mosip_message_gb))
        {
            # FRN4862 - MoSIP - Verify if message came from MSAdapter, if it is, set MoSIP variable
            xlog("L_INFO", "CI=$ci - R3 - this is a mosip message, so initialize MoSIP variables\n");

            # Used variables to set $du:
            # $avp(S_gw_rm_ip_gs) -> IP
            # $avp(S_gw_rm_port_gi) -> Port
            # $avp(C_gw_transp_gs) -> Transport

            # Do not perform port map in this message, it will be forwarded in STATELESS mode
            # we don't want SipServer caring of timers for this message
            return;
        }

        xlog("L_INFO", "CI=$ci - R3 - var(S_int_ip_gs)=$var(S_int_ip_gs), flags=$mf, M=$rm\n");
        if ($var(S_int_ip_gs) != '')
        {
            xlog("L_INFO", "CI=$ci - R3 - No second dip needed as PM entry already found: var(S_int_ip_gs)=$var(S_int_ip_gs)\n");
            return;
        }

        $var(S_rs_core_port_gi) = 0; # Initialization
        #do the second dip only if it is needed
        if(isflagset(5))                   # RURI points to First EP, also see above for direct ep
        {
            xlog("L_INFO", "CI=$ci - R3  - Call to direct ep, no second dip needed \n");
            $var(S_call_to_direct_ep_gb) = 1;
            $var(S_rs_core_port_gi)      = $rp;
            $avp(C_pmap_port_gi)         = $var(C_ep1_rm_port_gi);
            $avp(S_pmap_int_port_gi)     = $var(C_ep1_rm_port_gi);
            $avp(S_int_ip_gs)            = $var(C_ep1_rm_ip_gs);
            $avp(S_rm_transp_gs)         = $var(C_ep1_transp_gs);
            $avp(S_rm_bitmap_gi)         = $var(C_ep1_bitmap_gi);
            $avp(C_gw_core_port_gi)      = $var(C_ep1_core_port_gi);
        }
        else
        {

           # Try see if it is a gw behind an ep

           $(avp(S_gw_id_gi)[*])              = $null;
           $(avp(C_gw_type_gi)[*])            = $null;
           $(avp(S_gw_rm_fqdn_gs)[*])         = $null;
           $(avp(S_gw_orig_uri_gs)[*])        = $null;
           $(avp(S_gw_rm2_ip_gs)[*])          = $null;
           $(avp(S_gw_rm2_fqdn_gs)[*])        = $null;
           $(avp(S_socket_port_gi)[*])        = $null;
           $(avp(S_cluster_server_grp_gs)[*]) = "*";    #FRN10451

           xlog("L_INFO", "CI=$ci - R3 - Check if GW behind an endpoint. Dipping remote_ep with rp=$rp, rd=$rd\n");

           # Check 1st:(core ip + core port), 2nd:(core FQDN + core port), 3rd:(core FQDN), 4th:(remote FQDN + core port), 5th:(remote FQDN)
           if(osb_memdb_select("remote_ep,*|*|*|*|*|*|*|*|*|$rd|*|$rp|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","$avp(S_gw_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm2_ip_gs)|$avp(S_gw_rm2_fqdn_gs)|$avp(C_pmap_port_gi)|$avp(S_rm_transp_gs)|$avp(C_gw_core_ip_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|||||$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|||$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||||$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||$avp(S_fwd_vlan_addr_port_gs)||||$avp(S_linked_ep_id_gi)") != 1)
              if(osb_memdb_select("remote_ep,*|*|*|*|*|*|*|*|*|*|$rd|$rp|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","$avp(S_gw_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm2_ip_gs)|$avp(S_gw_rm2_fqdn_gs)|$avp(C_pmap_port_gi)|$avp(S_rm_transp_gs)|$avp(C_gw_core_ip_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|||||$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|||$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||||$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||$avp(S_fwd_vlan_addr_port_gs)||||$avp(S_linked_ep_id_gi)") != 1)
                  if(osb_memdb_select("remote_ep,*|*|*|*|*|*|*|*|*|*|$rd|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","$avp(S_gw_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm2_ip_gs)|$avp(S_gw_rm2_fqdn_gs)|$avp(C_pmap_port_gi)|$avp(S_rm_transp_gs)|$avp(C_gw_core_ip_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|||||$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|||$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||||$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||$avp(S_fwd_vlan_addr_port_gs)||||$avp(S_linked_ep_id_gi)") != 1)
                      if(osb_memdb_select("remote_ep,*|*|*|*|*|*|$rd|*|*|*|*|$rp|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","$avp(S_gw_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm2_ip_gs)|$avp(S_gw_rm2_fqdn_gs)|$avp(C_pmap_port_gi)|$avp(S_rm_transp_gs)|$avp(C_gw_core_ip_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|||||$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|||$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||||$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||$avp(S_fwd_vlan_addr_port_gs)||||$avp(S_linked_ep_id_gi)") != 1)
                          osb_memdb_select("remote_ep,*|*|*|*|*|*|$rd|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","$avp(S_gw_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm2_ip_gs)|$avp(S_gw_rm2_fqdn_gs)|$avp(C_pmap_port_gi)|$avp(S_rm_transp_gs)|$avp(C_gw_core_ip_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|||||$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|||$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||||$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||$avp(S_fwd_vlan_addr_port_gs)||||$avp(S_linked_ep_id_gi)");

           if(($avp(S_gw_id_gi) != $null && $avp(S_gw_id_gi) != "") && ($avp(C_gw_type_gi)==1 || $avp(C_gw_type_gi)==9 || $avp(C_gw_type_gi)== 5))
           {

              $avp(C_gw_behind_ep_gi) = 1;

              #prepare the variables for SSM
              $var(C_ep2_rm_ip_gs)                = $avp(S_gw_rm2_ip_gs);
              $var(C_ep2_core_ip_gs)              = $avp(C_gw_core_ip_gs);
              $var(C_ep2_core_fqdn_gs)            = $avp(S_gw_core_fqdn_gs);
              $var(C_ep2_rm_fqdn_gs)              = $avp(S_gw_rm2_fqdn_gs);
              $var(C_ep2_rm_port_gi)              = $avp(C_pmap_port_gi);
              $var(C_ep2_transp_gs)               = $avp(S_rm_transp_gs);
              $var(C_ep2_bitmap_gi)               = $avp(S_rm_bitmap_gi);
              $var(C_ep2_type_gi)                 = $avp(C_gw_type_gi);
              $var(C_ep2_core_port_gi)            = $avp(C_gw_core_port_gi);
              $var(S_ep2_rm_address_type_gi)      = $avp(C_rm_address_type_gi);
              if($avp(S_rm_media_ip_gs) != $null && $avp(S_rm_media_ip_gs) != '')
                $var(S_ep2_media_ip_gs)           = $avp(S_rm_media_ip_gs);
              $var(S_ep2_media_subnet_mask_gs)    = $avp(S_rm_media_subnet_mask_gs);
              $var(S_ep2_S_uri_based_route_gb)    = $avp(S_uri_based_route_gb);
              $var(S_ep2_access_realm_profile_ls) = $avp(S_access_realm_profile_gs);
              $var(S_ep2_core_realm_profile_ls)   = $avp(S_core_realm_profile_gs);


              # Use this variable to log EP2 data

              $var(S_log_ls) = "\n$avp(S_gw_id_gi)                  =" + $avp(S_gw_id_gi) +
                               "\nvar(C_ep2_rm_ip_gs)               =" + $var(C_ep2_rm_ip_gs) +
                               "\nvar(C_ep2_rm_fqdn_gs)             =" + $var(C_ep2_rm_fqdn_gs) +
                               "\nvar(C_ep2_rm_port_gi)             =" + $var(C_ep2_rm_port_gi) +
                               "\nvar(C_ep2_transp_gs)              =" + $var(C_ep2_transp_gs) +
                               "\nvar(C_ep2_bitmap_gi)              =" + $var(C_ep2_bitmap_gi) +
                               "\nvar(C_ep2_type_gi)                =" + $var(C_ep2_type_gi) +
                               "\nvar(C_ep2_core_ip_gs)             =" + $var(C_ep2_core_ip_gs) +
                               "\nvar(C_ep2_core_fqdn_gs)           =" + $var(C_ep2_core_fqdn_gs) +
                               "\nvar(C_ep2_core_port_gi)           =" + $var(C_ep2_core_port_gi) +
                               "\nvar(S_ep2_rm_address_type_gi)     =" + $var(S_ep2_rm_address_type_gi) +
                               "\nvar(S_ep2_media_ip_gs)            =" + $var(S_ep2_media_ip_gs) +
                               "\nvar(S_ep2_media_subnet_mask_gs)   =" + $var(S_ep2_media_subnet_mask_gs) +
                               "\nvar(S_ep2_access_realm_profile_ls)=" + $var(S_ep2_access_realm_profile_ls) +
                               "\nvar(S_ep2_core_realm_profile_ls)  =" + $var(S_ep2_core_realm_profile_ls) +
                               "\nvar(S_ep2_S_uri_based_route_gb)   =" + $var(S_ep2_S_uri_based_route_gb) ;


              xlog("L_INFO", "CI=$ci - R3 - GW behind ep: $var(S_log_ls)\n");


              if (not_empty("$avp(S_gw_rm2_fqdn_gs)"))
                 $avp(S_gw_orig_uri_gs) = $avp(S_gw_rm2_fqdn_gs);
              else
                 $avp(S_gw_orig_uri_gs) = $avp(S_gw_rm2_ip_gs);

              # Call to direct endpoint
              setflag(5);

              xlog("L_INFO", "CI=$ci - R3 - GW behind ep, routed normal, use contact $avp(S_gw_orig_uri_gs):$avp(C_pmap_port_gi);transport=$avp(S_rm_transp_gs)\n");

           }
           else
           {
              $avp(C_pmap_port_gi)    = $var(C_ep1_rm_port_gi);
              $avp(S_rm_transp_gs)    = $var(C_ep1_transp_gs);
              $avp(S_rm_bitmap_gi)    = $var(C_ep1_bitmap_gi);
              $avp(S_gw_orig_uri_gs)  = $avp(S_gw_rm_ip_gs);
              $avp(C_gw_core_port_gi) = $var(C_ep1_core_port_gi);
           }

           # Restore the ep related info from the first dip

           $avp(S_gw_id_gi)           = $var(S_ep1_id_gi);
           $avp(S_gw_rm_port_gi)      = $var(C_ep1_rm_port_gi);
           $avp(C_pmap_port_gi)       = $var(C_ep1_nat_port_gs);
           $avp(C_gw_transp_gs)       = $var(C_ep1_transp_gs);
           $avp(S_rep_bitmap_gi)      = $var(C_ep1_bitmap_gi);
           $avp(C_gw_type_gi)         = $var(C_ep1_type_gi);
           $avp(C_ssp_gw_profile_gs)  = $var(S_ep1_profile_gs);
           $avp(S_rep_home_dn_gs)     = $var(S_ep1_rep_home_dn_gs);
           $avp(C_gw_core_ip_gs)      = $var(C_ep1_core_ip_gs);
           $avp(S_gw_core_fqdn_gs)    = $var(C_ep1_core_fqdn_gs);
           $avp(S_ses_id_gi)          = $var(S_ep1_id_gi);
        }


        $(avp(C_tmp2_gs)[*]) = $null;

        ## FRN7404, add the network interface to each index in the array
        $var(S_sys_count_gi) = 0;
        while($(avp(S_gw_rm_ip_list_gs)[$var(S_sys_count_gi)]) != $null)
        {
            $(avp(S_network_interface_dst_sig_gi)[$var(S_sys_count_gi)]) = $var(S_network_interface_dst_sig_gi)+ "-" +$(avp(S_gw_rm_ip_list_gs)[$var(S_sys_count_gi)]);
            $var(S_sys_count_gi) = $var(S_sys_count_gi) +1;
        }
        if( $var(S_ep1_gtc_name_gs) != '' ) {
            $var(S_ssm_fqdn_ls) = $var(S_network_interface_dst_sig_gi)+ "-" +$var(S_ep1_gtc_name_gs);
            $avp(C_tmp2_gs) = "fqdn_addr=[" + $var(S_network_interface_dst_sig_gi)+ "-" + $var(S_ep1_nat_ip_gs) + "]";
            $var(S_ssm_rm_ip_gs) = "fqdn=" +$var(S_ssm_fqdn_ls)+";"+$avp(C_tmp2_gs);
        }
        else if(($avp(C_gw_behind_ep_gi) == 0  && $avp(S_gw_rm_fqdn_gs) !=$null && $avp(S_gw_rm_fqdn_gs) != '') ||
            $var(S_ep1_rm_address_type_gi) == 2)
        {
           if($var(S_ep1_rm_address_type_gi) == 2) {
               $var(S_ssm_fqdn_ls) = $var(S_network_interface_dst_sig_gi)+ "-" +$var(S_ep1_logical_id_gs);
               $avp(C_tmp2_gs) = "fqdn_addr=[" + $var(S_network_interface_dst_sig_gi)+ "-" + $var(S_ep1_nat_ip_gs) + "]";
           }
           else {
               $var(S_ssm_fqdn_ls) = $var(S_network_interface_dst_sig_gi)+ "-"+ $avp(S_gw_rm_fqdn_gs);
               $avp(C_tmp2_gs) = "fqdn_addr=[" + $(avp(S_gw_rm_ip_list_gs)[*]) + "]";
           }
           $var(S_ssm_rm_ip_gs) = "fqdn=" +$var(S_ssm_fqdn_ls)+";"+$avp(C_tmp2_gs);
        }
        else if($avp(C_gw_behind_ep_gi) !=0  && $avp(S_gw_rm2_fqdn_gs) !=$null && $avp(S_gw_rm2_fqdn_gs) != '')
        {
           $var(S_ssm_fqdn_ls) = $var(S_network_interface_dst_sig_gi)+ "-" +$avp(S_gw_rm2_fqdn_gs);

           $avp(C_tmp2_gs) = "fqdn_addr=[" + $(avp(S_gw_rm2_ip_gs)[*]) + "]";
           $var(S_ssm_rm_ip_gs) = "fqdn=" +$var(S_ssm_fqdn_ls)+";"+$avp(C_tmp2_gs);
        }

        xlog("L_INFO", "CI=$ci - R3  - var(S_ssm_rm_ip_gs)=$var(S_ssm_rm_ip_gs)\n");
    }
    else
        xlog("L_INFO", "CI=$ci - R3  - no ep found for recieved port:$rp\n");

    #### FRN5807
    xlog("L_INFO", "CI=$ci - R3 - C_inv_noanswr_timer_gs=$avp(C_inv_noanswr_timer_gs)\n");
    if($avp(C_inv_noanswr_timer_gs) != "" && $avp(C_inv_noanswr_timer_gs) != $null)
        xlog("L_INFO", "CI=$ci - R3 - overwriting no answer timer with db value: $avp(C_inv_noanswr_timer_gs)\n");
    else
        $avp(C_inv_noanswr_timer_gs) = $var(C_inv_noanswr_timer_gs);
    if($avp(C_inv_noreply_timer_gs) != "" && $avp(C_inv_noreply_timer_gs) != $null)
        xlog("L_INFO", "CI=$ci - R3 - overwriting no reply timer with db value: $avp(C_inv_noreply_timer_gs)\n");
    else
        $avp(C_inv_noreply_timer_gs) = $var(C_inv_noreply_timer_gs);


    $avp(C_core_ip_gs)      = $avp(C_gw_core_ip_gs);
    $avp(S_tmp_gs)          = $avp(S_gw_rm_ip_gs);
    $avp(C_port_gi)         = $avp(S_gw_rm_port_gi);
    $avp(C_gw_core_port_gi) = $rp;


    if (is_gflag("6"))
    {
        xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
        bm_log_timer("route-3");
    }
}

########################################################################
# route QUERY_WAN_TO_LAN_CALL: Route to setup environment - WAN to LAN (OSV)
########################################################################
route[QUERY_WAN_TO_LAN_CALL]
{
    if (is_gflag("6"))
        bm_start_timer("route-4");

    $avp(C_fwd_ep_ip_gs)                  = "";
    $avp(C_fwd_ep_port_tcp_gs)            = "";
    $avp(C_fwd_ep_port_tls_gs)            = "";
    $avp(C_fwd_ep_port_mtls_gs)           = "";
    $avp(C_fwd_ep_port_udp_gs)            = "";
    $avp(S_fwd_ep_used_gb)                = 0;

    xlog("L_INFO", "CI=$ci - R4 - Entry M=$rm fU=$fU fd=$fd rp=$rp Rp=$Rp flags=$mF to=$to ct=$ct,avp(C_wan_ip_gs)=$avp(C_wan_ip_gs) ru=$ru\n");

    ## store the avp in temporary variable
    $var(C_inv_noanswr_timer_gs) = $avp(C_inv_noanswr_timer_gs);
    $var(C_inv_noreply_timer_gs) = $avp(C_inv_noreply_timer_gs);

    #Clear gw avps
    $(avp(S_gw_id_gi)[*])                 = $null;
    $(avp(S_ses_id_gi)[*])                = $null;
    $(avp(C_gw_type_gi)[*])               = $null;
    $(avp(C_ssp_gw_profile_gs)[*])        = $null;
    $(avp(S_gw_rm_ip_gs)[*])              = $null;
    $(avp(S_gw_rm_fqdn_gs)[*])            = $null;
    $(avp(S_gw_rm2_ip_gs)[*])             = $null;
    $(avp(S_gw_rm2_fqdn_gs)[*])           = $null;
    $(avp(S_gw_rm_port_gi)[*])            = $null;
    $(avp(S_gw_rm2_port_gs)[*])           = $null;
    $(avp(C_gw_transp_gs)[*])             = $null;
    $(avp(S_rep_bitmap_gi)[*])            = $null;
    $(avp(C_gw_core_ip_gs)[*])            = $null;
    $(avp(S_gw_core_fqdn_gs)[*])          = $null;
    $(avp(C_gw_core_port_gi)[*])          = $null;
    $(avp(S_rep_home_dn_gs)[*])           = $null;
    $(avp(S_gw_emergency_prefixes_gs)[*]) = $null;
    $(avp(S_rm_logical_id_gs)[*])         = $null;
    $(avp(S_gw_is_natted_gs)[*])          = $null;
    $(avp(S_networkid_gs)[*])             = $null;
    $(avp(S_rm_media_ip_gs)[*])           = $null;
    $(avp(S_rm_media_subnet_mask_gs)[*])  = $null;
    $(avp(S_uri_based_route_gb)[*])       = $null;
    $(avp(S_access_control_gb)[*])        = $null;
    $(avp(S_associated_ep_id_gi)[*])      = $null;
    $(avp(C_inv_noanswr_timer_gs)[*])     = $null;
    $(avp(C_inv_noreply_timer_gs)[*])     = $null;
    $(avp(S_profile_name_gs)[*])          = $null;
    $(avp(S_sig_nw_id_gs)[*])             = $null;
    $(avp(C_fw_ext_ip_gs)[*])             = $null;
    $(avp(S_linked_ep_id_gi)[*])          = $null;

    $(avp(C_pmap_port_gi)[*])             = $null;
    $(avp(S_nat_ip_gs)[*])                = $null;
    $(avp(S_wan_interface_gs)[*])         = $null;
    $(avp(C_rm_address_type_gi)[*])       = $null;
    $(avp(S_sys_osv_node_gs)[*])          = $null;
    $(avp(S_network_interface_src_gs)[*]) = $null;
    $(avp(S_location_dom_name_gs)[*])     = $null;

    ### store $avp(C_port_gi)in case of failure so in next round it will be set back to original
    $var(S_port_stored_gi)                = $avp(C_port_gi);
    $var(S_rm_sub_enabled_gb)             = 1;
    $var(S_rm_ep_enabled_gb)              = 1;

    $avp(C_wan_ip_gs)                     = $var(C_ri_var_gs);

    $avp(C_gw_behind_ep_gi)               = 0;
    $var(S_pmap_found_in_pm_lb)           = 0;
    $var(S_pmap_ct_gs)                    = '';
    $var(S_pmap_deep_failed_gb)           = 0;

    $var(S_sys_count_gi)                  = 0;
    $var(S_ssm_rm_ip_gs)                  = "";
    $var(S_ssm_fqdn_ls)                   = "";
    $var(S_1stEp_osv_node_ls)             = "";

    $avp(C_req_transp_gs)                 = $(pr{s.tolower});  # Store received transport to use in reply route
    $var(C_hdr_rcv_transp_gs)             = $avp(C_req_transp_gs);

    #lookup REP first using $var(C_si_var_gs)
    $(avp(S_tmp_gs)[*])                   = $null;
    $var(S_first_ep_found_gi)             = 0;
    $var(S_2nd_ep_found_lb)               = 0;
    $var(S_rm_sub_found_lb)               = 0;
    $var(C_ep1_nat_port_gs)               = '';
    $var(S_ep_id_gi)                      = 0;
    $avp(S_pmap_ep_id_gi)                 = 0;
    $var(S_ep_id_in_pm_gb)                = 0;
    $var(S_pmap_property_changed_gb)      = 0;
    $var(S_dynamic_peer_found_gb)         = 0;

    if($avp(C_req_transp_gs) == "udp")
        $avp(S_pm_transport_gs) = "u";
    else if($avp(C_req_transp_gs) == "tcp")
        $avp(S_pm_transport_gs) = "t";
    else if($avp(C_req_transp_gs) == "tls")
        $avp(S_pm_transport_gs) = "l";

    xlog("L_INFO", "CI=$ci - R4 - var(S_rm_sub_enabled_gb)=$var(S_rm_sub_enabled_gb) var(S_rm_ep_enabled_gb)=$var(S_rm_ep_enabled_gb) avp(C_req_transp_gs)=$avp(C_req_transp_gs) pm_transport=$avp(S_pm_transport_gs)\n");

    # =======================================================================================================
    # Sanity check: epid shall contain only alphanumeric characters
    # =======================================================================================================
    if ($hdr(From) =~ "(.*)[Ee]pid=(.*)")
    {
         $(avp(C_tmp2_gs)[*]) = $null;
         $avp(C_tmp2_gs) = $hdr(From);

         # $avp(C_tmp2_gs) = $(avp(C_tmp2_gs){param.value,epid}); # DOESNOT WORK WHEN THE NAME has double quotes
         avp_subst("$avp(C_tmp2_gs)","/(.*)epid=([^,>;]*)+(.*)/\2/i");

         if (!avp_check("$avp(C_tmp2_gs)","re/^[-a-zA-Z0-9]+$/i"))
         {
            xlog("L_ERR","CI=$ci - R4 - Msg dropped ($rm $pr) - epid = $avp(C_tmp2_gs) contains non alphanumeric characters. si:sp=$si:$sp\n");
            drop;
            if (is_gflag("6"))
            {
               xlog("L_INFO", "bench: $rm-$rs\n");
               bm_log_timer("route-4");
            }
            exit;
         }

         $var(S_ep_id_gi)      = $avp(C_tmp2_gs);
         $avp(S_pmap_ep_id_gi) = $var(S_ep_id_gi);
    }

    $(avp(C_tmp2_gs)[*]) = $null;
    $avp(C_tmp2_gs) = $hdr(From);
    $avp(C_tmp2_gs) = $(avp(C_tmp2_gs){nameaddr.nc_uri});## some send contact without bracket

    # =======================================================================================================
    # Sanity check: From shall not contain quotes
    # =======================================================================================================
    if (avp_check("$avp(C_tmp2_gs)","re/.*?(\x22|\x27)/i"))
    {
        xlog("L_ERR","CI=$ci - R4 - Msg dropped ($rm $pr) - From = $avp(C_tmp2_gs) contains quote. si:sp=$si:$sp\n");
        drop;

        if (is_gflag("6"))
        {
            xlog("L_INFO", "bench: $rm-$rs\n");
            bm_log_timer("route-4");
        }
        exit;
    }


    #extract 2nd ip from 2nd via
    $var(S_hdr_via_transp_gs) = $sel(v[1].transport);

    # use port in the via as well for the dp. if no port, use 5061 for tls and 5060 for udp/tcp
    if ($var(S_hdr_via_transp_gs) == "TLS" || $var(S_hdr_via_transp_gs) == "tls")
       $var(S_rm_via_port_li) = 5061;
    else
       $var(S_rm_via_port_li) = 5060;

    $avp(S_new_src_ip_gs) = $sel(v[1].host);

    if ($sel(v[1].port) != $null) # Port is  present
       $var(S_rm_via_port_li) = $sel(v[1].port);

    $(avp(C_tmp2_gs)[*]) = $null;

    ### need to remove the brackets from ipv6
    get_ip_from_paran('$avp(S_new_src_ip_gs)', '$avp(S_new_src_ip_gs)');

    #the ip from top most via  with src ip is already extracted in $avp(S_new_src_ip_gs)
    # ASSUMPTION: FQDN not coming in from the Branch in the Via
    # Make early determination for wan natted for Direct Subscribers. For Remote EP, this gets overwritten later after first dip.
    if(!compare_ips('$avp(S_new_src_ip_gs)', '$var(C_si_var_gs)'))
    {
        $var(S_wan_natted_gb) = 1;
        xlog("L_INFO", "CI=$ci - R4 - Preliminary NAT Detected based on Via. Via=$avp(S_new_src_ip_gs), Source IP=$var(C_si_var_gs)\n");
    }
    else
        $var(S_wan_natted_gb) = 0;

    xlog("L_INFO", "CI=$ci - R4 - Dipping remote_ep avp(C_wan_ip_gs)=$avp(C_wan_ip_gs), avp(S_AccessMainIPv4_gs)=$avp(S_AccessMainIPv4_gs), avp(S_AccessMainIPv6_gs)=$avp(S_AccessMainIPv6_gs) \n");


    ### Dip network-id table with $Ri and $rp to get NW-id
    $var(S_network_type_gi) = 1;  #1="access" and 0= "core"
    $var(S_signalling_gi) = 1;
    $var(S_media_gi) = 0;
    $var(S_fwd_nw_id_gs) = "";

    xlog("L_INFO", "CI=$ci - R4 - var(S_network_type_gi)=$var(S_network_type_gi), ip_addr= $Ri, port=$Rp, var(S_signalling_gi)=$var(S_signalling_gi),var(S_media_gi)=$var(S_media_gi)\n");

    if ($var(S_dispatcher_rerouted_gi) != 1 && $var(S_is_src_loc_ip_gs) == 1)
    {
        xlog("L_INFO", "CI=$ci - R4 - Local GTC Request. si=$si, sp=$sp, Ri=$Ri, Rp=$Rp\n");
        ### if INFO from gtc, then just forward it to MS (NOTE: it exits )
        if(is_method("INFO") && $sht(call-info=>$ci::INFOsent) == 1)
        {
            xlog("L_INFO", "CI=$ci - R4 - INFO from Local GTC Request. forward it to MS\n");
            $avp(C_tmp2_gs) = "MEDIASERVER";
            xlog("L_INFO", "CI=$ci - R4 - dipping remote_ep with *|$avp(C_tmp2_gs)|*...* \n");
            if (osb_memdb_select("remote_ep,*|$avp(C_tmp2_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","$avp(S_gw_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm_ip_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)|$avp(C_gw_core_ip_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|$avp(S_rep_home_dn_gs)||$avp(C_pmap_port_gi)|$avp(S_tmp_gs)|$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|$avp(S_sys_osv_node_gs)||$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||$avp(S_uri_based_route_gb)|$avp(S_access_control_gb)|$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||||||$avp(S_linked_ep_id_gi)") != 1)
            {
                append_to_reply("Warning: 399 $var(C_si_var_gs) - R4 - could not find Ms using dip *|$avp(C_tmp2_gs)|*|*....\r\n");
                sl_send_reply("403", "Forbidden");

                t_release();

                if (is_gflag("6"))
                {
                    xlog("L_INFO", "bench: $rm-$rs\n");
                    bm_log_timer("route-46");
                }
                exit;
            }
            else
            {
                xlog("L_INFO", "CI=$ci - R4 - found MS ep, ip|fqdn|port= $avp(S_gw_rm_ip_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)\n");
                $avp(S_tc_dial_ms_dn_gs) = $sht(call-info=>$ci::msdn);
                $avp(S_cseq_gs) = $sht(call-info=>$ci::cseq);
                xlog("L_INFO", "CI=$ci - R4 - msDn= $avp(S_tc_dial_ms_dn_gs), stored cseq=$avp(S_cseq_gs) shall be incremented and used\n");
                $avp(S_cseq_gs) = $(avp(S_cseq_gs){s.int})+1;

                $var(S_cseq_gs) = $(avp(S_cseq_gs){s.int}) ;
                subst('/^CSeq: [0-9]+([^0-9].*)$/CSeq: $var(S_cseq_gs)\1/ig');
                xlog("L_INFO", "CI=$ci - R4 - Message $rm-$rs manipulated cSeq=$var(S_cseq_gs) towards MS, avp(S_cseq_gs)=$avp(S_cseq_gs)\n");
                $sht(call-info=>$ci::cseq) = $avp(S_cseq_gs);
                xlog("L_INFO", "CI=$ci - R4 - incrementing in htab: <$sht(call-info=>$ci::cseq)>\n");

                $ru = "sip:"+$avp(S_tc_dial_ms_dn_gs)+"@"+$avp(S_gw_rm_ip_gs)+":"+$avp(S_gw_rm_port_gi)+";transport="+$avp(C_gw_transp_gs);
                if ($avp(C_ssp_pt_params_list_gs) != $null)
                    osb_set_passthrough_params("$ou","$ru","$avp(C_ssp_pt_params_list_gs)");
                ### remove Contact
                if(is_present_hf("Contact"))
                    remove_hf("Contact");
                $du = $sht(call-info=>$ci::duMS);
                t_on_reply("NM_GENERAL_REPLY_ROUTE");
                xlog("L_INFO", "CI=$ci - R4 - sending INFO to MS, du=$du, fs=$fs");

                if (t_relay_to("0x07") < 0)
                    xlog("L_ERR", "CI=$ci - R4- Relay failure - M=$rm RURI=$ru From=$fu To=$tu DU=$du FS=$fs\n");
                exit;
            }

        }
        else if($var(C_call_msg_gb) == 1 && $sht(call-info=>$ci::INFOsent) == 1)
        {
            xlog("L_INFO", "CI=$ci - R4 - Request from Local GTC Request. need to manipulate cseq before forwarding it to MS?, cseq=$cs\n");
        }
        xlog("L_INFO", "CI=$ci - R4 - Dipping remote_ep with Via: $avp(S_new_src_ip_gs):$var(S_rm_via_port_li):$avp(C_req_transp_gs) \n");
        if(osb_memdb_select("remote_ep,*|*|*|*|*|$avp(S_new_src_ip_gs)|*|$var(S_rm_via_port_li)|$avp(C_req_transp_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1","$avp(S_ses_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm_ip_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)|$avp(S_tmp_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|$avp(S_rep_home_dn_gs)|$avp(S_gw_emergency_prefixes_gs)|$avp(C_pmap_port_gi)|$avp(S_nat_ip_gs)|$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|$avp(S_sys_osv_node_gs)|$avp(S_location_dom_name_gs)|$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||$avp(S_uri_based_route_gb)|$avp(S_access_control_gb)|$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||||||$avp(S_linked_ep_id_gi)") != 1)
        {
            ## reject with a 403 (forbidden) response
            append_to_reply("Warning: 399  - R4 - GTC Remote endpoint not found in Remote EP.\r\n");
            sl_send_reply("403", "Forbidden");
            xlog("L_INFO", "CI=$ci - R4 - GTC Remote endpoint not found in Remote EP for IP=$avp(S_new_src_ip_gs), Port=$var(S_rm_via_port_li). exit\n");
            t_release();

            if (is_gflag("6"))
            {
                xlog("L_INFO", "bench: $rm-$rs\n");
                bm_log_timer("route-3");
            }
            exit;
        }

        ## use Realm Profile to get access and core network id (signaling and media)

        ########## ACCCESS NETWORK ##################
        ########## Find Access Realm Profile
        if(osb_memdb_nl_select("realm_profile,*|$avp(S_access_realm_profile_gs)|1|*|*|*,","|||$avp(S_sig_nw_id_gs)|$avp(S_media_nw_id_gs)|") != 1)
        {
            xlog("L_ERR", "CI=$ci - R4 - Msg dropped ($rm $pr) - could not identify access realm_profile using avp(S_access_realm_profile_gs)=$avp(S_access_realm_profile_gs) - si:sp=$si:$sp\n");
            drop;
            if (is_gflag("6"))
            {
               xlog("L_INFO", "bench: $rm-$rs\n");
               bm_log_timer("route-4");
            }
            exit;
        }
#### Get Access Signaling network parameters
        #--- Check signaling network ID access side
        osb_memdb_nl_select("network_id,*|$avp(S_sig_nw_id_gs)|*|*|$var(S_signalling_gi)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1",
                            "|$avp(S_sig_nw_id_gs)||$avp(S_network_interface_src_gs)|||$avp(C_wan_ip_gs)|$avp(C_wan_port_tcp_gs)|$avp(C_wan_port_tls_gs)|$avp(C_wan_port_udp_gs)|$avp(S_ds_group_gs)|$avp(C_fw_ext_ip_gs)|||$avp(S_access_restriction_gi)|$avp(C_port_mtls_gs)||||");

        ## Set avp and variables needed to find media network id in route PROCESS_WAN_TO_LAN_FIRST_EP_FOUND
        $avp(S_profile_name_gs) = $avp(S_access_realm_profile_gs);
        $var(S_network_interface_src_sig_gi) = $avp(S_network_interface_src_gs);
        $var(S_profile_name_gs) = $avp(S_profile_name_gs);
        $var(S_media_nw_id_gs) = $avp(S_media_nw_id_gs);

        ## $avp(S_sys_osv_node_gs) from above table could be (node1 or node2) or "any" or it could be the group index for dispathcer_list
        ## Save the avp(S_sys_osv_node_gs) from network_id as remote_ep dip would overwrite it
        ##$avp(S_ds_group_gs) = $avp(S_sys_osv_node_gs);

        route(PROCESS_WAN_TO_LAN_FIRST_EP_FOUND);
        # This route will exit if the destination is configured for pstn_dialin route
        route(STANDALONE_TRUNK_ROUTE);
    }
    else
    {
        $var(S_isFqdn_ls) = $rd;
        if(!PROC_IS_PURE_IP)
           $var(S_ru_is_fqdn_gb) = 1;
        else
           $var(S_ru_is_fqdn_gb) = 0;
        $var(S_sig_nw_id_sel_ls)='*';
        $var(S_nw_id_ip_addr_sel_ls)=$Ri;
        xlog("L_INFO", "CI=$ci - R4 - Dipping network_id var(S_network_type_gi)=$var(S_network_type_gi), ip_addr= $Ri, port=$Rp, var(S_signalling_gi)=$var(S_signalling_gi),var(S_media_gi)=$var(S_media_gi)\n");
        if($var(S_webRtc_gi) == 1 && $var(S_is_src_lan_ip_ls) == 1)
        {
            #--- Check signaling network ID access side
            $var(S_memdb_return_gi) = osb_memdb_nl_select("network_id,*|*|$var(S_network_type_gi)|*|$var(S_signalling_gi)|*|$Ri|0|0|0|*|*|*|*|*|*|*|*|*|*,1",
                                                          "|$avp(S_sig_nw_id_gs)||$avp(S_network_interface_src_gs)|||$avp(C_wan_ip_gs)||||$avp(S_ds_group_gs)|$avp(C_fw_ext_ip_gs)|||$avp(S_access_restriction_gi)|$avp(C_port_mtls_gs)||||$avp(S_nw_fwd_gb)");
            if($var(S_memdb_return_gi) == 1)
            {
                ##$avp(S_ds_group_gs) = $avp(S_sys_osv_node_gs);
                xlog("L_INFO", "CI=$ci - R4 - wosmo 1st dip (access) success, perform second dip for core \n");
                $var(S_network_type_gi) = 0;#1="access" and 0= "core"
                #--- Check signaling network ID access side (using core?)
                $var(S_memdb_return_gi) = osb_memdb_nl_select("network_id,*|*|$var(S_network_type_gi)|*|$var(S_signalling_gi)|*|$Ri|$Rp|*|*|*|*|*|*|*|*|*|*|*|*,1",
                                                              "|||||||$avp(C_wan_port_tcp_gs)|$avp(C_wan_port_tls_gs)|$avp(C_wan_port_udp_gs)||||||$avp(C_port_mtls_gs)||||$avp(S_nw_fwd_gb)");
            }
        }
        else
        {
            ## Received Port is not reliable as Kamailio seems to be providing the default port for TCP/TLS connections.
            ## e.g. IPs tcp:1.1.1.1:5060 and tcp:1.1.1.1:65060. Messages requested to be sent using socket tcp:1.1.1.1:65060. Incoming message on this socket has the $Rp set to 5060 instead of 65060.
            ## Attempt to use the RURI Port and if none found use the wildcard

            $var(S_useTcpPort_gs) = "*";
            $var(S_useTlsPort_gs) = "*";
            $var(S_useUdpPort_gs) = "*";

            if ($proto == "tcp")
                $var(S_useTcpPort_gs) = $rp;
            else if ($proto == "tls")
                $var(S_useTlsPort_gs) = $rp;
            else
                $var(S_useUdpPort_gs) = $rp;

            # Check forward VLAN first from fwd_vlan_addr_port field from remote EP
            $(avp(S_fwd_nw_id_gs)[*]) = $null;
            $(avp(S_access_fwd_realm_profile_ls)[*]) = $null;
            if(osb_memdb_select("remote_ep_fwd_realm,*|*|$si;$sp|*|*|*|*,","||||$avp(S_access_fwd_realm_profile_ls)||") == 1 ||
               osb_memdb_select("remote_ep,*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|$si;$sp|*|*|*|*,","|||||||||||||||||||||||||||||$avp(S_access_fwd_realm_profile_ls)|||||||||||||||||") == 1)
            {
                if(osb_memdb_nl_select("realm_profile,*|$avp(S_access_fwd_realm_profile_ls)|*|*|*|*,1","|||$avp(S_sig_nw_id_ls)||$avp(S_fwd_nw_id_gs)") == 1)
                {
                    $var(S_fwd_nw_id_gs) = $avp(S_fwd_nw_id_gs);
                    $var(S_sig_nw_id_sel_ls) = $avp(S_sig_nw_id_ls);
                    $var(S_nw_id_ip_addr_sel_ls) = '*';
                    xlog("L_INFO", "CI=$ci - R4 - found forward network id based on remote ep. Disable NAT - var(S_fwd_nw_id_gs)=$var(S_fwd_nw_id_gs) var(S_sig_nw_id_sel_ls)=$var(S_sig_nw_id_sel_ls)\n");
                    $var(S_wan_natted_gb) = 0;  # Disabke NAT
                }
            }
            if ($avp(S_fwd_nw_id_gs) == $null && !$var(S_ru_is_fqdn_gb))
            {
                # Check VLAN based on R-URI domain and port
                xlog("L_INFO", "CI=$ci - R4 - Dip nw_id *|*|$var(S_network_type_gi)|*|0|0|$rd|$var(S_useTcpPort_gs)|$var(S_useTlsPort_gs)|$var(S_useUdpPort_gs)|*|*|*|*|*|*|*|*|*|1\n");
                #--- Check forward network ID access side
                if (osb_memdb_nl_select("network_id,*|*|$var(S_network_type_gi)|*|0|0|$rd|$var(S_useTcpPort_gs)|$var(S_useTlsPort_gs)|$var(S_useUdpPort_gs)|*|*|*|*|*|*|*|*|*|1,1", "|$avp(S_fwd_nw_id_gs)||||||||||||||||||") != 1)
                {
                   if ($proto == "tls")  # Check MTLS for forward network ID access side
                       osb_memdb_nl_select("network_id,*|*|$var(S_network_type_gi)|*|0|0|$rd|$var(S_useTcpPort_gs)|*|$var(S_useUdpPort_gs)|*|*|*|*|*|$var(S_useTlsPort_gs)|*|*|*|1,1", "|$avp(S_fwd_nw_id_gs)||||||||||||||||||");
                }
                if ($avp(S_fwd_nw_id_gs) != $null)
                {
                    $var(S_fwd_nw_id_gs) = $avp(S_fwd_nw_id_gs);
                    $var(S_nw_id_ip_addr_sel_ls) = '*';
                    if(osb_memdb_nl_select("realm_profile,*|*|1|*|*|$avp(S_fwd_nw_id_gs),","|||$avp(S_sig_nw_id_ls)||") == 1)
                        $var(S_sig_nw_id_sel_ls) = $avp(S_sig_nw_id_ls);
                    xlog("L_INFO", "CI=$ci - R4 - found forward network id based on R-URI - var(S_fwd_nw_id_gs)=$var(S_fwd_nw_id_gs) var(S_sig_nw_id_sel_ls)=$var(S_sig_nw_id_sel_ls)\n");
                }
            }
            #--- Check signaling or forward network ID access side
            $var(S_memdb_return_gi) = osb_memdb_nl_select("network_id,*|$var(S_sig_nw_id_sel_ls)|$var(S_network_type_gi)|*|$var(S_signalling_gi)|*|$var(S_nw_id_ip_addr_sel_ls)|$var(S_useTcpPort_gs)|$var(S_useTlsPort_gs)|$var(S_useUdpPort_gs)|*|*|*|*|*|*|*|*|*|*,1",
                                                          "|$avp(S_sig_nw_id_gs)||$avp(S_network_interface_src_gs)|||$avp(C_wan_ip_gs)|$avp(C_wan_port_tcp_gs)|$avp(C_wan_port_tls_gs)|$avp(C_wan_port_udp_gs)|$avp(S_sys_osv_node_gs)|$avp(C_fw_ext_ip_gs)|||$avp(S_access_restriction_gi)|$avp(C_port_mtls_gs)||||$avp(S_nw_fwd_gb)");
            if($var(S_memdb_return_gi) != 1 && $proto == "tls") # Check MTLS
                $var(S_memdb_return_gi) = osb_memdb_nl_select("network_id,*|$var(S_sig_nw_id_sel_ls)|$var(S_network_type_gi)|*|$var(S_signalling_gi)|*|$var(S_nw_id_ip_addr_sel_ls)|$var(S_useTcpPort_gs)|*|$var(S_useUdpPort_gs)|*|*|*|*|*|$var(S_useTlsPort_gs)|*|*|*|*,1",
                                                      "|$avp(S_sig_nw_id_gs)||$avp(S_network_interface_src_gs)|||$avp(C_wan_ip_gs)|$avp(C_wan_port_tcp_gs)|$avp(C_wan_port_tls_gs)|$avp(C_wan_port_udp_gs)|$avp(S_sys_osv_node_gs)|$avp(C_fw_ext_ip_gs)|||$avp(S_access_restriction_gi)|$avp(C_port_mtls_gs)||||$avp(S_nw_fwd_gb)");

            if($var(S_memdb_return_gi) != 1)
                $var(S_memdb_return_gi) = osb_memdb_nl_select("network_id,*|$var(S_sig_nw_id_sel_ls)|$var(S_network_type_gi)|*|$var(S_signalling_gi)|*|$var(S_nw_id_ip_addr_sel_ls)|*|*|*|*|*|*|*|*|*|*|*|*|*,1",
                                                              "|$avp(S_sig_nw_id_gs)||$avp(S_network_interface_src_gs)|||$avp(C_wan_ip_gs)|$avp(C_wan_port_tcp_gs)|$avp(C_wan_port_tls_gs)|$avp(C_wan_port_udp_gs)|$avp(S_sys_osv_node_gs)|$avp(C_fw_ext_ip_gs)|||$avp(S_access_restriction_gi)|$avp(C_port_mtls_gs)||||$avp(S_nw_fwd_gb)");

             xlog("L_INFO", "CI=$ci - R4 - After dipping initial NW ID: avp(S_sig_nw_id_gs)=$avp(S_sig_nw_id_gs) avp(S_fwd_nw_id_gs)=$avp(S_fwd_nw_id_gs) var(S_ru_is_fqdn_gb)=$var(S_ru_is_fqdn_gb)\n");
        }

        if($var(S_memdb_return_gi) != 1)
        {
            xlog("L_ERR", "CI=$ci - R4 - Msg dropped ($rm $pr) - could not identify network_id using |$avp(S_sig_nw_id_gs)|$var(S_network_type_gi)||$var(S_signalling_gi)||$var(S_nw_id_ip_addr_sel_ls)|*||||| - si:sp=$si:$sp\n");
            drop;

            if (is_gflag("6"))
            {
                xlog("L_INFO", "bench: $rm-$rs\n");
                bm_log_timer("route-4");
            }
            exit;
        }

        # Check Forward VLAN based on Via header of remote EP when R-URI domain is FQDN
        if ($avp(S_fwd_nw_id_gs) == $null && $var(S_ru_is_fqdn_gb) == 1)
        {
            xlog("L_INFO", "CI=$ci - R4 - Detected FQDN. Check FWD NW ID from REP $var(S_hdr_via_transp_gs):$avp(S_new_src_ip_gs):$var(S_rm_via_port_li)\n");
            $(avp(S_access_profile_ls)[*]) = $null;
            if (osb_memdb_select("remote_ep,*|*|*|*|*|$avp(S_new_src_ip_gs)|*|$var(S_rm_via_port_li)|$(var(S_hdr_via_transp_gs){s.tolower})|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","|||||||||||||||||||||||||||||$avp(S_access_profile_ls)|||||||||||||||||") == 1)
            {
                xlog("L_INFO", "CI=$ci - R4 - Check FWD realm profile based on EP. avp(S_access_profile_ls)=$avp(S_access_profile_ls) avp(S_sig_nw_id_gs)=$avp(S_sig_nw_id_gs)\n");
                if (not_empty("$avp(S_access_profile_ls)") && osb_memdb_nl_select("realm_profile,*|$avp(S_access_profile_ls)|1|$avp(S_sig_nw_id_gs)|*|*,","|||||$avp(S_fwd_nw_id_gs)") == 1)
                {
                    $var(S_fwd_nw_id_gs) = $avp(S_fwd_nw_id_gs);
                    xlog("L_INFO", "CI=$ci - R4 - Found forward NW ID $var(S_fwd_nw_id_gs) based on EP ($var(S_hdr_via_transp_gs):$avp(S_new_src_ip_gs):$var(S_rm_via_port_li))\n");
                }
            }
        }


        if(not_empty("$avp(C_fw_ext_ip_gs)"))
        {
            $avp(C_wan_ip_gs) = $avp(C_fw_ext_ip_gs);
            $avp(C_advertised_ip_gs) = $avp(C_fw_ext_ip_gs);
        }
        else if(not_empty("$avp(S_lb_ext_ip_gs)"))
        {
            $avp(C_wan_ip_gs) = $avp(S_lb_ext_ip_gs);
            $avp(C_advertised_ip_gs) = $avp(S_lb_ext_ip_gs);
        }
        else
            $avp(C_advertised_ip_gs) = $avp(C_wan_ip_gs);

        ### need to save the received interface in variable, will be used in PM later    ######
        $var(S_interface_src_gs) = $avp(S_network_interface_src_gs);

        ################################ FRN7404 ##############################
        ###         reading source signaling for SSM                    #######
        $var(S_network_interface_src_sig_gi) = $avp(S_network_interface_src_gs);

        xlog("L_INFO", "CI=$ci - R4 - found S_sig_nw_id_gs=$avp(S_sig_nw_id_gs) using $Ri and $Rp ($rd:$rp), avp(S_access_restriction_gi)=$avp(S_access_restriction_gi),avp(C_wan_ip_gs)=$avp(C_wan_ip_gs) avp(S_nw_fwd_gb)=$avp(S_nw_fwd_gb) var(S_fwd_nw_id_gs)=$var(S_fwd_nw_id_gs)\n");
        #### note: S_access_restriction_gi = 0    ep AND direct sub allowed         #############
        #### note: S_access_restriction_gi = 1    no ep allowed                     #############
        #### note: S_access_restriction_gi = 2    no direct sub allowed             #############

        ### Dip realm-profile table NW-id to get profile-ID (may return multiple)
        $(avp(S_realm_fwd_nw_id_gs)[*]) = $null;
        $var(S_profile_type_gi) = 1;  #1="signalling" and 0= "media"
        if(osb_memdb_nl_select("realm_profile,*|*|*|$avp(S_sig_nw_id_gs)|*|*,","|$avp(S_profile_name_gs)|||$avp(S_media_nw_id_gs)|$avp(S_realm_fwd_nw_id_gs)") != 1)
        {
            xlog("L_ERR", "CI=$ci - R4 - Msg dropped ($rm $pr) - could not identify realm_profile using avp(S_profile_name_gs)=$avp(S_profile_name_gs) and avp(S_sig_nw_id_gs)=$avp(S_sig_nw_id_gs) - si:sp=$si:$sp\n");
            drop;

            if (is_gflag("6"))
            {
                xlog("L_INFO", "bench: $rm-$rs\n");
                bm_log_timer("route-4");
            }
            exit;
        }
        xlog("L_INFO", "CI=$ci - R4 - found  var(S_profile_type_gi)=$var(S_profile_type_gi), matched realm profiles=$cnt($avp(S_profile_name_gs)), first avp(S_profile_name_gs)=$avp(S_profile_name_gs), first avp(S_media_nw_id_gs)=$avp(S_media_nw_id_gs) \n");

        ### the following variable is used in media template
        if($avp(S_media_nw_id_gs) != $avp(S_sig_nw_id_gs))
            $var(S_split_sig_media_gi) = 1;
        else
            $var(S_split_sig_media_gi) = 0;

        $var(S_home_dn_gs) = '';

        xlog("L_INFO", "CI=$ci - R4 - var(S_wan_natted_gb)=$var(S_wan_natted_gb) var(S_fwd_nw_id_gs)=$var(S_fwd_nw_id_gs)\n");
        $var(S_isFqdn_ls) = $avp(S_new_src_ip_gs);
        if ($var(S_wan_natted_gb) == 1 && PROC_IS_PURE_IP && !not_empty("$var(S_fwd_nw_id_gs)"))
            $var(S_use_si_var_nat_ls) = $var(C_si_var_gs);
        else
            $var(S_use_si_var_nat_ls) = '*';

# Flag to Enable Endpoint Lookup and Processing #
        ### Dip into REP in a loop for the multiple returns of realm_profiles
        route(QUERY_1ST_REM_EP_FROM_REALM_PROFILE);

        if(is_method("OPTIONS") && is_present_hf("X-Siemens-Identity") && ($var(S_wan_natted_gb) == 1) )
        {
            if($var(S_first_ep_found_gi) == 0)
            {
                xlog("L_INFO", "CI=$ci - R4  - the dynamic EP with  LOGICALID=$avp(C_tmp2_gs) is not provisioned\n");
                t_release();
                if (is_gflag("6"))
                {
                    xlog("L_INFO", "bench: $rm-$rs\n");
                    bm_log_timer("route-4");
                }
                exit;
            }
            else
            {
                remove_hf("X-Siemens-Identity");
            }
        }
    }

    xlog("L_INFO", "CI=$ci - R4 -avp(C_pmap_port_gi)=$avp(C_pmap_port_gi),  var(S_first_ep_found_gi)=$var(S_first_ep_found_gi),\n");

    if($var(S_first_ep_found_gi) == 0)
    {

        # First EP not found, just use the first entry matching the access signaling network to get the media network id.
        $avp(S_access_realm_profile_gs) = $(avp(S_profile_name_gs)[0]);
        $var(S_media_nw_id_gs) = $(avp(S_media_nw_id_gs)[0]);


        xlog("L_INFO", "CI=$ci - R4 - no ep found, setting avp(S_access_realm_profile_gs)=$avp(S_access_realm_profile_gs), var(S_media_nw_id_gs)=$var(S_media_nw_id_gs) \n");
    }
    if(is_present_hf("Contact"))
    {
        #lookup in port map using the contact
        $avp(S_reg_ct_gs) = $hdr(Contact);
        $avp(S_reg_ct_gs) = $(avp(S_reg_ct_gs){nameaddr.nc_uri});## some send contact without bracket

        # Keyset handling - use the same external port of the primary line
        # extract port from contact,
        $var(C_ct_domain_ip_ls) = $(avp(S_reg_ct_gs){uri.host});
        ip_type_str('$var(C_ct_domain_ip_ls)', '$var(S_v4_v6_gs)');
        xlog("L_INFO", "CI=$ci - R4 - var(S_v4_v6_gs)=$var(S_v4_v6_gs) \n");

        $var(S_isFqdn_ls) = $var(C_ct_domain_ip_ls);
        if(($var(S_v4_v6_gs) == "ip4") && !PROC_IS_PURE_IP)
        {
            #this is fqdn case
            $avp(S_rm_fqdn_gs) = $var(C_ct_domain_ip_ls);
            $avp(S_is_fqdn_gs) = 2;
            xlog("L_INFO", "CI=$ci - R4 - fqdn in Contact provided:$avp(S_rm_fqdn_gs) , should pass transparently \n");
        }
    }

    ### dip into PM
    if( $var(S_2nd_ep_found_lb) != 1 && !isflagset(5) &&                                              #no 2nd ep found and first ep is not a gw/ssp
       !($var(S_first_ep_found_gi) == 1 && is_method("OPTIONS") && $fU == "survivabilityprovider"))   #not an OPTIONS from the OSB
    {
        if(is_present_hf("Contact"))
        {
            $avp(C_port_gi)=$null;
            $(avp(S_tmp_gs)[*]) = $null;
            if( $(sel(contact.uri){uri.user}{s.len}))
                $var(C_hdr_ct_user_gs) = $(avp(S_reg_ct_gs){uri.user});
            else
            {
                $var(C_hdr_ct_user_gs) = $fU;
                osb_set_uri("$avp(S_reg_ct_gs)","$fU",0x02);
                xlog("L_INFO", "CI=$ci - R4 - Contact misses user info, so using the DN in FROM: $var(C_hdr_ct_user_gs)\n");
            }

            $avp(C_port_gi) = $(avp(S_reg_ct_gs){uri.port});
            $var(S_new_ct_domain_ip_ls) = $(avp(S_reg_ct_gs){uri.host});
            $avp(S_tmp_gs) = $(avp(S_reg_ct_gs){nameaddr.nc_uri});## some send contact without bracket

            $var(C_port_gi) = $avp(C_port_gi);
            $(avp(S_pmap_ext_port_gi)[*]) = $null;
            $(avp(C_port_gi)[*]) = $null;

            if($var(C_hdr_ct_user_gs)!='')
            {
                if(!is_gflag("8") && $var(S_ep_id_gi) != 0)            #epid is present
                {
                    #lookup epid
                    $avp(S_pmap_id_gi) = $null;
                    $(avp(C_tmp2_gs)[*]) = $null;


                     ## if no EP, need to dip into sub_associated_network using network_id to read the core profile
                     ## dip to find the signaling


                     if(is_method("REGISTER"))
                     {

                         #get epid last char
                         $var(S_tmp_count_li)    = $(var(S_ep_id_gi){s.len}) - 1;
                         $var(S_ep_id_suffix_ls) = $(var(S_ep_id_gi){s.strip,$var(S_tmp_count_li)});

                         xlog("L_INFO", "CI=$ci - R4 - Dipping with epid=$var(S_ep_id_gi) last character $var(S_ep_id_suffix_ls) \n");

                         if( $var(S_ep_id_suffix_ls) == "i" || $var(S_ep_id_suffix_ls) == "g")
                         {
                             xlog("L_INFO", "CI=$ci - R4 - Dipping with epid=$var(S_ep_id_gi) ignoring last character ($var(S_ep_id_suffix_ls)) and var(C_hdr_ct_user_gs)=$var(C_hdr_ct_user_gs)\n");

                             $avp(S_ignore_digits_li) = 1;
                             ### it should be noted that index passed below in the query is equal to the index of routing prefix in the remote_ep minus 1   ######
                             osb_memdb_nl_select_best_match_prefix("port_map,*|*|*|*|*|*|*|*|*|$var(S_ep_id_gi)|$var(C_hdr_ct_user_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1","$avp(S_pmap_id_gi)|$avp(S_int_ip_gs)|$avp(S_tmp_gs)|$avp(S_pmap_int_port_gi)|$avp(C_port_gi)|$avp(S_pmap_map_time_gs)|$avp(S_exp_as_gi)|$avp(S_pmap_sub_expiry_gs)|$avp(S_wan_interface_gs)|||$avp(S_contact_ip_gi)||$avp(S_network_interface_src_gs)|$avp(C_tmp2_gs)|$avp(S_hdr_user_agent_gs)|$avp(C_wan_port_gs)|$avp(S_core_realm_profile_gs)|$avp(S_wosmo_client_ip_gs)|$avp(S_ct_indication_gs)|$avp(S_device_token_gs)|||||$avp(S_p_server_gs)",9,"$avp(S_ignore_digits_li)");

                             if ( $avp(S_pmap_id_gi) != $null && $avp(S_pmap_id_gi) != "" )
                             {
                                 xlog("L_INFO", "CI=$ci - R4 - PM dip success: $avp(S_pmap_id_gi)|$avp(S_int_ip_gs)|$avp(S_tmp_gs)|$avp(S_pmap_int_port_gi)|$avp(C_port_gi)|$avp(S_pmap_map_time_gs)|$avp(S_exp_as_gi)|$avp(S_pmap_sub_expiry_gs)|$avp(S_wan_interface_gs)|||$avp(S_contact_ip_gi)||$avp(S_network_interface_src_gs)|$avp(C_tmp2_gs)|$avp(S_hdr_user_agent_gs)|$avp(C_wan_port_gs)|$avp(S_core_realm_profile_gs)|$avp(S_wosmo_client_ip_gs)|$avp(S_ct_indication_gs)|$avp(S_device_token_gs)|||||$avp(S_p_server_gs)\n");
                             }

                         }
                         else
                         {
                             xlog("L_INFO", "CI=$ci - R4 - Dipping with epid=$var(S_ep_id_gi) and var(C_hdr_ct_user_gs)=$var(C_hdr_ct_user_gs)\n");
                             osb_memdb_nl_select("port_map,*|*|*|*|*|*|*|*|*|$var(S_ep_id_gi)|$var(C_hdr_ct_user_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1","$avp(S_pmap_id_gi)|$avp(S_int_ip_gs)|$avp(S_tmp_gs)|$avp(S_pmap_int_port_gi)|$avp(C_port_gi)|$avp(S_pmap_map_time_gs)|$avp(S_exp_as_gi)|$avp(S_pmap_sub_expiry_gs)|$avp(S_wan_interface_gs)|||$avp(S_contact_ip_gi)||$avp(S_network_interface_src_gs)|$avp(C_tmp2_gs)|$avp(S_hdr_user_agent_gs)|$avp(C_wan_port_gs)|$avp(S_core_realm_profile_gs)|$avp(S_wosmo_client_ip_gs)|$avp(S_ct_indication_gs)|$avp(S_device_token_gs)|||||$avp(S_p_server_gs)");

                             if ( $avp(S_pmap_id_gi) != $null && $avp(S_pmap_id_gi) != "" )
                             {
                                 xlog("L_INFO", "CI=$ci - R4 - PM dip success: $avp(S_pmap_id_gi)|$avp(S_int_ip_gs)|$avp(S_tmp_gs)|$avp(S_pmap_int_port_gi)|$avp(C_port_gi)|$avp(S_pmap_map_time_gs)|$avp(S_exp_as_gi)|$avp(S_pmap_sub_expiry_gs)|$avp(S_wan_interface_gs)|||$avp(S_contact_ip_gi)||$avp(S_network_interface_src_gs)|$avp(C_tmp2_gs)|$avp(S_hdr_user_agent_gs)|$avp(C_wan_port_gs)|$avp(S_core_realm_profile_gs)|$avp(S_wosmo_client_ip_gs)|$avp(S_ct_indication_gs)|$avp(S_device_token_gs)|||||$avp(S_p_server_gs)\n");
                             }
                         }

                     }
                     else
                     {
                         xlog("L_INFO", "CI=$ci - R4 - Dipping with epid=$var(S_ep_id_gi), var(C_hdr_ct_user_gs)=$var(C_hdr_ct_user_gs) and $var(C_ct_domain_ip_ls)=$var(C_ct_domain_ip_ls)\n");
                         $(avp(S_sys_stick_with_commServer_sv_gi)[*]) = $null;
                         osb_memdb_nl_select("port_map,*|*|*|*|*|*|*|*|*|$var(S_ep_id_gi)|$var(C_hdr_ct_user_gs)|$var(C_ct_domain_ip_ls)|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1","$avp(S_pmap_id_gi)|$avp(S_int_ip_gs)|$avp(S_tmp_gs)|$avp(S_pmap_int_port_gi)|$avp(C_port_gi)||$avp(S_exp_as_gi)||$avp(S_wan_interface_gs)|||$avp(S_contact_ip_gi)||$avp(S_network_interface_src_gs)|$avp(C_tmp2_gs)|$avp(S_hdr_user_agent_gs)|$avp(C_wan_port_gs)|$avp(S_core_realm_profile_gs)|$avp(S_wosmo_client_ip_gs)|$avp(S_ct_indication_gs)|$avp(S_device_token_gs)||||$avp(S_sys_stick_with_commServer_sv_gi)|$avp(S_p_server_gs)");
                     }


                     if(($avp(S_pmap_id_gi) != $null && $avp(S_pmap_id_gi) != ""))
                     {
                        $var(S_ep_id_in_pm_gb) = 1;
                        $var(S_old_pmap_transp_gs) = $avp(C_tmp2_gs);

                        $avp(C_tmp2_gs) = $(avp(S_tmp_gs){uri.host});
                        $var(S_new_ct_domain_ip_ls) = $(avp(S_tmp_gs){uri.host});

                        #Make sure that Contact is not * for Unregister, happens with Polycom shutdown and leads to deleteing all PM

                        if ( is_method("REGISTER") &&
                             $var(C_ct_domain_ip_ls) != 0 &&
                             ( !compare_ips('$var(C_ct_domain_ip_ls)', '$var(S_new_ct_domain_ip_ls)') ||   # Domain changed
                               !compare_ips('$avp(S_int_ip_gs)', '$var(C_si_var_gs)')                 ||   # Src ip changed
                               $var(S_old_pmap_transp_gs) != $avp(S_pm_transport_gs))                 ||   # Transport changed
                               ( ($avp(C_wan_port_gs) != $avp(C_wan_port_tcp_gs)) &&
                                 ($avp(C_wan_port_gs) != $avp(C_wan_port_tls_gs)) &&
                                 ($avp(C_wan_port_gs) != $avp(C_wan_port_udp_gs)) )                   ||   # Wan port changed
                               $var(S_interface_src_gs) != $avp(S_network_interface_src_gs) )              # Network changed
                        {
                            $var(S_pmap_property_changed_gb) = 1;

                            $var(S_tmp_ls) =  "\nProperty  : Old Value|New Value" +
                                              "\nCt domain : " + $var(C_ct_domain_ip_ls)           + "|" + $var(S_new_ct_domain_ip_ls) +
                                              "\nSrc ip    : " + $avp(S_int_ip_gs)                 + "|" + $var(C_si_var_gs) +
                                              "\nTransport : " + $var(S_old_pmap_transp_gs)        + "|" + $avp(S_pm_transport_gs) +
                                              "\nWan Port  : " + "tcp: " + $avp(C_wan_port_tcp_gs) +
                                              "\n                 tls: " + $avp(C_wan_port_tls_gs) + "|" + $avp(C_wan_port_gs) +
                                              "\n                 udp: " + $avp(C_wan_port_udp_gs) +
                                              "\nNetwork   : " + $avp(S_network_interface_src_gs)  + "|" + $var(S_interface_src_gs) ;

                            xlog("L_INFO","CI=$ci - R4 - Properties in port map entry has changed: $var(S_tmp_ls)\n");


                        }
                     }
                 }

                 if(($avp(C_port_gi) == $null || $avp(C_port_gi) == "") && (is_gflag("8") || $var(S_ep_id_gi) == 0) ) ## No port found and secondary line
                 {
                     if(isflagset(8) || $var(S_webRtc_gi) == 1)
                     {
                        xlog("L_INFO", "CI=$ci - R4 - flag(8) or webrtc, dipping with *|$var(C_si_var_gs)|*|*|*|*|*|*|*|*|$var(C_hdr_ct_user_gs)|$var(C_ct_domain_ip_ls)|$var(C_port_gi)|*|*|*|*|*|* \n");
                        osb_memdb_nl_select("port_map,*|$var(C_si_var_gs)|*|*|*|*|*|*|*|*|$var(C_hdr_ct_user_gs)|$var(C_ct_domain_ip_ls)|$var(C_port_gi)|*|*|*|*|*|*|*|*|*|*|*|*|*,1","$avp(S_pmap_id_gi)|$avp(S_int_ip_gs)|$avp(S_tmp_gs)|$avp(S_pmap_int_port_gi)|$avp(C_port_gi)|$avp(S_pmap_map_time_gs)|$avp(S_exp_as_gi)|$avp(S_pmap_sub_expiry_gs)|$avp(S_wan_interface_gs)|||$avp(S_contact_ip_gi)||$avp(S_network_interface_src_gs)|$avp(C_tmp2_gs)|$avp(S_hdr_user_agent_gs)|$avp(C_wan_port_gs)|$avp(S_core_realm_profile_gs)|$avp(S_wosmo_client_ip_gs)|$avp(S_ct_indication_gs)|$avp(S_device_token_gs)||||$avp(S_sys_stick_with_commServer_sv_gi)|$avp(S_p_server_gs)");
                     }
                     else
                     {
                        xlog("L_INFO", "CI=$ci - R4 - dipping with *|$var(C_si_var_gs)|*|*|*|*|*|*|*|*|$var(C_hdr_ct_user_gs)|$var(C_ct_domain_ip_ls)|*|*|*|*|*|*|*\n");
                        osb_memdb_nl_select("port_map,*|$var(C_si_var_gs)|*|*|*|*|*|*|*|*|$var(C_hdr_ct_user_gs)|$var(C_ct_domain_ip_ls)|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1","$avp(S_pmap_id_gi)|$avp(S_int_ip_gs)|$avp(S_tmp_gs)|$avp(S_pmap_int_port_gi)|$avp(C_port_gi)|$avp(S_pmap_map_time_gs)|$avp(S_exp_as_gi)|$avp(S_pmap_sub_expiry_gs)|$avp(S_wan_interface_gs)|||$avp(S_contact_ip_gi)||$avp(S_network_interface_src_gs)|$avp(C_tmp2_gs)|$avp(S_hdr_user_agent_gs)|$avp(C_wan_port_gs)|$avp(S_core_realm_profile_gs)|$avp(S_wosmo_client_ip_gs)|$avp(S_ct_indication_gs)|$avp(S_device_token_gs)||||$avp(S_sys_stick_with_commServer_sv_gi)|$avp(S_p_server_gs)");
                     }

                     $var(S_old_pmap_transp_gs) = $avp(C_tmp2_gs);

                 }

                 $avp(C_pmap_resp_port_gi) = $avp(S_pmap_int_port_gi);
                 $avp(S_pmap_ext_port_gi)  = $avp(C_port_gi);

                 if(($avp(C_port_gi) != $null && $avp(C_port_gi) != "") )
                 {
                     xlog("L_INFO", "CI=$ci - R4 - PM dip success, epid=$var(S_ep_id_gi), avp(S_exp_as_gi) =$avp(S_exp_as_gi), avp(C_port_gi)=avp(S_pmap_ext_port_gi)=$avp(S_pmap_ext_port_gi), avp(C_pmap_resp_port_gi)=avp(S_pmap_int_port_gi)=$avp(S_pmap_int_port_gi), avp(S_network_interface_dst_gs)=$avp(S_network_interface_src_gs),avp(S_hdr_user_agent_gs)=$avp(S_hdr_user_agent_gs),var(S_old_pmap_transp_gs)=$var(S_old_pmap_transp_gs) \n");

                     #set variables here
                     $var(S_pmap_found_in_pm_lb) = 1;
                     $var(S_pmap_ct_gs) = $avp(S_tmp_gs);
                     $var(S_rm_sub_found_lb) = 1;
                 }
                 else
                 {
                     xlog("L_INFO", "CI=$ci - R4 - PM dip failed for: epid=$var(S_ep_id_gi) OR contact: $var(C_hdr_ct_user_gs)@$avp(C_tmp2_gs):$var(C_port_gi)\n");
                     $var(S_pmap_deep_failed_gb) =1;
                     if($var(S_first_ep_found_gi)==1 && $var(S_ep1_port_gi) != 0)
                     {
                        #set the $avp(C_port_gi) back to what it was due to first ep
                        $avp(C_port_gi) = $var(S_ep1_port_gi);

                        if(!is_method("REGISTER"))
                        {
                            # set flag(5) to get GW treatment
                            setflag(5);
                            xlog("L_INFO", "CI=$ci - R4 - setting flag(5) to get the same treatment\n");
                        }
                     }
                 }
            }
        }
        else # NO CONTACT FOUND, USE SECOND VIA
        {
            $(avp(S_pmap_ext_port_gi)[*]) = $null;
            #lookup in PM using 2nd ip
            # need to do a dip for the port_map to see if its registered subscriber

            if($var(S_first_ep_found_gi)==1)
            {
               $avp(S_tmp_gs) = $sel(v[2].host);
               $var(S_pmap_via_port_li) = $sel(v[2].port);
            }
            else
            {
               $avp(S_tmp_gs) = $sel(v[1].host);
               $var(S_pmap_via_port_li) = $sel(v[1].port);
            }

            if (avp_check("$avp(S_tmp_gs)","re/.*?(\x22|\x27)/i"))
            {
                xlog("L_WARN","R4 -  via contains quote\n");
                append_to_reply("Warning: 399 $var(C_si_var_gs) - R4 - via contains quote.\r\n");
                sl_reply_error();
                exit;
            }

            xlog("L_INFO", "CI=$ci - R4  -IP from second via: avp(S_tmp_gs)=$avp(S_tmp_gs)\n");

            $var(S_orig_port_li) = $avp(C_port_gi);

            xlog("L_INFO", "CI=$ci - R4  -dipping in port_map using si=$var(C_si_var_gs),and ip from via: avp(S_tmp_gs)=$avp(S_tmp_gs),var(S_pmap_via_port_li)=$var(S_pmap_via_port_li)\n");


            $(avp(C_port_gi)[*]) = $null ;
            if((!is_gflag("8") && $var(S_ep_id_gi) != 0))                                       #epid is present
            {
                #lookup epid
                $avp(S_pmap_id_gi) = $null;
                $(avp(C_tmp2_gs)[*]) = $null;

                xlog("L_INFO", "CI=$ci - R4 - dipping with epid=$var(S_ep_id_gi) or using si=$si,and ip from second via: avp(S_tmp_gs)=$avp(S_tmp_gs)\n");
                osb_memdb_nl_select("port_map,*|*|*|*|*|*|*|*|*|$var(S_ep_id_gi)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1","$avp(S_pmap_id_gi)|$avp(S_int_ip_gs)|$avp(S_tmp_gs)|$avp(S_pmap_int_port_gi)|$avp(C_port_gi)|$avp(S_pmap_map_time_gs)|$avp(S_exp_as_gi)|$avp(S_pmap_sub_expiry_gs)|$avp(S_wan_interface_gs)|||$avp(S_contact_ip_gi)||$avp(S_network_interface_src_gs)|$avp(C_tmp2_gs)|$avp(S_hdr_user_agent_gs)|$avp(C_wan_port_gs)|$avp(S_core_realm_profile_gs)|$avp(S_wosmo_client_ip_gs)|$avp(S_ct_indication_gs)|$avp(S_device_token_gs)||||$avp(S_sys_stick_with_commServer_sv_gi)|$avp(S_p_server_gs)");
                if(($avp(S_pmap_id_gi) != $null && $avp(S_pmap_id_gi) != "")) {
                    $avp(S_pmap_ext_port_gi) = $avp(C_port_gi);
                    $var(S_ep_id_in_pm_gb) = 1;
                }
            }
            else
            {
                # If no contact is coming in then lets find the PMAP using Via. e.g. OPTIONS from Second EP or Sub, BYE, etc
                # Note that for BSBC cases, everything points to the same IP, Via Port might be different
                # Its just a best guess without the epid, so lets pick the first valid entry and process the request

                $(avp(S_exp_as_gi)[*]) = $null;
                $var(S_exp_lower_limit_li) = -3;
                $var(S_exp_upper_limit_li) = -1;
                if (!has_totag())
                    $var(S_exp_lower_limit_li) = -4;

                if ($var(S_pmap_via_port_li) != 0)
                {
                    # exp out of range (from $var(S_exp_lower_limit_li) to -1)
                    xlog("L_INFO", "CI=$ci - R4  - Query using var(C_si_var_gs)=$var(C_si_var_gs), avp(S_tmp_gs)=$avp(S_tmp_gs), var(S_pmap_via_port_li)=$var(S_pmap_via_port_li) \n");
                    osb_memdb_nl_select_field_out_of_range("port_map,*|$var(C_si_var_gs)|*|*|*|*|*|*|*|*|*|$avp(S_tmp_gs)|$var(S_pmap_via_port_li)|*|*|*|*|*|*|*|*|*|*|*|*|*,1","$avp(S_pmap_id_gi)|$avp(S_int_ip_gs)|$avp(S_tmp_gs)|$avp(S_pmap_int_port_gi)|$avp(C_port_gi)|$avp(S_pmap_map_time_gs)|$avp(S_exp_as_gi)|$avp(S_pmap_sub_expiry_gs)|$avp(S_wan_interface_gs)|$avp(S_pmap_ep_id_gi)||$avp(S_contact_ip_gi)||$avp(S_network_interface_src_gs)|$avp(C_tmp2_gs)|$avp(S_hdr_user_agent_gs)|$avp(C_wan_port_gs)|$avp(S_core_realm_profile_gs)|$avp(S_wosmo_client_ip_gs)|$avp(S_ct_indication_gs)|$avp(S_device_token_gs)||||$avp(S_sys_stick_with_commServer_sv_gi)|$avp(S_p_server_gs)",
                        6, "$var(S_exp_lower_limit_li)", "$var(S_exp_upper_limit_li)");
                }
                if(!not_empty("$avp(C_port_gi)"))
                {
                    # exp out of range (from $var(S_exp_lower_limit_li) to -1)
                    xlog("L_INFO", "CI=$ci - R4  - not found! using si=$var(C_si_var_gs),and ip from via: avp(S_tmp_gs)=$avp(S_tmp_gs) \n");
                    osb_memdb_nl_select_field_out_of_range("port_map,*|$var(C_si_var_gs)|*|*|*|*|*|*|*|*|*|$avp(S_tmp_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1","$avp(S_pmap_id_gi)|$avp(S_int_ip_gs)|$avp(S_tmp_gs)|$avp(S_pmap_int_port_gi)|$avp(C_port_gi)|$avp(S_pmap_map_time_gs)|$avp(S_exp_as_gi)|$avp(S_pmap_sub_expiry_gs)|$avp(S_wan_interface_gs)|$avp(S_pmap_ep_id_gi)||$avp(S_contact_ip_gi)||$avp(S_network_interface_src_gs)|$avp(C_tmp2_gs)|$avp(S_hdr_user_agent_gs)|$avp(C_wan_port_gs)|$avp(S_core_realm_profile_gs)|$avp(S_wosmo_client_ip_gs)|$avp(S_ct_indication_gs)|$avp(S_device_token_gs)||||$avp(S_sys_stick_with_commServer_sv_gi)|$avp(S_p_server_gs)",
                        6, "$var(S_exp_lower_limit_li)", "$var(S_exp_upper_limit_li)");
                }

                if(not_empty("$avp(C_port_gi)"))
                {
                    $var(S_pmap_found_gi) = 1;
                    ## We need only one entry, save to tmp, reset the avps and restore tmp back to avp
                    $var(S_old_pmap_transp_gs) = $avp(C_tmp2_gs);
                    xlog("L_INFO", "CI=$ci - R4 - Using S_exp_as_gi=$avp(S_exp_as_gi), tt=$tt, avp(S_pmap_id_gi)=$avp(S_pmap_id_gi),avp(S_int_ip_gs)=$avp(S_int_ip_gs),avp(C_port_gi)=$avp(C_port_gi),avp(S_tmp_gs)=$avp(S_tmp_gs) \n");
                }

                ## epid not present in the SIP and valid entry based on Via is not found in PM as well
                $avp(S_pmap_ext_port_gi) = $avp(C_port_gi);
            }

            $avp(C_pmap_resp_port_gi) = $avp(S_pmap_int_port_gi);
            $avp(C_port_gi)=$avp(S_pmap_ext_port_gi);


            if(($avp(C_port_gi) != $null && $avp(C_port_gi) != ""))
            {
               xlog("L_INFO", "CI=$ci - R4 - No Contact pm dip succes, avp(S_contact_ip_gi)=$avp(S_contact_ip_gi),avp(C_port_gi)=avp(S_pmap_ext_port_gi)=$avp(S_pmap_ext_port_gi), avp(C_pmap_resp_port_gi)=avp(S_pmap_int_port_gi)=$avp(S_pmap_int_port_gi), avp(S_network_interface_src_gs)=$avp(S_network_interface_src_gs),var(S_old_pmap_transp_gs)=$var(S_old_pmap_transp_gs) \n");
               $var(S_rm_sub_found_lb) = 1;
               $var(S_pmap_found_in_pm_lb) = 1;
               $var(S_pmap_ct_gs) = $avp(S_tmp_gs);

            }
            else
            {
               xlog("L_INFO", "CI=$ci - R4 - PM dip failed - mapped port not present\n");
               $var(S_pmap_deep_failed_gb) =1;
               $avp(C_port_gi) = $var(S_orig_port_li);
            }

       }
    } # end of in no 2nd ep found

    ## now we need to consider access_restriction:
    ## if ep found, and access restrictions=1 ---> 403
    ## if remote sub found but access restrictions=2 --> 403


    if(($var(S_first_ep_found_gi) ==1 && $avp(S_access_restriction_gi) == 2) ||
       ($var(S_rm_sub_found_lb) == 1 && $var(S_first_ep_found_gi) != 1 &&  $avp(S_access_restriction_gi) == 1))
    {
        ## reject with a 403 (forbidden) response
        append_to_reply("Warning: 399  - R4 - signalling restrictions access_restriction=$avp(S_access_restriction_gi).\r\n");
        sl_send_reply("403", "Forbidden");
        xlog("L_INFO", "CI=$ci, Source IP=$si - R4 - signalling restrictions access_restriction=$avp(S_access_restriction_gi).\. exit\n");
        t_release();

        if (is_gflag("6"))
        {
            xlog("L_INFO", "bench: $rm-$rs\n");
            bm_log_timer("route-4");
        }
        exit;
    }

    if($var(S_rm_sub_found_lb) == 1)
    {
        ## Port Map dip overwrote the $avp(S_hdr_user_agent_gs) with index, use it to get the actual user agent
        osb_memdb_nl_select("user_agent,$avp(S_hdr_user_agent_gs)|*,1","|$avp(S_hdr_user_agent_gs)");

        if($var(S_first_ep_found_gi) == 1) {
            xlog("L_INFO", "CI=$ci - R4  -  set flag(15) here \n");
            setflag(15);
        }
        else
        {
           xlog("L_INFO", "CI=$ci - R4  -  set flag(11) here \n");
           setflag(11);

           if ($avp(S_hdr_user_agent_gs) =~ "OpenScape Mobile Client - WebRTC.*")
           {
               xlog("L_INFO", "CI=$ci - R4 - avp(S_hdr_user_agent_gs)=$avp(S_hdr_user_agent_gs). Mark as WebRTC Call \n");
               $var(S_webRtc_gi) = 1;
           }
        }
    }


    if($var(S_dynamic_peer_found_gb) == 1 && $avp(S_access_control_gb) ==1)
    {
        xlog("L_INFO", "CI=$ci - R4 - Dipping remote_ep and dynamic peering for received interface: $var(C_ri_var_gs) \n");
        ## now check access control

        $(avp(S_gw_rm_ip_gs)[*]) = $null;

        osb_memdb_select("remote_ep,*|*|*|*|*|$si|*|*|$avp(C_req_transp_gs)|*|*|*|*|$var(S_home_dn_gs)|*|*|$var(S_use_si_var_nat_ls)|*|*|*|*|*|*|*|1|*|*|*|*|$var(S_profile_name_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","$avp(S_ses_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm_ip_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)|$avp(S_tmp_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|$avp(S_rep_home_dn_gs)|$avp(S_gw_emergency_prefixes_gs)|$avp(C_pmap_port_gi)|$avp(S_nat_ip_gs)|$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|$avp(S_sys_osv_node_gs)|$avp(S_location_dom_name_gs)|$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||$avp(S_uri_based_route_gb)|$avp(S_access_control_gb)|$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||||||$avp(S_linked_ep_id_gi)");

        if($avp(S_gw_rm_ip_gs) == $null)
        {
            ## reject with a 403 (forbidden) response
            append_to_reply("Warning: 399  - R4 - access control enabled but no match found.\r\n");
            sl_send_reply("403", "Forbidden");
            xlog("L_INFO", "CI=$ci, Source IP=$si - R4 - access control enabled but no match found. exit\n");
            t_release();

            if (is_gflag("6"))
            {
                xlog("L_INFO", "bench: $rm-$rs\n");
                bm_log_timer("route-4");
            }
            exit;
        }
    }
    else if($var(S_first_ep_found_gi) ==0)
    {
        #even first deep failed, it must be a direct sub
        xlog("L_INFO", "CI=$ci - R4 - This is a direct sub \n");
        setflag(11);

        ### for remote subscribers: need to make sure that the entry in realm profile
        ### points to same network ID for signalling and media
        xlog("L_INFO", "CI=$ci - R4 - dipping into realm profile for RS with $avp(S_sig_nw_id_gs) for signalling and media\n");
        if(osb_memdb_nl_select("realm_profile,*|*|*|$avp(S_sig_nw_id_gs)|$avp(S_sig_nw_id_gs)|*,","|$avp(S_profile_name_gs)|||$avp(S_media_nw_id_gs)|") != 1)
        {
            xlog("L_ERR", "CI=$ci - R4 - not able to find matching network ID for signaling and media \n");
            append_to_reply("Warning: 399  - R4 - not able to find matching network ID for signaling and media=$avp(S_sig_nw_id_gs)\r\n");
            sl_send_reply("403", "Forbidden");

            t_release();

            if (is_gflag("6"))
            {
               xlog("L_INFO", "bench: $rm-$rs\n");
               bm_log_timer("route-4");
            }
            exit;
        }
    }

    xlog("L_INFO", "CI=$ci - R4   -  var(C_ep1_core_port_gi)=$var(C_ep1_core_port_gi) \n");

    #now check to see if we need to set X-Siemens-Location related fields
    #need to dip if the header is not present

    if(($var(S_first_ep_found_gi) == 1) && $var(S_rm_ep_enabled_gb) == 0) || (isflagset(11) && $var(S_rm_sub_enabled_gb) == 0)
    {
        xlog("L_INFO", "CI=$ci - R4 - Source IP=$si flag indicates interface is blocked. exit\n");
        t_release();

        if (is_gflag("6"))
        {
            xlog("L_INFO", "bench: $rm-$rs\n");
            bm_log_timer("route-4");
        }
        exit;
    }

    xlog("L_INFO", "CI=$ci, Source IP=$si - R4 - Subscriber status avp(S_exp_as_gi) =$avp(S_exp_as_gi), flags=$mf, avp(S_access_control_gb)=$avp(S_access_control_gb)\n");

    if (isflagset(11)) # For now, reject unregistered direct subscribers or could be an unconfigured endpoint
    {
       if(! (is_method("NOTIFY|SUBSCRIBE|REGISTER|CANCEL|BYE") ))
       {
         # if direct subscriber not registered then reject the call
         if($avp(S_exp_as_gi) == -1 || $avp(S_exp_as_gi) == -2 || $avp(S_exp_as_gi) == -3 || $var(S_pmap_found_in_pm_lb) != 1 || ($avp(S_exp_as_gi) == -4 && !has_totag()))
         {
            xlog("L_INFO", "CI=$ci - R4 - Source IP=$si Subscriber not Registered or Endpoint Not Configured. exit\n");
            t_release();

            if (is_gflag("6"))
            {
                xlog("L_INFO", "bench: $rm-$rs\n");
                bm_log_timer("route-4");
            }
            exit;

         }
       }
    }
    xlog("L_INFO", "CI=$ci - R4 - Before looking at pai_user, avp(C_ssp_pai_user_gs)=$avp(C_ssp_pai_user_gs)\n");
    if (is_present_hf("P-Preferred-Identity"))
            $avp(C_ssp_ppi_user_gs) = $pU; # Username of P-Preferred Identity header
    if (is_present_hf("P-Asserted-Identity") && !not_empty("$avp(C_ssp_pai_user_gs)"))
            $avp(C_ssp_pai_user_gs) = $(ai{uri.user}); # Username of P-Asserted identity header
    if (is_present_hf("Diversion"))
            $avp(C_ssp_div_user_gs) = $(hdr(Diversion)[0]{nameaddr.uri}{uri.user}); # Username of diversion header

    xlog("L_INFO", "CI=$ci - R4 - After looking at pai_user, avp(C_ssp_pai_user_gs)=$avp(C_ssp_pai_user_gs)\n");

    #### FRN5807
    if($var(C_inv_noanswr_timer_gs) != "")
        xlog("L_INFO", "CI=$ci - R4 - overwriting no answer timer with db value: $avp(C_inv_noanswr_timer_gs)\n");
    else
        $avp(C_inv_noanswr_timer_gs) = $var(C_inv_noanswr_timer_gs);
    if($var(C_inv_noreply_timer_gs) != "")
        xlog("L_INFO", "CI=$ci - R4 - overwriting no reply timer with db value: $avp(C_inv_noreply_timer_gs)\n");
    else
        $avp(C_inv_noreply_timer_gs) = $var(C_inv_noreply_timer_gs);


    $var(S_found_gb) = 0;
    if(isflagset(11) || $var(S_first_ep_found_gi) == 0)
    {

        ## for remote subs we need to update this var which is used by media template
        $var(S_network_interface_media_src_gi) = $avp(S_network_interface_src_gs);
        ## read subscriber specific
        xlog("L_INFO", "CI=$ci - R4 - Dipping remote_subscriber for to get core_realm_profile using the $avp(S_sig_nw_id_gs) and  $avp(S_profile_name_gs), var(S_network_interface_media_src_gi)=$var(S_network_interface_media_src_gi)\n");

        osb_memdb_nl_select("remote_subscriber,*|*|*|*|*|*|*|*|$avp(S_sig_nw_id_gs)|*|*|*|*|*|*|*,","$avp(S_ses_id_gi)||$avp(S_tmp_gs)|$avp(S_subnet_ip_gs)|$avp(S_subnet_mask_gs)||$avp(S_rep_home_dn_gs)|$avp(S_gw_emergency_prefixes_gs)|$avp(S_media_nw_id_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)||$avp(S_tmp_dn_flag_gs)|$avp(S_tmp_subnet_flag_gs)|$avp(S_tmp_from_flag_gs)|$avp(S_tmp_contact_flag_gs)");

        $var(S_sys_count_gi) = 0;
        $var(S_ct_user_ls) = "";
        $var(S_found_gb) = 0;
        $var(S_found_domain_associated_gb) = 0;
        $var(S_tmp_count_li) = 0;
        $var(S_sys_count_gi)  = 0;
        ip_type_str('$var(C_si_var_gs)', '$var(S_v4_v6_gs)');
        while($(avp(S_ses_id_gi)[$var(S_sys_count_gi) ]) != $null && $var(S_found_gb) == 0)
        {
              xlog("L_INFO", "CI=$ci - R4 - var(C_si_var_gs)=$var(C_si_var_gs),avp(S_tmp_gs)=$(avp(S_tmp_gs)[$var(S_sys_count_gi)]),$(avp(S_subnet_ip_gs)[$var(S_sys_count_gi)]),  $(avp(S_subnet_mask_gs)[$var(S_sys_count_gi)])\n");

            if($(avp(S_tmp_subnet_flag_gs)[$var(S_sys_count_gi)]) == 1)
            {
              ip_type_str('$(avp(S_subnet_ip_gs)[$var(S_sys_count_gi)])', '$var(S_subnetip_v4_v6_gs)');
              if($var(S_v4_v6_gs) == $var(S_subnetip_v4_v6_gs))
              {
                  if(ip_and_mask_compare('$var(C_si_var_gs)', '$(avp(S_subnet_ip_gs)[$var(S_sys_count_gi)])', '$(avp(S_subnet_mask_gs)[$var(S_sys_count_gi)])') == 1)
                  {
                        $var(S_found_domain_associated_gb) = 1;
                  }
              }
            }
            else if($(avp(S_tmp_dn_flag_gs)[$var(S_sys_count_gi)]) == 1)
            {
                if($ct != $null)
                {
                    $var(S_ct_user_ls) = $(ct{nameaddr.uri}{uri.user});
                }
                $var(S_from_user_ls) = $fU;
                if($(avp(S_tmp_from_flag_gs)[$var(S_sys_count_gi)]) == 1 && $(avp(S_tmp_contact_flag_gs)[$var(S_sys_count_gi)]) == 0)
                {
                    if(osb_memdb_nl_select("remote_sub_dn_list,$var(S_from_user_ls)|*,","$avp(S_tmp_dn_numb_gs)|$avp(S_tmp_domain_gs)") != 1)
                    {
                        xlog("L_ERR", "CI=$ci - R4 - Could not get the DN number from the FROM Header \n");
                    }
                    else if($(avp(S_tmp_gs)[$var(S_sys_count_gi)]) == $avp(S_tmp_domain_gs))
                    {
                        $var(S_found_domain_associated_gb) = 1;
                    }
                }
                else if($(avp(S_tmp_from_flag_gs)[$var(S_sys_count_gi)]) == 0 && $(avp(S_tmp_contact_flag_gs)[$var(S_sys_count_gi)]) == 1)
                {
                    if(osb_memdb_nl_select("remote_sub_dn_list,$var(S_ct_user_ls)|*,","$avp(S_tmp_dn_numb_gs)|$avp(S_tmp_domain_gs)") != 1)
                    {
                        xlog("L_ERR", "CI=$ci - R4 - Could not get the DN number from the CONTACT Header \n");
                    }
                    else if($(avp(S_tmp_gs)[$var(S_sys_count_gi)]) == $avp(S_tmp_domain_gs))
                    {
                        $var(S_found_domain_associated_gb) = 1;
                    }
                }
                else if($(avp(S_tmp_from_flag_gs)[$var(S_sys_count_gi)]) == 1 && $(avp(S_tmp_contact_flag_gs)[$var(S_sys_count_gi)]) == 1)
                {
                    if(osb_memdb_nl_select("remote_sub_dn_list,$var(S_ct_user_ls)|*,","$avp(S_tmp_dn_numb_gs)|$avp(S_tmp_domain_gs)") != 1 && osb_memdb_nl_select("remote_sub_dn_list,$var(S_from_user_ls)|*,","$avp(S_tmp_dn_numb_gs)|$avp(S_tmp_domain_gs)") != 1)
                        xlog("L_ERR", "CI=$ci - R4 - Could not get the DN number from the CONTACT nor FROM Header \n");

                    else if($(avp(S_tmp_gs)[$var(S_sys_count_gi)]) == $avp(S_tmp_domain_gs))
                    {
                        $var(S_found_domain_associated_gb) = 1;
                    }
                }
            }

            if($var(S_found_domain_associated_gb) == 1)
            {
                $var(S_found_gb) = 1;
                $(avp(S_location_dom_name_gs)[*]) =  $null;
                $avp(S_location_dom_name_gs) = $(avp(S_tmp_gs)[$var(S_sys_count_gi)]);

                $var(S_gw_emergency_prefixes_gs) = $(avp(S_gw_emergency_prefixes_gs)[$var(S_sys_count_gi)]);
                $(avp(S_gw_emergency_prefixes_gs)[*]) =  $null;
                $avp(S_gw_emergency_prefixes_gs) = $var(S_gw_emergency_prefixes_gs);

                xlog("L_INFO", "CI=$ci - R4 -  the domain name is $avp(S_location_dom_name_gs), var(S_gw_emergency_prefixes_gs)=$var(S_gw_emergency_prefixes_gs) \n");
            }

            $var(S_sys_count_gi)  = $var(S_sys_count_gi)  + 1;

        }

        if ($var(S_found_gb) == 0)
        {
            $(avp(S_gw_emergency_prefixes_gs)[*]) =  $null;

            xlog("L_INFO", "CI=$ci - R4 - could not identify core_realm_profile in remote_subscriber using avp(S_sig_nw_id_gs)=$avp(S_sig_nw_id_gs) \n");
            xlog("L_INFO", "CI=$ci - R4 - Dipping sub_associated_network using avp(S_access_realm_profile_gs)=$avp(S_access_realm_profile_gs), avp(S_core_realm_profile_gs)=$avp(S_core_realm_profile_gs)\n");

            ### For now only one entry in the table, later this could be done based on the Access to Core configuration in Remote sub section from GUI
            if(osb_memdb_nl_select("sub_associated_network,*|*|$avp(S_access_realm_profile_gs)|*|*|*,","|||$avp(S_core_realm_profile_gs)||") != 1)
            {
                xlog("L_ERR", "CI=$ci - R4 - could not identify core_realm_profile in Sub_associated_network using avp(S_access_realm_profile_gs)=$avp(S_access_realm_profile_gs) \n");
                return;
            }
        }


        ##### NOW GET THE ACCESS MEDIA INFORMATION

        # if(osb_memdb_nl_select("realm_profile,*|$avp(S_access_realm_profile_gs)|*|*|*,1","|||$avp(S_sig_nw_id_gs)|$avp(S_media_nw_id_gs)") != 1)
        ### dip to find the interface
        $var(S_network_type_gi) = 1;  #1="access" and 0= "core"
        $var(S_signalling_gi) = 1;
        $var(S_media_gi) = 1;
        xlog("L_INFO", "CI=$ci - R4 - Using $avp(S_media_nw_id_gs) from remote_subscriber table\n");

        #--- Check media network ID access side
        if (osb_memdb_nl_select("network_id,*|$var(S_media_nw_id_gs)|$var(S_network_type_gi)|*|*|$var(S_media_gi)|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1",
                "|||$avp(S_network_interface_src_gs)|||$avp(C_wan_media_ip_gs)||||||||||$avp(C_media_fw_ext_ip_gs)|$avp(S_media_wan_on_sdp_gs)||") != 1)
        {
           xlog("L_ERR", "CI=$ci - R4 - RS: could not identify media network_id using avp(S_media_nw_id_gs)=$avp(S_media_nw_id_gs) and var(S_network_type_gi)=$var(S_network_type_gi) \n");
           append_to_reply("Warning: 399 $var(C_si_var_gs) - R4 - could not identify src network_id for RS using avp(S_media_nw_id_gs)=$var(S_media_nw_id_gs)\r\n");
           sl_send_reply("403", "Forbidden");

           t_release();

           if (is_gflag("6"))
           {
               xlog("L_INFO", "bench: $rm-$rs\n");
               bm_log_timer("route-4");
           }
           exit;
        }
        $var(S_network_interface_media_src_gi) = $avp(S_network_interface_src_gs);
        $var(S_network_media_ip_src_gs) = $avp(C_wan_media_ip_gs);
        $var(S_media_fw_ext_ip_src_gs) = $avp(C_media_fw_ext_ip_gs);
        $var(S_media_wan_on_sdp_src_gs) = $avp(S_media_wan_on_sdp_gs);
        xlog("L_INFO", "CI=$ci - R4 - found avp(S_network_interface_src_gs)=$avp(S_network_interface_src_gs),avp(S_media_nw_id_gs)=$avp(S_media_nw_id_gs),avp(C_wan_media_ip_gs)=$avp(C_wan_media_ip_gs)\n");


        ##### NOW GET THE CORE SIGNALING AND MEDIA INFORMATION

        ### now dip into realm profile to get the network_id (needed to get the core IP from network_id)
        # var(S_profile_type_gi) = 0;  #1="signalling" and 0= "media"
        ## actually we need 2 dips to find signalling and media
        xlog("L_INFO", "CI=$ci - R4 - Dipping realm_profile for signaling and media using avp(S_core_realm_profile_gs)=$avp(S_core_realm_profile_gs) \n");
        if(osb_memdb_nl_select("realm_profile,*|$avp(S_core_realm_profile_gs)|*|*|*|*,1","|||$avp(S_sig_nw_id_gs)|$avp(S_media_nw_id_gs)|") != 1)
        {
            xlog("L_ERR", "CI=$ci - R4 - could not identify core profile using avp(S_core_realm_profile_gs)=$avp(S_core_realm_profile_gs) \n");
            append_to_reply("Warning: 399 $var(C_si_var_gs) - R4 - could not identify core profile using avp(S_core_realm_profile_gs)=$avp(S_core_realm_profile_gs)\r\n");
            sl_send_reply("403", "Forbidden");

            t_release();

            if (is_gflag("6"))
            {
                xlog("L_INFO", "bench: $rm-$rs\n");
                bm_log_timer("route-4");
            }
            exit;
        }
        xlog("L_INFO", "CI=$ci - R4 - Dipping network_id for core IP, for signalling using avp(S_sig_nw_id_gs)=$avp(S_sig_nw_id_gs),avp(S_media_nw_id_gs)=$avp(S_media_nw_id_gs) from above dip\n");
        $var(S_network_type_gi) = 0;#1="access" and 0= "core"
        #--- Check signaling network ID core side
        if (osb_memdb_nl_select("network_id,*|$avp(S_sig_nw_id_gs)|$var(S_network_type_gi)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1",
                "|||$avp(S_network_interface_dst_sig_gi)|||$avp(C_core_ip_gs)|$avp(C_core_port_tcp_gs)|$avp(C_core_port_tls_gs)|$avp(C_core_port_udp_gs)||||||||||") != 1)
        {
            xlog("L_ERR", "CI=$ci - R4 - could not identify core network_id using avp(S_sig_nw_id_gs)=$avp(S_sig_nw_id_gs) and var(S_network_type_gi)=$var(S_network_type_gi) \n");
            append_to_reply("Warning: 399 $var(C_si_var_gs) - R4 - could not identify core network_id using avp(S_sig_nw_id_gs)=$avp(S_sig_nw_id_gs)\r\n");
            sl_send_reply("403", "Forbidden");

            t_release();

            if (is_gflag("6"))
            {
                xlog("L_INFO", "bench: $rm-$rs\n");
                bm_log_timer("route-4");
            }
            exit;
        }
        $var(S_network_interface_dst_sig_gi) = $avp(S_network_interface_dst_sig_gi);
        xlog("L_INFO", "CI=$ci - R4 - Dipping network_id for core IP for media using avp(S_sig_nw_id_gs)=$avp(S_sig_nw_id_gs) from above dip\n");
        $var(S_network_type_gi) = 0;#1="access" and 0= "core"
        #--- Check media network ID core side
        if (osb_memdb_nl_select("network_id,*|$avp(S_media_nw_id_gs)|$var(S_network_type_gi)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1",
                "|||$avp(S_network_interface_dst_gs)|||$avp(C_core_media_ip_gs)|||||||||||||") != 1)
        {
            xlog("L_ERR", "CI=$ci - R4 - could not identify media network_id using avp(S_media_nw_id_gs)=$avp(S_media_nw_id_gs) and var(S_network_type_gi)=$var(S_network_type_gi) \n");
            append_to_reply("Warning: 399 $var(C_si_var_gs) - R4 - could not identify media network_id using avp(S_media_nw_id_gs)=$avp(S_media_nw_id_gs)\r\n");
            sl_send_reply("403", "Forbidden");

            t_release();

            if (is_gflag("6"))
            {
                xlog("L_INFO", "bench: $rm-$rs\n");
                bm_log_timer("route-4");
            }
            exit;
        }

        xlog("L_INFO", "CI=$ci - R4 - retrieved C_core_media_ip_gs=$avp(C_core_media_ip_gs)  avp(S_network_interface_dst_gs)=$avp(S_network_interface_dst_gs)\n");
    }


    route(FIND_OSV_BINDING_ROUTE); # Get OSV Binding

    put_ip_in_paran('$avp(C_wan_ip_gs)', '$avp(C_wan_ip_gs)');

    #now, using X-Siemens-Location need also to setup parameter for emergency table
    if (is_method("REGISTER|INVITE"))
    {
       if(!is_present_hf("X-Siemens-Location"))
       {
          if (isflagset(11))
              $var(S_locationDomainName_gs) = $avp(S_location_dom_name_gs);
          else if($var(S_ep1_rm_address_type_gi) == 2)
              $var(S_locationDomainName_gs) = $avp(S_location_dom_name_gs);
          else if(($avp(S_gw_rm_fqdn_gs) != $null && $avp(S_gw_rm_fqdn_gs) != ""))
              $var(S_locationDomainName_gs) = $avp(S_gw_rm_fqdn_gs);
          else if(($avp(S_gw_rm_ip_gs) != $null && $avp(S_gw_rm_ip_gs) != ""))
             $var(S_locationDomainName_gs) = $avp(S_location_dom_name_gs);

          if($var(S_locationDomainName_gs) != "")
              $var(S_dom_x_siemens_location_gs) = $var(S_locationDomainName_gs);
          else if (isflagset(11))
          {
              $var(S_isFqdn_ls) = $sel(via[-1].host);
              if(PROC_IS_PURE_IP)
                  $var(S_dom_x_siemens_location_gs) = "IP=" + $sel(via[-1].host);
              else
                  $var(S_dom_x_siemens_location_gs) = $sel(via[-1].host);
          }
          xlog("L_INFO", "CI=$ci - R4  - X-Siemens-Location $var(S_locationDomainName_gs) added\n");
       }
    }

    if(!($avp(C_port_gi) != $null && $avp(C_port_gi) != "")) # Direct SUB or Remote EP not found
    {
        # OSV mobile client first sends the NOTIFY to get the DN back from the OSV then
        # sends the REGISTER. Allow this NOTIFY to go to the OSV.
        if (is_method("NOTIFY") && is_present_hf("Event") && ($hdr(Event) =~".*x-siemens-mobile.*"))
        {
            xlog("L_INFO", "CI=$ci - R4 - NOTIFY with x-siemens-mobile from CT=$ct\n");
            setflag(11); # Force flag 11, treat as direct SUB

            $avp(C_port_gi) = $avp(C_core_port_gi);
        }
    }

  if(isflagset(11))
  {
      ### now set the AVP for core port  depending on the OSV transport  ######
      if ($(avp(C_sys_current_binding_transp_gs){s.tolower}) == "tcp")
          $avp(C_core_port_gi) = $avp(C_core_port_tcp_gs);
      else if ($(avp(C_sys_current_binding_transp_gs){s.tolower}) == "tls")
          $avp(C_core_port_gi) = $avp(C_core_port_tls_gs);
      else
          $avp(C_core_port_gi) = $avp(C_core_port_udp_gs);

      ### now set the AVP for reply depending on the transport  ######
      if($proto =="tcp")
          $avp(C_wan_port_gs) = $avp(C_wan_port_tcp_gs);
      else if($proto =="tls")
      {
          ## Check if MTLS
          if ($avp(C_port_mtls_gs) != "" && $avp(C_port_mtls_gs) != $null && ($rp == $avp(C_port_mtls_gs) || $Rp == $avp(C_port_mtls_gs)))
              $avp(C_wan_port_gs) = $avp(C_port_mtls_gs);
          else
              $avp(C_wan_port_gs) = $avp(C_wan_port_tls_gs);
      }
      else
          $avp(C_wan_port_gs) = $avp(C_wan_port_udp_gs);

  }
  else
  {
      $avp(C_core_port_gi) = $avp(C_gw_core_port_gi);   ### end point found

      ### now set the AVP for reply  depending on the transport  ######
      if($proto =="tcp")
          $avp(C_wan_port_gs) = $avp(C_wan_port_tcp_gs);
      else if($proto =="tls")
      {
          ## Check if MTLS
          if (not_empty("$avp(C_port_mtls_gs)") && ($avp(C_port_mtls_gs) == $Rp || $avp(C_port_mtls_gs) == $rp))
              $avp(C_wan_port_gs) = $avp(C_port_mtls_gs);
          else
              $avp(C_wan_port_gs) = $avp(C_wan_port_tls_gs);
      }
      else
          $avp(C_wan_port_gs) = $avp(C_wan_port_udp_gs);
  }

  $avp(C_advertised_port_gi) = $avp(C_wan_port_gs);

  ## Forward Vlan
  if(not_empty("$avp(C_fwd_ep_ip_gs)") && ($avp(S_fwd_ep_used_gb) == 1))
  {
      if($proto =="tcp")
      {
          if ($avp(C_fwd_ep_port_tcp_gs) != 0)
              $avp(C_advertised_port_gi) = $avp(C_fwd_ep_port_tcp_gs);
      }
      else if($proto =="tls")
      {
          if ($avp(C_fwd_ep_port_mtls_gs) != 0 && ($avp(C_port_mtls_gs) == $Rp || $avp(C_fwd_ep_port_mtls_gs) == $rp))
              $avp(C_advertised_port_gi) = $avp(C_fwd_ep_port_mtls_gs);
          else if ($avp(C_fwd_ep_port_tls_gs) != 0)
              $avp(C_advertised_port_gi) = $avp(C_fwd_ep_port_tls_gs);
      }
      else
      {
          if ($avp(C_fwd_ep_port_udp_gs) != 0)
              $avp(C_advertised_port_gi) = $avp(C_fwd_ep_port_udp_gs);
      }
  }

  xlog("L_INFO", "CI=$ci - R4  - AVPs are set: Transport=$proto, rp=$rp, Rp=$Rp, avp(C_core_port_gi)=$avp(C_core_port_gi), avp(C_wan_port_gs)=$avp(C_wan_port_gs), avp(C_advertised_port_gi)=$avp(C_advertised_port_gi)\n");

    xlog("L_INFO", "CI=$ci - R4  - avp(S_gw_emergency_prefixes_gs)=$avp(S_gw_emergency_prefixes_gs), $rU, avp(C_wan_ip_gs)=$avp(C_wan_ip_gs)\n");
    if(is_method("INVITE"))
    {
       #check if this is emergency call
       # first split the $avp(S_gw_emergency_prefixes_gs) into multiple variables
       # then compare $rU with each variable
       $var(S_e911_pref_index_li) = 0;
       $var(S_found_gb) =0;
       while ($var(S_found_gb) == 0 && $(avp(S_gw_emergency_prefixes_gs){s.select,$var(S_e911_pref_index_li),-}) !='')
       {
           if($rU == $(avp(S_gw_emergency_prefixes_gs){s.select,$var(S_e911_pref_index_li),-}))
           {
               xlog("L_INFO", "CI=$ci - R4  - this is emergency call: $rU  $(avp(C_tmp2_gs){s.select,0,:})\n");
               setflag(16);
               $var(S_found_gb) = 1;
           }
           else
               $var(S_e911_pref_index_li) = $var(S_e911_pref_index_li)+1;
       }
    }

    if(isflagset(5) || $avp(C_gw_behind_ep_gi) !=0)
       setflag(28);

    ### this used to be done in FIND_OSV_BINDING_ROUTE moved from there
    if(not_empty("$avp(C_fw_ext_ip_gs)"))
        $avp(C_advertised_ip_gs) = $avp(C_fw_ext_ip_gs);
    else if(not_empty("$avp(S_lb_ext_ip_gs)"))
        $avp(C_advertised_ip_gs) = $avp(S_lb_ext_ip_gs);
    else if(not_empty("$avp(C_fwd_ep_ip_gs)"))
    {
        $avp(C_advertised_ip_gs) = $avp(C_fwd_ep_ip_gs);
        $avp(S_fwd_ep_used_gb) = 1;
    }
    else
        $avp(C_advertised_ip_gs) = $avp(C_wan_ip_gs);


    #prepare the variable for SSM
    $var(C_ep1_transp_gs) = $avp(C_gw_transp_gs);
    $var(C_ep1_bitmap_gi) = $avp(S_rep_bitmap_gi);

    xlog("L_INFO", "CI=$ci - R4 -avp(C_pmap_port_gi)=$avp(C_pmap_port_gi) is going to be overwritten by avp(C_port_gi)=$avp(C_port_gi)\n");

    $avp(C_pmap_port_gi)=$avp(C_port_gi);
    xlog("L_INFO", "CI=$ci - R4  - avp(S_exp_as_gi)=$avp(S_exp_as_gi),avp(S_gw_core_fqdn_gs)=$avp(S_gw_core_fqdn_gs), avp(C_core_ip_gs)=$avp(C_core_ip_gs), avp(C_wan_ip_gs)=$avp(C_wan_ip_gs),avp(C_port_gi)=$avp(C_port_gi),$avp(C_gw_transp_gs),avp(S_gw_emergency_prefixes_gs)=$avp(S_gw_emergency_prefixes_gs)\n");
    xlog("L_INFO", "CI=$ci - R4  - rm_ip=$avp(S_gw_rm_ip_gs),rm_port=$avp(S_gw_rm_port_gi),gw_type=$avp(C_gw_type_gi),avp(C_gw_core_port_gi)=$avp(C_gw_core_port_gi),core_ip=$avp(C_gw_core_ip_gs),avp(C_gw_type_gi)=$avp(C_gw_type_gi),rep_home_dn=$avp(S_rep_home_dn_gs),ses_id=$avp(S_ses_id_gi) ru=$ru\n");

    if (is_gflag("6"))
    {
        xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
        bm_log_timer("route-4");
    }
}

########################################################################
# route PROCESS_WAN_TO_LAN_FIRST_EP_FOUND: Route for dipping - WAN to LAN after first EP is found
########################################################################
route[PROCESS_WAN_TO_LAN_FIRST_EP_FOUND]
{

    if (is_gflag("6"))
       bm_start_timer("route-42");

    xlog("L_INFO", "CI=$ci - R42 - Processing First EP information.\n");

    #need to deep into profile
    if($avp(C_gw_type_gi)==1 || $avp(C_gw_type_gi)==9 || $avp(C_gw_type_gi)==5 || $avp(C_gw_type_gi)==8)
    {
        if ($var(S_standalone_server_gi) && $avp(S_linked_ep_id_gi) != $null && $avp(S_linked_ep_id_gi) != '')
        {
            if(is_method("REGISTER|OPTIONS"))
            {
                xlog("L_INFO", "CI=$ci - R42 - Send local $rm response to endpoint. var(S_wan_natted_gb)=$var(S_wan_natted_gb)\n");
                if(is_method("REGISTER"))
                {
                    if ($hdr(Contact) =~ "(.*)[Ee]xpires=(.*)")
                    {
                        $var(S_expire_gi)=$sel(contact.expires);
                        append_to_reply("Contact: $ct\r\n");
                    }
                    else
                    {
                        if (is_present_hf("Expires"))
                           $var(S_expire_gi)=$(hdr(Expires){s.int});
                        else
                           $var(S_expire_gi)=3600;

                        append_to_reply("Contact: $ct;expires=$var(S_expire_gi)\r\n");
                    }
                }

                if(is_present_hf("Via") && ($var(S_wan_natted_gb) || $sel(v[1].port) != $sp))
                    force_rport(); # Assure that responses will be sent to source IP and port instead of VIA address for NAT or FWD VLAN
                sl_send_reply("200","OK");
                t_release();

                if (is_gflag("6"))
                {
                    xlog("L_INFO", "bench: $rm-$rs\n");
                    bm_log_timer("route-4");
                }
                exit;
            }
        }

        if($avp(C_gw_type_gi)==5) {
            $var(C_ssp_gw_profile_gs) = $avp(C_ssp_gw_profile_gs);
            route(SSP_PROFILE_DB_ROUTE);
        }
    }
    else if($avp(C_gw_type_gi)==6)
    {
       $var(S_ep1_gtc_name_gs) = $avp(S_ep_name_gs);
       xlog("L_INFO", "CI=$ci - R42 - GTC trunk, using var(S_ep1_gtc_name_gs)=$var(S_ep1_gtc_name_gs) for signalling to ssm\n");
    }
    else if($avp(C_gw_type_gi)==4 || $avp(C_gw_type_gi)==3)  # Proxy or branch SBC
    {
        if ($var(S_standalone_server_gi) && is_method("OPTIONS"))
        {
            sl_send_reply("200","OK");
            t_release();

            if (is_gflag("6"))
            {
                xlog("L_INFO", "bench: $rm-$rs\n");
                bm_log_timer("route-4");
            }
            exit;
        }
    }
    ## although $avp(S_core_realm_profile_gs) is read above, but it is not really used since core IP and port are already part of
    ## REP table and are read there.

    ### dip into realm_profile table to read the signalling_nw_id using type = media
    # media is the same column but last row
    # var(S_profile_type_gi) = 0;  #1="signalling" and 0= "media"
    xlog("L_INFO", "CI=$ci - R42.1 - Dipping realm_profile for media using avp(S_media_nw_id_gs)=$var(S_media_nw_id_gs)\n");

    ### dip into network_id table to read the media using the S_media_nw_id_gs
    $var(S_network_type_gi) = 1;  #1="access" and 0= "core"
    $var(S_signalling_gi) = 0;
    $var(S_media_gi) = 1;
    $(avp(S_msrp_port_gs)[*]) = $null;
    xlog("L_INFO", "CI=$ci - R42.1 - Dipping network_id *|$var(S_media_nw_id_gs)|$var(S_network_type_gi)|*|*|$var(S_media_gi)|*|*|*|*|*|*|*|*|*, var(S_split_sig_media_gi)=$var(S_split_sig_media_gi)\n");
    #--- Check media network ID access side
    if (osb_memdb_nl_select("network_id,*|$var(S_media_nw_id_gs)|$var(S_network_type_gi)|*|*|$var(S_media_gi)|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1",
                            "|||$avp(S_network_interface_src_gs)|||$avp(C_wan_media_ip_gs)||||||||||$avp(C_media_fw_ext_ip_gs)|$avp(S_media_wan_on_sdp_gs)|$avp(S_msrp_port_gs)|") != 1)
    {
       xlog("L_ERR", "CI=$ci - R42.1 - could not identify src netwrok_id using avp(S_media_nw_id_gs)=$var(S_media_nw_id_gs) and var(S_network_type_gi)=$var(S_network_type_gi) \n");
       append_to_reply("Warning: 399 $var(C_si_var_gs) - R42.1 - could not identify src netwrok_id using avp(S_media_nw_id_gs)=$var(S_media_nw_id_gs)\r\n");
       sl_send_reply("403", "Forbidden");

       t_release();

       if (is_gflag("6"))
       {
           xlog("L_INFO", "bench: $rm-$rs\n");
           bm_log_timer("route-4");
       }
       exit;
    }

    $var(S_network_interface_media_src_gi) = $avp(S_network_interface_src_gs);
    $var(S_network_media_ip_src_gs) = $avp(C_wan_media_ip_gs);
    $var(S_media_fw_ext_ip_src_gs) = $avp(C_media_fw_ext_ip_gs);
    $var(S_media_wan_on_sdp_src_gs) = $avp(S_media_wan_on_sdp_gs);

    xlog("L_INFO", "CI=$ci - R42 - read avp(S_media_nw_id_gs)=$var(S_media_nw_id_gs) avp(S_network_interface_src_gs)=$avp(S_network_interface_src_gs), and var(S_network_type_gi)=$var(S_network_type_gi), avp(C_wan_media_ip_gs)=$avp(C_wan_media_ip_gs),avp(C_wan_media_port_gs)=$avp(C_wan_media_port_gs),var(S_profile_type_gi)=$var(S_profile_type_gi), avp(S_profile_name_gs)=$var(S_profile_name_gs), avp(S_msrp_port_gs)=$avp(S_msrp_port_gs) \n");
    ## now we need to set the dst media
    ### dip into realm_profile table to read the signalling_nw_id using type = media for core
    # media is the same column but last row
    # var(S_profile_type_gi) = 0;  #1="signalling" and 0= "media"
    xlog("L_INFO", "CI=$ci - R42.1 - Dipping realm_profile for media using avp(S_core_realm_profile_gs)=$avp(S_core_realm_profile_gs) we now have avp(S_media_nw_id_gs)=$var(S_media_nw_id_gs)\n");
    ###store previous value for $avp(S_sig_nw_id_gs)
    $var(S_stored_sig_nw_id_ls) = $avp(S_sig_nw_id_gs);
    if(osb_memdb_nl_select("realm_profile,*|$avp(S_core_realm_profile_gs)|*|*|*|*,1","|||$avp(S_sig_nw_id_gs)|$avp(C_tmp2_gs)|") != 1)
    {
       xlog("L_ERR", "CI=$ci - R42.1 - could not identify avp(S_core_realm_profile_gs)=$avp(S_core_realm_profile_gs) in realm_profile \n");
       append_to_reply("Warning: 399 $var(C_si_var_gs) - R42.1 - could not identify core profile using avp(S_core_realm_profile_gs)=$avp(S_core_realm_profile_gs)\r\n");
       sl_send_reply("403", "Forbidden");

       t_release();

       if (is_gflag("6"))
       {
           xlog("L_INFO", "bench: $rm-$rs\n");
           bm_log_timer("route-4");
       }
       exit;
    }
    $var(S_sign_network_id_gi) = $avp(S_sig_nw_id_gs);
    ### restore previous S_sig_nw_id_gs
    $avp(S_sig_nw_id_gs) = $var(S_stored_sig_nw_id_ls);

    ### dip into network_id table to read the wanip using the signalling_nw_id
    $var(S_network_type_gi) = 1;  #1="access" and 0= "core"
    $var(S_signalling_gi)   = 0;
    $var(S_media_gi)        = 1;
    xlog("L_INFO", "CI=$ci - R42.2 - Dipping network_id var(S_network_type_gi)=$var(S_network_type_gi),var(S_signalling_gi)=$var(S_signalling_gi), var(S_media_gi)=$var(S_media_gi) S_network_interface_dst_gs=$avp(S_network_interface_dst_gs) ip_addr= $Ri, port=$Rp\n");
    #--- Check media network ID core side
    if (osb_memdb_nl_select("network_id,*|$avp(C_tmp2_gs)|*|*|*|$var(S_media_gi)|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1",
                            "|||$avp(S_network_interface_dst_gs)|||$avp(C_core_media_ip_gs)|$avp(C_core_media_port_gs)||||||||||||") != 1)
    {
       xlog("L_ERR", "CI=$ci - R42.2 - could not identify core netwrok_id using avp(S_media_nw_id_gs)=$avp(C_tmp2_gs) and var(S_network_type_gi)=$var(S_network_type_gi) \n");
       append_to_reply("Warning: 399 $var(C_si_var_gs) - R42.2 - could not identify core netwrok_id using avp(S_media_nw_id_gs)=$avp(C_tmp2_gs)\r\n");
       sl_send_reply("403", "Forbidden");

       t_release();

       if (is_gflag("6"))
       {
           xlog("L_INFO", "bench: $rm-$rs\n");
           bm_log_timer("route-4");
       }
       exit;
    }
    ################################ FRN7404 ##############################
    #          reading source signaling for SSM                           #
    #---------------------------------------------------------------------#
    $var(S_signalling_gi) = 1;
    $var(S_media_gi)      = 0;
    xlog("L_INFO", "CI=$ci - R42.3 - Dipping network_id *|$var(S_sign_network_id_gi)|*|*|$var(S_signalling_gi)|*|*|*|*|*|*|*|*|*|*\n");
    #--- Check signaling network ID core side
    if (osb_memdb_nl_select("network_id,*|$var(S_sign_network_id_gi)|*|*|$var(S_signalling_gi)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1",
                            "|||$avp(S_network_interface_dst_sig_gi)||||||||||||||||") != 1)
    {
        xlog("L_ERR", "CI=$ci - R42.3 - could not identify core netwrok_id using var(S_sign_network_id_gi)=$var(S_sign_network_id_gi) \n");
        append_to_reply("Warning: 399 $var(C_si_var_gs) - R42.3 - could not identify core netwrok_id using var(S_sign_network_id_gi)=$var(S_sign_network_id_gi)\r\n");
        sl_send_reply("403", "Forbidden");

        t_release();

        if (is_gflag("6"))
        {
            xlog("L_INFO", "bench: $rm-$rs\n");
            bm_log_timer("route-4");
        }
        exit;
    }
    $var(S_network_interface_dst_sig_gi) = $avp(S_network_interface_dst_sig_gi);

    xlog("L_INFO", "CI=$ci - R42 - read avp(S_media_nw_id_gs)=$avp(C_tmp2_gs) avp(S_network_interface_dst_sig_gi)=$avp(S_network_interface_dst_sig_gi), and , avp(C_core_media_ip_gs)=$avp(C_core_media_ip_gs),avp(C_core_media_port_gs)=$avp(C_core_media_port_gs),var(S_profile_type_gi)=$var(S_profile_type_gi), avp(S_profile_name_gs)=$var(S_profile_name_gs), avp(S_msrp_port_gs)=$avp(S_msrp_port_gs) \n");


    $var(S_first_ep_found_gi)           = 1;
    $avp(S_gw_id_gi)                    = $avp(S_ses_id_gi);
    $avp(C_core_ip_gs)                  = $avp(S_tmp_gs);
    $avp(C_gw_core_ip_gs)               = $avp(S_tmp_gs);


    #prepare the variables for SSM
    $var(S_ep1_id_gi)                   = $avp(S_ses_id_gi);
    $var(C_ep1_rm_fqdn_gs)              = $avp(S_gw_rm_fqdn_gs);
    $var(C_ep1_rm_port_gi)              = $avp(S_gw_rm_port_gi);
    $var(C_ep1_nat_port_gs)             = $avp(C_pmap_port_gi);
    $var(C_ep1_type_gi)                 = $avp(C_gw_type_gi);
    $var(S_ep1_rep_home_dn_gs)          = $avp(S_rep_home_dn_gs);
    $var(C_ep1_core_port_gi)            = $avp(C_gw_core_port_gi);
    $var(C_ep1_rm_ip_gs)                = $avp(S_gw_rm_ip_gs);
    $var(C_ep1_core_ip_gs)              = $avp(C_gw_core_ip_gs);
    $var(C_ep1_core_fqdn_gs)            = $avp(S_gw_core_fqdn_gs);
    $var(C_ep1_transp_gs)               = $avp(C_gw_transp_gs);
    $var(C_ep1_bitmap_gi)               = $avp(S_rep_bitmap_gi);
    $var(S_ep1_rm_address_type_gi)      = $avp(C_rm_address_type_gi);
    $var(S_ep1_profile_gs)              = $avp(C_ssp_gw_profile_gs);
    $var(S_network_interface_dst_gs)    = $avp(S_network_interface_dst_gs);
    $var(S_ep1_logical_id_gs)           = $avp(S_rm_logical_id_gs);
    $var(S_ep1_access_realm_profile_gs) = $avp(S_access_realm_profile_gs);
    $var(S_ep1_core_realm_profile_gs)   = $avp(S_core_realm_profile_gs);

    if($avp(S_rm_media_ip_gs) != $null && $avp(S_rm_media_ip_gs) != '')
        $var(S_ep1_rm_media_ip_gs)      = $avp(S_rm_media_ip_gs);
    else
        $var(S_ep1_rm_media_ip_gs)      = $avp(S_gw_rm_ip_gs);
    $var(S_ep1_media_subnet_mask_gs)    = $avp(S_rm_media_subnet_mask_gs);

    if(($avp(S_nat_ip_gs) != $null && $avp(S_nat_ip_gs) != ""))
        $var(S_ep1_nat_ip_gs)           = $avp(S_nat_ip_gs);
    else
        $var(S_ep1_nat_ip_gs)           = "";

    $var(S_disable_transport_check_lb) = 0;

    xlog("L_INFO", "CI=$ci - R42  - this is the access avp(S_wan_interface_gs)=$avp(S_wan_interface_gs),avp(C_wan_ip_gs)=$avp(C_wan_ip_gs)\n");
    if (!$var(S_disable_transport_check_lb) && $avp(C_req_transp_gs) != $avp(C_gw_transp_gs))
    {
        xlog("L_INFO", "CI=$ci - R42  - wrong transport,Rejecting  rm_transport=$avp(C_gw_transp_gs),avp(C_req_transp_gs)=$avp(C_req_transp_gs)\n");
        append_to_reply("Warning: 399 $var(C_si_var_gs) - R42 - Invalid Transport $avp(C_req_transp_gs). Accepted transport is $avp(C_gw_transp_gs).\r\n");
        sl_send_reply("403", "Forbidden");

        t_release();

        if (is_gflag("6"))
        {
            xlog("L_INFO", "bench: $rm-$rs\n");
            bm_log_timer("route-4");
        }
        exit;
    }

    $var(S_sys_count_gi) = 0;
    $var(S_match_found_lb) = 0;

    xlog("L_INFO", "CI=$ci - R42 - matching gw_rm_ip=$avp(S_gw_rm_ip_gs), list = $(avp(S_gw_rm_ip_gs)[*]) with source ip=$var(C_si_var_gs)\n");

    #### NOTE, for FQDN case, the first entry has empty ip which needs to be ignored.

    if ( $var(S_x_call_type_alpha_uri_gs) != '')
        $var(S_match_found_lb) = 1;        # avoid find NAT where no ip or fqdn matching source IP was found

    while ($var(S_match_found_lb) == 0 && $(avp(S_ses_id_gi)[$var(S_sys_count_gi)]) != $null )
    {
        if(compare_ips('$(avp(S_gw_rm_ip_gs)[$var(S_sys_count_gi)])', '$var(C_si_var_gs)'))
            $var(S_match_found_lb) = 1;

        #Check also HomeDN if needed


        $var(S_sys_count_gi) = $var(S_sys_count_gi) + 1;
    }

    $var(S_disable_nat_by_fwd_realm_lb)=0;
    if ($var(S_wan_natted_gb) == 0 && $var(S_fwd_nw_id_gs) != "")
        $var(S_disable_nat_by_fwd_realm_lb)=1;

    # the ip from top most via  with src ip is already extracted in $avp(S_new_src_ip_gs)
    if($var(S_match_found_lb) == 1 || $var(S_disable_nat_by_fwd_realm_lb))
    {
        $var(S_wan_natted_gb) = 0;

        $var(S_ep1_natted_gi) = 0;
        $var(S_rm_update_port_li) = $var(C_ep1_rm_port_gi);
        xlog("L_INFO", "CI=$ci - R42 - after dip, No NAT Detected. Via=$avp(S_new_src_ip_gs), Source IP=$var(C_si_var_gs) disabled_by_fwd_realm=$var(S_disable_nat_by_fwd_realm_lb)\n");
    }
    else
    {
        $var(S_wan_natted_gb) = 1;
        $var(S_ep1_natted_gi) = 1;
        $var(S_rm_update_port_li) = $sp;
        xlog("L_INFO", "CI=$ci - R42 - after dip, NAT Detected. Via=$avp(S_new_src_ip_gs), Source IP=$var(C_si_var_gs)\n");
    }
    xlog("L_INFO", "CI=$ci - R42 - var(C_ep1_nat_port_gs)=$var(C_ep1_nat_port_gs) var(S_rm_update_port_li)=$var(S_rm_update_port_li) var(S_ep1_nat_ip_gs)=$var(S_ep1_nat_ip_gs)\n");

    #need to update the nat_port in REP
    if($var(S_disable_nat_by_fwd_realm_lb)==0 && ($var(C_ep1_nat_port_gs) !=  $var(S_rm_update_port_li) || !compare_ips('$var(S_ep1_nat_ip_gs)', '$var(C_si_var_gs)')))
    {
        xlog("L_INFO", "CI=$ci - R42  - ep is behind NAT,IP in 1st via is id=$avp(S_gw_id_gi), avp(new_src_ip)=$avp(S_new_src_ip_gs),fqdn=$avp(S_gw_rm_fqdn_gs),rm_ip=$avp(S_gw_rm_ip_gs), sp= $sp, avp(pm_port)=$avp(C_pmap_port_gi),si=$var(C_si_var_gs),var(S_wan_interface_gs)=$var(S_wan_interface_gs)\n");

        if ($avp(S_gw_rm_fqdn_gs) != $null &&  $avp(S_gw_rm_fqdn_gs) != "")
            osb_memdb_update("remote_ep,*|*|*|*|*|*|$avp(S_gw_rm_fqdn_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|$var(S_profile_name_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","*|*|*|*|*|*|*|*|*|*|*|*|$var(S_ep1_natted_gi)|*|*|$var(S_rm_update_port_li)|$var(C_si_var_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*");
        else
            osb_memdb_update("remote_ep,$avp(S_gw_id_gi)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|$var(S_profile_name_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","*|*|*|*|*|*|*|*|*|*|*|*|$var(S_ep1_natted_gi)|*|*|$var(S_rm_update_port_li)|$var(C_si_var_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*");

        if (not_empty("$var(S_ep1_logical_id_gs)"))
        {
            #### DO NOT DELETE #####
            xlog("L_CRIT","@NATupdate: LOGICALID=$var(S_ep1_logical_id_gs), OLDIP=$var(C_ep1_rm_ip_gs), NEWIP=$var(C_si_var_gs)\n");

            ## Kamailio restarted, trust list contains logic_id with no rm_ip, remote ep contains rm_ip from the previous resolution but no nat_ip.
            if ($var(C_ep1_transp_gs) == "tls" && !is_method("OPTIONS") && !compare_ips('$var(S_ep1_nat_ip_gs)', '$var(C_si_var_gs)') )
            {
                $var(S_ret_li) = osb_replace_trusted_ip("$var(S_ep1_logical_id_gs)","$var(S_ep1_nat_ip_gs)","$var(C_si_var_gs)");
                xlog("L_INFO", "CI=$ci - R42.1 - osb_replace_trusted_ip return value:$var(S_ret_li), $var(S_ep1_logical_id_gs), $var(S_ep1_nat_ip_gs), $var(C_si_var_gs)\n");
            }
        }
    }

    ## move this to just after remote_subs
    ## route(FIND_OSV_BINDING_ROUTE); # Get OSV Binding
    put_ip_in_paran('$avp(C_wan_ip_gs)', '$avp(C_wan_ip_gs)');

    xlog("L_INFO", "CI=$ci - R42  - 1st ep found., avp(S_gw_core_fqdn_gs)=$avp(S_gw_core_fqdn_gs), avp(C_core_ip_gs)=$avp(C_core_ip_gs), avp(C_wan_ip_gs)=$avp(C_wan_ip_gs),avp(C_gw_core_port_gi)=$avp(C_gw_core_port_gi),avp(C_gw_transp_gs)=$avp(C_gw_transp_gs),avp(S_network_interface_dst_gs)=$avp(S_network_interface_dst_gs),avp(S_sys_osv_node_gs)=$avp(S_sys_osv_node_gs)\n");
    $var(S_1stEp_osv_node_ls) = $avp(S_sys_osv_node_gs);

    if($avp(C_gw_type_gi)==4)
    {
        xlog("L_INFO", "CI=$ci - R42.0  -  First EP is PROXY so set branch flag,avp(C_wan_ip_gs)=$avp(C_wan_ip_gs),SI=$var(C_si_var_gs),avp(C_core_ip_gs)=$avp(C_core_ip_gs) \n");
        setflag(27);
        # GW_TYPE should be 3 or 4 (SBC or Proxy)
        if($var(C_mosip_message_gb))
        {
            # FRN4862 - MoSIP - Verify if message came from MSAdapter, if it is, set MoSIP variable
            xlog("L_INFO", "CI=$ci - R42 - this is a mosip message, No need for second dip\n");
            $var(S_do_second_dip_gb) = 0;
            $var(S_2nd_ep_found_lb) = 1;
        }
    }
    else if($avp(C_gw_type_gi)==3 || $avp(C_gw_type_gi)==8)
    {
        xlog("L_INFO", "CI=$ci - R42.0  -  First EP is SBC so set sbc flag,avp(C_wan_ip_gs)=$avp(C_wan_ip_gs),SI=$var(C_si_var_gs),avp(C_core_ip_gs)=$avp(C_core_ip_gs) \n");
        setflag(8);

        # GW_TYPE should be 3 or 4 (SBC or Proxy)
        if($var(C_mosip_message_gb))
        {
            # FRN4862 - MoSIP - Verify if message came from MSAdapter, if it is, set MoSIP variable
            xlog("L_INFO", "CI=$ci - R42 - this is a mosip message, No need for second dip\n");
            $var(S_do_second_dip_gb) = 0;
            $var(S_2nd_ep_found_lb) = 1;
        }
    }
    else if($avp(C_gw_type_gi)==1 || $avp(C_gw_type_gi)==6 || $avp(C_gw_type_gi)==9)
    {
        xlog("L_INFO", "CI=$ci - R42.0  -  First EP is GW or GTC EPso set gw flag,avp(C_wan_ip_gs)=$avp(C_wan_ip_gs),SI=$var(C_si_var_gs),avp(C_core_ip_gs)=$avp(C_core_ip_gs) \n");
        setflag(5);
    }
    else if($avp(C_gw_type_gi)==5)
    {
        $avp(C_ssp_rip_gs) = $var(C_si_var_gs);
        setflag(2);
        setflag(5);
        if($avp(C_req_transp_gs) == "tls")
            $var(C_ssp_is_tls_gb) = 1;

        #need to deep into profile
        route(SSP_PROFILE_REQUESTS_ROUTE);
        if($avp(C_ssp_use_to_dn_gs)=='y')
            $rU = $tU;
        xlog("L_INFO", "CI=$ci - R42  -  First EP is SSP Trunk,  SI=$var(C_si_var_gs),avp(C_core_ip_gs)=$avp(C_core_ip_gs),rU = $rU,avp(C_ssp_flags_gi)=$avp(C_ssp_flags_gi)\n");
        if(avp_check("$avp(C_ssp_flags_gi)","and/i:2/g") ) # RFC2543 - preserve To and From
        {
            $var(S_rem_uri_info_addr_gs) = $fd;
            $var(S_own_uri_info_addr_gs) = $td;
        }
    }

    $avp(C_port_gi)          = $avp(C_gw_core_port_gi);
    $var(S_ep1_port_gi)      = $avp(C_port_gi);

    $var(C_ep1_core_port_gi) = $avp(C_gw_core_port_gi);

    # used in R25 to build the Record Route.
    $avp(C_core_port_gi)     = $var(C_ep1_core_port_gi);
    $var(S_via_count_gi)     = 0;
    if(is_present_hf("Via"))
    {
        while($(hdr(Via)[$var(S_via_count_gi)]) != $null)
        {
            $var(S_via_count_gi) = $var(S_via_count_gi) + 1;
        }
        xlog("L_INFO", "CI=$ci - R42  - number of VIAs in the request: $var(S_via_count_gi)\n");
    }
    xlog("L_INFO", "CI=$ci - R42  - avp(C_port_gi)=$avp(C_port_gi), var(C_ep1_core_port_gi)=$var(C_ep1_core_port_gi), avp(C_gw_core_port_gi)=$avp(C_gw_core_port_gi)\n");

    if (isflagset(5)) # Direct Gateway or SSP call
        $var(S_do_second_dip_gb) = 0;   # no second dip needed
    else if(is_method("REGISTER") && $ua =~ "OpenScape Branch|OpenBranch")
        $var(S_do_second_dip_gb) = 0;   # no second dip needed
    else if($ua =~ "OpenScape Branch iGW FXS|OpenScape Branch ATA")
        $var(S_do_second_dip_gb) = 0;   # no second dip needed
    else if($var(S_via_count_gi) <= 1)
        $var(S_do_second_dip_gb) = 0;   # no second dip needed

    $var(S_tmp_gw_core_port_li) = $avp(C_gw_core_port_gi);
    $var(S_tmp_gw_core_fqdn_ls) = $avp(C_gw_core_fqdn_gs);
    if(!isflagset(5))
    {
        $var(S_orig_gw_type_li) = $avp(C_gw_type_gi);
        $(avp(C_gw_type_gi)[*]) = $null;

        $avp(S_ep1_id_li) = $var(S_ep1_id_gi);
        if (not_empty("$avp(S_gw_rm_ip_gs)") && not_empty("$avp(S_gw_rm_fqdn_gs)"))
        {
            # Resolved entry - get the base entry
            if (not_empty("$var(S_profile_name_gs)"))
            {
                if(osb_memdb_select("remote_ep,*|*|*|*|*||$avp(S_gw_rm_fqdn_gs)|*|*|*|*|$avp(C_gw_core_port_gi)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|$var(S_profile_name_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1","$avp(S_ep1_id_li)||||||||||||||||||||||||||||||||||||||||||||||") == 1)
                    xlog("L_INFO", "CI=$ci - R42 - Base EP1 entry found avp(S_ep1_id_li)=$avp(S_ep1_id_li) for Access-profile=$var(S_profile_name_gs)\n");
            }
            else
            {
                if(osb_memdb_select("remote_ep,*|*|*|*|*||$avp(S_gw_rm_fqdn_gs)|*|*|*|*|$avp(C_gw_core_port_gi)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1","$avp(S_ep1_id_li)||||||||||||||||||||||||||||||||||||||||||||||") == 1)
                    xlog("L_INFO", "CI=$ci - R42 - Base EP1 entry found avp(S_ep1_id_li)=$avp(S_ep1_id_li)\n");
            }
        }

        if($var(S_do_second_dip_gb) == 1)
        {
            #extract 2nd ip from 2nd via
            $var(S_hdr_via_transp_gs) = $(sel(v[2].transport){s.tolower});

            if ($var(S_hdr_via_transp_gs) == "tls")
                $var(S_rm_via_port_li) = 5061;
            else
                $var(S_rm_via_port_li) = 5060;

            $(avp(C_tmp2_gs)[*]) = $null;
            if ($sel(v[2].port) != $null) # Port is  present
                $var(S_rm_via_port_li) = $sel(v[2].port);
            $avp(S_tmp_gs) = $sel(v[2].host);
            ## store C_gw_core_port_gi

            xlog("L_INFO", "CI=$ci - R42  - Second dip remote_ep with avp(S_tmp_gs)=$avp(S_tmp_gs),transp=$var(S_hdr_via_transp_gs), viaport=$var(S_rm_via_port_li),avp(S_sig_nw_id_gs)=$avp(S_sig_nw_id_gs), var(S_profile_name_gs)=$var(S_profile_name_gs), associated epid=$avp(S_ep1_id_li)\n");

            #now try to get 2nd if from REP using the above
            if(osb_memdb_select("remote_ep,*|*|*|*|*|$avp(S_tmp_gs)|*|$var(S_rm_via_port_li)|$var(S_hdr_via_transp_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|$avp(S_ep1_id_li)|*|*|$var(S_profile_name_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1","||$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)||$avp(S_gw_rm2_fqdn_gs)||$avp(S_rm_transp_gs)|$avp(C_tmp2_gs)|$avp(C_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|||||$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|||$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||||$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||||||$avp(S_linked_ep_id_gi)") != 1)
                if(osb_memdb_select("remote_ep,*|*|*|*|*|*|$avp(S_tmp_gs)|$var(S_rm_via_port_li)|$var(S_hdr_via_transp_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|$avp(S_ep1_id_li)|*|*|$var(S_profile_name_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1","||$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)||$avp(S_gw_rm2_fqdn_gs)||$avp(S_rm_transp_gs)|$avp(C_tmp2_gs)|$avp(C_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|||||$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|||$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||||$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||||||$avp(S_linked_ep_id_gi)") != 1)
                    if(osb_memdb_select("remote_ep,*|*|*|9|*|$avp(S_tmp_gs)|*|*|$var(S_hdr_via_transp_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|$avp(S_ep1_id_li)|*|*|$var(S_profile_name_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1","||$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)||$avp(S_gw_rm2_fqdn_gs)||$avp(S_rm_transp_gs)|$avp(C_tmp2_gs)|$avp(C_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|||||$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|||$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||||$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||||||$avp(S_linked_ep_id_gi)") != 1)
                        if(osb_memdb_select("remote_ep,*|*|*|9|*|*|$avp(S_tmp_gs)|*|$var(S_hdr_via_transp_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|$avp(S_ep1_id_li)|*|*|$var(S_profile_name_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1","||$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)||$avp(S_gw_rm2_fqdn_gs)||$avp(S_rm_transp_gs)|$avp(C_tmp2_gs)|$avp(C_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|||||$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|||$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||||$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||||||$avp(S_linked_ep_id_gi)") != 1)
                            if(isflagset(25) && $ct != $null) # Check also contact as FQDN in the first request
                                osb_memdb_select("remote_ep,*|*|*|*|*|*|$sel(contact.uri.host)|$var(S_rm_via_port_li)|$var(S_hdr_via_transp_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|$avp(S_ep1_id_li)|*|*|$var(S_profile_name_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1","||$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)||$avp(S_gw_rm2_fqdn_gs)||$avp(S_rm_transp_gs)|$avp(C_tmp2_gs)|$avp(C_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|||||$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|||$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||||$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||||||$avp(S_linked_ep_id_gi)");

            if (!not_empty("$avp(C_gw_type_gi)"))
            {
                xlog("L_INFO", "CI=$ci - R42  - Second dip remote_ep failed using associated epid, trying without associated epid.\n");
                if(osb_memdb_select("remote_ep,*|*|*|*|*|$avp(S_tmp_gs)|*|$var(S_rm_via_port_li)|$var(S_hdr_via_transp_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|$var(S_profile_name_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1","||$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)||$avp(S_gw_rm2_fqdn_gs)||$avp(S_rm_transp_gs)|$avp(C_tmp2_gs)|$avp(C_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|||||$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|||$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||||$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||||||$avp(S_linked_ep_id_gi)") != 1)
                    osb_memdb_select("remote_ep,*|*|*|*|*|*|$avp(S_tmp_gs)|$var(S_rm_via_port_li)|$var(S_hdr_via_transp_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|$var(S_profile_name_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1","||$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)||$avp(S_gw_rm2_fqdn_gs)||$avp(S_rm_transp_gs)|$avp(C_tmp2_gs)|$avp(C_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|||||$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|||$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||||$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||||||$avp(S_linked_ep_id_gi)");
            }
        }
        # Check 2nd EP based on SSP outbound proxy with one via header
        if(!not_empty("$avp(C_gw_type_gi)") && $var(S_orig_gw_type_li)==4 && not_empty("$avp(S_ep1_id_li)") && $var(S_via_count_gi) <= 1)
        {
            $var(S_alternative_ep2_domain_ls) = $fd;
            # A proxy server inserts a P-Called-Party-ID header, typically in an INVITE request, en-route to its destination.  The header is populated
            # with the Request-URI received by the proxy in the request.
            if ($(fd{s.tolower}) == "anonymous.invalid" && is_present_hf("P-Called-Party-ID"))
                $var(S_alternative_ep2_domain_ls) = $(hdr(P-Called-Party-ID){nameaddr.nc_uri}{uri.host});

            xlog("L_INFO", "CI=$ci - R42  - Check second dip remote_ep from SSP outbound proxy - avp(S_associated_ep_id_gi)=$avp(S_associated_ep_id_gi) avp(S_ep1_id_li)=$avp(S_ep1_id_li) var(S_profile_name_gs)=$var(S_profile_name_gs) var(S_alternative_ep2_domain_ls)=$var(S_alternative_ep2_domain_ls)\n");
            if(osb_memdb_select("remote_ep,*|*|*|5|*|$sel(contact.uri.host)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|$avp(S_ep1_id_li)|*|*|$var(S_profile_name_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1","||$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm2_ip_gs)|$avp(S_gw_rm2_fqdn_gs)|$avp(S_gw_rm2_port_gs)|$avp(S_rm_transp_gs)|$avp(C_tmp2_gs)|$avp(C_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|||||$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|||$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||||$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||||||$avp(S_linked_ep_id_gi)") != 1)
                if(osb_memdb_select("remote_ep,*|*|*|5|*|*|$sel(contact.uri.host)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|$avp(S_ep1_id_li)|*|*|$var(S_profile_name_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1","||$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm2_ip_gs)|$avp(S_gw_rm2_fqdn_gs)|$avp(S_gw_rm2_port_gs)|$avp(S_rm_transp_gs)|$avp(C_tmp2_gs)|$avp(C_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|||||$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|||$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||||$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||||||$avp(S_linked_ep_id_gi)") != 1)
                    if(osb_memdb_select("remote_ep,*|*|*|5|*|$var(S_alternative_ep2_domain_ls)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|$avp(S_ep1_id_li)|*|*|$var(S_profile_name_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1","||$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm2_ip_gs)|$avp(S_gw_rm2_fqdn_gs)|$avp(S_gw_rm2_port_gs)|$avp(S_rm_transp_gs)|$avp(C_tmp2_gs)|$avp(C_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|||||$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|||$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||||$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||||||$avp(S_linked_ep_id_gi)") != 1)
                        osb_memdb_select("remote_ep,*|*|*|5|*|*|$var(S_alternative_ep2_domain_ls)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|$avp(S_ep1_id_li)|*|*|$var(S_profile_name_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1","||$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm2_ip_gs)|$avp(S_gw_rm2_fqdn_gs)|$avp(S_gw_rm2_port_gs)|$avp(S_rm_transp_gs)|$avp(C_tmp2_gs)|$avp(C_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|||||$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|||$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||||$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||||||$avp(S_linked_ep_id_gi)");

            if(!not_empty("$avp(C_gw_type_gi)") && has_totag()) # After established dialog check also To domain
            {
                xlog("L_INFO", "CI=$ci - R42  - Second dip remote_ep from SSP outbound proxy failed using Contact and From. Try To domain: $td\n");
                if(osb_memdb_select("remote_ep,*|*|*|5|*|$td|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|$avp(S_ep1_id_li)|*|*|$var(S_profile_name_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1","||$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm2_ip_gs)|$avp(S_gw_rm2_fqdn_gs)|$avp(S_gw_rm2_port_gs)|$avp(S_rm_transp_gs)|$avp(C_tmp2_gs)|$avp(C_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|||||$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|||$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||||$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||||||$avp(S_linked_ep_id_gi)") != 1)
                    osb_memdb_select("remote_ep,*|*|*|5|*|*|$td|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|$avp(S_ep1_id_li)|*|*|$var(S_profile_name_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1","||$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm2_ip_gs)|$avp(S_gw_rm2_fqdn_gs)|$avp(S_gw_rm2_port_gs)|$avp(S_rm_transp_gs)|$avp(C_tmp2_gs)|$avp(C_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|||||$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|||$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||||$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||||||$avp(S_linked_ep_id_gi)");
            }
            if(!not_empty("$avp(C_gw_type_gi)") && $avp(C_gw_core_port_gi) == 0) # EP1 is outbound proxy, check REP behind outbound proxy.
            {
                if(not_empty("$var(C_ep1_rm_fqdn_gs)"))
                {
                    xlog("L_INFO", "CI=$ci - R42 - Second dip remote_ep from SSP outbound proxy failed check configured outbound_proxy_fqdn/outbound_proxy_ip $var(S_gw_rm_fqdn_gs)\n");
                    if (osb_memdb_select("remote_ep,*|*|*|5|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|$avp(S_ep1_id_li)|*|*|$var(S_profile_name_gs)|*|*|*|*|*|*|*|$var(C_ep1_rm_fqdn_gs)|*|*|*|*|*|*|*|*|*,1","||$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm2_ip_gs)|$avp(S_gw_rm2_fqdn_gs)|$avp(S_gw_rm2_port_gs)|$avp(S_rm_transp_gs)|$avp(C_tmp2_gs)|$avp(C_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|||||$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|||$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||||$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||||||$avp(S_linked_ep_id_gi)") != 1)
                        osb_memdb_select("remote_ep,*|*|*|5|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|$avp(S_ep1_id_li)|*|*|$var(S_profile_name_gs)|*|*|*|*|*|*|*|*|$var(C_ep1_rm_fqdn_gs)|*|*|*|*|*|*|*|*,1","||$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm2_ip_gs)|$avp(S_gw_rm2_fqdn_gs)|$avp(S_gw_rm2_port_gs)|$avp(S_rm_transp_gs)|$avp(C_tmp2_gs)|$avp(C_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|||||$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|||$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||||$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||||||$avp(S_linked_ep_id_gi)");
                }
                else if(not_empty("$var(C_ep1_rm_ip_gs)"))
                {
                    xlog("L_INFO", "CI=$ci - R42  - Second dip remote_ep from SSP outbound proxy failed check configured outbound_proxy_ip: $var(C_ep1_rm_ip_gs)\n");
                    osb_memdb_select("remote_ep,*|*|*|5|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|$avp(S_ep1_id_li)|*|*|$var(S_profile_name_gs)|*|*|*|*|*|*|*|$var(C_ep1_rm_ip_gs)|*|*|*|*|*|*|*|*|*,1","||$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm2_ip_gs)|$avp(S_gw_rm2_fqdn_gs)|$avp(S_gw_rm2_port_gs)|$avp(S_rm_transp_gs)|$avp(C_tmp2_gs)|$avp(C_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|||||$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|||$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||||$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||||||$avp(S_linked_ep_id_gi)");
                }
            }

            if(not_empty("$avp(C_gw_type_gi)"))
            {
                $var(S_home_dn_rm_ip_sel_gs) = '*';
                $var(S_home_dn_rm_fqdn_sel_gs) = '*';
                $var(S_home_dn_rm_port_gi) = 0;

                if (not_empty("$avp(S_gw_rm2_ip_gs)"))
                    $var(S_home_dn_rm_ip_sel_gs) = $avp(S_gw_rm2_ip_gs);

                if (not_empty("$avp(S_gw_rm2_fqdn_gs)"))
                    $var(S_home_dn_rm_fqdn_sel_gs) = $avp(S_gw_rm2_fqdn_gs);

                if (not_empty("$avp(S_gw_rm2_port_gs)"))
                   $var(S_home_dn_rm_port_gi) = $(avp(S_gw_rm2_port_gs){s.int});

                # Check if home DN is configured to update the matched variables
                if(!isflagset(13))  # only if dialog is not established
                    route(QUERY_SSP_HOME_DN);
                # Update core port of Outbound proxy if = 0
                if ($var(S_tmp_gw_core_port_li) == 0)
                    $var(S_tmp_gw_core_port_li) = $avp(C_gw_core_port_gi);
            }
        }

        if(not_empty("$avp(C_gw_type_gi)") && $avp(C_gw_type_gi) !=$var(S_orig_gw_type_li))
        {
            xlog("L_INFO", "CI=$ci - R42.0  -  found 2nd ep, avp(C_gw_core_ip_gs)=$avp(C_gw_core_ip_gs), gwId=$avp(S_ses_id_gi),avp(C_gw_type_gi)=$avp(C_gw_type_gi) avp(C_gw_core_fqdn_gs)=$avp(C_gw_core_fqdn_gs)\n");
            if ($avp(C_gw_type_gi)==1 || $avp(C_gw_type_gi)==5 || $avp(C_gw_type_gi)==9)  #add SSP type here
            {
                $avp(C_gw_behind_ep_gi)=2;
                #only if second ep type is gw, we consider this to be found otherwise error
                $var(S_2nd_ep_found_lb) = 1;

                setflag(5);

                $var(C_ep2_core_port_gi)= $avp(C_gw_core_port_gi);

                 #prepare the variables for SSM
                $var(C_ep2_rm_ip_gs) = $avp(S_tmp_gs);
                $var(C_ep2_core_ip_gs) = $avp(C_tmp2_gs);
                $var(C_ep2_core_fqdn_gs) = $avp(C_gw_core_fqdn_gs);
                $var(C_ep2_rm_fqdn_gs) = $avp(S_gw_rm2_fqdn_gs);
                $var(C_ep2_transp_gs) = $avp(S_rm_transp_gs);
                $var(C_ep2_bitmap_gi) = $avp(S_rm_bitmap_gi);
                $var(C_ep2_type_gi) = $avp(C_gw_type_gi);
                $var(C_ep2_core_port_gi) = $avp(C_gw_core_port_gi);
                $var(S_ep2_rm_address_type_gi) = $avp(C_rm_address_type_gi);

                if($avp(S_rm_media_ip_gs) != $null && $avp(S_rm_media_ip_gs) != '')
                    $var(S_ep2_media_ip_gs) = $avp(S_rm_media_ip_gs);

                $var(S_ep2_media_subnet_mask_gs) = $avp(S_rm_media_subnet_mask_gs);

                xlog("L_INFO", "CI=$ci - R42.0  - var(C_ep2_core_port_gi)=$var(C_ep2_core_port_gi)  \n");

                #need to update the nat_port in REP
                xlog("L_INFO", "CI=$ci - R42  - 2ndep is behind ep,IP in 2nd via is avp(S_tmp_gs)=$avp(S_tmp_gs),$avp(S_gw_rm_ip_gs), source port = $sp\n");
                if (($avp(C_gw_type_gi)==5 && $avp(C_ssp_gw_profile_gs) != $null && $avp(C_ssp_gw_profile_gs) != '' && ($avp(C_ssp_gw_profile_gs) != 'Gateway' && $avp(C_ssp_gw_profile_gs) != 'OSBIZ')))
                {
                    xlog("L_INFO", "CI=$ci - R42.0  -  SSP gw , SIP trunk but behind ep. avp(C_ssp_gw_profile_gs)=$avp(C_ssp_gw_profile_gs)\n");
                    # if SSP is behind ep then treat as normal gw, do not set flag(1)
                    setflag(5);
                }
                else
                {
                    xlog("L_INFO", "CI=$ci - R42.0  -  found 2nd epbut strange type: not supported exit here \n");
                }
            }
        }
        $avp(C_gw_type_gi) = $var(S_orig_gw_type_li);
        xlog("L_INFO", "CI=$ci - R42.2   - avp(C_port_gi)=$avp(C_port_gi),avp(C_gw_core_port_gi)=$avp(C_gw_core_port_gi),avp(C_core_ip_gs)=$avp(C_core_ip_gs) gw type = $avp(C_gw_type_gi),avp(S_rm_transp_gs)=$avp(S_rm_transp_gs)\n");
        xlog("L_INFO", "CI=$ci - R42.2   - Gateway contact., avp(S_gw_core_fqdn_gs)=$avp(S_gw_core_fqdn_gs), avp(C_core_ip_gs)=$avp(C_core_ip_gs), avp(C_wan_ip_gs)=$avp(C_wan_ip_gs),avp(C_port_gi)=$avp(C_port_gi),avp(C_gw_transp_gs)=$avp(C_gw_transp_gs)\n");
        xlog("L_INFO", "CI=$ci - R42.2   - Gateway contact., avp(C_core_ip_gs)=$avp(C_core_ip_gs), avp(C_wan_ip_gs)=$avp(C_wan_ip_gs),avp(C_gw_core_port_gi)=$avp(C_gw_core_port_gi)\n");
    }
    ## restore C_gw_core_port_gi
    $avp(C_gw_core_port_gi) = $var(S_tmp_gw_core_port_li);
    $avp(C_gw_core_fqdn_gs) = $var(S_tmp_gw_core_fqdn_ls);
    $(avp(C_tmp2_gs)[*]) = $null;

    ## FRN7404, add the network interface to each index in the array
    $var(S_sys_count_gi) = 0;
    while($(avp(S_gw_rm_ip_list_gs)[$var(S_sys_count_gi)]) != $null)
    {
        $(avp(S_network_interface_src_sig_gi)[$var(S_sys_count_gi)]) = $var(S_network_interface_src_sig_gi)+ "-" +$(avp(S_gw_rm_ip_list_gs)[$var(S_sys_count_gi)]);
        $var(S_sys_count_gi) = $var(S_sys_count_gi) +1;
    }

    $var(S_set_ssm_call_side_data_lb) = 0;
    if($var(S_ep1_gtc_name_gs) != '')
    {
        $var(S_ssm_fqdn_ls) = $var(S_network_interface_src_sig_gi)+ "-" +$var(S_ep1_gtc_name_gs);
        $avp(C_tmp2_gs) = "fqdn_addr=[" + $var(S_network_interface_src_sig_gi)+ "-" + $var(S_ep1_nat_ip_gs) + "]";
        $var(S_ssm_rm_ip_gs) = "fqdn=" +$var(S_ssm_fqdn_ls)+";"+$avp(C_tmp2_gs);
    }
    else if(($avp(C_gw_behind_ep_gi) == 0  && not_empty("$avp(S_gw_rm_fqdn_gs)")) || $var(S_ep1_rm_address_type_gi) == 2)
    {
        if($var(S_ep1_rm_address_type_gi) == 2)
        {
            $var(S_ssm_fqdn_ls) = $var(S_network_interface_src_sig_gi)+ "-" +$var(S_ep1_logical_id_gs);
            $avp(C_tmp2_gs) = "fqdn_addr=[" + $var(S_network_interface_src_sig_gi)+ "-" + $var(S_ep1_nat_ip_gs) + "]";
        }
        else
        {
            $var(S_ssm_fqdn_ls) = $var(S_network_interface_src_sig_gi)+ "-" +$avp(S_gw_rm_fqdn_gs);
            $avp(C_tmp2_gs) = "fqdn_addr=[" + $(avp(S_gw_rm_ip_gs)[*]) + "]";
        }
        $var(S_ssm_rm_ip_gs) = "fqdn=" +$var(S_ssm_fqdn_ls)+";"+$avp(C_tmp2_gs);
        $var(S_set_ssm_call_side_data_lb) = 1;
    }
    else if($avp(C_gw_behind_ep_gi) !=0  && not_empty("$avp(S_gw_rm2_fqdn_gs)"))
    {
         $var(S_ssm_fqdn_ls) = $var(S_network_interface_src_sig_gi)+ "-" +$avp(S_gw_rm2_fqdn_gs);
         $avp(C_tmp2_gs) = "fqdn_addr=[" + $(avp(S_gw_rm2_ip_gs)[*]) + "]";
         $var(S_ssm_rm_ip_gs) = "fqdn=" + $var(S_ssm_fqdn_ls)+";"+$avp(C_tmp2_gs);
         $var(S_set_ssm_call_side_data_lb) = 1;
    }
    else if($avp(C_gw_behind_ep_gi) == 2 && not_empty("$var(C_ep1_rm_fqdn_gs)"))   # outbound proxy is FQDN
         $var(S_set_ssm_call_side_data_lb) = 1;

    if ($var(S_set_ssm_call_side_data_lb))
    {
         $var(C_ssm_call_side_data_gs) = "rm-addr=" + $si + "~" + $sp + "~" + $proto;
         xlog("L_INFO", "CI=$ci - R42 - Set call side data parameter $var(C_ssm_call_side_data_gs)\n");
    }

    if (not_empty("$var(S_rem_uri_info_addr_gs)"))
    {   # RFC2543 - Store fd and td in call side data after dialog establishment
        if (not_empty("$var(C_ssm_call_side_data_gs)"))
            $var(C_ssm_call_side_data_gs) = $var(C_ssm_call_side_data_gs) + ";";

        $var(C_ssm_call_side_data_gs) = $var(C_ssm_call_side_data_gs) + "rem-info=" + $var(S_rem_uri_info_addr_gs) + ";own-info=" + $var(S_own_uri_info_addr_gs);
        xlog("L_INFO", "CI=$ci - R42 - Add to call side data parameter $var(S_rem_uri_info_addr_gs) and $var(S_own_uri_info_addr_gs)\n");
    }

    xlog("L_INFO", "CI=$ci - R42 - var(S_ssm_rm_ip_gs)=$var(S_ssm_rm_ip_gs) fqdn_ls=$var(S_ssm_fqdn_ls) C_tmp2_gs=$avp(C_tmp2_gs) avp(C_gw_behind_ep_gi)=$avp(C_gw_behind_ep_gi)\n");

    if (is_gflag("6"))
    {
        xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
        bm_log_timer("route-42");
    }
}

########################################################################
# route QUERY_PM_LAN_TO_WAN_CALL: Route to setup environment - OSV (LAN) to WAN
########################################################################
route[QUERY_PM_LAN_TO_WAN_CALL]
{
    if (is_gflag("6"))
       bm_start_timer("route-6");

    $var(S_ruri_changed_lb)          = 0;
    $var(S_pmap_found_in_portmap_gb) = 0;
    $var(S_pmap_deep_failed_gb)      = 0;

    $avp(C_req_transp_gs) = $(pr{s.tolower});  # Store received transport to use in reply route
    $var(C_hdr_rcv_transp_gs)        = $avp(C_req_transp_gs);

    $avp(C_gw_behind_ep_gi)          = 0;
    xlog("L_INFO", "CI=$ci - R6 - Entry M=$rm rp=$rp Rp=$Rp flags=$mF to=$to ct=$ct,avp(C_tmp2_gs)=$avp(C_tmp2_gs), avp(C_port_gi)=$avp(C_port_gi),avp(C_wan_ip_gs)=$avp(C_wan_ip_gs),avp(S_pmap_name_gs)=$avp(S_pmap_name_gs) \n");
    $var(S_rm_sub_enabled_gb)        = 1;
    $var(S_rm_ep_enabled_gb)         = 1;
    xlog("L_INFO", "CI=$ci - R6 - var(S_rm_sub_enabled_gb)=$var(S_rm_sub_enabled_gb),var(S_rm_ep_enabled_gb)=$var(S_rm_ep_enabled_gb)\n");

    ## move it after setting the wanip
    $var(S_ip_replacement_gs)        = $avp(C_wan_ip_gs);
    $var(S_pmap_ob_ip_to_convert_gs) = $var(S_lanip_4_6_gs);
    $avp(S_hdr_from_user_gs)         = $fU;

    $var(C_core_port_gi)             = $rp; #this port should be used for responses to 8K
    if(!($avp(C_port_gi) != $null && $avp(C_port_gi) != ""))
    {
        #initialize $avp(C_port_gi) with port from uri
        $avp(S_tmp_gs)  = $ru;
        # Get port from uri
        $avp(C_port_gi) = $(avp(S_tmp_gs){uri.port});
        xlog("L_INFO", "CI=$ci - R6- Initiallized avp(C_port_gi):$avp(C_port_gi) \n");
    }

    if(is_method("REGISTER") && is_present_hf("X-Siemens-Service-Provider"))
        return;
    if(!$var(S_standalone_route_gi))
       route(QUERY_REP_LAN_TO_WAN_CALL_ROUTE);
    $var(S_main_core_port_li) = 5060;
    if ($proto == "tcp")
        $var(S_main_core_port_li) = 5060;
    else if ($proto == "tls")
        $var(S_main_core_port_li) = 5061;

    if(($var(S_first_ep_found_gi) == 1 && $var(S_rm_ep_enabled_gb) == 0) || ($var(S_first_ep_found_gi) == 0 && $var(S_rm_sub_enabled_gb) == 0))
    {
        # Handle OSV OPTIONS when the configuration of remote subscriber is disabled
        if(is_method("OPTIONS") && $var(S_first_ep_found_gi) == 0 && uri==myself && $rp == $var(S_main_core_port_li))
        {
            sl_send_reply("200","OK");
            if (is_gflag("6"))
            {
                xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
                bm_log_timer("route-6");
            }
            exit;
        }


        $var(S_sys_rand_gi) = ($RANDOM /16777279); # Random Value from 2^6 to 2^7(i.e 64 to 128)

        append_to_reply("Retry-After: $var(S_sys_rand_gi)\r\n");
        if($var(S_first_ep_found_gi) == 0 && $var(S_rm_sub_enabled_gb) == 0)
            $avp(C_wan_ip_gs) = "";
        append_to_reply("Warning: 399 $avp(C_wan_ip_gs) - R6 - flag indicates interface is blocked.\r\n");
        sl_send_reply("503", "Server Unavailable");
        if (is_gflag("6"))
        {
            xlog("L_INFO", "bench: $rm-$rs\n");
            bm_log_timer("route-6");
        }
        exit;
    }

    # FRN4862: We need to avoid PM operation, we can't find avp values in response messages. (STATELESS)
    if ($var(C_mosip_message_gb))
    {
        return;
    }

    $avp(C_gw_core_port_gi) = $var(C_ep1_core_port_gi);

    if(!isflagset(5))
    {
        $(avp(S_tmp_gs)[*]) = $null;
        $(avp(C_tmp2_gs)[*]) = $null;
        $(avp(S_int_ip_gs)[*]) = $null;

        # Only do PM dip if this is not a direct EP call
        if ($var(S_call_to_direct_ep_gb) == 0)
        {
           if($var(S_pmap_deep_counter_gi)==2)            # if this is the second round i.e. dipping into partner
           {
              if(($rU) == $null)
              {
                 xlog("L_INFO", "CI=$ci - R6.1  - checking in partner_pm and rU=$rU , need to exit\n");

                 append_to_reply("Warning: 399 $rU - Call possibly for partner sub but no valid user part\r\n");
                 sl_send_reply("404", "Not Found");
                 if (is_gflag("6"))
                 {
                    xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
                    bm_log_timer("route-6");
                 }
                 exit;
              }
              else
              {
                 if ($avp(S_pmap_name_gs) == "port_map")
                     osb_memdb_nl_select("port_map,*|*|*|*|*|*|*|*|*|*|$rU|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1","|$avp(S_int_ip_gs)|$avp(S_tmp_gs)|$avp(C_port_gi)|$avp(C_tmp2_gs)|||||$avp(S_epid_gs)||||$avp(S_network_interface_dst_gs)|$avp(S_pm_transport_gs)|$avp(S_hdr_user_agent_gs)|$avp(C_wan_port_gs)|$avp(S_core_realm_profile_gs)|$avp(S_wosmo_client_ip_gs)|$avp(S_ct_indication_gs)|$avp(S_device_token_gs)||||$avp(S_sys_stick_with_commServer_sv_gi)|$avp(S_p_server_gs)");
                 else
                     xlog("L_INFO", "CI=$ci - R6 - ***** TODO: ADD PARTNER_PM CODE HERE)\n");
              }
           }
           else
           {
                xlog("L_INFO", "CI=$ci - R6 dipping with rp=$rp, rU=$rU\n");
                if ($avp(S_pmap_name_gs) == "port_map")
                {
                    $(avp(S_exp_as_gi)[*]) = $null;
                    $var(S_exp_lower_limit_li) = -3;
                    $var(S_exp_upper_limit_li) = -1;
                    if (!has_totag())
                        $var(S_exp_lower_limit_li) = -4;

                    if(($rU) == $null)
                    {
                         osb_memdb_nl_select_field_out_of_range("port_map,*|*|*|*|$rp|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","$avp(S_pmap_id_gi)|$avp(S_int_ip_gs)|$avp(S_tmp_gs)|$avp(C_port_gi)|$avp(C_tmp2_gs)||$avp(S_exp_as_gi)||$avp(S_wan_interface_gs)|$avp(S_epid_gs)||||$avp(S_network_interface_dst_gs)|$avp(S_pm_transport_gs)|$avp(S_hdr_user_agent_gs)|$avp(C_wan_port_gs)|$avp(S_core_realm_profile_gs)|$avp(S_wosmo_client_ip_gs)|$avp(S_ct_indication_gs)|$avp(S_device_token_gs)||||$avp(S_sys_stick_with_commServer_sv_gi)|$avp(S_p_server_gs)",
                             6, "$var(S_exp_lower_limit_li)", "$var(S_exp_upper_limit_li)");
                    }
                    else
                    {
                         osb_memdb_nl_select_field_out_of_range("port_map,*|*|*|*|$rp|*|*|*|*|*|$rU|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","$avp(S_pmap_id_gi)|$avp(S_int_ip_gs)|$avp(S_tmp_gs)|$avp(C_port_gi)|$avp(C_tmp2_gs)||$avp(S_exp_as_gi)||$avp(S_wan_interface_gs)|$avp(S_epid_gs)||||$avp(S_network_interface_dst_gs)|$avp(S_pm_transport_gs)|$avp(S_hdr_user_agent_gs)|$avp(C_wan_port_gs)|$avp(S_core_realm_profile_gs)|$avp(S_wosmo_client_ip_gs)|$avp(S_ct_indication_gs)|$avp(S_device_token_gs)||||$avp(S_sys_stick_with_commServer_sv_gi)|$avp(S_p_server_gs)",
                             6, "$var(S_exp_lower_limit_li)", "$var(S_exp_upper_limit_li)");
                    }
                    if (not_empty("$avp(S_exp_as_gi)"))
                        xlog("L_INFO", "CI=$ci - R6 - Using S_exp_as_gi=$avp(S_exp_as_gi), tt=$tt, avp(S_pmap_id_gi)=$avp(S_pmap_id_gi),avp(S_int_ip_gs)=$avp(S_int_ip_gs),avp(C_port_gi)=$avp(C_port_gi),avp(S_tmp_gs)=$avp(S_tmp_gs) \n");
                }
                else
                    xlog("L_INFO", "CI=$ci - R6 - ***** TODO: ADD PARTNER_PM CODE HERE)\n");

                xlog("L_INFO", "CI=$ci - R6 avp(S_int_ip_gs)=$avp(S_int_ip_gs),var(S_ep1_natted_gi)=$var(S_ep1_natted_gi)\n");
            }
            xlog("L_INFO", "CI=$ci - R6 avp(S_int_ip_gs)=$avp(S_int_ip_gs),C_wan_port_gs=$avp(C_wan_port_gs),S_core_realm_profile_gs=$avp(S_core_realm_profile_gs),avp(S_ct_indication_gs)=$avp(S_ct_indication_gs)\n");
        }

        if(($avp(S_int_ip_gs) != $null && $avp(S_int_ip_gs) != ""))
        {
           if ($avp(S_pm_transport_gs) == "t")
               $avp(S_pm_transport_gs) = "tcp";
           else if ($avp(S_pm_transport_gs) == "u")
               $avp(S_pm_transport_gs) = "udp";
           else if ($avp(S_pm_transport_gs) == "l")
               $avp(S_pm_transport_gs) = "tls";

           $var(S_pmap_found_in_portmap_gb) = 1;
           $avp(C_pmap_port_gi)             = $avp(C_port_gi);
           $avp(C_pmap_resp_port_gi)        = $avp(C_tmp2_gs);

           #save the finding
           $var(S_pmap_ct_gs)               = $avp(S_tmp_gs);
           $var(S_pmap_int_ip_ls)           = $avp(S_int_ip_gs);
           $avp(C_wan_ip_gs)                = $avp(S_wan_interface_gs);

           $var(C_general_core_port_gi)     = $rp;

           xlog("L_INFO", "CI=$ci - R6.1 - found sub $rU in PM: $avp(S_int_ip_gs) behind ep, avp(C_pmap_port_gi)=avp(C_port_gi)=$avp(C_port_gi), avp(C_pmap_resp_port_gi)=var(S_pmap_ct_gs)=$avp(C_pmap_resp_port_gi), contact=$avp(S_tmp_gs),var(C_hdr_rcv_transp_gs)= $var(C_hdr_rcv_transp_gs),avp(C_pmap_resp_port_gi)=$avp(C_pmap_resp_port_gi) \n");


           $var(S_int_ip_temp_ls)           = $avp(S_int_ip_gs);
           put_ip_in_paran('$var(S_int_ip_temp_ls)', '$var(S_int_ip_temp_ls)');

           $var(S_pmap_ip_temp_ls)          =  $(var(S_pmap_ct_gs){uri.host});
           put_ip_in_paran('$var(S_pmap_ip_temp_ls)', '$var(S_pmap_ip_temp_ls)');

           if((!(isflagset(8) ||  isflagset(27))))
           {
               xlog("L_INFO", "CI=$ci - R6 - Remote Subscriber, var(S_int_ip_temp_ls)=$var(S_int_ip_temp_ls), var(S_pmap_ip_temp_ls)=$var(S_pmap_ip_temp_ls), rd=$rd\n");

               if ($var(S_first_ep_found_gi) == 0) # No First EP found
               {
                   xlog("L_INFO", "CI=$ci - R6 - Dipping with avp(S_int_ip_gs)=$avp(S_int_ip_gs)\n");
                   route(QUERY_REP_LAN_TO_WAN_CALL_ROUTE);

                   $avp(S_int_ip_gs) = $var(S_pmap_int_ip_ls); # Restore avp(S_int_ip_gs) from pm
                   xlog("L_INFO", "CI=$ci - R6 - Restored avp(S_int_ip_gs)=$avp(S_int_ip_gs)\n");
               }

               if ($var(S_first_ep_found_gi) == 0 && !compare_ips('$var(S_int_ip_temp_ls)', '$var(S_pmap_ip_temp_ls)')) # No First EP found
               {
                   xlog("L_INFO", "CI=$ci - R6 - NAT for Remote Subscriber\n");
                   $var(S_wan_natted_gb) = 1;
               }
           }

           ## Do not replace the URI for NG911 calls
           if $var(S_NG911Call_gb) == 0
           {
               # Set R-URI with contact obtained from port_map (transport is also set)
               $ru = $var(S_pmap_ct_gs);
               $var(S_ruri_changed_lb)=1;
               if ($avp(C_ssp_pt_params_list_gs) != $null)
                   osb_set_passthrough_params("$ou","$ru","$avp(C_ssp_pt_params_list_gs)");

               xlog("L_INFO", "CI=$ci - R6.1  - R-URI replaced to $ru, avp(C_pmap_port_gi)=$avp(C_pmap_port_gi)\n");
           }

           osb_memdb_nl_select("user_agent,$avp(S_hdr_user_agent_gs)|*,1","|$avp(S_hdr_user_agent_gs)");

           if(!(isflagset(8) || isflagset(27)))
           {
               setflag(11);
               $var(S_rs_core_port_gi)=$rp;
               xlog("L_INFO", "CI=$ci - R6.1 - this is a remote sub, setflag(11) int_ip=$avp(S_int_ip_gs),contact=$avp(S_tmp_gs),var(S_rs_core_port_gi)=$var(S_rs_core_port_gi) \n");
               $avp(C_wan_ip_gs) = $avp(S_wan_interface_gs);

               if (($avp(S_hdr_user_agent_gs) =~ "OpenScape Mobile Client - WebRTC.*") && ($avp(C_gw_type_gi) != 8)) # not SBC GW
               {
                   xlog("L_INFO", "CI=$ci - R6 - avp(S_hdr_user_agent_gs)=$avp(S_hdr_user_agent_gs). Mark as WebRTC Call \n");
                   $var(S_webRtc_gi) = 1;
               }
           }
           else if(isflagset(27)) {
               setflag(15);
               xlog("L_INFO", "CI=$ci - R6.1 - this is a sub behind proxy, setflag(27) int_ip=$avp(S_int_ip_gs),contact=$avp(S_tmp_gs) \n");
           }
           else if(isflagset(8)) {
               setflag(15);
               xlog("L_INFO", "CI=$ci - R6.1 - this is a sub behind sbc, setflag(8) int_ip=$avp(S_int_ip_gs),contact=$avp(S_tmp_gs) \n");
           }
           else
           {
               xlog("L_INFO", "CI=$ci - R6.1 - ERROR: we should never get here, exit int_ip=$avp(S_int_ip_gs),contact=$avp(S_tmp_gs) \n");
               if (is_gflag("6"))
               {
                  xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
                  bm_log_timer("route-6");
               }
               exit;
           }
        }
        else if ($var(S_first_ep_found_gi) == 0) # No PM and No First EP found
        {
            if(is_method("OPTIONS") && uri==myself && ($rp == 5060 || $rp == 5060 || $rp == 5061))
            {
                sl_send_reply("200","OK");
                if (is_gflag("6"))
                {
                    xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
                    bm_log_timer("route-6");
                }
                exit;
            }

            if($var(S_pmap_deep_counter_gi)==2)         #this is the second round, the partner pm was also diped into
            {
                xlog("L_INFO", "CI=$ci - R6.1  - 404 No Subscriber or Endpoint Found for rp=$rp\n");

                # if (!isflagset(13) && is_method("INVITE") && $var(C_ssm_msg_gb) != 1)
                #    dialog_log("RESPONSE timestamp=$Ts;call_id=$ci;from_tag=$ft;to_tag=$tt;code=404;reason=Not Found;\n");

                append_to_reply("Warning: 399 $var(C_si_var_gs) - No Subscriber or Endpoint Found\r\n");
                sl_send_reply("404", "Not Found");
                if (is_gflag("6"))
                {
                   xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
                   bm_log_timer("route-6");
                }
                exit;
            }
            else
            {
                xlog("L_INFO", "CI=$ci - R6 - PM dip failed - No second round dipping");
                $var(S_pmap_deep_failed_gb) =1;
                return;        #will dip into partner
            }
        }
        else if ($var(S_rs_core_port_gi) != $Rp && $var(S_rs_core_port_gi) != $var(S_routeh_port_gi) && $var(S_NG911_notification_gb) == 0) # No PM found but first EP found, but RURI port doesn't match the first EP
        {
            xlog("L_INFO", "CI=$ci - R6 No PM found but first EP found\n");
            if($var(S_pmap_deep_counter_gi)==2 || $var(C_call_msg_gb)!=1)               #this is the second round, the partner pm was also diped into
            {
               xlog("L_INFO", "CI=$ci - R6.1  - 404 Endpoint Found but request URI or Route port doesnt match the Remote EP rp=$var(S_rs_core_port_gi), Rp=$Rp, route_port=$var(S_routeh_port_gi)\n");

               append_to_reply("Warning: 399 $var(C_si_var_gs) - Call to Direct Endpoint but RURI or Route port doesnt match the Remote EP\r\n");
               sl_send_reply("404", "Not Found");
               if (is_gflag("6"))
               {
                  xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
                  bm_log_timer("route-6");
               }
               exit;
            }
            else
            {
               xlog("L_INFO", "CI=$ci - R6 - PM dip failed ");
               $var(S_pmap_deep_failed_gb) =1;
               return;        #will dip into partner
            }
        }
        else if ($var(S_call_to_direct_ep_gb) == 1) # Request to First Remote EP, set intenal ip to remote ip.
        {
            xlog("L_INFO", "CI=$ci - R6 Request to First Remote EP\n");
            $avp(S_int_ip_gs) = $var(C_ep1_rm_ip_gs);
        }
        else
        {
            xlog("L_INFO", "CI=$ci - R6 Request to First Remote EP, set intenal ip to remote ip\n");
            if($var(S_pmap_deep_counter_gi)==2)         #this is the second round, the partner pm was also diped into
               $avp(S_int_ip_gs) = $var(C_ep1_rm_ip_gs);
            else{
               $var(S_pmap_deep_failed_gb) = 1;
               $avp(C_port_gi) = $var(S_port_stored_gi);   ## stored at begin of this route
               return;
            }
        }
    }

    $avp(S_gw_id_gi) = $avp(S_ses_id_gi);

    ## if this is direct sub, we need to set the  $avp(S_network_interface_src_gs) for SSM
    if(isflagset(11))
    {
        ################################ FRN7404 ##############################
        ###         reading source signaling for SSM                    #######
        ##         need to read the source (core) related info          #######
        ## for building $var(C_ssm_data_src_gs) for FRN7404             #######
        ##             using $var(C_ri_var_gs)                          #######
        xlog("L_INFO", "CI=$ci - R6 - FRN7404 dipping into network_id (for core) with var(C_ri_var_gs)=$var(C_ri_var_gs) \n");
        #--- Check signaling network ID core side
        if (osb_memdb_nl_select("network_id,*|*|*|*|*|*|$var(C_ri_var_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*,1",
                "|||$avp(S_network_interface_src_sig_gi)||||||||||||||||") != 1)
        {
            xlog("L_ERR", "CI=$ci - R6 - could not identify access network_id using var(C_ri_var_gs)=$var(C_ri_var_gs) \n");
            append_to_reply("Warning: 399 $var(C_si_var_gs) - R6 - could not identify access network_id using var(C_ri_var_gs)=$var(C_ri_var_gs)\r\n");
            sl_send_reply("403", "Forbidden");

            t_release();

            if (is_gflag("6"))
            {
                xlog("L_INFO", "bench: $rm-$rs\n");
                bm_log_timer("route-6");
            }
            exit;
        }
        $var(S_network_interface_src_sig_gi) = $avp(S_network_interface_src_sig_gi);
        xlog("L_INFO", "CI=$ci - R6 - read avp(S_network_interface_src_sig_gi)=$avp(S_network_interface_src_sig_gi) and var(S_network_interface_src_sig_gi)=$var(S_network_interface_src_sig_gi) \n");

        ### dip into network_id table to read the src media network_id using the $var(S_query_ip_ls)
        $var(S_query_ip_ls) = $var(C_ri_var_gs);
        ## for remote subs we need to update this var which is used by media templte
        $var(S_network_interface_media_dst_gi) = $avp(S_network_interface_dst_gs);

        ### Dip network-id table with $Ri and $rp to get NW-id
        $var(S_network_type_gi) = 1;  #1="access" and 0= "core"
        $var(S_signalling_gi) = 1;
        $var(S_media_gi) = 0;
        xlog("L_INFO", "CI=$ci - R6 - Dipping network_id *|*|$var(S_network_type_gi)|*|$var(S_signalling_gi)|*|$avp(S_wan_interface_gs)|*|*|*|*|*|*\n");
        #--- Check signaling network ID access side
        if (osb_memdb_nl_select("network_id,*|*|$var(S_network_type_gi)|*|$var(S_signalling_gi)|*|$avp(S_wan_interface_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*,1",
                "|$avp(S_sig_nw_id_gs)||$avp(S_network_interface_dst_gs)||||$avp(C_wan_port_tcp_gs)|$avp(C_wan_port_tls_gs)|$avp(C_wan_port_udp_gs)||$avp(C_fw_ext_ip_gs)|||||$avp(S_fw_media_ip_gs)|$avp(S_wan_on_sdp_gs)||") != 1)
        {
            xlog("L_ERR", "CI=$ci - R6 - could not identify network_id using  *|*|$var(S_network_type_gi)|*|$var(S_signalling_gi)|*|$avp(S_wan_interface_gs)|*|*|*|*|*|*\n");
            append_to_reply("Warning: 399 $var(C_si_var_gs) - R6 - could not identify network_id using avp(S_wan_interface_gs)=$avp(S_wan_interface_gs)\r\n");
            sl_send_reply("403", "Forbidden");

            t_release();

            if (is_gflag("6"))
            {
                xlog("L_INFO", "bench: $rm-$rs\n");
                bm_log_timer("route-6");
            }
            exit;
        }

        if ($var(S_webRtc_gi) == 1 && $avp(C_wan_port_tcp_gs) == 0 && $avp(C_wan_port_tls_gs) == 0 && $avp(C_wan_port_udp_gs) == 0)
        {
            $var(S_network_type_gi) = 0;  #1="access" and 0= "core"
            xlog("L_INFO", "CI=$ci - R6 - WebRTC on Core. Dipping network_id *|*|$var(S_network_type_gi)|*|$var(S_signalling_gi)|*|$avp(S_wan_interface_gs)|*|*|*|*|*|*\n");
            #--- Check signaling network ID access side (core type?)
            osb_memdb_nl_select("network_id,*|*|$var(S_network_type_gi)|*|$var(S_signalling_gi)|*|$avp(S_wan_interface_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*,1",
                    "|||||||$avp(C_wan_port_tcp_gs)|$avp(C_wan_port_tls_gs)|$avp(C_wan_port_udp_gs)||||||||||");
        }

        if(not_empty("$avp(C_fw_ext_ip_gs)"))
            $avp(C_wan_ip_gs) = $avp(C_fw_ext_ip_gs);
        else if(not_empty("$avp(S_lb_ext_ip_gs)"))
            $avp(C_wan_ip_gs) = $avp(S_lb_ext_ip_gs);
        else if(not_empty("$avp(C_fwd_ep_ip_gs)"))
            $avp(C_wan_ip_gs) = $avp(C_fwd_ep_ip_gs);

        $avp(S_network_interface_dst_sig_gi) = $avp(S_network_interface_dst_gs);
        $var(S_network_interface_dst_sig_gi) = $avp(S_network_interface_dst_sig_gi);
        xlog("L_INFO", "CI=$ci - R6 - found S_sig_nw_id_gs=$avp(S_sig_nw_id_gs) using $Ri and $rp ,avp(C_wan_ip_gs)=$avp(C_wan_ip_gs),var(S_network_interface_dst_sig_gi)=$var(S_network_interface_dst_sig_gi)\n");
        #### note: S_access_restriction_gi = 0    ep AND direct sub allowed         #############
        #### note: S_access_restriction_gi = 1    only ep allowed                   #############
        #### note: S_access_restriction_gi = 2    only direct sub allowed           #############

        ### Dip realm-profile table NW-id to get profile-ID (may return multiple)
        $var(S_profile_type_gi) = 1;  #1="signalling" and 0= "media"
        if(osb_memdb_nl_select("realm_profile,*|*|*|$avp(S_sig_nw_id_gs)|*|*,","|$avp(S_profile_name_gs)|||$avp(S_media_nw_id_gs)|") != 1)
        {
            xlog("L_ERR", "CI=$ci - R6 - could not identify realm_profile using avp(S_profile_name_gs)=$avp(S_profile_name_gs) and avp(S_sig_nw_id_gs)=$avp(S_sig_nw_id_gs) \n");
            append_to_reply("Warning: 399 $var(C_si_var_gs) - R6 - could not identify core profile using avp(S_sig_nw_id_gs)=$avp(S_sig_nw_id_gs)\r\n");
            sl_send_reply("403", "Forbidden");

            t_release();

            if (is_gflag("6"))
            {
                xlog("L_INFO", "bench: $rm-$rs\n");
                bm_log_timer("route-6");
            }
            exit;
        }
        xlog("L_INFO", "CI=$ci - R6 - found  var(S_profile_type_gi)=$var(S_profile_type_gi), avp(S_profile_name_gs)=$(avp(S_profile_name_gs)[*]),avp(S_media_nw_id_gs)=$(avp(S_media_nw_id_gs)[*]) \n");

        ##### NOW GET THE ACCESS SIGNALING AND MEDIA INFORMATION

        ### dip to find the interface
        $var(S_network_type_gi) = 1;  #1="access" and 0= "core"
        $var(S_signalling_gi) = 1;
        $var(S_media_gi) = 1;
        xlog("L_INFO", "CI=$ci - R6.2 - dipping network_id with *|$avp(S_media_nw_id_gs)|$var(S_network_type_gi)|*|*|$var(S_media_gi)|*|*|*|*|*|*|*\n");

        #--- Check media network ID access side
        if (osb_memdb_nl_select("network_id,*|$avp(S_media_nw_id_gs)|$var(S_network_type_gi)|*|*|$var(S_media_gi)|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1",
                "|||$avp(S_network_interface_dst_gs)|||$avp(C_wan_media_ip_gs)||||||||||$avp(C_media_fw_ext_ip_gs)|$avp(S_media_wan_on_sdp_gs)||") != 1)
        {
           xlog("L_ERR", "CI=$ci - R6.2 - RS: could not identify media network_id using avp(S_media_nw_id_gs)=$avp(S_media_nw_id_gs) and var(S_network_type_gi)=$var(S_network_type_gi) \n");
           append_to_reply("Warning: 399 $var(C_si_var_gs) - R6 - could not identify src network_id for RS using avp(S_media_nw_id_gs)=$avp(S_media_nw_id_gs)\r\n");
           sl_send_reply("403", "Forbidden");

           t_release();

           if (is_gflag("6"))
           {
               xlog("L_INFO", "bench: $rm-$rs\n");
               bm_log_timer("route-6");
           }
           exit;
        }
        xlog("L_INFO", "CI=$ci - R6.2 - found avp(C_media_fw_ext_ip_gs)=$avp(C_media_fw_ext_ip_gs),avp(S_network_interface_dst_gs)=$avp(S_network_interface_dst_gs),avp(S_media_nw_id_gs)=$avp(S_media_nw_id_gs),avp(C_wan_media_ip_gs)=$avp(C_wan_media_ip_gs)\n");


        ## read subscriber specific
        xlog("L_INFO", "CI=$ci - R6.2 - Dipping remote_subscriber for to get core_realm_profile using the $avp(S_sig_nw_id_gs) and  $avp(S_profile_name_gs)\n");

        if(osb_memdb_nl_select("remote_subscriber,*|*|*|*|*|*|*|*|$avp(S_sig_nw_id_gs)|*|*|*|*|*|*|*,","$avp(S_ses_id_gi)||$avp(S_tmp_gs)|$avp(S_subnet_ip_gs)|$avp(S_subnet_mask_gs)||$avp(S_rep_home_dn_gs)|$avp(S_gw_emergency_prefixes_gs)|$avp(S_media_nw_id_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|||||") != 1)
        {
            xlog("L_INFO", "CI=$ci - R6.2 - could not identify core_realm_profile in remote_subscriber using avp(S_sig_nw_id_gs)=$avp(S_sig_nw_id_gs) \n");
            xlog("L_INFO", "CI=$ci - R6.2 - Dipping sub_associated_network using avp(S_access_realm_profile_gs)=$avp(S_access_realm_profile_gs), avp(S_core_realm_profile_gs)=$avp(S_core_realm_profile_gs)\n");

            ### For now only one entry in the table, later this could be done based on the Access to Core configuration in Remote sub section from GUI
            if(osb_memdb_nl_select("sub_associated_network,*|*|$avp(S_profile_name_gs)|*|*|*,","$avp(S_ses_id_gi)|||$avp(S_core_realm_profile_gs)||") != 1)
            {
                xlog("L_ERR", "CI=$ci - R6.2 - could not identify core_realm_profile in Sub_associated_network using avp(S_profile_name_gs)=$avp(S_profile_name_gs) \n");
                append_to_reply("Warning: 399 $var(C_si_var_gs) - R6 - could not identify core profile in Sub_associated_network using avp(S_profile_name_gs)=$avp(S_profile_name_gs)\r\n");
                sl_send_reply("403", "Forbidden");

                t_release();

                if (is_gflag("6"))
                {
                    xlog("L_INFO", "bench: $rm-$rs\n");
                    bm_log_timer("route-6");
                }
                exit;
            }
        }

        ##### NOW GET THE CORE SIGNALING AND MEDIA INFORMATION

        ### now dip into realm profile to get the network_id (needed to get the core IP from network_id)
        # var(S_profile_type_gi) = 0;  #1="signalling" and 0= "media"
        ## actually we need 2 dips to find signalling and media
        xlog("L_INFO", "CI=$ci - R6.2 - Dipping realm_profile for signaling and media using avp(S_core_realm_profile_gs)=$avp(S_core_realm_profile_gs) \n");
        if(osb_memdb_nl_select("realm_profile,*|$avp(S_core_realm_profile_gs)|*|*|*|*,1","|||$avp(S_sig_nw_id_gs)|$avp(S_media_nw_id_gs)|") != 1)
        {
            xlog("L_ERR", "CI=$ci - R6.2 - could not identify core profile using avp(S_core_realm_profile_gs)=$avp(S_core_realm_profile_gs) \n");
            append_to_reply("Warning: 399 $var(C_si_var_gs) - R6 - could not identify core profile using avp(S_core_realm_profile_gs)=$avp(S_core_realm_profile_gs)\r\n");
            sl_send_reply("403", "Forbidden");

            t_release();

            if (is_gflag("6"))
            {
                xlog("L_INFO", "bench: $rm-$rs\n");
                bm_log_timer("route-6");
            }
            exit;
        }
        xlog("L_INFO", "CI=$ci - R6.2 - Dipping network_id for core IP, for signalling using avp(S_sig_nw_id_gs)=$avp(S_sig_nw_id_gs),avp(S_media_nw_id_gs)=$avp(S_media_nw_id_gs) from above dip\n");
        $var(S_network_type_gi) = 0;#1="access" and 0= "core"
        #--- Check signaling network ID core side
        if (osb_memdb_nl_select("network_id,*|$avp(S_sig_nw_id_gs)|$var(S_network_type_gi)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1",
                "||||||$avp(C_core_ip_gs)|$avp(C_core_port_tcp_gs)|$avp(C_core_port_tls_gs)|$avp(C_core_port_udp_gs)||||||||||") != 1)
        {
            xlog("L_ERR", "CI=$ci - R6.2 - could not identify core network_id using avp(S_sig_nw_id_gs)=$avp(S_sig_nw_id_gs) and var(S_network_type_gi)=$var(S_network_type_gi) \n");
            append_to_reply("Warning: 399 $var(C_si_var_gs) - R6 - could not identify core network_id using avp(S_sig_nw_id_gs)=$avp(S_sig_nw_id_gs)\r\n");
            sl_send_reply("403", "Forbidden");

            t_release();

            if (is_gflag("6"))
            {
                xlog("L_INFO", "bench: $rm-$rs\n");
                bm_log_timer("route-6");
            }
            exit;
        }
        xlog("L_INFO", "CI=$ci - R6.2 - Dipping network_id for core IP for media using avp(S_sig_nw_id_gs)=$avp(S_sig_nw_id_gs) from above dip\n");
        $var(S_network_type_gi) = 0;#1="access" and 0= "core"
        #--- Check media network ID core side
        if (osb_memdb_nl_select("network_id,*|$avp(S_media_nw_id_gs)|$var(S_network_type_gi)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1",
                "|||$avp(S_network_interface_src_gs)|||$avp(C_core_media_ip_gs)|||||||||||||") != 1)
        {
            xlog("L_ERR", "CI=$ci - R6.2 - could not identify media network_id using avp(S_media_nw_id_gs)=$avp(S_media_nw_id_gs) and var(S_network_type_gi)=$var(S_network_type_gi) \n");
            append_to_reply("Warning: 399 $var(C_si_var_gs) - R6 - could not identify media network_id using avp(S_media_nw_id_gs)=$avp(S_media_nw_id_gs)\r\n");
            sl_send_reply("403", "Forbidden");

            t_release();
            if (is_gflag("6"))
            {
                xlog("L_INFO", "bench: $rm-$rs\n");
                bm_log_timer("route-6");
            }
            exit;
        }

        xlog("L_INFO", "CI=$ci - R6.2 - retrieved C_core_media_ip_gs=$avp(C_core_media_ip_gs)  avp(S_network_interface_src_gs)=$avp(S_network_interface_src_gs)\n");
        xlog("L_INFO", "CI=$ci - R6 - read avp(S_network_interface_src_gs)=$avp(S_network_interface_src_gs), avp(C_core_ip_gs)=$avp(C_core_ip_gs) , core_ports: tcp=$avp(C_core_port_tcp_gs) tls=$avp(C_core_port_tls_gs) udp=$avp(C_core_port_udp_gs)\n");

    }

    route(FIND_OSV_BINDING_ROUTE); # Get OSV Binding

    ### now set the AVP for access port  depending on the destination transport  ######
    if(isflagset(11))
    {
        xlog("L_INFO", "CI=$ci - R6.2 - Direct Subscriber, local WAN port from port_map is avp(C_wan_port_gs)=$avp(C_wan_port_gs)\n");
        if ($avp(C_wan_port_gs) == $null || $avp(C_wan_port_gs) == "" || $avp(C_wan_port_gs) == "0")
        {
            if ($(avp(S_pm_transport_gs){s.tolower}) == "tcp")
                $avp(C_wan_port_gs) = $avp(C_wan_port_tcp_gs);
            else if($(avp(S_pm_transport_gs){s.tolower}) == "tls") ## May be an issue with MTLS but this whole condition shouldn't happen
                $avp(C_wan_port_gs) = $avp(C_wan_port_tls_gs);
            else
                $avp(C_wan_port_gs) = $avp(C_wan_port_udp_gs);

            xlog("L_INFO", "CI=$ci - R6.2 - WHY ARE WE HERE: Direct Subscriber, PM transport=$avp(S_pm_transport_gs), Resetting local WAN port to avp(C_wan_port_gs)=$avp(C_wan_port_gs)\n");
        }

        if ($(avp(C_sys_current_binding_transp_gs){s.tolower}) == "tcp")
            $avp(C_core_port_gi) = $avp(C_core_port_tcp_gs);
        else if ($(avp(C_sys_current_binding_transp_gs){s.tolower}) == "tls")
            $avp(C_core_port_gi) = $avp(C_core_port_tls_gs);
        else
            $avp(C_core_port_gi) = $avp(C_core_port_udp_gs);
    }
    else
    {
        $var(S_wan_transp_ls) = $avp(C_gw_transp_gs);
        if ($var(S_standalone_route_gi) == 1 && $var(S_mediaserver_call_gi) == 1 && !isflagset(10) && !has_totag())
        {
            $var(S_wan_transp_ls) = $proto;
            xlog("L_INFO", "CI=$ci - R6.2 - In hosted mode to MS use received transport set the WAN port\n");
        }
        if ($(var(S_wan_transp_ls){s.tolower}) == "tcp")
            $avp(C_wan_port_gs) = $avp(C_wan_port_tcp_gs);
        else if ($(var(S_wan_transp_ls){s.tolower}) == "tls")
        {
            xlog("L_INFO", "CI=$ci - R6.2 - Port for TLS avp(C_port_mtls_gs)=$avp(C_port_mtls_gs) avp(C_wan_port_tls_gs)=$avp(C_wan_port_tls_gs) avp(S_rep_bitmap_gi)=$avp(S_rep_bitmap_gi)\n");
            $avp(S_rep_bitmap_li) = $(avp(S_rep_bitmap_gi){s.int});
            if ($avp(C_port_mtls_gs) != 0 && avp_check("$avp(S_rep_bitmap_li)","and/i:4/g")) # Check mtls
                $avp(C_wan_port_gs) = $avp(C_port_mtls_gs);
            else
                $avp(C_wan_port_gs) = $avp(C_wan_port_tls_gs);
        }
        else
            $avp(C_wan_port_gs) = $avp(C_wan_port_udp_gs);
    }

    xlog("L_INFO", "CI=$ci - R6.2 - setting avp(C_wan_port_gs)=$avp(C_wan_port_gs), avp(C_core_port_gi)=$avp(C_core_port_gi)\n");


    #for SSM we need to update this
    xlog("L_INFO", "CI=$ci - R6.1 - var(C_ep1_core_port_gi)=$var(C_ep1_core_port_gi) , avp(C_ssp_ppi_user_gs)=$avp(C_ssp_ppi_user_gs)\n");

    if (is_present_hf("P-Preferred-Identity") && $avp(C_ssp_hDn_ppi_gb)  != 1 && !not_empty("$avp(C_ssp_ppi_user_gs)"))
            $avp(C_ssp_ppi_user_gs) = $pU; # Username of P-Preferred Identity header
    if (is_present_hf("P-Asserted-Identity") && $avp(C_ssp_hDn_pai_gb)  != 1 && !not_empty("$avp(C_ssp_pai_user_gs)"))
            $avp(C_ssp_pai_user_gs) = $(ai{uri.user}); # Username of P-Asserted identity header
    if (is_present_hf("Diversion"))
            $avp(C_ssp_div_user_gs) = $(hdr(Diversion)[0]{nameaddr.uri}{uri.user}); # Username of diversion header
    $var(S_rU_gs)       = $rU;
    $var(S_man_sip_gb)  = 1;
    $var(S_man_type_gi) = 1;    # SIP to PSTN

    if ($avp(C_ssp_type_gi) == 10)
        $avp(C_ssp_div_user_gs) = $avp(C_ssp_business_id_dn_gs);

    if(isflagset(5) && $avp(C_gw_type_gi)==5)
       route(SIP_MANIPULATION_ROUTE);                   ##sip manipulations
    $var(S_rU_gs) =$rU;

    if($rU != $null && $rU != "")
       $var(S_rU_gs) = $var(S_rU_gs) + "@";
    else
       $var(S_rU_gs) = "";

    ## now we need to consider access_restriction:
    ## if ep found, and access restrictions=1 ---> 403 (this was already covered in R3)
    ## if remote sub found but access restrictions=2 --> 403

    if(isflagset(11) &&  $avp(S_access_restriction_gi) == 1) # 0 and 2 are valid
    {
        ## reject with a 403 (forbidden) response
        append_to_reply("Warning: 399  - R6 - signalling restrictions access_restriction=$avp(S_access_restriction_gi).\r\n");
        sl_send_reply("403", "Forbidden");
        xlog("L_INFO", "CI=$ci, Source IP=$si - R6 - signalling restrictions access_restriction=$avp(S_access_restriction_gi).\. exit\n");
        t_release();

        if (is_gflag("6"))
        {
            xlog("L_INFO", "bench: $rm-$rs\n");
            bm_log_timer("route-6");
        }
        exit;
    }


    xlog("L_INFO", "CI=$ci - R6  - var(S_ep1_S_uri_based_route_gb)=$var(S_ep1_S_uri_based_route_gb),var(S_ep2_S_uri_based_route_gb)=$var(S_ep2_S_uri_based_route_gb)\n");
    if($var(S_ruri_changed_lb)==0 && $avp(S_uri_based_route_gb) != 1 && ($var(S_NG911Call_gb) == 0 ) && ($var(S_NG911_notification_gb) == 0 ))
    {
          # Not a registered subscriber (direct or indirect)
          # and NOT a uri_based_routing ep and Not NG911 call

          if($avp(C_gw_behind_ep_gi) == 1)
             $var(S_sip_transp_gs) = $var(C_ep2_transp_gs);
          else
             $var(S_sip_transp_gs) = $var(C_ep1_transp_gs);

          # Set the RURI based on the Route 0 from OSV if available (set based on the response)
          if($var(S_ssp_ip_addr_r0_gs) != "" ) # Not a registered subscrtiber based on var(S_ruri_changed_lb)
          {
              $var(S_ruri_tmp_ls) = "sip"+":"+$var(S_rU_gs)+$var(S_ssp_ip_addr_r0_gs); ## TODO: ideally rU and sip type should be preserved from the response as well.

              if ($var(S_ssp_ip_port_r0_gs) != "")
                  $var(S_ruri_tmp_ls) = $var(S_ruri_tmp_ls) + ":" + $var(S_ssp_ip_port_r0_gs);

              if ($var(S_ssp_ip_tran_r0_gs) != "")
                 $var(S_ruri_tmp_ls) = $var(S_ruri_tmp_ls) + ";transport=" + $var(S_ssp_ip_tran_r0_gs);

              xlog("L_INFO", "CI=$ci - R6  - ruri using gwIP, var(S_ruri_tmp_ls)=$var(S_ruri_tmp_ls) \n");
          }
          else
          {
              if ($var(C_ssp_tls_sips_scheme_gb)==1 && $var(S_sip_transp_gs) == "tls" && $avp(C_ssp_type_gi) != 7 &&  $avp(C_ssp_type_gi) != 10)
                 $var(S_sip_suffix_gs) = "s";
              else
                 $var(S_sip_suffix_gs) = "";

              $var(S_isFqdn_ls) = $rd;
              if(!PROC_IS_PURE_IP)
                 $var(S_ru_is_fqdn_gb) = 1;
              else
                 $var(S_ru_is_fqdn_gb) = 0;

              $var(S_use_port_ls) = "";
              $var(S_use_ip_ls) = "";
              $var(S_set_port_allowed_lb) = 1;

              if($avp(C_ssp_use_sip_service_address_gs) =='y' && not_empty("$avp(C_ssp_service_addr_gs)"))
              {
                  $var(S_use_ip_ls) = $avp(C_ssp_service_addr_gs);
                  $var(S_set_port_allowed_lb) = 0;
                  xlog("L_INFO", "CI=$ci - R6  - ruri avp(C_ssp_service_addr_gs)=$avp(C_ssp_service_addr_gs) \n");
              }

              if($avp(C_gw_behind_ep_gi) == 1 || $var(S_ru_is_fqdn_gb) == 1) # FQDN
              {
                 if($var(S_use_ip_ls) == "")
                 {
                     $var(S_use_ip_ls) = $avp(S_gw_orig_uri_gs);
                     xlog("L_INFO", "CI=$ci - R6  - ruri avp(S_gw_orig_uri_gs)=$avp(S_gw_orig_uri_gs) \n");
                 }
              }
              else
              {
                 if($var(S_use_ip_ls) == "")
                 {
                     $var(S_use_ip_ls) = $var(C_ep1_rm_ip_gs);
                     xlog("L_INFO", "CI=$ci - R6  - ruri var(C_ep1_rm_ip_gs)=$var(C_ep1_rm_ip_gs) \n");
                 }
              }
              $var(S_update_port_lb) = 0;
              if ($var(S_standalone_server_gi))
              {
                  $var(S_original_ru_port_ls) = "" + $(ru{uri.port}); # Do not use $rp since it is set even if not available
                  if (not_empty("$var(S_original_ru_port_ls)"))
                      $var(S_update_port_lb) = 1;
              }

              if ($var(S_set_port_allowed_lb) == 1)
              {
                  if($avp(C_gw_behind_ep_gi) == 1)
                  {
                     if($var(C_ep2_rm_port_gi) != 0 && ($var(S_ep2_rm_address_type_gi) != 1 || $var(S_update_port_lb)))
                        $var(S_use_port_ls) = ":"+$var(C_ep2_rm_port_gi);
                  }
                  else {
                     if($var(C_ep1_rm_port_gi) != 0 && ($var(S_ep1_rm_address_type_gi) != 1 || $var(S_update_port_lb)))
                        $var(S_use_port_ls) = ":"+$var(C_ep1_rm_port_gi);
                  }
              }
              put_ip_in_paran('$var(S_use_ip_ls)', '$var(S_use_ip_ls)');
              $var(S_ruri_tmp_ls) = "sip"+$var(S_sip_suffix_gs)+":"+$var(S_rU_gs)+$var(S_use_ip_ls)+$var(S_use_port_ls);

              xlog("L_INFO", "CI=$ci - R6  - ruri var(S_ruri_tmp_ls)=$var(S_ruri_tmp_ls), var(S_sip_transp_gs)=$var(S_sip_transp_gs) var(C_ssp_sip_o_tls_set_gb)=$var(C_ssp_sip_o_tls_set_gb)\n");

              if(not_empty("$var(S_sip_transp_gs)") && ($var(C_ssp_sip_o_tls_set_gb) == 0 || $(var(S_sip_transp_gs){s.tolower}) != "tls"))
              {
                   $var(S_ruri_tmp_ls) = $var(S_ruri_tmp_ls) + ";transport="+$var(S_sip_transp_gs);
              }
          }
          #this change is applied only for the initial Invite
          $ru = $var(S_ruri_tmp_ls);
          if ($avp(C_ssp_pt_params_list_gs) != $null)
              osb_set_passthrough_params("$ou","$ru","$avp(C_ssp_pt_params_list_gs)");
          xlog("L_INFO", "CI=$ci - R6.2  - R-URI replaced to $ru,avp(C_pmap_port_gi)=$avp(C_pmap_port_gi),var(S_ruri_tmp_ls)=$var(S_ruri_tmp_ls),var(S_rU_gs)=$var(S_rU_gs),var(S_sip_suffix_gs)=$var(S_sip_suffix_gs) \n");

          $var(S_ruri_changed_lb)=1;
    }

    ### this used to be done in FIND_OSV_BINDING_ROUTE moved from there
    if(not_empty("$avp(C_fw_ext_ip_gs)"))
        $avp(C_advertised_ip_gs) = $avp(C_fw_ext_ip_gs);
    else if(not_empty("$avp(S_lb_ext_ip_gs)"))
        $avp(C_advertised_ip_gs) = $avp(S_lb_ext_ip_gs);
    else if(not_empty("$avp(C_fwd_ep_ip_gs)"))
    {
        $avp(C_advertised_ip_gs) = $avp(C_fwd_ep_ip_gs);
        $avp(S_fwd_ep_used_gb) = 1;
    }
    else
        $avp(C_advertised_ip_gs) = $avp(C_wan_ip_gs);


    xlog("L_INFO", "CI=$ci - R6  - avp(C_advertised_ip_gs)=$avp(C_advertised_ip_gs),avp(S_gw_rm_ip_gs)=$avp(S_gw_rm_ip_gs),rm_port=$avp(S_gw_rm_port_gi),gw_type=$avp(C_gw_type_gi),avp(C_core_port_gi)=$avp(C_core_port_gi),core_port=$avp(C_gw_core_port_gi),core_ip=$avp(C_gw_core_ip_gs), transp=$avp(C_gw_transp_gs),avp(S_is_fqdn_gs)=$avp(S_is_fqdn_gs)\n");

    if (is_gflag("6"))
    {
        xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
        bm_log_timer("route-6");
    }
}

########################################################################
#SSP_PROFILE_DB_ROUTE: Service provider Database
########################################################################
route[SSP_PROFILE_DB_ROUTE]
{

    xlog("L_INFO", "CI=$ci - R8 - Entry Profile: $avp(C_ssp_gw_profile_gs) rd=$rd, Ct=$ct - is_fssp=$var(S_is_fssp_gb) - is_tssp=$var(S_is_tssp_gb) - flags=$mF - db_load_only=$var(S_ssp_db_load_only_gb)\n");
    if (is_gflag("6"))
       bm_start_timer("route-8");

    $(avp(C_ssp_name_gs)[*])                     = $null;
    $(avp(C_ssp_reg_status_gs)[*])               = $null;
    $(avp(C_ssp_default_home_dn_gs)[*])          = $null;
    $(avp(C_ssp_fqdn_toh_gs)[*])                 = $null;
    $(avp(C_ssp_fqdn_ruri_gs)[*])                = $null;
    $(avp(C_ssp_service_addr_gs)[*])             = $null;
    $(avp(C_ssp_use_sip_service_address_gs)[*])  = $null;
    $(avp(C_ssp_business_id_dn_gs)[*])           = $null;
    $(avp(C_ssp_business_id_dn_req_gs)[*])       = $null;
    $(avp(C_ssp_insert_anonymous_cid_gs)[*])     = $null;
    $(avp(C_ssp_use_to_dn_gs)[*])                = $null;
    $(avp(C_ssp_flags_gi)[*])                    = $null;
    $(avp(C_ssp_type_gi)[*])                     = $null;
    $(avp(C_ssp_privacy_override_gi)[*])         = 0;
    $(avp(C_ssp_div_user_gs)[*])                 = $null;
    $(avp(C_ssp_ppi_user_gs)[*])                 = $null;
    $(avp(C_ssp_pai_user_gs)[*])                 = $null;
    $(avp(C_ssp_da_supported_gs)[*])             = 'n';
    $(avp(C_ssp_cpdn_from_ssp_gi)[*])            = 0;


    # perform full query
    if(isflagset(1))
        osb_memdb_nl_select("sip_svc_providers,*|$avp(C_ssp_gw_profile_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1",
                            "|$avp(C_ssp_name_gs)|$avp(C_ssp_reg_status_gs)||||||||||$avp(C_ssp_fqdn_toh_gs)|$avp(C_ssp_fqdn_ruri_gs)|||$avp(C_ssp_default_home_dn_gs)|||$avp(C_ssp_service_addr_gs)|$avp(C_ssp_use_sip_service_address_gs)|$avp(C_ssp_business_id_dn_gs)|$avp(C_ssp_business_id_dn_req_gs)|$avp(C_ssp_insert_anonymous_cid_gs)|$avp(C_ssp_use_to_dn_gs)|$avp(C_ssp_flags_gi)|$avp(C_ssp_type_gi)|$avp(C_ssp_ua_to_gi)|$avp(C_ssp_ua_gs)|");
    else
        osb_memdb_nl_select("sip_svc_providers,*|$avp(C_ssp_gw_profile_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1",
                            "|$avp(C_ssp_name_gs)|$avp(C_ssp_reg_status_gs)||||||||||||||$avp(C_ssp_default_home_dn_gs)|||$avp(C_ssp_service_addr_gs)|$avp(C_ssp_use_sip_service_address_gs)|$avp(C_ssp_business_id_dn_gs)|$avp(C_ssp_business_id_dn_req_gs)|$avp(C_ssp_insert_anonymous_cid_gs)|$avp(C_ssp_use_to_dn_gs)|$avp(C_ssp_flags_gi)|$avp(C_ssp_type_gi)|$avp(C_ssp_ua_to_gi)|$avp(C_ssp_ua_gs)|$avp(C_ssp_cpdn_from_ssp_gi)");

    osb_memdb_nl_select("ssp_passthrough_params,*|$avp(C_ssp_name_gs)|*,1","||$avp(C_ssp_pt_params_list_gs)");

    $var(C_ssp_flags_gi) = $(avp(C_ssp_flags_gi)[0]{s.int});
    $(avp(C_ssp_flags_gi)[*]) = $null;
    $avp(C_ssp_flags_gi) = $var(C_ssp_flags_gi);

    ## *** ATTETION!!! Following items are associated with the Remote Endpoint ********************************************

    ## --- Home DN --------------------------------
    if (!isflagset(1))
        $(avp(C_ssp_default_home_dn_gs)[*]) = $null;
    else
    {
        $avp(C_ssp_default_home_dn_gs) = $avp(S_rep_home_dn_gs);
        xlog("L_INFO", "CI=$ci - R8 - Setting default Home DN avp(C_ssp_default_home_dn_gs) = avp(S_rep_home_dn_gs) = $avp(S_rep_home_dn_gs)\n");
    }

    if($(avp(S_rep_digest_realm_gs){s.len}) && $(avp(S_rep_digest_user_gs){s.len}) && $(avp(S_rep_digest_psw_gs){s.len}))
    {
       $avp(C_ssp_da_supported_gs) = 'y';

       #Save Digest info in hash table
       $sht(dlg-info=>$ci-$ft::ssp-da)       = $avp(C_ssp_da_supported_gs);
       $sht(dlg-info=>$ci-$ft::ssp-da-realm) = $avp(S_rep_digest_realm_gs);
       $sht(dlg-info=>$ci-$ft::ssp-da-user)  = $avp(S_rep_digest_user_gs);
       $sht(dlg-info=>$ci-$ft::ssp-da-psw)   = $(avp(S_rep_digest_psw_gs){s.encode.base64});

       xlog("L_INFO", "CI=$ci - R8 - Digest supported: $avp(C_ssp_da_supported_gs) \n");
    }

    $(avp(C_ssp_flags_gi)[*]) = $(avp(C_ssp_flags_gi){s.int}); # convert string to integer.


    # Parsing SSP Flags (bitmap)
    # Bits 4-7 and 9-10 are used in SSM


    # Preserve To and From headers per RFC2543
    if(avp_check("$avp(C_ssp_flags_gi)","and/i:2/g"))
       $var(C_ssp_rfc2543_gb)             = 1;
    if(avp_check("$avp(C_ssp_flags_gi)","and/i:4/g"))
       $var(C_ssp_HomeDN_in_ct_gb)       = 1;

    if(avp_check("$avp(C_ssp_flags_gi)","and/i:512/g"))
       $var(C_ssp_HomeDN_in_pai_gb)    = 1;
    if(avp_check("$avp(C_ssp_flags_gi)","and/i:1024/g"))
       $var(C_ssp_HomeDN_in_ppi_gb)    = 1;

    ## -- TLS Signaling  ------------------------------------
    if(avp_check("$avp(C_ssp_flags_gi)","and/i:2048/g"))
       $var(C_ssp_trans_eq_tls_gb)        = 1;
    else if(avp_check("$avp(C_ssp_flags_gi)","and/i:4096/g"))
       $var(C_ssp_tls_sips_scheme_gb)     = 1;
    else if(avp_check("$avp(C_ssp_flags_gi)","and/i:8192/g"))
       $var(C_ssp_tls_config_gb)          = 1;
    else
        $var(C_ssp_tls_pass_thru_gb)      = 1;
    ## -----------------------------------------------------

    if(avp_check("$avp(C_ssp_flags_gi)","and/i:16384/g"))
       $var(C_ssp_use_tel_gb)             = 1;
    if(avp_check("$avp(C_ssp_flags_gi)","and/i:32768/g"))
       $var(C_ssp_user_eq_phone_gb)       = 1;
    if(avp_check("$avp(C_ssp_flags_gi)","and/i:65536/g"))
       $var(C_ssp_reg_mode_gb)            = 1;
    if(avp_check("$avp(C_ssp_flags_gi)","and/i:131072/g"))
       $var(C_ssp_tr118_gb)               = 1;
    if(avp_check("$avp(C_ssp_flags_gi)","and/i:524288/g"))
       $var(C_ssp_disable_silence_sup_gb) = 1;
    if( avp_check("$avp(C_ssp_flags_gi)","and/i:1048576/g") )
        $avp(C_ssp_privacy_override_gi)   = 1;
    if(avp_check("$avp(C_ssp_flags_gi)","and/i:2097152/g"))
       $var(C_ssp_dis_FQDN_passthrough_from_gb) = 1;

    ## -- User Agent configuration -------------------------

    if($avp(C_ssp_ua_to_gi) > 0)
        $var(C_ssp_add_ua_gb) = 1;

    if($avp(C_ssp_ua_to_gi) == 2)
        $var(C_ssp_subst_ua_gb) = 1;

    ## -----------------------------------------------------

    ### Print SSP Profile
    $var(S_ssp_profile_data_ls) =  "SSP Profile Data =================================== \n" +
                                   "Profile: " + $avp(C_ssp_gw_profile_gs) + "\n" +
                                   "Name: " + $avp(C_ssp_name_gs) + "\n" +
                                   "Reg Status: " + $avp(C_ssp_reg_status_gs) + "\n" +
                                   "Default Home DN: " + $avp(C_ssp_default_home_dn_gs) + "\n" +
                                   "Send FQDN - To Hdr: " + $avp(C_ssp_fqdn_toh_gs) + " R-URI Hdr: " + $avp(C_ssp_fqdn_ruri_gs) + "\n" +
                                   "Disable FQDN Pass-through in From header: " + $var(C_ssp_dis_FQDN_passthrough_from_gb) + "\n" +
                                   "Serv Addr - Req: " + $avp(C_ssp_use_sip_service_address_gs) + "Addr: " + $avp(C_ssp_service_addr_gs) + "\n" +
                                   "Business Id - Req: " + $avp(C_ssp_business_id_dn_req_gs) + "Id: " + $avp(C_ssp_business_id_dn_gs) + "\n" +
                                   "Insert Anonymous cid: " + $avp(C_ssp_insert_anonymous_cid_gs) + "\n" +
                                   "AddUA: " + $var(C_ssp_add_ua_gb) + " ReplaceUA: " + $var(C_ssp_subst_ua_gb) + " UA: " + $avp(C_ssp_ua_gs) + "\n" +
                                   "Calling Identity from ssp: " + $avp(C_ssp_cpdn_from_ssp_gi) + "\n" +
                                   "Use To DN in R-URI: " + $avp(C_ssp_use_to_dn_gs) + "\n" +
                                   "Type: " + $avp(C_ssp_type_gi) + "\n" +
                                   "Flags: " + $avp(C_ssp_flags_gi) + "\n" +
                                   "Send Home DN in Contact: " + $var(C_ssp_HomeDN_in_ct_gb) + "\n" +
                                   "Preserve From/To per RFC2543: " + $var(C_ssp_rfc2543_gb) + "\n" +
                                   "Send Home DN in PAI: " + $var(C_ssp_HomeDN_in_pai_gb) + "\n" +
                                   "Send Home DN in PPI: " + $var(C_ssp_HomeDN_in_ppi_gb) + "\n" +
                                   "Remove Silence Suppression parameter from SDP: " + $var(B_ssp_disable_silence_sup_gb) + "\n" +
                                   "TLS Signaling - Transport=tls: " + $var(C_ssp_trans_eq_tls_gb) + " SIPS Scheme: " + $var(C_ssp_tls_sips_scheme_gb) + " EndPoint Config: " + $var(C_ssp_tls_config_gb) + " Pass-Thru: " + $var(C_ssp_tls_pass_thru_gb) + "\n" +
                                   "Use tel URI: " + $var(C_ssp_use_tel_gb) + "\n" +
                                   "Send user=phone: " + $var(C_ssp_user_eq_phone_gb) + "\n" +
                                   "Reg Mode: " + $var(C_ssp_reg_mode_gb) + "\n" +
                                   "TR118: " + $var(C_ssp_tr118_gb) + "\n" +
                                   "Passthrough Param List: " + $avp(C_ssp_pt_params_list_gs) + "\n" +
                                   "End of SSP Profile Data ============================== \n" ;

    xlog("L_INFO", "CI=$ci - R8 - $var(S_ssp_profile_data_ls)");


    if (is_gflag("6"))
    {
        xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
        bm_log_timer("route-8");
    }
}

########################################################################
# route STANDALONE_TRUNK_ROUTE: Hosted mode with GTC (mixed mode?)
########################################################################
route[STANDALONE_TRUNK_ROUTE]
{

    if($avp(S_linked_ep_id_gi) == $null || $avp(S_linked_ep_id_gi) == 0 || $var(S_standalone_server_gi) == 0)
       return;

    if (is_gflag("6"))
       bm_start_timer("route-43");
    xlog("L_INFO", "CI=$ci - R43 - Entry M=$rm rp=$rp Rp=$Rp flags=$mF CT=$ct to=$to,avp(C_gw_transp_gs)=$avp(C_gw_transp_gs),avp(C_ssp_flags_gi)=$avp(C_ssp_flags_gi),linked_ep=$avp(S_linked_ep_id_gi) gw_type=$avp(C_gw_type_gi)\n");

    t_set_auto_inv_100(1); # turn on automatic 100 replies for INVITE transaction

    if(is_method("REFER"))
       sl_send_reply("100","Trying");

    $var(S_mediaserver_call_gi) = 0;
    if ($var(S_2nd_ep_found_lb) == 1) # 2nd EP found from received message
        $var(S_gw_type_li) = $var(C_ep2_type_gi);
    else
        $var(S_gw_type_li) = $avp(C_gw_type_gi);

    xlog("L_INFO", "CI=$ci - R43 - var(S_network_interface_media_src_gi)=$var(S_network_interface_media_src_gi),avp(S_network_interface_src_gs)=$avp(S_network_interface_src_gs)\n");
    #prepare the variables for SSM
    $var(S_ep1_id_gi)                   = $avp(S_gw_id_gi);
    $var(C_ep1_rm_ip_gs)                = $avp(S_gw_rm_ip_gs);
    $var(C_ep1_rm_fqdn_gs)              = $avp(S_gw_rm_fqdn_gs);
    $var(C_ep1_rm_port_gi)              = $avp(S_gw_rm_port_gi);
    $var(C_ep1_nat_port_gs)             = $avp(C_pmap_port_gi);
    $var(S_ep1_rm_ip_list_gs)           = $avp(S_gw_rm_ip_list_gs);
    $var(S_ep1_nat_ip_gs)               = $avp(S_tmp_gs);
    put_ip_in_paran('$var(S_ep1_nat_ip_gs)', '$var(S_ep1_nat_ip_gs)');
    $avp(S_nat_ip_gs)                   = $var(S_ep1_nat_ip_gs);
    xlog("L_INFO", "CI=$ci - R43 -  avp(S_nat_ip_gs)=$avp(S_nat_ip_gs) After putting brackets ep var(S_ep1_nat_ip_gs)=$var(S_ep1_nat_ip_gs)\n");
    $var(C_ep1_transp_gs)               = $avp(C_gw_transp_gs);
    $var(C_ep1_bitmap_gi)               = $avp(S_rep_bitmap_gi);
    $var(C_ep1_type_gi)                 = $avp(C_gw_type_gi);
    $var(S_ep1_profile_gs)              = $avp(C_ssp_gw_profile_gs);
    $var(S_ep1_rep_home_dn_gs)          = $avp(S_rep_home_dn_gs);
    $var(C_ep1_core_ip_gs)              = $avp(C_gw_core_ip_gs);
    $var(C_ep1_core_fqdn_gs)            = $avp(S_gw_core_fqdn_gs);
    $var(C_ep1_core_port_gi)            = $avp(C_gw_core_port_gi);
    $var(S_ep1_rm_address_type_gi)      = $avp(C_rm_address_type_gi);
    $var(S_ep1_logical_id_gs)           = $avp(S_rm_logical_id_gs);
    if($avp(S_rm_media_ip_gs) != $null && $avp(S_rm_media_ip_gs) != '')
        $var(S_ep1_rm_media_ip_gs)      = $avp(S_rm_media_ip_gs);
    else
        $var(S_ep1_rm_media_ip_gs)      = $avp(S_gw_rm_ip_gs);
    $var(S_ep1_media_subnet_mask_gs)    = $avp(S_rm_media_subnet_mask_gs);
    $var(S_ep1_access_realm_profile_gs) = $avp(S_access_realm_profile_gs);
    $var(S_ep1_core_realm_profile_gs)   = $avp(S_core_realm_profile_gs);

    if (not_empty("$avp(S_fwd_nw_id_gs)"))
    {
        $(avp(C_fwd_ip_ls)[*]) = $null;
        #--- Check forward network ID access side
        if osb_memdb_nl_select("network_id,*|$avp(S_fwd_nw_id_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1",
            "||||||$avp(C_fwd_ip_ls)|$avp(C_fwd_port_tcp_ls)|$avp(C_fwd_port_tls_ls)|$avp(C_fwd_port_udp_ls)||||||||||");
        if (not_empty("$avp(C_fwd_ip_ls)"))
        {
             if ($proto == "tcp")
                 $var(S_fwd_port_li) = $avp(C_fwd_port_tcp_ls);
             else if ($proto == "tls")
                 $var(S_fwd_port_li) = $avp(C_fwd_port_tls_ls);
             else
                 $var(S_fwd_port_li) = $avp(C_fwd_port_udp_ls);

             $avp(S_recv_adv_socket_gs) = $proto + ";" + $avp(C_fwd_ip_ls) + ";" + $var(S_fwd_port_li);
             xlog("L_INFO", "CI=$ci - R43 - Set received advertise socket based on FWD realm: $avp(S_recv_adv_socket_gs)\n");
        }
    }

    if (not_empty("$avp(S_ep_name_gs)") && ($avp(C_gw_type_gi) == 5 || $var(C_ep2_type_gi) == 5 || ($avp(C_gw_type_gi) == 4 && $avp(C_ssp_gw_profile_gs) == "Outbound Proxy"))) # SSP or outbound proxy
        $var(S_src_epname_gs) = $avp(S_ep_name_gs);

    if(is_present_hf("Via") && ($var(S_wan_natted_gb) || $sel(v[1].port) != $sp))
    {
        $var(S_via_pre_params_len_li) = $(hdr(via)[0]{s.select,0,;}{s.len}); # shift first part before params
        if ($(hdr(via)[0]{s.substr,$var(S_via_pre_params_len_li),0}{param.exist,rport}))
             xlog("L_INFO", "CI=$ci - R43 - rport received - don't force it\n");
        else
            force_rport(); # Assure that responses will be sent to source IP and port instead of VIA address for NAT or FWD VLAN
    }

    if ($var(C_ep1_type_gi) == 5)
    {
        # Clear SSP profile variables from src side
        $var(S_ssp_ip_addr_r0_gs)                    = "";
        $var(C_ssp_sip_no_suffix_gb)                 = 0;
        $(avp(C_ssp_name_gs)[*])                     = $null;
        $(avp(C_ssp_reg_status_gs)[*])               = $null;
        $(avp(C_ssp_default_home_dn_gs)[*])          = $null;
        $(avp(C_ssp_fqdn_toh_gs)[*])                 = $null;
        $(avp(C_ssp_fqdn_ruri_gs)[*])                = $null;
        $(avp(C_ssp_service_addr_gs)[*])             = $null;
        $(avp(C_ssp_use_sip_service_address_gs)[*])  = $null;
        $(avp(C_ssp_business_id_dn_gs)[*])           = $null;
        $(avp(C_ssp_business_id_dn_req_gs)[*])       = $null;
        $(avp(C_ssp_insert_anonymous_cid_gs)[*])     = $null;
        $(avp(C_ssp_use_to_dn_gs)[*])                = $null;
        $(avp(C_ssp_flags_gi)[*])                    = $null;
        $(avp(C_ssp_type_gi)[*])                     = $null;
        $(avp(C_ssp_privacy_override_gi)[*])         = 0;
        $(avp(C_ssp_div_user_gs)[*])                 = $null;
        $(avp(C_ssp_ppi_user_gs)[*])                 = $null;
        $(avp(C_ssp_pai_user_gs)[*])                 = $null;
        $(avp(C_ssp_da_supported_gs)[*])             = 'n';
        $(avp(C_ssp_cpdn_from_ssp_gi)[*])            = 0;

        $(avp(S_rep_digest_realm_gs)[*])             = $null;
        $(avp(S_rep_digest_user_gs)[*])              = $null;
        $(avp(S_rep_digest_psw_gs)[*])               = $null;

        # Clear all profile variables for new destination
        $var(C_ssp_tls_sips_scheme_gb)      = 0;
        $var(C_ssp_tls_config_gb)           = 0;
        $var(C_ssp_sip_o_tls_set_gb)        = 0;
        $var(C_ssp_is_tls_gb)               = 0;
        $var(C_ssp_tls_signalling_gb)       = 0;
        $var(C_ssp_sip_no_suffix_gb)        = 1;
        $var(C_ssp_tls_pass_thru_gb)        = 0;
        $var(C_ssp_trans_eq_tls_gb)         = 0;
        $var(C_ssp_use_tel_gb)              = 0;
        $var(C_ssp_user_eq_phone_gb)        = 0;
        $var(C_ssp_reg_mode_gb)             = 0;
        $var(C_ssp_tr118_gb)                = 0;
        $var(C_ssp_disable_silence_sup_gb)  = 0;
        $var(C_ssp_dis_FQDN_passthrough_from_gb) = 0;
        $var(S_ssp_fwd_port_gs)             = "";
        $var(C_ssp_add_ua_gb)               = 0;
        $var(C_ssp_subst_ua_gb)             = 0;
        $var(C_ssp_rfc2543_gb)              = 0;
        $var(C_ssp_HomeDN_in_ct_gb)         = 0;
        $var(C_ssp_HomeDN_in_pai_gb)        = 0;
        $var(C_ssp_HomeDN_in_ppi_gb)        = 0;
    }

    if ($(avp(C_gw_transp_gs){s.tolower}) == "tcp")
        $var(C_ep1_wan_port_gi) = $avp(C_wan_port_tcp_gs);
    else if ($(avp(C_gw_transp_gs){s.tolower}) == "tls")
    {
        xlog("L_INFO", "CI=$ci - R43 - Port for TLS avp(C_port_mtls_gs)=$avp(C_port_mtls_gs) avp(C_wan_port_tls_gs)=$avp(C_wan_port_tls_gs) avp(S_rep_bitmap_gi)=$avp(S_rep_bitmap_gi)\n");
        $avp(S_rep_bitmap_li) = $(avp(S_rep_bitmap_gi){s.int});
        if ($avp(C_port_mtls_gs) != 0 && avp_check("$avp(S_rep_bitmap_li)","and/i:4/g")) # Check mtls
            $var(C_ep1_wan_port_gi) = $avp(C_port_mtls_gs);
        else
            $var(C_ep1_wan_port_gi) = $avp(C_wan_port_tls_gs);
    }
    else
        $var(C_ep1_wan_port_gi) = $avp(C_wan_port_udp_gs);

    if ($Ri != $var(S_local_ip_gs) && $avp(S_recv_adv_socket_gs) == $null)
    {
        $avp(S_recv_adv_socket_gs) = $proto + ";" + $avp(C_advertised_ip_gs) + ";" + $var(C_ep1_wan_port_gi);
        xlog("L_INFO", "CI=$ci - R43 - Received advertise socket : $avp(S_recv_adv_socket_gs)\n");
    }
    $var(S_ep_id_lookup_li)     = $avp(S_linked_ep_id_gi);
    $avp(S_linked_ep_id_gi)     = $null;
    $(avp(S_gw_rm_fqdn_gs)[*])  = $null;
    $(avp(S_gw_rm_ip_gs)[*])    = $null;
    $var(S_gtc_ssp_src_gs)      = $var(S_ep1_rm_media_ip_gs);
    $var(S_ssp_status_gs)       = $avp(S_trunk_status_gb);
    $(avp(S_rep_digest_psw_hash_gs)[*]) = $null;
    xlog("L_INFO", "CI=$ci - R43 - before dipping remote_ep, avp(S_test_dn_gs)=$avp(S_test_dn_gs),var(S_gtc_ssp_src_gs)=$var(S_gtc_ssp_src_gs),avp(S_gw_id_gi)=$avp(S_gw_id_gi) ru=$rU\n");
    if (osb_memdb_select("remote_ep,$var(S_ep_id_lookup_li)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","$avp(S_gw_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm_ip_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)|$avp(C_gw_core_ip_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|$avp(S_rep_home_dn_gs)||$avp(C_pmap_port_gi)|$avp(S_tmp_gs)|$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|$avp(S_sys_osv_node_gs)||$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||$avp(S_uri_based_route_gb)|$avp(S_access_control_gb)|$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||$avp(S_fwd_vlan_addr_port_gs)|$avp(S_rep_digest_realm_gs)|$avp(S_rep_digest_user_gs)|$avp(S_rep_digest_psw_hash_gs)|$avp(S_linked_ep_id_gi)") != 1)
    {
        xlog("L_INFO", "CI=$ci - R43 - Dip with  linked_ep=$var(S_ep_id_lookup_li) not found\n");
        append_to_reply("Warning: 399 $var(C_si_var_gs) - R43 - could not find linked ep using linked_ep=$var(S_ep_id_lookup_li)\r\n");
        sl_send_reply("403", "Forbidden");

        t_release();

        if (is_gflag("6"))
        {
            xlog("L_INFO", "bench: $rm-$rs\n");
            bm_log_timer("route-43");
        }
        return;
    }

    if ($avp(S_rep_digest_psw_hash_gs) != $null)
        $avp(S_rep_digest_psw_gs) = $(avp(S_rep_digest_psw_hash_gs){s.decode.base64});

    if ( (($var(S_gw_type_li) != 5) && ($avp(C_gw_type_gi) != 5)) ||
         (($var(S_gw_type_li) == 2) || ($avp(C_gw_type_gi) == 2)) ||
         (($var(S_gw_type_li) == 3) || ($avp(C_gw_type_gi) == 3)) ||
         (($var(S_gw_type_li) == 4) || ($avp(C_gw_type_gi) == 4)) ||
         (($var(S_gw_type_li) == 7) || ($avp(C_gw_type_gi) == 7)) )
    {
        xlog("L_INFO", "CI=$ci - R43 - Remote EP Type not valid for Route  linked_ep=$avp(S_linked_ep_id_gi) gw_types=$avp(C_gw_type_gi) and $var(S_gw_type_li)\n");
        if (is_gflag("6")) {
            xlog("L_INFO", "bench: $rm-$rs\n");
            bm_log_timer("route-43");
        }
        return;
    }

    ## du setting allows fqdn so use fqdn if present.
    if ($avp(S_gw_rm_fqdn_gs) != $null && $avp(S_gw_rm_fqdn_gs) != '')
        $avp(S_gw_rm_ip_gs) = $avp(S_gw_rm_fqdn_gs);

    $var(S_len_testdn_ls) = $(avp(S_test_dn_gs){s.len});
    $var(S_tmp_dn_ls)     = $tU;
    $var(S_len_tu_gs)     = $(var(S_tmp_dn_ls){s.len});
    $var(S_len_ls)        = $var(S_len_tu_gs) - $var(S_len_testdn_ls);
    $var(S_tmp_dn_ls)     = $(var(S_tmp_dn_ls){s.strip,$var(S_len_ls)});

    if ($avp(S_gw_is_natted_gs) == 1)
    {
        $var(S_dest_nat_ip_gs) = $avp(S_tmp_gs);
        $var(S_dest_nat_port_gs) = $avp(C_pmap_port_gi);
    }


    xlog("L_INFO", "CI=$ci - R43 - this is rU=$rU, tU=$tU,var(S_len_testdn_ls)=$var(S_len_testdn_ls),var(S_len_tu_gs)=$var(S_len_tu_gs),var(S_len_ls)=$var(S_len_ls),var(S_tmp_dn_ls)=$var(S_tmp_dn_ls), avp(S_test_dn_gs)=$avp(S_test_dn_gs)\n");
    $avp(C_tmp2_gs) = $null;
    $var(S_gtc_status_gs) = $avp(S_trunk_status_gb);
    if($avp(S_test_dn_gs) != "" && $var(S_tmp_dn_ls) == $avp(S_test_dn_gs))
    {
        $var(C_ep_type_lookup_li) = 1;
        $avp(C_tmp2_gs) = "MEDIASERVER";
        $var(S_mediaserver_call_gi) = 1;
        xlog("L_INFO", "CI=$ci - R43 - this is test DN related call, send to MS\n");
        xlog("L_INFO", "CI=$ci - R43 - dip remote_ep with *|$avp(C_tmp2_gs)|*|$var(C_ep_type_lookup_li)|*...*\n");
        if (osb_memdb_select("remote_ep,*|$avp(C_tmp2_gs)|*|$var(C_ep_type_lookup_li)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","$avp(S_gw_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm_ip_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)|$avp(C_gw_core_ip_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|$avp(S_rep_home_dn_gs)||$avp(C_pmap_port_gi)|$avp(S_tmp_gs)|$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|$avp(S_sys_osv_node_gs)||$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||$avp(S_uri_based_route_gb)|$avp(S_access_control_gb)|$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||$avp(S_fwd_vlan_addr_port_gs)||||$avp(S_linked_ep_id_gi)") != 1)
        {
            append_to_reply("Warning: 399 $var(C_si_var_gs) - R43 - could not find Ms using dip *|*|*|$var(C_ep_type_lookup_li)|*...* \r\n");
            sl_send_reply("403", "Forbidden");

            t_release();

            if (is_gflag("6"))
            {
                xlog("L_INFO", "bench: $rm-$rs\n");
                bm_log_timer("route-43");
            }
            return;
        }

        xlog("L_INFO", "CI=$ci - R43 - SSP Status: $var(S_ssp_status_gs), GTC Trunk Status: $var(S_gtc_status_gs)\n");
        if($var(S_gtc_status_gs) == 1 && $var(S_ssp_status_gs) == 1)
        {
                $rU = TC_MS_ACC_CONN_AVAILABLE;
        }
        else
        {
                $rU = TC_MS_ACC_CONN_OFFLINE;
        }

    }
    # set the standalone route variable.
    $var(S_standalone_route_gi)  = 1;
    setflag(5);
    xlog("L_INFO", "CI=$ci - R43 - Found Remote Ep $avp(S_gw_rm_ip_gs):$avp(S_gw_rm_port_gi);$avp(C_gw_transp_gs) with linked_ep=$avp(S_linked_ep_id_gi) S_associated_ep_id_gi=$avp(S_associated_ep_id_gi) gw_type=$var(C_ep_type_lookup_li) socket_port=$avp(S_socket_port_gi)\n");

    # Check outbound proxy associated
    if(not_empty("$avp(S_associated_ep_id_gi)") && $avp(S_associated_ep_id_gi) != 0)
    {
        if (osb_memdb_select("remote_ep,$avp(S_associated_ep_id_gi)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","$avp(S_outbnd_pxy_id_gi)|||||$avp(S_outbnd_pxy_ip_gs)|$avp(S_outbnd_pxy_fqdn_gs)|$avp(S_outbnd_pxy_port_gs)|$avp(C_outbnd_pxy_transp_gs)|||$avp(C_outbnd_pxy_core_port_gi)|||||||$avp(C_outbnd_pxy_address_type_gi)||||||||||||||||||||||||||||") == 1)
            xlog("L_INFO", "CI=$ci - R43 - Lookup remote_ep with proxy associated: id=$avp(S_outbnd_pxy_id_gi) ip=$avp(S_outbnd_pxy_ip_gs) fqdn=$avp(S_outbnd_pxy_fqdn_gs) port=$avp(S_outbnd_pxy_port_gs) transp=$avp(C_outbnd_pxy_transp_gs) core port=$avp(C_outbnd_pxy_core_port_gi) address type=$avp(C_outbnd_pxy_address_type_gi)\n");
    }

    if($avp(C_gw_type_gi)== 5 )
    {
        if($avp(C_gw_transp_gs) == "tls")
            $var(C_ssp_is_tls_gb) = 1;
        setflag(1);

        #need to deep into profile

        $var(C_ssp_gw_profile_gs) = $(avp(C_ssp_gw_profile_gs)[0]);
        route(SSP_PROFILE_DB_ROUTE);
        route(SSP_PROFILE_REQUESTS_ROUTE);
     }

    #######   now find destination related stuff
    ### dip into realm_profile table to read the signalling_nw_id using type = access
    xlog("L_INFO", "CI=$ci - R43 - dipping into realm_profile with avp(S_access_realm_profile_gs)=$avp(S_access_realm_profile_gs) \n");
    $var(S_profile_type_gi) = 1;  #1="signalling" and 0= "media"
    $(avp(S_realm_fwd_nw_id_gs)[*]) = $null;
    if(osb_memdb_nl_select("realm_profile,*|$avp(S_access_realm_profile_gs)|*|*|*|*,1","|||$avp(S_sig_nw_id_gs)|$avp(S_media_nw_id_gs)|$avp(S_realm_fwd_nw_id_gs)") != 1)
    {
        xlog("L_ERR", "CI=$ci - R43 - could not identify avp(S_access_realm_profile_gs) in realm_profile using avp(S_access_realm_profile_gs)=$avp(S_access_realm_profile_gs), var(S_profile_type_gi)=$var(S_profile_type_gi), \n");
        return;
    }
    # If the forward network ID is available get its IP and ports
    $(avp(C_fwd_ep_ip_gs)[*]) = $null;
    $(avp(C_fwd_ep_port_tcp_gs)[*]) = $null;
    $(avp(C_fwd_ep_port_tls_gs)[*]) = $null;
    $(avp(C_fwd_ep_port_mtls_gs)[*]) = $null;
    $(avp(C_fwd_ep_port_udp_gs)[*]) = $null;
    #--- Check forward network ID access side
    if (not_empty("$avp(S_realm_fwd_nw_id_gs)"))
        osb_memdb_nl_select("network_id,*|$avp(S_realm_fwd_nw_id_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|1,1",
                            "||||||$avp(C_fwd_ep_ip_gs)|$avp(C_fwd_ep_port_tcp_gs)|$avp(C_fwd_ep_port_tls_gs)|$avp(C_fwd_ep_port_udp_gs)||||||$avp(C_fwd_ep_port_mtls_gs)||||");

    xlog("L_INFO", "CI=$ci - R43 - after dip into realm_profile based on avp(S_access_realm_profile_gs)=$avp(S_access_realm_profile_gs),read avp(S_sig_nw_id_gs)=$avp(S_sig_nw_id_gs), avp(S_media_nw_id_gs)=$avp(S_media_nw_id_gs) \n");
    #### note: S_access_restriction_gi = 0    ep AND direct sub allowed           #############
    #### note: S_access_restriction_gi = 1    only ep allowed                     #############
    #### note: S_access_restriction_gi = 2    only direct sub allowed             #############

    xlog("L_INFO", "CI=$ci - R43 - dipping into network_id for destination signalling, with avp(S_sig_nw_id_gs)=$avp(S_sig_nw_id_gs) \n");
    $var(S_network_type_gi) = 1;  #1="access" and 0= "core"
    ## store wan_ip
    $var(S_tmp_wan_ip_ls) = $avp(C_wan_ip_gs);
    #--- Check signaling network ID access side
    if (osb_memdb_nl_select("network_id,*|$avp(S_sig_nw_id_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1",
            "|$avp(S_sig_nw_id_gs)||$avp(S_network_interface_dst_sig_gi)|||$avp(C_wan_ip_gs)|$avp(C_wan_port_tcp_gs)|$avp(C_wan_port_tls_gs)|$avp(C_wan_port_udp_gs)||$avp(C_fw_ext_ip_gs)|||$avp(S_access_restriction_gi)|$avp(C_port_mtls_gs)||||") != 1)
    {
        xlog("L_ERR", "CI=$ci - R43 - could not identify access network_id using avp(S_sig_nw_id_gs)=$avp(S_sig_nw_id_gs) and var(S_network_type_gi)=$var(S_network_type_gi) \n");
        append_to_reply("Warning: 399 $var(C_si_var_gs) - R43 - could not identify access network_id using avp(S_sig_nw_id_gs)=$avp(S_sig_nw_id_gs) and var(S_network_type_gi)=$var(S_network_type_gi)\r\n");
        sl_send_reply("403", "Forbidden");

        t_release();

        if (is_gflag("6"))
        {
            xlog("L_INFO", "bench: $rm-$rs\n");
            bm_log_timer("route-43");
        }
        exit;
    }
    $var(S_network_interface_dst_sig_gi) = $avp(S_network_interface_dst_sig_gi);
    xlog("L_INFO", "CI=$ci - R43 - did read avp(S_media_nw_id_gs)=$avp(S_media_nw_id_gs) from avp(S_access_realm_profile_gs)=$avp(S_access_realm_profile_gs) for Media\n");
    ### dip into network_id table to read the wanip using the S_media_nw_id_gs
    $var(S_network_type_gi) = 1;  #1="access" and 0= "core"
    xlog("L_INFO", "CI=$ci - R43 - dipping into network_id for media IP with avp(S_media_nw_id_gs)=$avp(S_media_nw_id_gs) \n");
    #--- Check media network ID access side
    if (osb_memdb_nl_select("network_id,*|$avp(S_media_nw_id_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1",
            "|||$avp(S_network_interface_dst_gs)|||$avp(C_wan_media_ip_gs)|$avp(C_wan_media_port_gs)|||||||||$avp(C_media_fw_ext_ip_gs)|$avp(S_media_wan_on_sdp_gs))||") != 1)
    {
        xlog("L_ERR", "CI=$ci - R43.1 - could not identify dest media network_id using avp(S_media_nw_id_gs)=$avp(S_media_nw_id_gs)  \n");
        append_to_reply("Warning: 399 $var(C_si_var_gs) - R3 - could not identify dest media network_id using avp(S_media_nw_id_gs)=$avp(S_media_nw_id_gs)\r\n");
        sl_send_reply("403", "Forbidden");

        t_release();

        if (is_gflag("6"))
        {
            xlog("L_INFO", "bench: $rm-$rs\n");
            bm_log_timer("route-43");
        }
        exit;
    }
    xlog("L_INFO", "CI=$ci - R43.1 -  read C_media_fw_ext_ip_gs=$avp(C_media_fw_ext_ip_gs), avp(S_sig_nw_id_gs)=$avp(S_sig_nw_id_gs), avp(S_media_nw_id_gs)=$avp(S_media_nw_id_gs) and avp(S_network_interface_dst_gs)=$avp(S_network_interface_dst_gs) avp(C_wan_media_ip_gs)=$avp(C_wan_media_ip_gs),avp(C_wan_ip_gs)=$avp(C_wan_ip_gs),avp(C_fw_ext_ip_gs)=$avp(C_fw_ext_ip_gs),avp(S_access_restriction_gi)=$avp(S_access_restriction_gi) \n");

    if($avp(C_tmp2_gs) == "MEDIASERVER")
    {
        xlog("L_INFO", "CI=$ci - R43 - Do not Bind to specific IP for MS");
        $avp(S_network_interface_dst_gs) = $null;
        $var(S_network_interface_media_dst_gi) = '';
    }
    else
        $var(S_network_interface_media_dst_gi) = $avp(S_network_interface_dst_gs);

    xlog("L_INFO", "CI=$ci - R43 - read var(S_network_interface_dst_sig_gi)=$var(S_network_interface_dst_sig_gi) S_network_interface_media_dst_gi= $var(S_network_interface_media_dst_gi)\n");

    $var(C_ep1_rm_ip_gs)       = $avp(S_gw_rm_ip_gs);
    $var(C_ep1_rm_port_gi)     = $avp(S_gw_rm_port_gi);
    $var(C_ep1_transp_gs)      = $avp(C_gw_transp_gs);
    $var(C_ep1_bitmap_gi)      = $avp(S_rep_bitmap_gi);

    if($avp(S_rm_media_ip_gs) != $null && $avp(S_rm_media_ip_gs) != '')
        $var(S_ep1_rm_media_ip_gs) = $avp(S_rm_media_ip_gs);
    else
        $var(S_ep1_rm_media_ip_gs) = $avp(S_gw_rm_ip_gs);
    xlog("L_INFO", "CI=$ci - R43 - after dipping, var(S_ep1_rm_media_ip_gs)=$var(S_ep1_rm_media_ip_gs)\n");

    $var(S_ssm_dst_fqdn_gs) = "";
    if($avp(C_gw_type_gi)== 5)
    {
        if($avp(S_gw_rm_fqdn_gs) != $null && $avp(S_gw_rm_fqdn_gs) != '')
        {
           $var(S_ssm_dst_fqdn_gs) = ";fqdn=" + $var(S_network_interface_dst_sig_gi)+ "-" + $avp(S_gw_rm_fqdn_gs);
           $var(S_ssm_dst_fqdn_gs) = $var(S_ssm_dst_fqdn_gs) + ";fqdn_addr=[" + $var(S_network_interface_dst_sig_gi) + "-" + $(avp(S_gw_rm_ip_gs)[*]) + "]";
        }
    }
    else
    {
        $var(S_ssm_dst_fqdn_gs) = ";fqdn=" + $var(S_network_interface_dst_sig_gi)+ "-" + $avp(S_ep_name_gs);
        if(($avp(S_nat_ip_gs) != $null && $avp(S_nat_ip_gs) != ""))
           $var(S_ssm_dst_fqdn_gs) = $var(S_ssm_dst_fqdn_gs) + ";fqdn_addr=[" + $var(S_network_interface_dst_sig_gi) + "-" + $avp(S_nat_ip_gs) + "]";

        if($avp(S_gw_rm_ip_gs) == $var(S_local_ip_gs))
        {
           #$avp(C_wan_ip_gs)        = $var(S_local_ip_gs);
           $avp(S_hdr_to_dom_gs)    = $var(S_local_ip_gs);
           #$avp(C_advertised_ip_gs) = $var(S_local_ip_gs);

           $var(S_isFqdn_ls) = $rd;
           if(!PROC_IS_PURE_IP)
           {
               xlog("L_INFO", "CI=$ci - R43 - FQDN received in RURI=$ru, replace it with UTC IP and Port\n");
               ### Calls coming in from SSP with FQDN could lead to FQDN not being replaced. Force RU change
               $var(S_rU_gs) =$rU;

               if($rU != $null && $rU != "")
                  $var(S_rU_gs) = $var(S_rU_gs) + "@";
               else
                  $var(S_rU_gs) = "";

               $ru = "sip:"+$var(S_rU_gs)+$var(C_ep1_rm_ip_gs)+":"+$var(C_ep1_rm_port_gi)+";transport="+$var(C_ep1_transp_gs);
               if ($avp(C_ssp_pt_params_list_gs) != $null)
                   osb_set_passthrough_params("$ou","$ru","$avp(C_ssp_pt_params_list_gs)");
               xlog("L_INFO", "CI=$ci - R43 - Replaced RURI=$ru\n");
           }
        }
    }
    if($var(C_ep_type_lookup_li) == 1)
    {
        ## restore wan_ip
        $avp(C_wan_ip_gs) = $var(S_tmp_wan_ip_ls);
    }
    route(QUERY_PM_LAN_TO_WAN_CALL);

    if($var(C_ep1_type_gi) == 5 && $avp(C_gw_type_gi) == 6) # hosted mode
    {
       $avp(C_wan_port_gs)        = $var(C_ep1_wan_port_gi);
       $avp(C_advertised_port_gi) = $var(C_ep1_wan_port_gi);
    }

    xlog("L_INFO", "CI=$ci - R43 - C_wan_port_gs= $avp(C_wan_port_gs) C_advertised_port_gi=$avp(C_advertised_port_gi) \n");

    route(CALL_FROM_OSV_ROUTE); # Standalone request

    if (is_gflag("6"))
    {
        xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
        bm_log_timer("route-43");
    }
    exit;
}

########################################################################
#PROCESS_PSTN_DIALIN_ROUTE: PSTN Dial-in with GTC using local MS
########################################################################
route[PROCESS_PSTN_DIALIN_ROUTE]
{
    if (is_gflag("6"))
       bm_start_timer("route-46");
    xlog("L_INFO", "CI=$ci - R46 - Entry M=$rm rp=$rp Rp=$Rp flags=$mF CT=$ct to=$to,avp(C_gw_transp_gs)=$avp(C_gw_transp_gs),avp(C_ssp_flags_gi)=$avp(C_ssp_flags_gi),linked_ep=$avp(S_linked_ep_id_gi) gw_type=$avp(C_gw_type_gi),avp(S_ep_name_gs)=$avp(S_ep_name_gs)\n");

    t_set_auto_inv_100(1); # turn on automatic 100 replies for INVITE transaction

    if(is_method("REFER"))
       sl_send_reply("100","Trying");
    $var(S_tmp_epName_ls) = $avp(S_ep_name_gs);  ### store the epname found in R4 or R3


        ## save the Contact IP, to be used if e.g. BYE is received from MS or SSM before refer
        if(is_method("INVITE") && $tt == $null)
        {
            $avp(S_reg_ct_gs)                = $hdr(Contact);
            $avp(S_reg_ct_gs)                = $(avp(S_reg_ct_gs){nameaddr.nc_uri});
            xlog("L_INFO", "CI=$ci - R46 - avp(S_reg_ct_gs)=$avp(S_reg_ct_gs) \n");
            $sht(call-info=>$ci::srcip)      = $(avp(S_reg_ct_gs){uri.host});
            $sht(call-info=>$ci::srctransp)  = $(pr{s.tolower});
            $sht(call-info=>$ci::srcport)    = $(avp(S_reg_ct_gs){uri.port});
            $sht(call-info=>$ci::dialindn)   = $rU;
            xlog("L_INFO", "CI=$ci - R46 - saved the lan source data: srcip=$sht(call-info=>$ci::srcip),srcport=$sht(call-info=>$ci::srcport),srctransport=$sht(call-info=>$ci::srctransp),dial-in DN=$sht(call-info=>$ci::dialindn)\n");
        }
        xlog("L_INFO", "CI=$ci - R46 - this route is invoked from R3, ms_dn= $avp(S_tc_dial_ms_dn_gs),avp(S_network_interface_src_sig_gi)=$avp(S_network_interface_src_sig_gi),var(S_network_interface_dst_sig_gi)=$var(S_network_interface_dst_sig_gi),\n");
        xlog("L_INFO", "CI=$ci - R46 - var(S_network_interface_dst_sig_gi)=$var(S_network_interface_dst_sig_gi), avp(C_wan_ip_gs)=$avp(C_wan_ip_gs)\n");
        $var(S_netwInterfaceDst_gs)          = $var(S_network_interface_dst_sig_gi);  ##need to store it since it gets overwritten
        $var(S_network_interface_src_sig_gi) = $avp(S_network_interface_src_sig_gi);
        setflag(26);
        $sht(call-info=>$ci::epname)         = $avp(S_ep_name_gs);
        $sht(call-info=>$ci::msdn)           = $avp(S_tc_dial_ms_dn_gs);
        xlog("L_INFO", "CI=$ci - R46 - storing  epname=$avp(S_ep_name_gs) ms_dn= $avp(S_tc_dial_ms_dn_gs) into htab based on ft=$ft\n");
        $var(S_standalone_route_gi)          = 1;
        $var(S_pstn_dialin_route_gi)         = 1;
        ### dip into REP to find the
        $var(C_ep_type_lookup_li)            = 1;
        $avp(C_tmp2_gs)                      = "MEDIASERVER";
        $var(S_mediaserver_call_gi)          = 1;
        xlog("L_INFO", "CI=$ci - R46 - this is pstn dialin related call, send to MS\n");
        xlog("L_INFO", "CI=$ci - R46 - dip remote_ep with *|$avp(C_tmp2_gs)|*...*\n");

        if (osb_memdb_select("remote_ep,*|$avp(C_tmp2_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","$avp(S_gw_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm_ip_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)|$avp(C_gw_core_ip_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|$avp(S_rep_home_dn_gs)||$avp(C_pmap_port_gi)|$avp(S_tmp_gs)|$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|$avp(S_sys_osv_node_gs)||$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||$avp(S_uri_based_route_gb)|$avp(S_access_control_gb)|$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||$avp(S_fwd_vlan_addr_port_gs)||||$avp(S_linked_ep_id_gi)") != 1)
        {
            append_to_reply("Warning: 399 $var(C_si_var_gs) - R46 - could not find Ms using dip *|$avp(C_tmp2_gs)|*|*....\r\n");
            sl_send_reply("403", "Forbidden");

            t_release();

            if (is_gflag("6"))
            {
                xlog("L_INFO", "bench: $rm-$rs\n");
                bm_log_timer("route-46");
            }
            exit;
        }
        else
        {
            xlog("L_INFO", "CI=$ci - R46.1 - found MS ep, ip|fqdn|port= $avp(S_gw_rm_ip_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)\n");

            if(is_method("UPDATE"))
            {
                xlog("L_INFO", "CI=$ci - R46- Workaroud during PSTN dial-in - Update is not sent to MS but it is responded with 200 OK\n");
                sl_send_reply("200","OK");
                exit;
            }
            $var(S_rU_gs) =$avp(S_tc_dial_ms_dn_gs);
            if($rU != $null && $rU != "")
                $var(S_rU_gs) = $var(S_rU_gs) + "@";
            else
               $var(S_rU_gs) = "";

            $ru = "sip:"+$var(S_rU_gs)+$avp(S_gw_rm_ip_gs)+":"+$avp(S_gw_rm_port_gi)+";transport="+$avp(C_gw_transp_gs);
            if ($avp(C_ssp_pt_params_list_gs) != $null)
                osb_set_passthrough_params("$ou","$ru","$avp(C_ssp_pt_params_list_gs)");
            xlog("L_INFO", "CI=$ci - R46.1 - Replaced RURI=$ru\n");
        }

    #######   now find destination related stuff
    ### dip into realm_profile table to read the signalling_nw_id using type = access
    xlog("L_INFO", "CI=$ci - R46 - dipping into realm_profile with avp(S_access_realm_profile_gs)=$avp(S_access_realm_profile_gs) \n");
    $var(S_profile_type_gi) = 1;  #1="signalling" and 0= "media"
    if(osb_memdb_nl_select("realm_profile,*|$avp(S_access_realm_profile_gs)|*|*|*|*,1","|||$avp(S_sig_nw_id_gs)|$avp(S_media_nw_id_gs)|") != 1)
    {
        xlog("L_ERR", "CI=$ci - R46 - could not identify avp(S_access_realm_profile_gs) in realm_profile using avp(S_access_realm_profile_gs)=$avp(S_access_realm_profile_gs), var(S_profile_type_gi)=$var(S_profile_type_gi), \n");
        return;
    }
    xlog("L_INFO", "CI=$ci - R46 -  after dip into realm_profile based on avp(S_access_realm_profile_gs)=$avp(S_access_realm_profile_gs),read avp(S_sig_nw_id_gs)=$avp(S_sig_nw_id_gs), avp(S_media_nw_id_gs)=$avp(S_media_nw_id_gs) \n");
    #### note: S_access_restriction_gi = 0    ep AND direct sub allowed           #############
    #### note: S_access_restriction_gi = 1    only ep allowed                     #############
    #### note: S_access_restriction_gi = 2    only direct sub allowed             #############

    xlog("L_INFO", "CI=$ci - R46 - dipping into network_id for destination signalling, with avp(S_sig_nw_id_gs)=$avp(S_sig_nw_id_gs) \n");
    $var(S_network_type_gi) = 1;  #1="access" and 0= "core"
    ## store wan_ip
    $var(S_tmp_wan_ip_ls) = $avp(C_wan_ip_gs);
    #--- Check signaling network ID access side
    if (osb_memdb_nl_select("network_id,*|$avp(S_sig_nw_id_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1",
            "|$avp(S_sig_nw_id_gs)||$avp(S_network_interface_dst_sig_gi)|||$avp(C_wan_ip_gs)|$avp(C_wan_port_tcp_gs)|$avp(C_wan_port_tls_gs)|$avp(C_wan_port_udp_gs)||$avp(C_fw_ext_ip_gs)|||$avp(S_access_restriction_gi)|$avp(C_port_mtls_gs)||||") != 1)
    {
        xlog("L_ERR", "CI=$ci - R46 - could not identify access network_id using avp(S_sig_nw_id_gs)=$avp(S_sig_nw_id_gs) and var(S_network_type_gi)=$var(S_network_type_gi) \n");
        append_to_reply("Warning: 399 $var(C_si_var_gs) - R46 - could not identify access network_id using avp(S_sig_nw_id_gs)=$avp(S_sig_nw_id_gs) and var(S_network_type_gi)=$var(S_network_type_gi)\r\n");
        sl_send_reply("403", "Forbidden");

        t_release();

        if (is_gflag("6"))
        {
            xlog("L_INFO", "bench: $rm-$rs\n");
            bm_log_timer("route-46");
        }
        exit;
    }
    $var(S_network_interface_dst_sig_gi) = $avp(S_network_interface_dst_sig_gi);
    xlog("L_INFO", "CI=$ci - R46 - did read avp(S_media_nw_id_gs)=$avp(S_media_nw_id_gs) from avp(S_access_realm_profile_gs)=$avp(S_access_realm_profile_gs) for Media\n");
    ### dip into network_id table to read the wanip using the S_media_nw_id_gs
    $var(S_network_type_gi) = 1;  #1="access" and 0= "core"
    xlog("L_INFO", "CI=$ci - R46 - dipping into network_id for media IP with avp(S_media_nw_id_gs)=$avp(S_media_nw_id_gs) \n");
    #--- Check media network ID access side
    if (osb_memdb_nl_select("network_id,*|$avp(S_media_nw_id_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*||*,1",
            "|||$avp(S_network_interface_dst_gs)|||$avp(C_wan_media_ip_gs)|$avp(C_wan_media_port_gs)|||||||||$avp(C_media_fw_ext_ip_gs)|$avp(S_wan_on_sdp_gs)||") != 1)
    {
        xlog("L_ERR", "CI=$ci - R46.1 - could not identify dest media network_id using avp(S_media_nw_id_gs)=$avp(S_media_nw_id_gs)  \n");
        append_to_reply("Warning: 399 $var(C_si_var_gs) - R3 - could not identify dest media network_id using avp(S_media_nw_id_gs)=$avp(S_media_nw_id_gs)\r\n");
        sl_send_reply("403", "Forbidden");

        t_release();

        if (is_gflag("6"))
        {
            xlog("L_INFO", "bench: $rm-$rs\n");
            bm_log_timer("route-46");
        }
        exit;
    }
    xlog("L_INFO", "CI=$ci - R46.1 -  read C_media_fw_ext_ip_gs=$avp(C_media_fw_ext_ip_gs), avp(S_sig_nw_id_gs)=$avp(S_sig_nw_id_gs), avp(S_media_nw_id_gs)=$avp(S_media_nw_id_gs) and avp(S_network_interface_dst_gs)=$avp(S_network_interface_dst_gs) avp(C_wan_media_ip_gs)=$avp(C_wan_media_ip_gs),avp(C_wan_ip_gs)=$avp(C_wan_ip_gs),avp(C_fw_ext_ip_gs)=$avp(C_fw_ext_ip_gs),avp(S_access_restriction_gi)=$avp(S_access_restriction_gi) \n");

    if($avp(C_tmp2_gs) == "MEDIASERVER")
    {
        xlog("L_INFO", "CI=$ci - R46 - Do not Bind to specific IP for MS");
        $avp(C_advertised_port_gi) = $avp(C_wan_port_tcp_gs);
        $var(C_original_socket_gs) = $avp(C_gw_transp_gs) + ":" + $avp(C_wan_ip_gs) + ":" + $avp(C_advertised_port_gi);
        $avp(S_network_interface_dst_gs) = $null;
        $var(S_network_interface_media_dst_gi) = '';
    }
    else
        $var(S_network_interface_media_dst_gi) = $avp(S_network_interface_dst_gs);

    xlog("L_INFO", "CI=$ci - R46 - read var(S_network_interface_dst_sig_gi)=$var(S_network_interface_dst_sig_gi) S_network_interface_media_dst_gi= $var(S_network_interface_media_dst_gi)\n");

    $var(C_ep1_rm_ip_gs)       = $avp(S_gw_rm_ip_gs);
    $var(C_ep1_rm_port_gi)     = $avp(S_gw_rm_port_gi);
    $var(C_ep1_transp_gs)      = $avp(C_gw_transp_gs);
    $var(C_ep1_bitmap_gi)      = $avp(S_rep_bitmap_gi);
#    $var(S_ep1_rm_media_ip_gs) = $avp(S_rm_media_ip_gs);
    if($avp(S_rm_media_ip_gs) != $null && $avp(S_rm_media_ip_gs) != '')
        $var(S_ep1_rm_media_ip_gs) = $avp(S_rm_media_ip_gs);
    else
        $var(S_ep1_rm_media_ip_gs) = $avp(S_gw_rm_ip_gs);
    xlog("L_INFO", "CI=$ci - R46 - after dipping, var(S_ep1_rm_media_ip_gs)=$var(S_ep1_rm_media_ip_gs)\n");

    $var(S_ssm_dst_fqdn_gs) = "";
    if($avp(C_gw_type_gi)== 5)
    {
        if($avp(S_gw_rm_fqdn_gs) != $null && $avp(S_gw_rm_fqdn_gs) != '')
        {
           $var(S_ssm_dst_fqdn_gs) = "fqdn=" + $var(S_network_interface_dst_sig_gi)+ "-" + $avp(S_gw_rm_fqdn_gs);
           $var(S_ssm_dst_fqdn_gs) = $var(S_ssm_dst_fqdn_gs) + ";fqdn_addr=[" + $var(S_network_interface_dst_sig_gi) + "-" + $(avp(S_gw_rm_ip_gs)[*]) + "]";
        }
    }
    else
    {
        $var(S_ssm_dst_fqdn_gs) = ";fqdn=" + $var(S_network_interface_dst_sig_gi)+ "-" + $avp(S_ep_name_gs);
        if(($avp(S_nat_ip_gs) != $null && $avp(S_nat_ip_gs) != ""))
           $var(S_ssm_dst_fqdn_gs) = $var(S_ssm_dst_fqdn_gs) + ";fqdn_addr=[" + $var(S_network_interface_dst_sig_gi) + "-" + $avp(S_nat_ip_gs) + "]";

        if($avp(S_gw_rm_ip_gs) == $var(S_local_ip_gs))
        {
           #$avp(C_wan_ip_gs)        = $var(S_local_ip_gs);
           $avp(S_hdr_to_dom_gs)    = $var(S_local_ip_gs);
           #$avp(C_advertised_ip_gs) = $var(S_local_ip_gs);

           $var(S_isFqdn_ls) = $rd;
           if(!PROC_IS_PURE_IP)
           {
               xlog("L_INFO", "CI=$ci - R46 - FQDN received in RURI=$ru, replace it with UTC IP and Port\n");
               ### Calls coming in from SSP with FQDN could lead to FQDN not being replaced. Force RU change
               $var(S_rU_gs) =$rU;

               if($rU != $null && $rU != "")
                  $var(S_rU_gs) = $var(S_rU_gs) + "@";
               else
                  $var(S_rU_gs) = "";

               $ru = "sip:"+$var(S_rU_gs)+$var(C_ep1_rm_ip_gs)+":"+$var(C_ep1_rm_port_gi)+";transport="+$var(C_ep1_transp_gs);
               if ($avp(C_ssp_pt_params_list_gs) != $null)
                   osb_set_passthrough_params("$ou","$ru","$avp(C_ssp_pt_params_list_gs)");
               xlog("L_INFO", "CI=$ci - R46 - Replaced RURI=$ru\n");
           }
        }
        else
        {
           $avp(S_hdr_to_dom_gs) = $avp(S_gw_rm_ip_gs);
        }
    }

    ### store this EP data in temp, fetch them in this route later
    $var(S_tmp_gwtype_li)   = $avp(C_gw_type_gi);  ### store the epname found above
    $var(C_ep1_type_gi)     = $avp(C_gw_type_gi);  ### store the epname found above
    $avp(S_ep_name_gs)      = $var(S_tmp_epName_ls);  ### restore the epname found in R4 or R3
    xlog("L_INFO", "CI=$ci - R46 - avp(S_gw_rm_ip_gs)=$avp(S_gw_rm_ip_gs), var(C_ep1_rm_ip_gs)=$var(C_ep1_rm_ip_gs),avp(S_gw_rm_port_gi)=$avp(S_gw_rm_port_gi),avp(S_gw_rm_fqdn_gs)=$avp(S_gw_rm_fqdn_gs),var(S_network_interface_media_src_gi)=$var(S_network_interface_media_src_gi),avp(S_network_interface_src_gs)=$avp(S_network_interface_src_gs)\n");
    xlog("L_INFO", "CI=$ci - R46  - avp(S_gw_core_fqdn_gs)=$avp(S_gw_core_fqdn_gs), avp(C_core_ip_gs)=$avp(C_core_ip_gs), avp(C_wan_ip_gs)=$avp(C_wan_ip_gs),avp(C_gw_core_port_gi)=$avp(C_gw_core_port_gi),avp(C_gw_transp_gs)=$avp(C_gw_transp_gs),avp(S_network_interface_dst_gs)=$avp(S_network_interface_dst_gs),avp(S_sys_osv_node_gs)=$avp(S_sys_osv_node_gs)\n");
    $var(S_C_ep1_rm_ip_gs)  = $avp(S_gw_rm_ip_gs);
    $var(S_S_gw_rm_port_gi) = $avp(S_gw_rm_port_gi);
    $var(S_S_gw_rm_fqdn_gs) =  $avp(S_gw_rm_fqdn_gs);
    xlog("L_INFO", "CI=$ci - R46 - intermediary variables: var(S_C_ep1_rm_ip_gs)=$var(S_C_ep1_rm_ip_gs),var(S_S_gw_rm_port_gi)=$var(S_S_gw_rm_port_gi)\n");
    ### now build the final destination and build SSM headers

    ### R46 is called after dip into tc_ep_ms_dialin yielded positive result
    ### i.e. the AVPs $avp(S_ses_id_gi), $avp(S_ep_name_gs),$avp(S_tc_dial_lanuage_gb),$avp(S_tc_dial_ms_dn_gs) are set
    xlog("L_INFO", "CI=$ci - R46 - S_ses_id_gi=$avp(S_ses_id_gi), S_ep_name_gs=$avp(S_ep_name_gs),S_tc_dial_lanuage_gb=$avp(S_tc_dial_lanuage_gb),S_tc_dial_ms_dn_gs=$avp(S_tc_dial_ms_dn_gs) \n");

    ### need to dip into REP to read the REP for MS
    xlog("L_INFO", "CI=$ci - R46 - dipping remote_ep for MS with *|$avp(S_ep_name_gs)|*...* \n");

    if (osb_memdb_select("remote_ep,*|$avp(S_ep_name_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","$avp(S_gw_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm_ip_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)|$avp(C_gw_core_ip_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|$avp(S_rep_home_dn_gs)||$avp(C_pmap_port_gi)|$avp(S_tmp_gs)|$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|$avp(S_sys_osv_node_gs)||$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||$avp(S_uri_based_route_gb)|$avp(S_access_control_gb)|$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||$avp(S_fwd_vlan_addr_port_gs)||||$avp(S_linked_ep_id_gi)") != 1)
    {
        xlog("L_INFO", "CI=$ci - R46 - Dip with  epname=$avp(S_ep_name_gs) not found\n");
        append_to_reply("Warning: 399 $var(C_si_var_gs) - R46 - could not find the REP element corresponding to MS read from tc_ep_ms_dialin\r\n");
        sl_send_reply("403", "Forbidden");

        t_release();

        if (is_gflag("6"))
        {
            xlog("L_INFO", "bench: $rm-$rs\n");
            bm_log_timer("route-46");
        }
        return;
    }
    else
    {
        xlog("L_INFO", "CI=$ci - R46 - Dip successful,found MS ep:  S_gw_id_gi|S_ep_name_gs|C_gw_type_gi|S_gw_rm_ip_gs|S_gw_rm_fqdn_gs|S_gw_rm_port_gi|C_gw_transp_gs=$avp(S_gw_id_gi)|$avp(S_ep_name_gs)|$avp(C_gw_type_gi)|$avp(S_gw_rm_ip_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)\n");
        if(osb_memdb_nl_select("realm_profile,*|$avp(S_access_realm_profile_gs)|*|*|*|*,1","||||$avp(S_tmp_gs)|") != 1)
        {
            append_to_reply("Warning: 399 $var(C_si_var_gs) - R46 - could not identify $avp(S_access_realm_profile_gs) in realm profile\r\n");
            sl_send_reply("403", "Forbidden");

            t_release();

            if (is_gflag("6"))
            {
                xlog("L_INFO", "bench: $rm-$rs\n");
                bm_log_timer("route-46");
            }
            return;
        }

        $var(S_media_network_id_li) = $avp(S_tmp_gs);
        $(avp(C_fw_ext_ip_gs)[*]) = $null;
        $(avp(S_fw_media_ip_gs)[*]) = $null;
        #--- Check media network ID access side
        if (osb_memdb_nl_select("network_id,*|$var(S_media_network_id_li)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1",
                "|||$avp(S_tmp_gs)|||$avp(C_wan_ip_gs)|||||$avp(C_fw_ext_ip_gs)|||||$avp(S_fw_media_ip_gs)|$avp(S_wan_on_sdp_gs)||") != 1)
        {
            append_to_reply("Warning: 399 $var(C_si_var_gs) - R46 - could not identify dest media network_id using avp(S_media_nw_id_gs)=$avp(S_media_nw_id_gs)\r\n");
            sl_send_reply("403", "Forbidden");

            t_release();

            if (is_gflag("6"))
            {
                xlog("L_INFO", "bench: $rm-$rs\n");
                bm_log_timer("route-46");
            }
            return;
        }
        $var(S_netwInterfaceDst_gs) = $avp(S_tmp_gs);
        if(not_empty("$avp(S_fw_media_ip_gs)"))
        {
            xlog("L_INFO", "CI=$ci - R46 - firewall set for this networkid= $var(S_media_network_id_li)\n");
            $var(S_media_ext_firewall_set_gb) = 1;
            $var(S_ssm_fw_ext_ip_gs) = $avp(S_fw_media_ip_gs);
            $var(S_ssm_wos_gs) = $avp(S_wan_on_sdp_gs);
        }
        xlog("L_INFO", "CI=$ci - R46 - Pstn dialin - avp(S_sig_nw_id_gs)=$avp(S_sig_nw_id_gs) var(S_media_network_id_li)=$var(S_media_network_id_li) var(S_netwInterfaceDst_gs)=$var(S_netwInterfaceDst_gs)\n");
    }

    xlog("L_INFO", "CI=$ci - R46 -var(S_netwInterfaceDst_gs)=$var(S_netwInterfaceDst_gs), avp(C_wan_ip_gs)=$avp(C_wan_ip_gs)\n");
    $var(S_ssmip_dest_gs) = $var(S_netwInterfaceDst_gs)+"-"+$avp(C_wan_ip_gs);

    if($var(C_ep_type_lookup_li) == 1)
    {
        ## restore wan_ip
        $avp(C_wan_ip_gs) = $var(S_tmp_wan_ip_ls);
    }

    ## above was final destaination.
    ##
    ### we need to build all SSM headers regarding this found ep,
    ### all these header names shall be prefixed with "final_"
    #prepare the variables for SSM
    $var(S_final_S_first_ep_found_gi)  = 1;
    $avp(S_final_S_gw_id_gi)           = $avp(S_ses_id_gi);
    $avp(S_final_C_core_ip_gs)         = $avp(C_core_ip_gs);
    $avp(S_final_C_gw_core_ip_gs)      = $avp(C_gw_core_ip_gs);
    $avp(S_final_C_gw_core_port_gs)    = $avp(C_gw_core_port_gi);

    #prepare the variables for SSM
    $var(S_final_S_final_S_ep_name_gs) = $avp(S_ep_name_gs);
    $var(S_final_S_final_S_ep1_id_gi)  = $avp(S_ses_id_gi);
    $var(S_final_C_ep1_rm_fqdn_gs)     = $avp(S_gw_rm_fqdn_gs);
    $var(S_final_C_ep1_rm_port_gi)     = $avp(S_gw_rm_port_gi);
    $var(S_final_C_ep1_nat_port_gs)    = $avp(C_pmap_port_gi);
    $var(S_final_C_ep1_type_gi)        = '';
    $var(S_final_C_ep1_type_gi)        = $avp(C_gw_type_gi);
    $var(S_final_S_ep1_rep_home_dn_gs) = $avp(S_rep_home_dn_gs);
    $var(S_final_C_ep1_core_ip_gs)     = $avp(C_gw_core_ip_gs);
    $var(S_final_C_ep1_core_port_gi)   = $avp(C_gw_core_port_gi);
    $var(S_final_C_ep1_rm_ip_gs)       = $avp(S_gw_rm_ip_gs);
    $var(S_final_C_ep1_transp_gs)      = $avp(C_gw_transp_gs);
    $var(S_final_S_ep1_profile_gs)     = $avp(C_ssp_gw_profile_gs);
    $var(S_network_interface_dst_gs)   = $avp(S_network_interface_dst_gs);
    $var(S_final_S_ep1_logical_id_gs)  = $avp(S_rm_logical_id_gs);
    $var(S_final_S_ep1_logical_id_gs)  = $avp(S_rm_logical_id_gs);
    $var(S_final_S_gw_core_fqdn_gs)    = $avp(S_gw_core_fqdn_gs);

    if($avp(S_rm_media_ip_gs) != $null && $avp(S_rm_media_ip_gs) != '')
        $var(S_final_S_ep1_rm_media_ip_gs) = $avp(S_rm_media_ip_gs);
    else
        $var(S_final_S_ep1_rm_media_ip_gs) = $avp(S_gw_rm_ip_gs);
    $var(S_final_S_ep1_media_subnet_mask_gs) = $avp(S_rm_media_subnet_mask_gs);
    xlog("L_INFO", "CI=$ci - R46 - final variables provided, build the ssm-headers, var(S_standalone_route_gi)=$var(S_standalone_route_gi)\n");

    if($avp(C_gw_type_gi)==6)
    {
       $avp(S_call_type_gi) = SSM_CT_X_UTC_REMOTE_EP | SSM_CT_X_REMOTE_EP;
       xlog("L_INFO", "CI=$ci - R46 - PSTN Dial In call route, set bit in final ct param: avp(S_call_type_gi)=$avp(S_call_type_gi)\n");
    }

    $var(S_final_C_ep1_type_gi) = $var(S_final_C_ep1_type_gi) + ";ct=" + $avp(S_call_type_gi);
    if(is_method("INVITE") && !isflagset(13))
    {
        insert_hf( "final_X-e1t: $var(S_final_C_ep1_type_gi)\r\n", "Call-ID");
        insert_hf( "final_X-ep1_rm_ip: $avp(S_gw_rm_ip_gs)\r\n", "Call-ID");
        insert_hf( "final_X-e1rf: $avp(S_gw_rm_fqdn_gs)\r\n", "Call-ID");
        insert_hf( "final_X-e1rp: $avp(S_gw_rm_port_gi)\r\n", "Call-ID");
        insert_hf( "final_X-e1np: $var(C_ep1_nat_port_gs)\r\n", "Call-ID");
        insert_hf( "final_X-e1tr: $avp(C_gw_transp_gs)\r\n", "Call-ID");
        insert_hf( "final_X-e1ci: $avp(C_gw_core_ip_gs)\r\n", "Call-ID");
        insert_hf( "final_X-e1cp: $avp(C_gw_core_port_gi)\r\n", "Call-ID");
        insert_hf( "final_X-e1at: $avp(C_rm_address_type_gi)\r\n", "Call-ID");
        insert_hf( "final_X-rscp: $var(C_rs_core_port_gi)\r\n", "Call-ID");
        insert_hf( "final_X-gcp: $var(C_general_core_port_gi)\r\n", "Call-ID");
        insert_hf( "final_X-avpp: $avp(C_port_gi)\r\n", "Call-ID");
        insert_hf( "final_X-oprp: $avp(C_pmap_resp_port_gi)\r\n", "Call-ID");
        insert_hf( "final_X-acbi: $avp(C_sys_current_binding_ip_gs)\r\n", "Call-ID");
        insert_hf( "final_X-acbp: $avp(C_sys_current_binding_port_gi)\r\n", "Call-ID");
        insert_hf( "final_X-acbtr: $avp(C_sys_current_binding_transp_gs)\r\n", "Call-ID");
        insert_hf( "final_X-wanip: $avp(C_wan_ip_gs)\r\n", "Call-ID");
        insert_hf( "final_X-osvp: $var(C_sys_osv_port_gi)\r\n", "Call-ID");
        if($avp(S_uri_based_route_gb) == 1 && $var(S_dynamic_peer_found_gb) == 1)
            insert_hf( "final_X-ubr: $avp(S_uri_based_route_gb)\r\n", "Call-ID");
        if ($avp(C_fw_ext_ip_gs) != $null && $avp(C_fw_ext_ip_gs) != '')
            insert_hf( "final_X-fwxi: $avp(C_fw_ext_ip_gs)\r\n", "Call-ID");
        if($avp(C_inv_noanswr_timer_gs) != "" && $avp(C_inv_noanswr_timer_gs) != $null)
            insert_hf( "final_X-invnat: $avp(C_inv_noanswr_timer_gs)\r\n", "Call-ID");
        if($avp(C_inv_noreply_timer_gs) != "" && $avp(C_inv_noreply_timer_gs) != $null)
            insert_hf( "final_X-invnrt: $avp(C_inv_noreply_timer_gs)\r\n", "Call-ID");
        if(($avp(C_ssp_name_gs) != $null && $avp(C_ssp_name_gs) != "")){
            insert_hf( "final_X-avpspn: $avp(C_ssp_name_gs)\r\n", "Call-ID");
            insert_hf( "final_X-spf: $avp(C_ssp_flags_gi)\r\n", "Call-ID");
        }
        $var(S_rU_gs)         = $rU;
        $var(S_rU_gs)         = $var(S_rU_gs) + "@";
        $var(S_final_ruri_gs) = "sip:"+$var(S_rU_gs)+$avp(S_gw_rm_ip_gs)+":"+$avp(S_gw_rm_port_gi)+";transport="+$avp(C_gw_transp_gs);
        $var(S_final_tmp_gs)  = "sip:"+ $avp(S_gw_rm_ip_gs)+":"+$avp(S_gw_rm_port_gi)+";transport="+$avp(C_gw_transp_gs);
        insert_hf( "final_X-Original-dest: $var(S_final_tmp_gs) \r\n", "Call-ID");
        $var(S_final_tmp_gs)  =  $avp(C_gw_transp_gs)+":"+ $var(S_local_ip_gs) + ":" + $var(S_local_port_gs);

        insert_hf( "final_X-Original-Socket: $var(S_final_tmp_gs) \r\n", "Call-ID");
    }
    #### restore data of previous REP
    $avp(S_gw_rm_ip_gs)   = $var(S_C_ep1_rm_ip_gs) ;
    $avp(S_gw_rm_port_gi) = $var(S_S_gw_rm_port_gi) ;
    $avp(S_gw_rm_fqdn_gs) = $var(S_S_gw_rm_fqdn_gs) ;
    $avp(C_pmap_port_gi)  = $avp(S_gw_rm_port_gi);

    $avp(C_gw_type_gi)    = $var(S_tmp_gwtype_li);  ### restore the epname found above
    xlog("L_INFO", "CI=$ci - R46 - restored avp(C_gw_type_gi)=$avp(C_gw_type_gi),avp(S_gw_rm_ip_gs)=$avp(S_gw_rm_ip_gs),avp(S_gw_rm_port_gi)=$avp(S_gw_rm_port_gi),avp(S_gw_rm_fqdn_gs)=$avp(S_gw_rm_fqdn_gs) \n");
    $var(C_g_useSsmRecordRoute_gb) = 0;


    route(QUERY_PM_LAN_TO_WAN_CALL);
    if($var(C_ep1_type_gi) == 5)
    {
       $avp(C_wan_port_gs)        = $var(C_ep1_wan_port_gi);
       $avp(C_advertised_port_gi) = $var(C_ep1_wan_port_gi);

       xlog("L_INFO", "CI=$ci - R46 - C_wan_port_gs= $avp(C_wan_port_gs) C_advertised_port_gi=$avp(C_advertised_port_gi) \n");
    }

    route(CALL_FROM_OSV_ROUTE);  # Dial-in request

    if (is_gflag("6"))
    {
        xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
        bm_log_timer("route-46");
    }
    exit;
}

########################################################################
#QUERY_LAN_TO_WAN_FIRST_EP_FOUND: Route for dipping - LAN to WAN after first EP is found
########################################################################
route[QUERY_LAN_TO_WAN_FIRST_EP_FOUND]
{

    if (is_gflag("6"))
       bm_start_timer("route-47");
    xlog("L_INFO", "CI=$ci - R47 - Entry M=$rm rp=$rp Rp=$Rp flags=$mF CT=$ct to=$to,avp(C_gw_transp_gs)=$avp(C_gw_transp_gs),avp(C_ssp_flags_gi)=$avp(C_ssp_flags_gi),associated_ep=$avp(S_associated_ep_id_gi) linked_ep=$avp(S_linked_ep_id_gi) gw_type=$avp(C_gw_type_gi),avp(S_ep_name_gs)=$avp(S_ep_name_gs)\n");
    $(avp(C_fw_ext_ip_gs)[*]) = $null;

    if(not_empty("$avp(S_associated_ep_id_gi)") && $avp(S_associated_ep_id_gi) != 0)
    {
        if (osb_memdb_select("remote_ep,$avp(S_associated_ep_id_gi)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","$avp(S_outbnd_pxy_id_gi)|||||$avp(S_outbnd_pxy_ip_gs)|$avp(S_outbnd_pxy_fqdn_gs)|$avp(S_outbnd_pxy_port_gs)|$avp(C_outbnd_pxy_transp_gs)|||$avp(C_outbnd_pxy_core_port_gi)|||||||$avp(C_outbnd_pxy_address_type_gi)||||||||||||||||||||||||||||") == 1)
            xlog("L_INFO", "CI=$ci - R47 - Lookup remote_ep with proxy associated: id=$avp(S_outbnd_pxy_id_gi) ip=$avp(S_outbnd_pxy_ip_gs) fqdn=$avp(S_outbnd_pxy_fqdn_gs) port=$avp(S_outbnd_pxy_port_gs) transp=$avp(C_outbnd_pxy_transp_gs) core port=$avp(C_outbnd_pxy_core_port_gi) address type=$avp(C_outbnd_pxy_address_type_gi)\n");
    }
    ################################ FRN7404 ##############################
    ###         reading source signaling for SSM                    #######
    ##         need to read the source (core) related info          #######
    ## for building $var(C_ssm_data_src_gs) for FRN7404             #######
    ##         (using $avp(S_core_realm_profile_gs))                #######
    ### dip into realm_profile table to read the signalling_nw_id using type = access
    xlog("L_INFO", "CI=$ci - R47 - FRN7404 dipping into realm_profile (for core) with avp(S_core_realm_profile_gs)=$avp(S_core_realm_profile_gs) \n");
    $var(S_profile_type_gi) = 1;  #1="signalling" and 0= "media"
    if(osb_memdb_nl_select("realm_profile,*|$avp(S_core_realm_profile_gs)|*|*|*|*,1","|||$avp(S_sig_nw_id_gs)|$avp(S_media_nw_id_gs)|") != 1)
    {
        xlog("L_ERR", "CI=$ci - R47 - could not identify avp(S_access_realm_profile_gs) in realm_profile using avp(S_core_realm_profile_gs)=$avp(S_core_realm_profile_gs), var(S_profile_type_gi)=$var(S_profile_type_gi), \n");
        return;
    }
    xlog("L_INFO", "CI=$ci - R47 -  after dip into realm_profile based on avp(S_core_realm_profile_gs)=$avp(S_core_realm_profile_gs),read avp(S_sig_nw_id_gs)=$avp(S_sig_nw_id_gs), avp(S_media_nw_id_gs)=$avp(S_media_nw_id_gs) \n");

    ### dip into network_id table to read the wanip using the signalling_nw_id
    $var(S_network_type_gi) = 0;  #1="access" and 0= "core"
    xlog("L_INFO", "CI=$ci - R47 - FRN7404 dipping into network_id (for core) with avp(S_sig_nw_id_gs)=$avp(S_sig_nw_id_gs) \n");
    #--- Check signaling network ID core side
    if (osb_memdb_nl_select("network_id,*|$avp(S_sig_nw_id_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1",
            "|$avp(S_sig_nw_id_gs)||$avp(S_network_interface_src_sig_gi)||||||||||||||||") != 1)
    {
        xlog("L_ERR", "CI=$ci - R47 - could not identify access network_id using avp(S_sig_nw_id_gs)=$avp(S_sig_nw_id_gs) and var(S_network_type_gi)=$var(S_network_type_gi) \n");
        append_to_reply("Warning: 399 $var(C_si_var_gs) - R47 - could not identify access network_id using avp(S_sig_nw_id_gs)=$avp(S_sig_nw_id_gs) and var(S_network_type_gi)=$var(S_network_type_gi)\r\n");
        sl_send_reply("403", "Forbidden");

        t_release();

        if (is_gflag("6"))
        {
            xlog("L_INFO", "bench: $rm-$rs\n");
            bm_log_timer("route-3");
        }
        exit;
    }
    $var(S_network_interface_src_sig_gi) = $avp(S_network_interface_src_sig_gi);
    xlog("L_INFO", "CI=$ci - R47 - read avp(S_network_interface_src_sig_gi)=$avp(S_network_interface_src_sig_gi) and var(S_network_interface_src_sig_gi)=$var(S_network_interface_src_sig_gi) \n");

    #######   now find destination related stuff
    ### dip into realm_profile table to read the signalling_nw_id using type = access
    xlog("L_INFO", "CI=$ci - R47 - dipping into realm_profile with avp(S_access_realm_profile_gs)=$avp(S_access_realm_profile_gs) \n");
    $(avp(S_realm_fwd_nw_id_gs)[*]) = $null;
    $var(S_profile_type_gi) = 1;  #1="signalling" and 0= "media"
    if(osb_memdb_nl_select("realm_profile,*|$avp(S_access_realm_profile_gs)|*|*|*|*,1","|||$avp(S_sig_nw_id_gs)|$avp(S_media_nw_id_gs)|$avp(S_realm_fwd_nw_id_gs)") != 1)
    {
        xlog("L_ERR", "CI=$ci - R47 - could not identify avp(S_access_realm_profile_gs) in realm_profile using avp(S_access_realm_profile_gs)=$avp(S_access_realm_profile_gs), var(S_profile_type_gi)=$var(S_profile_type_gi), \n");
        return;
    }
    # If the forward network ID is available get its IP and ports
    $(avp(C_fwd_ext_fw_ip_ls)[*]) = $null;
    #--- Check forward network ID access side
    if (not_empty("$avp(S_realm_fwd_nw_id_gs)"))
    {
        #--- Check forward network ID access side
        osb_memdb_nl_select("network_id,*|$avp(S_realm_fwd_nw_id_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|1,1",
                            "||||||$avp(C_fwd_ep_ip_gs)|$avp(C_fwd_ep_port_tcp_gs)|$avp(C_fwd_ep_port_tls_gs)|$avp(C_fwd_ep_port_udp_gs)||$avp(C_fwd_ext_fw_ip_ls)||||$avp(C_fwd_ep_port_mtls_gs)||||");
        xlog("L_INFO", "CI=$ci - R47 - fwd nw id $avp(S_realm_fwd_nw_id_gs) found. $avp(C_fwd_ep_ip_gs), tcp:$avp(C_fwd_ep_port_tcp_gs) tls:$avp(C_fwd_ep_port_tls_gs) udp:$avp(C_fwd_ep_port_udp_gs) mtls:$avp(C_fwd_ep_port_mtls_gs)\n");
    }

    xlog("L_INFO", "CI=$ci - R47 -  after dip into realm_profile based on avp(S_access_realm_profile_gs)=$avp(S_access_realm_profile_gs), read avp(S_sig_nw_id_gs)=$avp(S_sig_nw_id_gs), avp(S_media_nw_id_gs)=$avp(S_media_nw_id_gs) \n");
    #### note: S_access_restriction_gi = 0    ep AND direct sub allowed           #############
    #### note: S_access_restriction_gi = 1    only ep allowed                     #############
    #### note: S_access_restriction_gi = 2    only direct sub allowed             #############

    xlog("L_INFO", "CI=$ci - R47 - dipping into network_id for destination signalling, with avp(S_sig_nw_id_gs)=$avp(S_sig_nw_id_gs) \n");
    $var(S_network_type_gi) = 1;#1="access" and 0= "core"
    #--- Check signaling network ID access side
    if (osb_memdb_nl_select("network_id,*|$avp(S_sig_nw_id_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1",
            "|$avp(S_sig_nw_id_gs)||$avp(S_network_interface_dst_sig_gi)|||$avp(C_wan_ip_gs)|$avp(C_wan_port_tcp_gs)|$avp(C_wan_port_tls_gs)|$avp(C_wan_port_udp_gs)||$avp(C_fw_ext_ip_gs)|||$avp(S_access_restriction_gi)|$avp(C_port_mtls_gs)||||") != 1)
    {
        xlog("L_ERR", "CI=$ci - R47 - could not identify access network_id using avp(S_sig_nw_id_gs)=$avp(S_sig_nw_id_gs) and var(S_network_type_gi)=$var(S_network_type_gi) \n");
        append_to_reply("Warning: 399 $var(C_si_var_gs) - R47 - could not identify signaling access network_id using avp(S_sig_nw_id_gs)=$avp(S_sig_nw_id_gs) and var(S_network_type_gi)=$var(S_network_type_gi)\r\n");
        sl_send_reply("403", "Forbidden");

        t_release();

        if (is_gflag("6"))
        {
            xlog("L_INFO", "bench: $rm-$rs\n");
            bm_log_timer("route-3");
        }
        exit;
    }

    # Replace Ext firewall from FWD NW ID if set (even if empty)
    if ($avp(C_fwd_ext_fw_ip_ls) != $null)
        $avp(C_fw_ext_ip_gs) = $avp(C_fwd_ext_fw_ip_ls);

    $var(S_network_interface_dst_sig_gi) = $avp(S_network_interface_dst_sig_gi);
    xlog("L_INFO", "CI=$ci - R47 - read var(S_network_interface_dst_sig_gi)=$var(S_network_interface_dst_sig_gi) \n");

    if (is_gflag("6"))
    {
        xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
        bm_log_timer("route-47");
    }

}

########################################################################
#QUERY_SSP_HOME_DN
########################################################################
route[QUERY_SSP_HOME_DN]
{
    # Check if src is a SSP
    if( $avp(C_gw_type_gi) != 5 )
        return;

    $var(C_ssp_gw_profile_gs) = $avp(C_ssp_gw_profile_gs);
    route(SSP_PROFILE_DB_ROUTE);

    xlog("L_INFO", "CI=$ci - R4b - Src is a SSP.\n");

    $var(S_matchPrefix_gs)              = $rU;
    $var(S_memdb_return_gi)             = 0;
    $var(S_sys_count_gi)                = 0;
    $avp(S_tmp_ep_name_ls)              = $null;
    $avp(S_tmp_ep_prefix_ls)            = $null;
    $avp(S_ignore_digits_li)            = 0;
    $var(S_epname_ls)                   = "";
    $var(S_ep_name_no_prefix_found_ls)  = "";

    # Clear avps before perform query
    $(avp(S_gw_id_gi)[*])            = $null;  $(avp(S_ses_id_gi)[*])                = $null;  $(avp(S_ep_name_gs)[*])              = $null;  $(avp(S_rm_logical_id_gs)[*])      = $null;
    $(avp(C_ssp_gw_profile_gs)[*])   = $null;  $(avp(S_gw_rm_ip_gs)[*])              = $null;  $(avp(S_gw_rm_fqdn_gs)[*])           = $null;  $(avp(S_gw_rm_port_gi)[*])         = $null;
    $(avp(C_gw_transp_gs)[*])        = $null;  $(avp(C_gw_core_ip_gs)[*])            = $null;  $(avp(S_gw_core_fqdn_gs)[*])         = $null;  $(avp(C_gw_core_port_gi)[*])       = $null;
    $(avp(S_rep_home_dn_gs)[*])      = $null;  $(avp(S_gw_emergency_prefixes_gs)[*]) = $null;  $(avp(S_gw_is_natted_gs)[*])         = $null;  $(avp(S_networkid_gs)[*])          = $null;
    $(avp(S_rm_media_ip_gs)[*])      = $null;  $(avp(S_rm_media_subnet_mask_gs)[*])  = $null;  $(avp(S_uri_based_route_gb)[*])      = $null;  $(avp(S_access_control_gb)[*])     = $null;
    $(avp(S_associated_ep_id_gi)[*]) = $null;  $(avp(C_inv_noanswr_timer_gs)[*])     = $null;  $(avp(C_inv_noreply_timer_gs)[*])    = $null;  $(avp(S_linked_ep_id_gi)[*])       = $null;
    $(avp(S_tmp_gs)[*])              = $null;  $(avp(C_pmap_port_gi)[*])             = $null;  $(avp(S_nat_ip_gs)[*])               = $null;  $(avp(S_rep_bitmap_gi)[*])         = $null;
    $(avp(S_sys_osv_node_gs)[*])     = $null;  $(avp(S_location_dom_name_gs)[*])     = $null;  $(avp(S_access_realm_profile_gs)[*]) = $null;  $(avp(S_core_realm_profile_gs)[*]) = $null;
    $(avp(S_test_dn_gs)[*])          = $null;  $(avp(S_tnant_id_gs)[*])              = $null;  $(avp(S_trunk_status_gb)[*])         = $null;  $(avp(S_options_enabled_gb)[*])    = $null;
    $(avp(S_socket_port_gi)[*])      = $null;  $(avp(S_cluster_server_grp_gs)[*])    = $null;  $(avp(C_gw_type_gi)[*])              = $null;  $(avp(C_rm_address_type_gi)[*])    = $null;

    xlog("L_INFO", "CI=$ci - R4b - Dipping with rm_ip=$var(S_home_dn_rm_ip_sel_gs), rm_fqdn=$var(S_home_dn_rm_fqdn_sel_gs), req_transp=$avp(C_req_transp_gs), nat=$var(S_use_si_var_nat_ls), profile=$var(S_profile_name_gs), viaPort=$var(S_home_dn_rm_port_gi)\n");

    if (osb_memdb_select("remote_ep,*|*|*|5|*|$var(S_home_dn_rm_ip_sel_gs)|$var(S_home_dn_rm_fqdn_sel_gs)|$var(S_home_dn_rm_port_gi)|$avp(C_req_transp_gs)|*|*|*|*|*|*|*|$var(S_use_si_var_nat_ls)|*|*|*|*|*|*|*|*|*|*|*|*|$var(S_profile_name_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","|$avp(S_ep_name_gs)|||||||||||||||||||||||||||||||||||||||||||||") != 1 &&
        osb_memdb_select("remote_ep,*|*|*|5|*|$var(S_home_dn_rm_ip_sel_gs)|$var(S_home_dn_rm_fqdn_sel_gs)|*|$avp(C_req_transp_gs)|*|*|*|*|*|*|*|$var(S_use_si_var_nat_ls)|*|*|*|*|*|*|*|*|*|*|*|*|$var(S_profile_name_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","|$avp(S_ep_name_gs)|||||||||||||||||||||||||||||||||||||||||||||") != 1)
    {
        xlog("L_INFO", "CI=$ci - R4b - No Remote Endpoint Candidate found. Call Rejected\n");
        append_to_reply("Warning: 399 $var(C_si_var_gs) - R4b - R-URI does not match configured HomeDN\r\n");
        sl_send_reply("403", "Forbidden");
        t_release();

        if (is_gflag("6"))
        {
            xlog("L_INFO", "bench: $rm-$rs\n");
            bm_log_timer("route-4");
        }
        exit;

    }

    xlog("L_DBG", "CI=$ci - R4b - Remote Endpoint Candidates: $(avp(S_ep_name_gs)[*])\n");

    while($(avp(S_ep_name_gs)[$var(S_sys_count_gi)]) != $null  &&  $var(S_memdb_return_gi) != 1)
    {
        $var(S_memdb_return_gi) = 1;

        $var(S_epname_ls) = $(avp(S_ep_name_gs)[$var(S_sys_count_gi)]);

        ### it should be noted that index passed below in the query is equal to the index of routing prefix in the remote_ep minus 1   ######
        $var(S_memdb_return_gi) = osb_memdb_nl_select_best_match_prefix("remote_ep_ssp,*|$var(S_epname_ls)|$var(S_matchPrefix_gs),","|$avp(S_tmp_ep_name_ls)|$avp(S_tmp_ep_prefix_ls)",2,"$avp(S_ignore_digits_li)");

        if( $var(S_memdb_return_gi) == 1 && !not_empty("$avp(S_tmp_ep_prefix_ls)"))
        {
           $var(S_memdb_return_gi) = 0;
           $var(S_ep_name_no_prefix_found_ls) = $avp(S_tmp_ep_name_ls);
           xlog("L_DBG", "CI=$ci - R4b - Remote Endpoint Candidate with no prefix: $var(S_ep_name_no_prefix_found_ls)\n");
        }

        $var(S_sys_count_gi) = $var(S_sys_count_gi) + 1;
    }


    if($var(S_memdb_return_gi) != 1 && not_empty("$var(S_ep_name_no_prefix_found_ls)") )
    {
        #Use empty prefix entry
        $avp(S_tmp_ep_name_ls) = $var(S_ep_name_no_prefix_found_ls);
        $(avp(S_tmp_ep_prefix_ls)[*]) = $null;
        $var(S_memdb_return_gi) = 1;

        xlog("L_INFO", "CI=$ci - R4b - Using default Remote Endpoint (no prefix): $var(S_ep_name_no_prefix_found_ls)\n");
    }

    if ($var(S_memdb_return_gi) != 1)
    {
        xlog("L_INFO", "CI=$ci - R4b - R-URI ($rU) does not match SSP HomeDN.  Call rejected.\n");
        append_to_reply("Warning: 399 $var(C_si_var_gs) - R4b - R-URI does not match configured HomeDN\r\n");
        sl_send_reply("403", "Forbidden");
        t_release();

        if (is_gflag("6"))
        {
            xlog("L_INFO", "bench: $rm-$rs\n");
            bm_log_timer("route-4");
        }
        exit;
    }

    $var(S_memdb_return_gi) = osb_memdb_select("remote_ep,*|$avp(S_tmp_ep_name_ls)|*|5|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","$avp(S_ses_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm_ip_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)|$avp(S_tmp_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|$avp(S_rep_home_dn_gs)|$avp(S_gw_emergency_prefixes_gs)|$avp(C_pmap_port_gi)|$avp(S_nat_ip_gs)|$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|$avp(S_sys_osv_node_gs)|$avp(S_location_dom_name_gs)|$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||$avp(S_uri_based_route_gb)|$avp(S_access_control_gb)|$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||||||$avp(S_linked_ep_id_gi)");

    xlog("L_INFO", "CI=$ci - R4b - Found best match for rU=$rU : prefix=$avp(S_tmp_ep_prefix_ls) id=$avp(S_ses_id_gi) name=$avp(S_ep_name_gs) type=$avp(C_gw_type_gi) assoc_id=$avp(S_associated_ep_id_gi) ip:$avp(S_gw_rm_ip_gs) fqdn:$avp(S_gw_rm_fqdn_gs)\n");
}

########################################################################
#QUERY_1ST_REM_EP_FROM_REALM_PROFILE
########################################################################
route[QUERY_1ST_REM_EP_FROM_REALM_PROFILE]
{
    $var(S_sys_count_gi) = 0;
    xlog("L_INFO", "CI=$ci - R4a - Entry M=$rm var(S_first_ep_found_gi)=$var(S_first_ep_found_gi) var(S_fwd_nw_id_gs)=$var(S_fwd_nw_id_gs) var(S_use_si_var_nat_ls)=$var(S_use_si_var_nat_ls)\n");

    while($var(S_first_ep_found_gi) == 0 && $(avp(S_profile_name_gs)[$var(S_sys_count_gi)]) != $null)
    {
        xlog("L_INFO", "CI=$ci - R4a - Using S_profile_name_gs=$(avp(S_profile_name_gs)[$var(S_sys_count_gi)]) fwd_nw_id=$(avp(S_realm_fwd_nw_id_gs)[$var(S_sys_count_gi)])\n");
        $var(S_profile_name_gs) = $(avp(S_profile_name_gs)[$var(S_sys_count_gi)]);
        $var(S_realm_fwd_nw_id_ls) = $(avp(S_realm_fwd_nw_id_gs)[$var(S_sys_count_gi)]);
        if (not_empty("$var(S_fwd_nw_id_gs)") && $var(S_realm_fwd_nw_id_ls) != $var(S_fwd_nw_id_gs))
        {   # Clear profile to avoid checking profile if it is a forward different from $var(S_fwd_nw_id_gs)
            xlog("L_INFO", "CI=$ci - R4a - Disable check of realm profile $var(S_profile_name_gs) due to forward vlan\n");
            $var(S_profile_name_gs) = "";
        }

        $var(S_media_nw_id_gs) = $(avp(S_media_nw_id_gs)[$var(S_sys_count_gi)]);
        $(avp(S_tmp_gs)[*]) = $null;
        if(is_method("OPTIONS") && is_present_hf("X-Siemens-Identity"))
        {
            # check the logical ID first
            $var(S_logical_id_ls) = $hdr(X-Siemens-Identity);
            ## decode it first
            $(avp(C_tmp2_gs)[*]) = $null;
            osb_decode('$var(S_logical_id_ls)','$avp(C_tmp2_gs)');
            xlog("L_INFO", "CI=$ci - R4a - Dipping remote_ep with encryptedvar(S_logical_id_ls)=$var(S_logical_id_ls), decrypted LogicalId =$avp(C_tmp2_gs) \n");

            ### Dip REP using the logical-id and profile name
            osb_memdb_select("remote_ep,*|*|$avp(C_tmp2_gs)|*|*|*|*|*|$avp(C_req_transp_gs)|*|*|*|*|$var(S_home_dn_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|$var(S_profile_name_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1","$avp(S_ses_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm_ip_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)|$avp(S_tmp_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|$avp(S_rep_home_dn_gs)|$avp(S_gw_emergency_prefixes_gs)|$avp(C_pmap_port_gi)|$avp(S_nat_ip_gs)|$avp(S_rep_bitmap_gi)||$avp(S_sys_osv_node_gs)|$avp(S_location_dom_name_gs)|$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||$avp(S_uri_based_route_gb)|$avp(S_access_control_gb)|$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||||||$avp(S_linked_ep_id_gi)");

            if(not_empty("$avp(S_tmp_gs)"))
            {
                if (!compare_ips('$avp(S_nat_ip_gs)', '$var(C_si_var_gs)'))
                    $var(S_nat_changed_lb) = 1;
                else
                    $var(S_nat_changed_lb) = 0;

                # verify if the IP or port changed
                # ASSUMPTION: FQDN not coming in from the Branch in the Via else we need to update the gw_rm_ip with the fqdn before the compare
                if(!compare_ips('$avp(S_new_src_ip_gs)', '$avp(S_gw_rm_ip_gs)') || $var(S_rm_via_port_li) != $avp(S_gw_rm_port_gi) || ($var(S_nat_changed_lb) == 1))
                {
                    xlog("L_INFO", "CI=$ci - R4a  - logicalID found:$avp(C_tmp2_gs) need to updtae the IP:PORT in REP with $avp(S_new_src_ip_gs):$var(S_rm_via_port_li)\n");
                    osb_memdb_update("remote_ep,*|*|$avp(C_tmp2_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","*|*|*|*|*|$avp(S_new_src_ip_gs)|*|$var(S_rm_via_port_li)|*|*|*|*|$var(S_ep1_natted_gi)|*|*|$sp|$var(C_si_var_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*||*|*|*|*");

                    # generates a log entry via
                    if ($var(S_nat_changed_lb) == 1) {
                        if($avp(S_nat_ip_gs) == $null || $avp(S_nat_ip_gs) == "")
                        {
                            $avp(S_nat_ip_gs) = "";
                            $var(S_nat_ip_null_lb) = 1;
                        }
                        else
                            $var(S_nat_ip_null_lb) = 0;

                        # call script to del/update the trusted ip only if transport is tls
                        if($avp(C_gw_transp_gs) == "tls") {
                            $var(S_ret_li) = osb_replace_trusted_ip("$avp(C_tmp2_gs)","$avp(S_nat_ip_gs)","$var(C_si_var_gs)");
                            xlog("L_INFO", "CI=$ci - R4a - osb_replace_trusted_ip return value:$var(S_ret_li), \n");
                        }

                        #### DO NOT DELETE #####
                        xlog("L_CRIT","@NATupdate: LOGICALID=$avp(C_tmp2_gs), OLDIP=$avp(S_nat_ip_gs), NEWIP=$var(C_si_var_gs)\n");

                        if ($var(S_nat_ip_null_lb) == 1)
                            $avp(S_nat_ip_gs) = $null;

                    }
                    ## Update Port Map if the NAT IP or Port changes.
                    if ($var(S_nat_ip_null_lb) == 1 || $sp != $avp(C_pmap_port_gi)) {
                        osb_memdb_update("port_map,*|$avp(S_nat_ip_gs)|*|$avp(C_pmap_port_gi)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","*|$var(C_si_var_gs)|*|$sp|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*");
                    }
                }
            }
        }
        else
        {
            $var(S_getSingleEntry_gi) = '';
            $var(S_home_dn_gs) = '*';

            if(is_method("OPTIONS"))
            {
                $var(S_getSingleEntry_gi) = 1;
            }

            xlog("L_INFO", "CI=$ci - R4a - Dipping remote_ep with NAT=$var(S_use_si_var_nat_ls) IP=$var(C_si_var_gs) and Via: $avp(S_new_src_ip_gs):$var(S_rm_via_port_li):$avp(C_req_transp_gs),avp(S_sig_nw_id_gs)=$avp(S_sig_nw_id_gs),avp(C_wan_ip_gs)=$avp(C_wan_ip_gs),avp(S_profile_name_gs)=$var(S_profile_name_gs)\n");
            $var(S_tmp_gs) = $avp(C_pmap_port_gi);

            ### Dip using the wanip if it is not Main networkid
            ### CQ00292852 support multiple OSBs (proxy mode) with the SAME IP address behind the DIFFERENT NATs.
            ### need to dip based on:  via-ip,vi-port and nat ip maintained in $var(C_si_var_gs)
            #{
            if(osb_memdb_select("remote_ep,*|*|*|*|*|$avp(S_new_src_ip_gs)|$fd|$var(S_rm_via_port_li)|$avp(C_req_transp_gs)|*|*|*|*|$var(S_home_dn_gs)|*|*|$var(S_use_si_var_nat_ls)|*|*|*|*|*|*|*|*|*|*|*|*|$var(S_profile_name_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,$var(S_getSingleEntry_gi)","$avp(S_ses_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm_ip_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)|$avp(S_tmp_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|$avp(S_rep_home_dn_gs)|$avp(S_gw_emergency_prefixes_gs)|$avp(C_pmap_port_gi)|$avp(S_nat_ip_gs)|$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|$avp(S_sys_osv_node_gs)|$avp(S_location_dom_name_gs)|$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||$avp(S_uri_based_route_gb)|$avp(S_access_control_gb)|$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)||$avp(S_trunk_status_gb)||$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||||||$avp(S_linked_ep_id_gi)") != 1)
                if(osb_memdb_select("remote_ep,*|*|*|*|*|$avp(S_new_src_ip_gs)|*|$var(S_rm_via_port_li)|$avp(C_req_transp_gs)|*|*|*|*|$var(S_home_dn_gs)|*|*|$var(S_use_si_var_nat_ls)|*|*|*|*|*|*|*|*|*|*|*|*|$var(S_profile_name_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,$var(S_getSingleEntry_gi)","$avp(S_ses_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm_ip_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)|$avp(S_tmp_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|$avp(S_rep_home_dn_gs)|$avp(S_gw_emergency_prefixes_gs)|$avp(C_pmap_port_gi)|$avp(S_nat_ip_gs)|$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|$avp(S_sys_osv_node_gs)|$avp(S_location_dom_name_gs)|$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||$avp(S_uri_based_route_gb)|$avp(S_access_control_gb)|$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)||$avp(S_trunk_status_gb)||$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||||||$avp(S_linked_ep_id_gi)") != 1)
                    if(osb_memdb_select("remote_ep,*|*|*|*|*|*|$avp(S_new_src_ip_gs)|$var(S_rm_via_port_li)|$avp(C_req_transp_gs)|*|*|*|*|$var(S_home_dn_gs)|*|*|$var(S_use_si_var_nat_ls)|*|*|*|*|*|*|*|*|*|*|*|*|$var(S_profile_name_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,$var(S_getSingleEntry_gi)","$avp(S_ses_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm_ip_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)|$avp(S_tmp_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|$avp(S_rep_home_dn_gs)|$avp(S_gw_emergency_prefixes_gs)|$avp(C_pmap_port_gi)|$avp(S_nat_ip_gs)|$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|$avp(S_sys_osv_node_gs)|$avp(S_location_dom_name_gs)|$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||$avp(S_uri_based_route_gb)|$avp(S_access_control_gb)|$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)||$avp(S_trunk_status_gb)||$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||||||$avp(S_linked_ep_id_gi)") !=1)
                        if(osb_memdb_select("remote_ep,*|*|*|9|*|$avp(S_new_src_ip_gs)|*|*|$avp(C_req_transp_gs)|*|*|*|*|$var(S_home_dn_gs)|*|*|$var(S_use_si_var_nat_ls)|*|*|*|*|*|*|*|*|*|*|*|*|$var(S_profile_name_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,$var(S_getSingleEntry_gi)","$avp(S_ses_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm_ip_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)|$avp(S_tmp_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|$avp(S_rep_home_dn_gs)|$avp(S_gw_emergency_prefixes_gs)|$avp(C_pmap_port_gi)|$avp(S_nat_ip_gs)|$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|$avp(S_sys_osv_node_gs)|$avp(S_location_dom_name_gs)|$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||$avp(S_uri_based_route_gb)|$avp(S_access_control_gb)|$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)||$avp(S_trunk_status_gb)||$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||||||$avp(S_linked_ep_id_gi)") != 1)
                           osb_memdb_select("remote_ep,*|*|*|9|*|*|$avp(S_new_src_ip_gs)|*|$avp(C_req_transp_gs)|*|*|*|*|$var(S_home_dn_gs)|*|*|$var(S_use_si_var_nat_ls)|*|*|*|*|*|*|*|*|*|*|*|*|$var(S_profile_name_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,$var(S_getSingleEntry_gi)","$avp(S_ses_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm_ip_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)|$avp(S_tmp_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|$avp(S_rep_home_dn_gs)|$avp(S_gw_emergency_prefixes_gs)|$avp(C_pmap_port_gi)|$avp(S_nat_ip_gs)|$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|$avp(S_sys_osv_node_gs)|$avp(S_location_dom_name_gs)|$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||$avp(S_uri_based_route_gb)|$avp(S_access_control_gb)|$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)||$avp(S_trunk_status_gb)||$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||||||$avp(S_linked_ep_id_gi)");

        }

        if(!not_empty("$avp(S_tmp_gs)"))
        {
            xlog("L_INFO", "CI=$ci - R4a - Dipping remote_ep with |||||$avp(S_new_src_ip_gs)|||$avp(C_req_transp_gs)|||||$var(S_home_dn_gs)|||$var(S_use_si_var_nat_ls)|||||||||||||$var(S_profile_name_gs)|... failed, dipping again without viaport\n");
            if(osb_memdb_select("remote_ep,*|*|*|*|*|$avp(S_new_src_ip_gs)|*|*|$avp(C_req_transp_gs)|*|*|*|*|$var(S_home_dn_gs)|*|*|$var(S_use_si_var_nat_ls)|*|*|*|*|*|*|*|*|*|*|*|*|$var(S_profile_name_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","$avp(S_ses_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm_ip_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)|$avp(S_tmp_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|$avp(S_rep_home_dn_gs)|$avp(S_gw_emergency_prefixes_gs)|$avp(C_pmap_port_gi)|$avp(S_nat_ip_gs)|$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|$avp(S_sys_osv_node_gs)|$avp(S_location_dom_name_gs)|$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||$avp(S_uri_based_route_gb)|$avp(S_access_control_gb)|$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)||$avp(S_trunk_status_gb)||$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||||||$avp(S_linked_ep_id_gi)") != 1)
                osb_memdb_select("remote_ep,*|*|*|*|*|*|$avp(S_new_src_ip_gs)|*|$avp(C_req_transp_gs)|*|*|*|*|$var(S_home_dn_gs)|*|*|$var(S_use_si_var_nat_ls)|*|*|*|*|*|*|*|*|*|*|*|*|$var(S_profile_name_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","$avp(S_ses_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm_ip_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)|$avp(S_tmp_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|$avp(S_rep_home_dn_gs)|$avp(S_gw_emergency_prefixes_gs)|$avp(C_pmap_port_gi)|$avp(S_nat_ip_gs)|$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|$avp(S_sys_osv_node_gs)|$avp(S_location_dom_name_gs)|$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||$avp(S_uri_based_route_gb)|$avp(S_access_control_gb)|$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)||$avp(S_trunk_status_gb)||$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||||||$avp(S_linked_ep_id_gi)");
        }

        ## We still support Endpoints behind static NAT (limitation of unique EP IP)
        ## if no EP found and this is an OPTION but not for Logical EP then dip without the nat ip. We need this to be able to update the NAT IP for the very first options.
        if(!not_empty("$avp(S_tmp_gs)") && is_method("OPTIONS") && !(is_present_hf("X-Siemens-Identity")))
        {
            xlog("L_INFO", "CI=$ci - R4a - OPTIONS Dipping remote_ep with *|*|*|*|*|$avp(S_new_src_ip_gs)|*|$var(S_rm_via_port_li)|$avp(C_req_transp_gs)|*|*|*|*|$var(S_home_dn_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|$var(S_profile_name_gs)|*...* \n");
            if(osb_memdb_select("remote_ep,*|*|*|*|*|$avp(S_new_src_ip_gs)|*|$var(S_rm_via_port_li)|$avp(C_req_transp_gs)|*|*|*|*|$var(S_home_dn_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|$var(S_profile_name_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,$var(S_getSingleEntry_gi)","$avp(S_ses_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm_ip_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)|$avp(S_tmp_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|$avp(S_rep_home_dn_gs)|$avp(S_gw_emergency_prefixes_gs)|$avp(C_pmap_port_gi)|$avp(S_nat_ip_gs)|$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|$avp(S_sys_osv_node_gs)|$avp(S_location_dom_name_gs)|$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||$avp(S_uri_based_route_gb)|$avp(S_access_control_gb)|$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)||$avp(S_trunk_status_gb)||$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||||||$avp(S_linked_ep_id_gi)") != 1)
                if(osb_memdb_select("remote_ep,*|*|*|*|*|*|$avp(S_new_src_ip_gs)|$var(S_rm_via_port_li)|$avp(C_req_transp_gs)|*|*|*|*|$var(S_home_dn_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|$var(S_profile_name_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,$var(S_getSingleEntry_gi)","$avp(S_ses_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm_ip_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)|$avp(S_tmp_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|$avp(S_rep_home_dn_gs)|$avp(S_gw_emergency_prefixes_gs)|$avp(C_pmap_port_gi)|$avp(S_nat_ip_gs)|$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|$avp(S_sys_osv_node_gs)|$avp(S_location_dom_name_gs)|$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||$avp(S_uri_based_route_gb)|$avp(S_access_control_gb)|$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)||$avp(S_trunk_status_gb)||$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||||||$avp(S_linked_ep_id_gi)") != 1)
                    if(osb_memdb_select("remote_ep,*|*|*|*|*|$avp(S_new_src_ip_gs)|*|*|$avp(C_req_transp_gs)|*|*|*|*|$var(S_home_dn_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|$var(S_profile_name_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","$avp(S_ses_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm_ip_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)|$avp(S_tmp_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|$avp(S_rep_home_dn_gs)|$avp(S_gw_emergency_prefixes_gs)|$avp(C_pmap_port_gi)|$avp(S_nat_ip_gs)|$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|$avp(S_sys_osv_node_gs)|$avp(S_location_dom_name_gs)|$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||$avp(S_uri_based_route_gb)|$avp(S_access_control_gb)|$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)||$avp(S_trunk_status_gb)||$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||||||$avp(S_linked_ep_id_gi)") != 1)
                        osb_memdb_select("remote_ep,*|*|*|*|*|*|$avp(S_new_src_ip_gs)|*|$avp(C_req_transp_gs)|*|*|*|*|$var(S_home_dn_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|$var(S_profile_name_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","$avp(S_ses_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm_ip_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)|$avp(S_tmp_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|$avp(S_rep_home_dn_gs)|$avp(S_gw_emergency_prefixes_gs)|$avp(C_pmap_port_gi)|$avp(S_nat_ip_gs)|$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|$avp(S_sys_osv_node_gs)|$avp(S_location_dom_name_gs)|$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||$avp(S_uri_based_route_gb)|$avp(S_access_control_gb)|$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)||$avp(S_trunk_status_gb)||$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||||||$avp(S_linked_ep_id_gi)");
        }

        if(!not_empty("$avp(S_tmp_gs)"))
        {
            ## now check dynamic peering
            xlog("L_INFO", "CI=$ci - R4a - Dipping remote_ep with received interface: avp(S_sig_nw_id_gs)=$avp(S_sig_nw_id_gs) for dynamic peering with S_uri_based_route_gb set and avp(S_profile_name_gs)=$var(S_profile_name_gs) \n");

            osb_memdb_select("remote_ep,*|*|*|*|*|*|*|*|$avp(C_req_transp_gs)|*|*|*|*|$var(S_home_dn_gs)|*|*|$var(S_use_si_var_nat_ls)|*|*|*|*|*|*|*|1|*|*|*|*|$var(S_profile_name_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","$avp(S_ses_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm_ip_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)|$avp(S_tmp_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|$avp(S_rep_home_dn_gs)|$avp(S_gw_emergency_prefixes_gs)|$avp(C_pmap_port_gi)|$avp(S_nat_ip_gs)|$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|$avp(S_sys_osv_node_gs)|$avp(S_location_dom_name_gs)|$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||$avp(S_uri_based_route_gb)|$avp(S_access_control_gb)|$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||||||$avp(S_linked_ep_id_gi)");

            if(is_avp_set("$avp(S_tmp_gs)"))
            {
                $var(S_dynamic_peer_found_gb) = 1;
                xlog("L_INFO", "CI=$ci - R4a - dynamic peering found! \n");
                if (!$avp(S_access_control_gb)  && $avp(S_gw_rm_ip_gs)== "" && $avp(S_gw_rm_fqdn_gs) == "")
                {
                    xlog("L_INFO", "CI=$ci - R4a - dynamic peering using alphanumeric base routing with no access control! \n");
                    $var(S_x_call_type_alpha_uri_gs) =  $Ri + ":" + $Rp;
                }
            }
        }

        if(not_empty("$avp(S_tmp_gs)") && $rU != $null && $rU != "")
        {

            $var(S_home_dn_rm_ip_sel_gs) = '*';
            $var(S_home_dn_rm_fqdn_sel_gs) = '*';

            if(is_pure_ip($avp(S_new_src_ip_gs)))
                $var(S_home_dn_rm_ip_sel_gs) = $avp(S_new_src_ip_gs);
            else
                $var(S_home_dn_rm_fqdn_sel_gs) = $avp(S_new_src_ip_gs);

            if ($sel(v[1].port) != $null)
               $var(S_home_dn_rm_port_gi) = $sel(v[1].port);
            else if ($(sel(v[1].transport){s.tolower}) == "tls")
               $var(S_home_dn_rm_port_gi) = 5061;
            else
               $var(S_home_dn_rm_port_gi) = 5060;

            if(!isflagset(13))  # only if dialog is not established
                route(QUERY_SSP_HOME_DN);
        }

        if (not_empty("$avp(S_tmp_gs)"))
        {
            xlog("L_INFO", "CI=$ci - R4a - dip successful. gw_id=$(avp(S_ses_id_gi)[*]), type=$(avp(C_gw_type_gi)[*]), gw_rm_ip=$(avp(S_gw_rm_ip_gs)[*]), gw_rm_fqdn=$(avp(S_gw_rm_fqdn_gs)[*]), coreip=$(avp(S_tmp_gs)[*]), avp(S_core_realm_profile_gs)=$avp(S_core_realm_profile_gs)\n");
            $var(S_1stEp_osv_node_ls) = $avp(S_sys_osv_node_gs);
            route(PROCESS_WAN_TO_LAN_FIRST_EP_FOUND);
            $var(S_memdb_attempt_ls) = 0;
            if($var(C_call_msg_gb) == 1)
            {
                $var(S_dialin_ep_name_ls) = $avp(S_ep_name_gs);
                ### verify if it is pstn_dialin
                ### do dip into tc_ep_ms_dialin table with $rU

                if(is_method("INVITE") && !isflagset(13))
                {
                   $var(S_dn_ls) =  $rU;

                   ## Remove + sign for GNF format
                   if($var(S_dn_ls) =~ "^\+")
                       $var(S_dn_ls) =  $(rU{s.strip,1});

                   xlog("L_INFO", "CI=$ci - R4a - dipping tc_ep_ms_dialin with *|$var(S_dialin_ep_name_ls)|$var(S_dn_ls)|*|*\n");
                   $var(S_memdb_attempt_ls) = 1;
                   $var(S_memdb_return_gi) = osb_memdb_select("tc_ep_ms_dialin,*|$var(S_dialin_ep_name_ls)|$var(S_dn_ls)|*|*,1","$avp(S_ses_id_gi)|$avp(S_ep_name_gs)||$avp(S_tc_dial_lanuage_gb)|$avp(S_tc_dial_ms_dn_gs)");
                   if($var(S_memdb_return_gi) != 1)
                       $var(S_memdb_return_gi) = osb_memdb_select("tc_ep_ms_dialin,*|*|$var(S_dn_ls)|*|*,1","$avp(S_ses_id_gi)|$avp(S_ep_name_gs)||$avp(S_tc_dial_lanuage_gb)|$avp(S_tc_dial_ms_dn_gs)");
                }
                else if(isflagset(13))
                {
                    if($sht(call-info=>$ci::sent) == 1)
                    {
                        xlog("L_INFO", "CI=$ci - R4a - this is LR, for request: $rm\n");
                        $var(S_memdb_attempt_ls) = 1;
                        $avp(S_tc_dial_ms_dn_gs) = $sht(call-info=>$ci::msdn);
                        xlog("L_INFO", "CI=$ci - LR: R4a - dipping tc_ep_ms_dialin with *|$sht(call-info=>$ci::epname)|*|*|$avp(S_tc_dial_ms_dn_gs)\n");
                        $var(S_memdb_return_gi) = osb_memdb_select("tc_ep_ms_dialin,*|$sht(call-info=>$ci::epname)|*|*|$avp(S_tc_dial_ms_dn_gs),1","$avp(S_ses_id_gi)|$avp(S_ep_name_gs)||$avp(S_tc_dial_lanuage_gb)|");
                        if($var(S_memdb_return_gi) != 1)
                            $var(S_memdb_return_gi) = osb_memdb_select("tc_ep_ms_dialin,*|*|*|*|$avp(S_tc_dial_ms_dn_gs),1","$avp(S_ses_id_gi)|$avp(S_ep_name_gs)||$avp(S_tc_dial_lanuage_gb)|");
                    }
                }
                if($var(S_memdb_return_gi) != 1)
                {
                    xlog("L_INFO", "CI=$ci - R4a.1 - no ms_dn found for the dialled digit:$rU\n");
                }
                else if($var(S_memdb_attempt_ls) == 1)
                {
                    xlog("L_INFO", "CI=$ci - R4a.1 - for the dialled digit:$rU,found  ms_dn: $avp(S_tc_dial_ms_dn_gs), avp(S_ep_name_gs)=$avp(S_ep_name_gs),avp(S_tc_dial_lanuage_gb)=$avp(S_tc_dial_lanuage_gb)\n");
                    $var(S_gtc_pstn_dialin_gs)     = 1;   ## global variable for pstn_dialin

                    ### call special route for pstn_dialin
                    # This route will exit if the destination is configured for PSTN dial-in route
                    route(PROCESS_PSTN_DIALIN_ROUTE);
                }
            }

            # This route will exit if the destination is configured for standalone route
            route(STANDALONE_TRUNK_ROUTE);
        } #first dip end


        ## Forward Vlan
        if (not_empty("$var(S_realm_fwd_nw_id_ls)") && not_empty("$avp(S_tmp_gs)"))
        {
            #--- Check forward network ID access side
            osb_memdb_nl_select("network_id,*|$var(S_realm_fwd_nw_id_ls)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|1,1",
                                "||||||$avp(C_fwd_ep_ip_gs)|$avp(C_fwd_ep_port_tcp_gs)|$avp(C_fwd_ep_port_tls_gs)|$avp(C_fwd_ep_port_udp_gs)||||||$avp(C_fwd_ep_port_mtls_gs)||||");

            if(not_empty("$avp(C_fwd_ep_ip_gs)") && !not_empty("$avp(C_fw_ext_ip_gs)") && !not_empty("$avp(S_lb_ext_ip_gs)"))
            {
                $avp(C_wan_ip_gs) = $avp(C_fwd_ep_ip_gs);
                $avp(C_advertised_ip_gs) = $avp(C_fwd_ep_ip_gs);
                $avp(S_fwd_ep_used_gb) = 1;
            }
        }

        $(avp(C_pmap_port_gi)[*]) = $var(S_tmp_gs);
        $var(S_sys_count_gi) = $var(S_sys_count_gi) +1;
    } # End of realm profile loop
}

########################################################################
#SIPREC_CALL_ROUTE:
########################################################################
route[SIPREC_CALL_ROUTE]
{

    $avp(S_srec_prio_ls)         = $null;
    $avp(S_srec_srv_addr_ls)     = $null;
    $avp(S_srec_srv_port_ls)     = $null;
    $avp(S_srec_srv_prot_ls)     = $null;
    $avp(S_srec_realm_ls)        = $null;


    if (is_gflag("6"))
       bm_start_timer("route-49");

    xlog("L_INFO", "CI=$ci - R49 (SIPREC CALL) - Entry M=$rm rp=$rp Rp=$Rp flags=$mF CT=$ct to=$to\n");


    if (osb_memdb_select("sip_rec_data,*|$rd|*|*|*,", "|$avp(S_srec_srv_addr_ls)|$avp(S_srec_srv_port_ls)|$avp(S_srec_srv_prot_ls)|$avp(S_srec_realm_ls)") != 1)
    {
        xlog("L_ERR", "CI=$ci - R49 -  SIPREC server NOT found\n");

        append_to_reply("Warning: 399 $var(C_si_var_gs) - R49 - SIPREC server NOT found\\r\n");
        sl_send_reply("403", "Forbidden");

        t_release();

        if (is_gflag("6"))
        {
            xlog("L_INFO", "bench: $rm-$rs\n");
            bm_log_timer("route-49");
        }
        exit;

    }


    $avp(S_srec_srv_prot_ls) = $(avp(S_srec_srv_prot_ls){s.tolower});

    $avp(C_inv_noanswr_timer_gs) = "1000";
    $avp(C_inv_noreply_timer_gs) = "1000";
    xlog("L_INFO", "CI=$ci - R49 - Setting Invite no Answer Timeout. Setting FR timers to <$avp(C_inv_noanswr_timer_gs),$avp(C_inv_noreply_timer_gs)>\n");
    t_set_fr("$(avp(C_inv_noanswr_timer_gs){s.int})","$(avp(C_inv_noreply_timer_gs){s.int})"); # Set reply timeout

    $var(S_srec_data_ls) =  ">>> SIPREC Server Data: " +
                            "\navp(S_srec_srv_addr_ls) = " + $avp(S_srec_srv_addr_ls) +
                            "\navp(S_srec_srv_port_ls) = " + $avp(S_srec_srv_port_ls) +
                            "\navp(S_srec_srv_prot_ls) = " + $avp(S_srec_srv_prot_ls) +
                            "\navp(S_srec_realm_ls)    = " + $avp(S_srec_realm_ls) ;


    xlog("L_DBG", "CI=$ci - R49 - $var(S_srec_data_ls) \n");


    $var(S_profile_type_gi) = 1;  #1="signalling" and 0= "media"

    if(osb_memdb_nl_select("realm_profile,*|$avp(S_srec_realm_ls)|*|*|*|*,1","|||$avp(S_sig_nw_id_gs)|$avp(S_media_nw_id_gs)|") != 1)
    {
        xlog("L_ERR", "CI=$ci - R49 - Could not identify SIPREC realm_profile=$avp(S_srec_realm_ls)\n");
        append_to_reply("Warning: 399 $var(C_si_var_gs) - R49 - Could not identify SIPREC realm_profile $avp(S_srec_realm_ls)\r\n");
        sl_send_reply("403", "Forbidden");

        t_release();

        if (is_gflag("6"))
        {
            xlog("L_INFO", "bench: $rm-$rs\n");
            bm_log_timer("route-49");
        }
        exit;
    }


    xlog("L_INFO", "CI=$ci - R49 -  realm_profile=$avp(S_srec_realm_ls): avp(S_sig_nw_id_gs)=$avp(S_sig_nw_id_gs), avp(S_media_nw_id_gs)=$avp(S_media_nw_id_gs) \n");

    ### dip into network_id table to read the wanip using the signalling_nw_id
    $avp(S_network_type_gi) = 0;  #1="access" and 0= "core"

    $(avp(C_fw_ext_ip_gs)[*]) = $null;
    $(avp(S_fw_media_ip_gs)[*]) = $null;

    #--- Check signaling network ID access side
    if (osb_memdb_nl_select("network_id,*|$avp(S_sig_nw_id_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1",
                            "|$avp(S_sig_nw_id_gs)|$avp(S_network_type_li)|$avp(S_network_interface_dst_sig_gi)|||$avp(C_wan_ip_gs)|$avp(C_wan_port_tcp_gs)|$avp(C_wan_port_tls_gs)|$avp(C_wan_port_udp_gs)||$avp(C_fw_ext_ip_gs)|||$avp(S_access_restriction_gi)|$avp(C_port_mtls_gs)||||") != 1)
    {
        xlog("L_ERR", "CI=$ci - R49 - Could not identify SIPREC signaling network_id=$avp(S_sig_nw_id_gs)\n");
        append_to_reply("Warning: 399 $var(C_si_var_gs) - R49 - Could not identify SIPREC signaling network_id $avp(S_sig_nw_id_gs)\r\n");
        sl_send_reply("403", "Forbidden");

        t_release();

        if (is_gflag("6"))
        {
            xlog("L_INFO", "bench: $rm-$rs\n");
            bm_log_timer("route-49");
        }
        exit;
    }
    #--- Check media network ID access side
    if (osb_memdb_nl_select("network_id,*|$avp(S_media_nw_id_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1",
                            "|||$avp(S_network_interface_dst_media_gi)|||||||||||||$avp(S_fw_media_ip_gs)|$avp(S_wan_on_sdp_gs)||") != 1)
    {
        xlog("L_ERR", "CI=$ci - R49 - Could not identify SIPREC media network_id=$avp(S_media_nw_id_gs)\n");
        append_to_reply("Warning: 399 $var(C_si_var_gs) - R49 - Could not identify SIPREC media network_id $avp(S_media_nw_id_gs)\r\n");
        sl_send_reply("403", "Forbidden");

        t_release();

        if (is_gflag("6"))
        {
            xlog("L_INFO", "bench: $rm-$rs\n");
            bm_log_timer("route-49");
        }
        exit;
    }

    $var(S_network_interface_src_sig_gi) = $avp(S_network_interface_src_sig_gi);

    $var(S_network_data_ls) =  ">>> SIPREC Network Data:" +
                               "\navp(S_sig_nw_id_gs)                   = " + $avp(S_sig_nw_id_gs) +
                               "\navp(S_network_type_li)                = " + $avp(S_network_type_li) +
                               "\navp(S_network_interface_dst_sig_gi)   = " + $avp(S_network_interface_dst_sig_gi) +
                               "\navp(S_network_interface_dst_media_gi) = " + $avp(S_network_interface_dst_media_gi) +
                               "\navp(C_wan_ip_gs)                      = " + $avp(C_wan_ip_gs) +
                               "\navp(C_wan_port_tcp_gs)                = " + $avp(C_wan_port_tcp_gs) +
                               "\navp(C_wan_port_tls_gs)                = " + $avp(C_wan_port_tls_gs) +
                               "\navp(C_wan_port_udp_gs)                = " + $avp(C_wan_port_udp_gs) +
                               "\navp(C_fw_ext_ip_gs)                   = " + $avp(C_fw_ext_ip_gs) +
                               "\navp(S_access_restriction_gi)          = " + $avp(S_access_restriction_gi) +
                               "\navp(C_port_mtls_gs)                   = " + $avp(C_port_mtls_gs) +
                               "\navp(S_fw_media_ip_gs)                 = " + $avp(S_fw_media_ip_gs) +
                               "\navp(S_wan_on_sdp_gs)                  = " + $avp(S_wan_on_sdp_gs) ;

    xlog("L_DBG", "CI=$ci - R49 - $var(S_network_data_ls) \n");

    $var(S_network_interface_dst_sig_gi) = $avp(S_network_interface_dst_sig_gi);

    $var(S_network_type_gi) = $avp(S_network_type_li);

    if( $avp(S_network_type_li) == 0 )
    {
        xlog("L_INFO", "CI=$ci - R49 - SIPREC server=$ru realm_profile=$avp(S_srec_realm_ls) network_id=$avp(S_sig_nw_id_gs) is in core side\n");
    }
    else
    {
        xlog("L_INFO", "CI=$ci - R49 - SIPREC server=$ru realm_profile=$avp(S_srec_realm_ls) network_id=$avp(S_sig_nw_id_gs) is in access side\n");
    }

    if($avp(S_srec_srv_prot_ls) == "tls")
        $var(S_port_li) = 5061;
    else
        $var(S_port_li) = 5060;

    $du = "sip:siprec@"+$avp(S_srec_srv_addr_ls)+":"+$avp(S_srec_srv_port_ls)+";transport="+$avp(S_srec_srv_prot_ls);
    $ru = $du;
    $tu = $du;
    $fu = "sip:sbcinternet2@" + $avp(C_wan_ip_gs)+":"+ $var(S_port_li);

    remove_hf("Contact");
    insert_hf("Contact: <sip:sbcinternet2@$avp(C_wan_ip_gs):$var(S_port_li);transport=$avp(S_srec_srv_prot_ls)>\r\n", "Contact");

    $var(C_duChanged_gi) = 1;

    #Socket
    $var(C_fs_gs) = $avp(S_srec_srv_prot_ls) + ":" + $avp(C_wan_ip_gs) + ":" + $var(S_port_li);

    xlog("L_INFO", "CI=$ci - R49 - Setting DU=$du var(C_fs_gs)=$var(C_fs_gs)\n");

    if(not_empty("$avp(S_fw_media_ip_gs)"))
    {
        xlog("L_INFO", "CI=$ci - R49 - firewall set for this networkid= $avp(S_network_interface_dst_sig_gi),avp(S_fw_media_ip_gs)=$avp(S_fw_media_ip_gs)\n");
        $var(S_media_ext_firewall_set_gb) = 1;
    }

    if (is_gflag("6"))
    {
        xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
        bm_log_timer("route-49");
    }
    xlog("L_INFO", "CI=$ci - R49 - === END OF SIPREC_CALL_ROUTE ==================================\n");

}



########################################################################
# route NM_OUTGOING_FORWARD_ROUTE: outgoing-forward-route
# input pseudo-variables: $var(B_mosip_message_gb), $var(S_stateless_msg_gb), $avp(S_gw_rm_ip_gs), $avp(S_gw_rm_port_gi),
#                             $avp(C_gw_transp_gs), $(S_dispatch_status_li)
# output pseudo-variables:
# input headers:
# input flags:
# changed flags:
########################################################################
route[NM_OUTGOING_FORWARD_ROUTE]
{
    # FRN4862: SIP message forward to MoSIP case
    if ($var(C_mosip_message_gb) && is_present_hf("X-AEP"))
    {
        if (($fU != "msadapter") ||
            ($tU != "msadapter") ||
            (!($sel(event) =~ "mgcp-encapsulate.*")) ||
            ($cl <= 0))
        {
            xlog("L_ERR", "CI=$ci -R38 - Message with MoSIP support dropped, invalid SIP header content\n");
            exit;
        }

        # We need to maanipulate $du before call SIP_HEADERS_CHANGE_ROUTE?
        xlog("L_INFO","CI=$ci -R38 - Message with MoSIP detected, forwarding request ...\n");
        route(SIP_HEADERS_CHANGE_ROUTE);

        # Maybe we need to correct variable names, because these will be used in SIP_HEADERS_CHANGE_ROUTE
        if($var(S_ep1_natted_gi) == 1) ## NAT EP
        {
             $var(S_use_ip_ls) = $var(S_ep1_nat_ip_gs);
             $var(S_use_port_ls) = ":" + $var(C_ep1_nat_port_gs);
             xlog("L_INFO", "CI=$ci - R38- NAT EP \n");
        }
        else
        {
             $var(S_use_ip_ls) = $avp(S_gw_rm_ip_gs);
             if ($avp(C_rm_address_type_gi) != 1)
                 $var(S_use_port_ls) = ":" + $avp(S_gw_rm_port_gi);
             else
                 $var(S_use_port_ls) = "";
        }
        put_ip_in_paran('$var(S_use_ip_ls)', '$var(S_use_ip_ls)');
        xlog("L_INFO", "CI=$ci - R38 - var(S_use_ip_ls)=$var(S_use_ip_ls), var(S_use_port_ls)=$var(S_use_port_ls), avp(C_wan_port_gs)=$avp(C_wan_port_gs),avp(C_wan_port_gs)=$avp(C_wan_port_gs)\n");
        $du = "sip:" +  $var(S_use_ip_ls) + $var(S_use_port_ls) + ";transport=" + $avp(C_gw_transp_gs);

        # Force Socket to remote Endpoint, message will use the same WAN IP address that receive message
        ## $fs = $(avp(C_gw_transp_gs){s.tolower}) + ":" + $(fu{uri.domain});
        $fs = $(avp(C_gw_transp_gs){s.tolower}) + ":" + $avp(C_wan_ip_gs);

        xlog("L_INFO", "CI=$ci - R38- MOSIP EP - du=$du, fs=$fs \n");
    }
    else if ($var(C_mosip_message_gb)) ## We should have found the second Media Server in R4 else it wouldn't come here
    {
        xlog("L_INFO", "CI=$ci - R38 -  Using MS Adapter IP: 192.168.33.101\n");

        $fs = "udp:192.168.33.101";
        $du = "sip:192.168.33.101:4561;transport=udp";
    }

    # Forward message in STATELESS mode
    xlog("L_INFO", "CI=$ci - R38 -  avp(S_nat_ip_gs)=$avp(S_nat_ip_gs) After putting brackets ep var(S_ep1_nat_ip_gs)=$var(S_ep1_nat_ip_gs)\n");

#    t_on_reply("NM_NM_OUTGOING_FORWARD_REPLY_ROUTE");

    if ($var(S_stateless_msg_gb))
    {
        $var(S_dispatch_status_li) = forward();
        if ($var(S_dispatch_status_li))
            xlog("L_INFO", "CI=$ci - R-38 - Stateless Dispatch=$var(S_stateless_msg_gb). Message sent.\n");
        else
            xlog("L_ERR", "CI=$ci - R-38 - Stateless Dispatch=$var(S_stateless_msg_gb). Message sent failed!\n");
    }
    else
    {
        $var(S_dispatch_status_li) = t_relay_to("0x02");
        if ($var(S_dispatch_status_li))
            xlog("L_INFO", "CI=$ci - R-38 - Relay Dispatch=$var(S_stateless_msg_gb). Message sent.\n");
        else
            xlog("L_ERR", "CI=$ci - R-38 - Relay Failure - Message sent failed! M=$rm F=$fu T=$tu CT=$ct IP=$var(C_si_var_gs) DU=$du FS=$fs\n");
    }
    xlog("L_INFO", "CI=$ci - R38 -  avp(S_nat_ip_gs)=$avp(S_nat_ip_gs) After putting brackets ep var(S_ep1_nat_ip_gs)=$var(S_ep1_nat_ip_gs)\n");
}

########################################################################
# route NM_OUTGOING_RELAY_ROUTE: outgoing-relay-route
# input pseudo-variables: $avp(C_core_ip_gs), $avp(C_port_gi), $avp(C_req_transp_gs), $avp(C_sys_current_binding_ip_gs), $avp(C_sys_current_binding_port_gi),
#                         $avp(C_sys_current_binding_transp_gs), $avp(S_gw_id_gi), $var(C_call_msg_gb), $var(C_ep1_core_ip_gs), $var(C_ep1_core_port_gi),
#                         $var(C_ep1_nat_port_gs), $var(C_ep1_rm_fqdn_gs), $var(C_ep1_rm_ip_gs), $var(C_ep1_rm_port_gi), $var(C_ep1_transp_gs),
#                         $var(C_ep1_type_gi), $var(C_ep2_core_port_gi), $var(C_fs_gs), $var(C_hdr_rr_gs), $var(C_rs_core_port_gi),
#                         $var(C_ssm_msg_gb)
# output pseudo-variables: $avp(C_core_ip_gs)
# input headers:
# input flags:  g6
# changed flags:
########################################################################
route[NM_OUTGOING_RELAY_ROUTE]
{

    if (is_gflag("6"))
        bm_start_timer("route-10");

    xlog("L_INFO", "CI=$ci - R10 - Entry M=$rm avp(C_req_transp_gs)=$avp(C_req_transp_gs)\n");
    if($avp(C_sys_current_binding_ip_gs) == "0.0.0.0")
    {
       # protection against wrong binding being used
       xlog("L_INFO", "CI=$ci - R10 - Normal Mode Route called with binding 0.0.0.0 \n");

       if (is_gflag("6"))
       {
           xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
           bm_log_timer("route-10");
       }
       return(2);
    }

    $fs = $var(C_fs_gs);
    xlog("L_INFO", "CI=$ci - R10 - socket set: $fs\n");
    if(($var(C_ssm_msg_gb) == 0) && ($var(C_call_msg_gb) == 1 || $var(S_msg_to_ssm_gb)))
    {
        xlog("L_INFO", "CI=$ci - R10 - saving var(S_rs_core_port_gi)=$var(C_rs_core_port_gi),var(S_ep1_id_gi)=$avp(S_gw_id_gi),var(C_ep1_rm_ip_gs)=$var(C_ep1_rm_ip_gs),var(C_ep1_rm_fqdn_gs)=$var(C_ep1_rm_fqdn_gs),var(C_ep1_rm_port_gi) = $var(C_ep1_rm_port_gi),var(C_ep1_nat_port_gs)=$var(C_ep1_nat_port_gs),var(C_ep1_transp_gs)=$var(C_ep1_transp_gs),var(C_ep1_type_gi)=$var(C_ep1_type_gi),var(C_ep1_core_ip_gs)=$var(C_ep1_core_ip_gs),var(C_ep1_core_fqdn_gs)=$var(C_ep1_core_fqdn_gs),var(C_ep1_core_port_gi)=$var(C_ep1_core_port_gi),$avp(C_core_ip_gs)=$avp(C_core_ip_gs),avp(C_port_gi)=$avp(C_port_gi),var(C_ep2_core_port_gi)=$var(C_ep2_core_port_gi),var(C_hdr_rr_gs)=$var(C_hdr_rr_gs) \n\n");
        if ($var(C_call_msg_gb) == 1)
            route(SSM_TAGS_WAN_2_LAN_ROUTE);
        $var(S_to_access_gb) = 0;
        route(SSM_RELAY);
        return($retcode);
    }
    else
    {
        t_on_failure("NM_GENERAL_FAILURE_ROUTE");
        $var(S_log_fr_ls) = "";
        if ($var(C_g_useSsmRecordRoute_gb) != 1 || $var(C_duChanged_gi) != 1)
        {
            if(!is_method("INVITE"))
            {
                # Set core side timeout for non INVITE - need to override the default value from parameter fr_timer
                t_set_fr(360000, 6000); # Set reply timeout for non INVITE to server
                $var(S_log_fr_ls) = "Setting FR timers to <360000,6000>";
            }
            $du = "sip:" + $avp(C_sys_current_binding_ip_gs) + ":" + $avp(C_sys_current_binding_port_gi) + ";transport=" + $avp(C_sys_current_binding_transp_gs);
        }
        xlog("L_INFO", "CI=$ci - R10 - $rm from $si using du=$du . $var(S_log_fr_ls)\n");
        route(SIP_HEADERS_CHANGE_ROUTE);

        route(CSEQ_TRACK_UPDATES_ROUTE);

        if(!t_relay_to())
        {
             xlog("L_ERR", "CI=$ci - R10 - Relay failure - M=$rm RURI=$ru From=$fu To=$tu DU=$du FS=$fs\n");
             if (is_gflag("6"))
             {
                 xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
                 bm_log_timer("route-10");
             }
             return(2);
        }
    }
    if (is_gflag("6"))
    {
        xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
        bm_log_timer("route-10");
    }
    return(1);
}

########################################################################
#SSM_RELAY: Handle relay request messages to SSM
########################################################################
route[SSM_RELAY]
{
    if (is_gflag("6"))
        bm_start_timer("route-45");

    xlog("L_INFO", "CI=$ci - R45 (SSM_RELAY) - orig.FS=$fs orig.du=$du to_access=$var(S_to_access_gb) use_max_fr_timers=$var(S_use_max_fr_timers_for_ssm_gb)\n");

    route(SIP_HEADERS_CHANGE_ROUTE);

    $fs = $var(C_ssm_transport_gs) + ":" + $var(C_ssm_ip_gs);

    $du = "sip:" + $var(C_ssm_ip_gs) + ":" + $var(C_ssm_port_gi) + ";transport=" + $var(C_ssm_transport_gs);

    $var(S_log_fr_ls) = "";
    if ($var(S_use_max_fr_timers_for_ssm_gb))
    {
        t_set_fr(600000, 32000); # Set no answer and no_reply to maximal values for messages to SSM
        $var(S_log_fr_ls) = "Setting FR timers to ssm <600000, 32000>";
    }
    xlog("L_INFO", "CI=$ci - R45- Relay message to SSM fs=$fs du=$du . $var(S_log_fr_ls)\n");
    $var(S_ret_li) = 1;
    $var(S_relay_tries_li) = 0;
    while($var(S_relay_tries_li) < 3)
    {
        if(t_relay_to())
            break;
        $var(S_relay_tries_li) = $var(S_relay_tries_li) + 1;
        if($var(S_relay_tries_li) >= 3)
        {
            xlog("L_ERR", "CI=$ci - R45- Relay failure - Failed to relay message to SSM - M=$rm F=$fu T=$tu CT=$ct IP=$var(C_si_var_gs) DU=$du FS=$fs\n");
            if ($var(S_to_access_gb))
                append_to_reply("Warning: 399 $var(C_ri_var_gs) - R45 - Failure to relay to SSM towards access side.\r\n");
            else
                append_to_reply("Warning: 399 $avp(C_wan_ip_gs) - R45 - Failure to relay to SSM towards core side.\r\n");

            if (!has_totag())
                sl_send_reply("480", "Temporarily Unavailable");
            else if (!is_method("ACK"))
                sl_send_reply("500", "Server Internal Error");
            $var(S_ret_li) = 2;
            break;
        }
        else
        {
            xlog("L_WARNING", "CI=$ci - R45- Relay failure - Failed to relay message to SSM - try $var(S_relay_tries_li) - M=$rm F=$fu T=$tu CT=$ct IP=$var(C_si_var_gs) DU=$du FS=$fs\n");
            usleep("350000");  # 350 ms between all tries
        }
    }

    if (is_gflag("6"))
    {
        xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
        bm_log_timer("route-45");
    }
    return($var(S_ret_li));
}




########################################################################
# route EMERGENCY_CALL_INV_ROUTE: Emergency Invite handling
# input pseudo-variables: $avp(C_gw_behind_ep_gi), $avp(S_e911_emerg_table_id_li), $avp(S_e911_lin_gs), $avp(S_e911_routing_prefix_gs), $avp(S_e911_send_lin_instead_cpn_ls),
#                         $avp(S_e911_subnet_id_ls), $avp(S_subnet_ip_gs), $avp(S_subnet_mask_gs), $avp(S_tmp_gs), $var(C_ep1_core_ip_gs),
#                         $var(C_ep2_core_ip_gs), $var(C_si_var_gs), $var(C_ssm_msg_gb), $var(S_e911_emergency_table_Id_li), $var(S_e911_routing_prefix_ls),
#                         $var(S_e911_send_lin_instead_cpn_lb), $var(S_e911_subnet_id_li), $var(S_found_gb), $var(S_lanip_4_6_gs), $var(S_mask_ls),
#                         $var(S_sys_count_gi)
# output pseudo-variables: $avp(S_e911_emerg_table_id_li), $avp(S_e911_routing_prefix_gs), $avp(S_e911_send_lin_instead_cpn_ls), $avp(S_e911_subnet_id_ls), $avp(S_subnet_ip_gs),
#                          $avp(S_subnet_mask_gs), $var(C_hdr_rr_gs), $var(C_new_pai_hdr_gs), $var(S_e911_emergency_table_Id_li), $var(S_e911_routing_prefix_ls),
#                          $var(S_e911_send_lin_instead_cpn_lb), $var(S_e911_subnet_id_li), $var(S_found_gb), $var(S_mask_ls), $var(S_sys_count_gi)
# input headers: Call-Id, Contact, From
# input flags: 11, g6
# changed flags: 16
########################################################################
route[EMERGENCY_CALL_INV_ROUTE]
{

    if (is_gflag("6"))
        bm_start_timer("route-33");

    xlog("L_INFO", "CI=$ci - R33- Entry R-URI=$rU, M=$rm CI=$ci\n");

    $var(Bsm_pidflo_xml_ls)     = "";
    # Get data from Emergency Calling Subnets Table
    $var(S_sys_count_gi) = 0;
    $var(S_found_gb) = 0;
    $(avp(S_e911_emerg_table_id_li)[*]) = $null;

    osb_memdb_nl_select("emergency,*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","$avp(S_e911_emerg_table_id_li)|$avp(S_e911_subnet_id_ls)||$avp(S_subnet_ip_gs)|$avp(S_subnet_mask_gs)|$avp(S_e911_routing_prefix_gs)|$avp(S_e911_send_lin_instead_cpn_ls)|$avp(S_e911_country_gs)|$avp(S_e911_state_gs)|$avp(S_e911_district_gs)|$avp(S_e911_city_gs)|$avp(S_e911_street_gs)|$avp(S_e911_direction_gs)|$avp(S_e911_suffix_gs)|$avp(S_e911_number_gs)|$avp(S_e911_postcode_gs)|$avp(S_e911_communityname_gs)|$avp(S_e911_building_gs)|$avp(S_e911_floor_gs)|$avp(S_e911_room_gs)|$avp(S_e911_ep_id_ls)");
    while($(avp(S_e911_emerg_table_id_li)[$var(S_sys_count_gi)]) != $null &&
        $(avp(S_e911_emerg_table_id_li)[$var(S_sys_count_gi)]) != '' &&
        $var(S_found_gb) == 0) {

        $var(S_sys_cond_lb) = 0;
        if($var(S_locationDomainName_gs) == '' && $(avp(S_e911_ep_id_ls)[$var(S_sys_count_gi)]) != '')
        {
            $var(S_sys_cond_lb) = 1;
        }
        else if ($var(S_locationDomainName_gs) != '' && $(avp(S_e911_ep_id_ls)[$var(S_sys_count_gi)]) == '')

        {
            $var(S_sys_cond_lb) = 1;
        }

        if($var(S_sys_cond_lb) == 1)
        {
            if(ip_and_mask_compare('$var(C_si_var_gs)', '$(avp(S_subnet_ip_gs)[$var(S_sys_count_gi)])', '$(avp(S_subnet_mask_gs)[$var(S_sys_count_gi)])') == 1)

            {
                xlog("L_INFO", "CI=$ci - R33- Checked IncomeIP:$var(C_si_var_gs) against SubnetIP:$(avp(S_subnet_ip_gs)[$var(S_sys_count_gi)])\n");

                $var(S_found_gb) = 1;
                $var(S_e911_emergency_table_Id_li) = $(avp(S_e911_emerg_table_id_li)[$var(S_sys_count_gi)]);
                $var(S_e911_subnet_id_li) = $(avp(S_e911_subnet_id_ls)[$var(S_sys_count_gi)]);
                $var(S_e911_routing_prefix_ls) = $(avp(S_e911_routing_prefix_gs)[$var(S_sys_count_gi)]);
                $var(S_e911_send_lin_instead_cpn_lb) = $(avp(S_e911_send_lin_instead_cpn_ls)[$var(S_sys_count_gi)]);
                $var(S_e911_country_ls) = $(avp(S_e911_country_gs)[$var(S_sys_count_gi)]);
                $var(S_e911_state_ls) = $(avp(S_e911_state_gs)[$var(S_sys_count_gi)]);
                $var(S_e911_district_ls) = $(avp(S_e911_district_gs)[$var(S_sys_count_gi)]);
                $var(S_e911_city_ls) = $(avp(S_e911_city_gs)[$var(S_sys_count_gi)]);
                $var(S_e911_street_ls) = $(avp(S_e911_street_gs)[$var(S_sys_count_gi)]);
                $var(S_e911_direction_ls) = $(avp(S_e911_direction_gs)[$var(S_sys_count_gi)]);
                $var(S_e911_suffix_ls) = $(avp(S_e911_suffix_gs)[$var(S_sys_count_gi)]);
                $var(S_e911_number_ls) = $(avp(S_e911_number_gs)[$var(S_sys_count_gi)]);
                $var(S_e911_postcode_ls) = $(avp(S_e911_postcode_gs)[$var(S_sys_count_gi)]);
                $var(S_e911_communityname_ls) = $(avp(S_e911_communityname_gs)[$var(S_sys_count_gi)]);
                $var(S_e911_building_ls) = $(avp(S_e911_building_gs)[$var(S_sys_count_gi)]);
                $var(S_e911_floor_ls) = $(avp(S_e911_floor_gs)[$var(S_sys_count_gi)]);
                $var(S_e911_room_ls) = $(avp(S_e911_room_gs)[$var(S_sys_count_gi)]);

                $(avp(S_e911_emerg_table_id_li)[*]) = $null;
                $(avp(S_e911_subnet_id_ls)[*]) = $null;
                $(avp(S_e911_routing_prefix_gs)[*]) = $null;
                $(avp(S_e911_send_lin_instead_cpn_ls)[*]) = $null;
                $(avp(S_e911_country_gs)[*]) = $null;
                $(avp(S_e911_state_gs)[*]) = $null;
                $(avp(S_e911_district_gs)[*]) = $null;
                $(avp(S_e911_city_gs)[*]) = $null;
                $(avp(S_e911_street_gs)[*]) = $null;
                $(avp(S_e911_direction_gs)[*]) = $null;
                $(avp(S_e911_suffix_gs)[*]) = $null;
                $(avp(S_e911_number_gs)[*]) = $null;
                $(avp(S_e911_postcode_gs)[*]) = $null;
                $(avp(S_e911_communityname_gs)[*]) = $null;
                $(avp(S_e911_building_gs)[*]) = $null;
                $(avp(S_e911_floor_gs)[*]) = $null;
                $(avp(S_e911_room_gs)[*]) = $null;

                $avp(S_e911_emerg_table_id_li) = $var(S_e911_emergency_table_Id_li);
                $avp(S_e911_subnet_id_ls) = $var(S_e911_subnet_id_li);
                $avp(S_e911_routing_prefix_gs) = $var(S_e911_routing_prefix_ls);
                $avp(S_e911_send_lin_instead_cpn_ls) = $var(S_e911_send_lin_instead_cpn_lb);
                $avp(S_e911_country_gs) = $var(S_e911_country_ls);
                $avp(S_e911_state_gs) = $var(S_e911_state_ls);
                $avp(S_e911_district_gs) = $var(S_e911_district_ls);
                $avp(S_e911_city_gs) = $var(S_e911_city_ls);
                $avp(S_e911_street_gs) = $var(S_e911_street_ls);
                $avp(S_e911_direction_gs) = $var(S_e911_direction_ls);
                $avp(S_e911_suffix_gs) = $var(S_e911_suffix_ls);
                $avp(S_e911_number_gs) = $var(S_e911_number_ls);
                $avp(S_e911_postcode_gs) = $var(S_e911_postcode_ls);
                $avp(S_e911_communityname_gs) = $var(S_e911_communityname_ls);
                $avp(S_e911_building_gs) = $var(S_e911_building_ls);
                $avp(S_e911_floor_gs) = $var(S_e911_floor_ls);
                $avp(S_e911_room_gs) = $var(S_e911_room_ls);
            }
        }

         $var(S_sys_count_gi) = $var(S_sys_count_gi) + 1;

    }
 #   avp_db_query("SELECT id, subnetId, routingPrefix, sendLinInsteadCpn FROM emergency WHERE  (inet('$var(C_si_var_gs)') & mask = subnet & mask ) ORDER BY mask DESC LIMIT 1",
 #                "$avp(S_e911_emerg_table_id_li);$avp(S_e911_subnet_id_ls);$avp(S_e911_routing_prefix_gs);$avp(S_e911_send_lin_instead_cpn_ls)");

    xlog("L_INFO","CI=$ci - R33 - EMERGENCY QUERY RESULT: ID: $avp(S_e911_emerg_table_id_li), SubnetLINId: $avp(S_e911_subnet_id_ls), RoutingPrefix: $avp(S_e911_routing_prefix_gs), SendLIN: $avp(S_e911_send_lin_instead_cpn_ls)");

    if($avp(S_e911_emerg_table_id_li) == $null)
    {
        xlog("L_INFO", "CI=$ci - R33 - Emergency Calling Subnet not found. Use default subnet.\n");

        # Get default subnet data
        $var(S_sys_count_gi) = 0;
        $var(S_found_gb) = 0;
        $var(S_mask_ls) = '255.255.255.255';
        osb_memdb_nl_select("emergency,*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","$avp(S_e911_emerg_table_id_li)|$avp(S_e911_subnet_id_ls)||$avp(S_subnet_ip_gs)|$avp(S_subnet_mask_gs)|$avp(S_e911_routing_prefix_gs)|$avp(S_e911_send_lin_instead_cpn_ls)||||||||||||||$avp(S_e911_ep_id_ls)");
        while($(avp(S_e911_emerg_table_id_li)[$var(S_sys_count_gi)]) != $null && $var(S_found_gb) == 0) {
            if(ip_and_mask_compare('$var(S_mask_ls)', '$(avp(S_subnet_ip_gs)[$var(S_sys_count_gi)])', '$(avp(S_subnet_mask_gs)[$var(S_sys_count_gi)])') == 1)
            {
                $var(S_found_gb) = 1;
                $var(S_e911_emergency_table_Id_li) = $(avp(S_e911_emerg_table_id_li)[$var(S_sys_count_gi)]);
                $var(S_e911_subnet_id_li) = $(avp(S_e911_subnet_id_ls)[$var(S_sys_count_gi)]);
                $var(S_e911_routing_prefix_ls) = $(avp(S_e911_routing_prefix_gs)[$var(S_sys_count_gi)]);
                $var(S_e911_send_lin_instead_cpn_lb) = $(avp(S_e911_send_lin_instead_cpn_ls)[$var(S_sys_count_gi)]);

                $(avp(S_e911_emerg_table_id_li)[*]) = $null;
                $(avp(S_e911_subnet_id_ls)[*]) = $null;
                $(avp(S_e911_routing_prefix_gs)[*]) = $null;
                $(avp(S_e911_send_lin_instead_cpn_ls)[*]) = $null;

                $avp(S_e911_emerg_table_id_li) = $var(S_e911_emergency_table_Id_li);
                $avp(S_e911_subnet_id_ls) = $var(S_e911_subnet_id_li);
                $avp(S_e911_routing_prefix_gs) = $var(S_e911_routing_prefix_ls);
                $avp(S_e911_send_lin_instead_cpn_ls) = $var(S_e911_send_lin_instead_cpn_lb);
            }
            $var(S_sys_count_gi) = $var(S_sys_count_gi) + 1;
        }

 #       avp_db_query("SELECT id, subnetId, routingPrefix, sendLinInsteadCpn FROM emergency WHERE (inet('255.255.255.255') & mask = subnet & mask ) ORDER BY mask DESC LIMIT 1",
 #                    "$avp(S_e911_emerg_table_id_li);$avp(S_e911_subnet_id_ls);$avp(S_e911_routing_prefix_gs);$avp(S_e911_send_lin_instead_cpn_ls)");

        xlog("L_INFO","CI=$ci - R33 - EMERGENCY QUERY RESULT: ID: $avp(S_e911_emerg_table_id_li), LIN: $avp(S_e911_subnet_id_ls), RoutingPrefix: $avp(S_e911_routing_prefix_gs), SendLIN: $avp(S_e911_send_lin_instead_cpn_ls), from IP: 255.255.255.255");
    }

    # Subnet Found (specific or default)
    if($avp(S_e911_emerg_table_id_li) != $null)
    {
        # Add record route case INVITE do not reach the PSAP
#        add_rr_param(";emergency=yes");
        $var(C_hdr_rr_gs) = ";emergency=yes";

        setflag(16); # emergency call

        # Send to PSAP Location Identification Number instead of Calling Party Number
        # If from B2BUA, substitution already done
        xlog("L_INFO","CI=$ci - R33 - dipping into LIN with avp(S_e911_subnet_id_ls)=$avp(S_e911_subnet_id_ls)");

        if (!has_body("multipart/mixed") && !search_body("Content-Type: *application/pidf") &&
            $avp(S_e911_country_gs) != $null && $avp(S_e911_country_gs) != ''){

            #build entity
            $var(Bsm_pidflo_entity_ls)  = $(sel(contact.uri){uri.user}) + "@" + $(sel(contact.uri){uri.domain});

            #build timestamp in emergency pidf-lo format
            $var(B_timeformatted_ls) = $Tf;
            $var(B_emergencytimeformatted_ls) = '';
            $var(B_month_ls) = '';

            $var(B_months_table_ls) = "Jan=01;Feb=02;Mar=03;Apr=04;May=05;Jun=06;Jul=07;Ago=08;Sep=09;Oct=10;Nov=11;Dec=12";
            $var(B_month_ls) = $(var(B_months_table_ls){param.value,$(var(B_timeformatted_ls){s.select,1, })});

            $var(B_emergencytimeformatted_ls) = $(var(B_timeformatted_ls){s.select,4, }) + "-" + $var(B_month_ls) + "-" + $(var(B_timeformatted_ls){s.select,2, }) + "T" + $(var(B_timeformatted_ls){s.select,3, }) + "Z";

            # add xml header
            $var(Bsm_pidflo_xml_ls) = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n" +
                                    "<presence xmlns=\"urn:ietf:params:xml:ns:pidf\"\r\n" +
                                    "          xmlns:gp=\"urn:ietf:params:xml:ns:pidf:geopriv10\"\r\n" +
                                    "          xmlns:gbp=\"urn:ietf:params:xml:ns:pidf:geopriv10:basicPolicy\"\r\n" +
                                    "          xmlns:ca=\"urn:ietf:params:xml:ns:pidf:geopriv10:civicAddr\"\r\n" +
                                    "          entity=\"pres:" + $var(Bsm_pidflo_entity_ls) + "\">\r\n" +
                                    "    <tuple id=\"openscapesbc-1\">\r\n" +
                                    "      <status>\r\n" +
                                    "        <geopriv>\r\n" +
                                    "          <location-info>\r\n" +
                                    "            <civicAddress>\r\n" ;

            if($(avp(S_e911_country_gs){s.len}))
                $var(Bsm_pidflo_xml_ls) = $var(Bsm_pidflo_xml_ls) + "              <country>" + $avp(S_e911_country_gs) + "</country>\r\n";
            if($(avp(S_e911_state_gs){s.len}))
                $var(Bsm_pidflo_xml_ls) = $var(Bsm_pidflo_xml_ls) + "              <A1>" + $avp(S_e911_state_gs) + "</A1>\r\n";
            if($(avp(S_e911_district_gs){s.len}))
                $var(Bsm_pidflo_xml_ls) = $var(Bsm_pidflo_xml_ls) + "              <A2>" + $avp(S_e911_district_gs) + "</A2>\r\n";
            if($(avp(S_e911_city_gs){s.len}))
                $var(Bsm_pidflo_xml_ls) = $var(Bsm_pidflo_xml_ls) + "              <A3>" + $avp(S_e911_city_gs) + "</A3>\r\n";
            if($(avp(S_e911_street_gs){s.len}))
                $var(Bsm_pidflo_xml_ls) = $var(Bsm_pidflo_xml_ls) + "              <RD>" + $avp(S_e911_street_gs) + "</RD>\r\n";
            if($(avp(S_e911_direction_gs){s.len}))
                $var(Bsm_pidflo_xml_ls) = $var(Bsm_pidflo_xml_ls) + "              <PRD>" + $avp(S_e911_direction_gs) + "</PRD>\r\n";
            if($(avp(S_e911_suffix_gs){s.len}))
                $var(Bsm_pidflo_xml_ls) = $var(Bsm_pidflo_xml_ls) + "              <STS>" + $avp(S_e911_suffix_gs) + "</STS>\r\n";
            if($(avp(S_e911_number_gs){s.len}))
                $var(Bsm_pidflo_xml_ls) = $var(Bsm_pidflo_xml_ls) + "              <HNO>" + $avp(S_e911_number_gs) + "</HNO>\r\n";
            if($(avp(S_e911_postcode_gs){s.len}))
                $var(Bsm_pidflo_xml_ls) = $var(Bsm_pidflo_xml_ls) + "              <PC>" + $avp(S_e911_postcode_gs) + "</PC>\r\n";
            if($(avp(S_e911_communityname_gs){s.len}))
                $var(Bsm_pidflo_xml_ls) = $var(Bsm_pidflo_xml_ls) + "              <PCN>" + $avp(S_e911_communityname_gs) + "</PCN>\r\n";
            if($(avp(S_e911_building_gs){s.len}))
                $var(Bsm_pidflo_xml_ls) = $var(Bsm_pidflo_xml_ls) + "              <BLD>" + $avp(S_e911_building_gs) + "</BLD>\r\n";
            if($(avp(S_e911_floor_gs){s.len}))
                $var(Bsm_pidflo_xml_ls) = $var(Bsm_pidflo_xml_ls) + "              <FLR>" + $avp(S_e911_floor_gs) + "</FLR>\r\n";
            if($(avp(S_e911_room_gs){s.len}))
                $var(Bsm_pidflo_xml_ls) = $var(Bsm_pidflo_xml_ls) + "              <ROOM>" + $avp(S_e911_room_gs) + "</ROOM>\r\n";

            $var(Bsm_pidflo_xml_ls) = $var(Bsm_pidflo_xml_ls) + "            </civicAddress>\r\n" +
                                                                "          </location-info>\r\n" +
                                                                "          <usage-rules>\r\n" +
                                                                "          </usage-rules>\r\n" +
                                                                "        </geopriv>\r\n" +
                                                                "      </status>\r\n" +
                                                                "      <timestamp>" + $var(B_emergencytimeformatted_ls) + "</timestamp>\r\n" +
                                                                "    </tuple>\r\n" +
                                                                "</presence>\r\n";

            if(!is_avp_set("$avp(S_m_body_gs)"))
                $avp(S_m_body_gs) = $rb;
            set_body_multipart_avp("$avp(S_m_body_gs)","$avp(S_m_body_gs)","$var(Bsm_pidflo_xml_ls)","application/pidf+xml","openscapesbc@enterprise.com","unique-boundary");

            $var(C_new_content_type_hdr_gs) = "multipart/mixed;boundary=\"unique-boundary\"";
            xlog("L_INFO", "CI=$ci -R-A394 New message body avp(S_m_body_gs) = [$avp(S_m_body_gs)]\n");

            if($hdr(Content-Type) == "application/sdp")
                subst_body('/v=.*$/$avp(S_m_body_gs)/');
            else if ($hdr(Content-Type) == "multipart/mixed")
                subst_body('/--.*--/$avp(S_m_body_gs)/igs');

            insert_hf("Geolocation: <cid:openscapesbc@enterprise.com>\r\n", "Call-ID");
            insert_hf("Geolocation-Routing: no\r\n", "Call-ID");
            remove_hf("Content-Type");
            insert_hf("Content-Type: $var(C_new_content_type_hdr_gs)\r\n", "Call-ID");
        }

        osb_memdb_nl_select("emergency_lin,*|$avp(S_e911_subnet_id_ls)|*|*|*|*|*|*,","||$avp(S_e911_lin_gs)|||||");
        xlog("L_INFO","CI=$ci - R33 - after dip, avp(S_e911_lin_gs)=$avp(S_e911_lin_gs) , avp(S_e911_send_lin_instead_cpn_ls)=$avp(S_e911_send_lin_instead_cpn_ls)");

        if( $avp(S_e911_send_lin_instead_cpn_ls) == 1 && ($avp(S_e911_lin_gs) != $null && $avp(S_e911_lin_gs) !=""))
        {
            # Add LIN as CPN/P-Asserted-Identity
            # This route is called for INVITE only and hence no check is needed for appropriate Methods before inserting the PAI header

            if(isflagset(11))
               insert_hf("P-Asserted-Identity: <sip:$avp(S_e911_lin_gs)@$var(S_lanip_4_6_gs)>\r\n", "Content-Type");
            else if($avp(C_gw_behind_ep_gi) == 2)
               insert_hf("P-Asserted-Identity: <sip:$avp(S_e911_lin_gs)@$var(C_ep2_core_ip_gs)>\r\n", "Content-Type");
            else
               insert_hf("P-Asserted-Identity: <sip:$avp(S_e911_lin_gs)@$var(C_ep1_core_ip_gs)>\r\n", "Content-Type");
            xlog("L_INFO","CI=$ci - R33 - LIN found = $avp(S_e911_lin_gs). Callback set to $avp(S_tmp_gs)\n");
#                subst('/^(From:[ ]*)(.*)(<sip[s]*:)(.*)@(.*)/\1\2\3$avp(S_e911_lin_gs)@\5/ig');

            # send the LIN information to CDR
            # if (is_method("INVITE") && $var(C_ssm_msg_gb) != 1)
            #    dialog_log("LIN timestamp=$Ts;call_id=$ci;lin=$avp(S_e911_lin_gs);contact=$ct);\n");

        }
        else
        {
            xlog("L_INFO","CI=$ci - R33 - sendLIN not checked , PAI sent but OSV will drop\n");
            insert_hf("P-Asserted-Identity: <sip:$fU@$var(S_lanip_4_6_gs)>\r\n", "Content-Type");
        }

    }
    else
    {
       xlog("L_ERR", "CI=$ci - R33 - No Emergency Calling Subnet found! Call will be routed like normal call!\n");
    }

    if (is_gflag("6"))
    {
        xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
        bm_log_timer("route-33");
    }
}





########################################################################
#SSP_REGISTRATION_ROUTE: Process registration request from SP to SSP
########################################################################
route[SSP_REGISTRATION_ROUTE]
{
    if (is_gflag("6"))
       bm_start_timer("route-18");

    xlog("L_INFO", "CI=$ci - R18 (SSP Registration) - Entry M=$rm rp=$rp Rp=$Rp to=$to ct=$ct\n");

    route(QUERY_REP_LAN_TO_WAN_CALL_ROUTE);

    $var(S_expire_gi) = 0;
    $(avp(S_reg_ct_gs)[*]) = $null;
    $(avp(C_tmp2_gs)[*]) = $null;
    $var(S_expire_gi)=$sel(contact.expires);


    if ($avp(S_gw_id_gi) != $null)
    {
        xlog("L_INFO", "CI=$ci - R18 - Registration for GW ID=$avp(S_gw_id_gi),avp(S_gw_rm_fqdn_gs)=$avp(S_gw_rm_fqdn_gs), avp(C_rm_address_type_gi)= $avp(C_rm_address_type_gi) \n");

        $var(C_pmap_ct_port_gi) = $avp(C_wan_port_gs);
        xlog("L_INFO", "CI=$ci - R18 - Transport is avp(C_gw_transp_gs)=$avp(C_gw_transp_gs), Port is var(C_pmap_ct_port_gi)=$var(C_pmap_ct_port_gi)\n");

        ## *** SSP Manipulation **************************************************************************

        $var(S_rU_gs)       = $rU;
        $var(S_man_sip_gb)  = 1;
        $var(S_man_type_gi) = 1;    # SIP to PSTN

        route(SIP_MANIPULATION_ROUTE);

        ## Use contact WAN IP of External Firewall
        if (not_empty("$avp(C_fw_ext_ip_gs)"))
        {
            put_ip_in_paran('$avp(C_fw_ext_ip_gs)', '$var(S_local_access_domain_ls)');
            xlog("L_INFO", "CI=$ci - R18 - External Firewall fwIP=$avp(C_fw_ext_ip_gs). Setting var(S_local_access_domain_ls)=$var(S_local_access_domain_ls)\n");
        }
        else if(not_empty("$avp(C_fwd_ep_ip_gs)") && ($avp(S_fwd_ep_used_gb) == 1))
        {
            if($avp(C_gw_transp_gs) =="tcp")
            {
                xlog("L_INFO", "CI=$ci - R18 - Port for TCP fwd EP. avp(C_fwd_ep_port_tcp_gs)=$avp(C_fwd_ep_port_tcp_gs)\n");
                if ($avp(C_fwd_ep_port_tcp_gs) != 0)
                    $var(C_pmap_ct_port_gi) = $avp(C_fwd_ep_port_tcp_gs);
            }
            else if($avp(C_gw_transp_gs) =="tls")
            {
                xlog("L_INFO", "CI=$ci - R18 - Port for TLS fwd EP. avp(C_fwd_ep_port_tls_gs)=$avp(C_fwd_ep_port_tls_gs) avp(C_fwd_ep_port_mtls_gs)=$avp(C_fwd_ep_port_mtls_gs) avp(S_rep_bitmap_gi)=$avp(S_rep_bitmap_gi)\n");
                $avp(S_rep_bitmap_li) = $(avp(S_rep_bitmap_gi){s.int});
                if ($avp(C_fwd_ep_port_mtls_gs) != 0 && avp_check("$avp(S_rep_bitmap_li)","and/i:4/g")) # Check mtls
                {
                    $var(C_pmap_ct_port_gi) = $avp(C_fwd_ep_port_mtls_gs);
                }
                else if ($avp(C_fwd_ep_port_tls_gs) != 0)
                    $var(C_pmap_ct_port_gi) = $avp(C_fwd_ep_port_tls_gs);
            }
            else
            {
                xlog("L_INFO", "CI=$ci - R24 - Port for UDP fwd EP. avp(C_fwd_ep_port_udp_gs)=$avp(C_fwd_ep_port_udp_gs)\n");
                if ($avp(C_gw_transp_gs) != 0)
                    $var(C_pmap_ct_port_gi) = $avp(C_fwd_ep_port_udp_gs);
            }
            if ($var(C_pmap_ct_port_gi) != 0)
                $avp(C_advertised_port_gi) = $var(C_pmap_ct_port_gi);
            put_ip_in_paran('$avp(C_fwd_ep_ip_gs)', '$var(S_local_access_domain_ls)');
            xlog("L_INFO", "CI=$ci - R18 - FWD VLAN IP=$avp(C_fwd_ep_ip_gs). Setting var(S_local_access_domain_ls)=$var(S_local_access_domain_ls)\n");
        }
        else
        {
            put_ip_in_paran('$avp(C_wan_ip_gs)', '$var(S_local_access_domain_ls)');
            xlog("L_INFO", "CI=$ci - R18 - No External Firewall. WanIP=$avp(C_wan_ip_gs). Setting var(S_local_access_domain_ls)=$var(S_local_access_domain_ls)\n");
        }


        ## No port used if addresses are configured in terms of DNS_SRV
        if($avp(C_rm_address_type_gi) ==1)   #  DNS_SRV
        {
            $var(S_gw_rm_port_ls) = "";
            xlog("L_INFO", "CI=$ci - R18 - DNS_SRV: No destination port.\n");
        }
        else
        {
            $var(S_gw_rm_port_ls) = ":" + $avp(S_gw_rm_port_gi);
            xlog("L_INFO", "CI=$ci - R18 - NO DNS_SRV: Endpoint port is avp(S_gw_rm_port_gi)=$avp(S_gw_rm_port_gi)\n");
        }



        ## *** Setting the ru **************************************************************************

        $var(S_isFqdn_ls) = $rd;
        if(!PROC_IS_PURE_IP)
            $var(S_ru_is_fqdn_gb) = 1;
        else
            $var(S_ru_is_fqdn_gb) = 0;

        ## --- Registrar ------------------------------
        if(not_empty("$avp(S_rep_reg_addr_gs)"))
            $var(C_ssp_reg_domain_gs) = $avp(S_rep_reg_addr_gs);

        xlog("L_INFO", "CI=$ci - R18 - Setting Registrar Server var(C_ssp_reg_domain_gs) = var(S_rep_reg_addr_gs) = $var(C_ssp_reg_domain_gs)\n");


        ## Registrar Server -------------------------------------------------------------------------
        if(not_empty("$var(C_ssp_reg_domain_gs)"))
           $avp(C_tmp2_gs) = $var(C_ssp_reg_domain_gs);
        ## Service Address --------------------------------------------------------------------------
        else if($avp(C_ssp_use_sip_service_address_gs) =='y' && not_empty("$avp(C_ssp_service_addr_gs)"))
            $avp(C_tmp2_gs) = $avp(C_ssp_service_addr_gs);
        ## Original rd ------------------------------------------------------------------------------
        else if($var(S_ru_is_fqdn_gb) == 1)
            $avp(C_tmp2_gs) = $rd;
        ## GW IP ------------------------------------------------------------------------------------
        else
            $avp(C_tmp2_gs) = $avp(S_gw_rm_ip_gs);

        $var(S_use_original_domain_on_dest_lb) = 0;

        $var(S_isFqdn_ls) = $avp(C_tmp2_gs);
        if (PROC_IS_PURE_IP)
           put_ip_in_paran('$avp(C_tmp2_gs)', '$avp(C_tmp2_gs)');
        else if (is_pure_ip($avp(S_gw_rm_ip_gs)) && $avp(C_ssp_use_sip_service_address_gs) =='y')  # New R-URI is FQDN but SSP is configured as IP. Set destination
           $var(S_use_original_domain_on_dest_lb) = 1;


        ## TLS Signaling -----------------------------------------------------------------------------
        $var(S_sip_transp_gs) = $avp(C_gw_transp_gs);
        $var(S_sip_suffix_gs) = "";

        if($avp(C_gw_transp_gs) =="tls" && ($var(C_ssp_tls_config_gb) || $var(C_ssp_tls_sips_scheme_gb)))
        {
           $ru = "sip"+$var(S_sip_suffix_gs)+":"+$avp(C_tmp2_gs)+$var(S_gw_rm_port_ls);
           if ($var(C_ssp_tls_sips_scheme_gb))
               osb_set_uri("$ru","sips,tcp",0x11);
           $avp(S_tmp_gs) = $var(S_local_access_domain_ls)+":"+$var(C_pmap_ct_port_gi)+";transport="+$avp(C_gw_transp_gs);
           xlog("L_INFO", "CI=$ci - R18 - R-URI for TLS replaced by $ru - ct domain:port:transport=$avp(S_tmp_gs)\n");
        }
        else
        {
           $ru = "sip"+$var(S_sip_suffix_gs)+":"+$avp(C_tmp2_gs)+$var(S_gw_rm_port_ls)+";transport="+$avp(C_gw_transp_gs);
           $avp(S_tmp_gs) = $var(S_local_access_domain_ls)+":"+$var(C_pmap_ct_port_gi)+";transport="+$avp(C_gw_transp_gs);
           xlog("L_INFO", "CI=$ci - R18 - R-URI replaced by $ru - ct domain:port:transport=$avp(S_tmp_gs)\n");
        }


        ## *** Passthrough Params *******************************************************************

        if ($avp(C_ssp_pt_params_list_gs) != $null)
            osb_set_passthrough_params("$ou","$ru","$avp(C_ssp_pt_params_list_gs)");

        ## Call advertise functions due to external firewall
        osb_set_adv_address('$avp(C_advertised_ip_gs)');
        osb_set_adv_port('$avp(C_advertised_port_gi)');



        ## *** FRN7774 Sip Connect 1.1 **************************************************************

        xlog("L_INFO", "CI=$ci - R18 - Sip Connect Registration Mode: $var(C_ssp_reg_mode_gb) 1TR118: $var(C_ssp_tr118_gb) \n");

        if($var(C_ssp_reg_mode_gb) == 1)
        {
            subst('/^(To:[^:]*sips?:)([^@]+@)?[^>; ]+(.+)/\1\2$avp(C_tmp2_gs)\3/i');
            subst('/^(From:[^:]*sips?:)([^@]+@)?[^>; ]+(.+)/\1\2$avp(C_tmp2_gs)\3/i');
            subst('/^(Contact:[^:]*sips?:)([^@]+@)?[^>; ]+(.+)/\1$avp(S_tmp_gs);bnc\3/i');

            insert_hf("Proxy-Require: gin\r\n");
            insert_hf("Require: gin\r\n");
            insert_hf("Supported: path\r\n");
            insert_hf("Allow-Events: vq-rtcpxr\r\n");

        }
        else #original code
        {
            subst('/^(To:[^:]*sips?:)([^@]+@)?[^>; ]+(.+)/\1\2$avp(C_tmp2_gs)\3/i');
            subst('/^(From:[^:]*sips?:[^>]+)@[^>;]+(.+)/\1@$avp(C_tmp2_gs)\2/i');
            subst('/^(Contact:[^:]*sips?:)([^@]+@)?[^>; ]+(.+)/\1$var(S_rU_gs)@$avp(S_tmp_gs)\3/i');
        }


        xlog("L_INFO", "CI=$ci - R18 - Replaced From/To/Contact headers\n");

        # Store To and From
        $avp(S_req_fromh_gs) = $hdr(From);
        $avp(S_req_toh_gs) = $hdr(To);

        # If SSP, X-Siemens* headers should not be send forward
        remove_hf_re("^X-Siemens-");

        remove_hf("Via");

        xlog("L_INFO", "CI=$ci - R18 - Insert Expires header: var(S_expire_gi)=$var(S_expire_gi) \n");
        insert_hf("Expires: $var(S_expire_gi)\r\n");


        ## Defining Socket to be used
        $fs = $avp(C_gw_transp_gs) + ":"+$avp(C_wan_ip_gs);


        $var(C_ssp_reg_domain_gs)      = $null;

        ## *** Outbound Proxy *******************************************************************
        if(not_empty("$avp(S_outbnd_pxy_fqdn_gs)"))
            $(avp(C_ssp_outbnd_pxy_domain_gs)[*]) = $avp(S_outbnd_pxy_fqdn_gs);
        else
            $(avp(C_ssp_outbnd_pxy_domain_gs)[*]) = $avp(S_outbnd_pxy_ip_gs);

        xlog("L_INFO", "CI=$ci - R18 - Setting Outbound Proxy avp(C_ssp_outbnd_pxy_domain_gs)=$avp(C_ssp_outbnd_pxy_domain_gs) access-realm=$avp(S_access_realm_profile_gs)\n");

        if (not_empty("$avp(S_fwd_vlan_addr_port_gs)"))
        {
            # Check first dynamic forward nw and first for registered.
            $(avp(S_dynamic_fwd_nw_addr_port_gs)[*]) = $null;
            if(osb_memdb_select("remote_ep_fwd_realm,*|$avp(S_fwd_vlan_addr_port_gs)|*|1|$avp(S_access_realm_profile_gs)|$avp(S_ep_name_gs)|*,","||$avp(S_dynamic_fwd_nw_addr_port_gs)||||") == 1 ||
               osb_memdb_select("remote_ep_fwd_realm,*|$avp(S_fwd_vlan_addr_port_gs)|*|0|$avp(S_access_realm_profile_gs)|$avp(S_ep_name_gs)|*,","||$avp(S_dynamic_fwd_nw_addr_port_gs)||||") == 1)
            {
                $var(S_fwd_vlan_addr_ls) = $(avp(S_dynamic_fwd_nw_addr_port_gs){s.select,0,;});
                put_ip_in_paran('$var(S_fwd_vlan_addr_ls)', '$var(S_fwd_vlan_addr_ls)');
                $var(S_fwd_vlan_port_ls) = $(avp(S_dynamic_fwd_nw_addr_port_gs){s.select,1,;});
                osb_memdb_update("remote_ep_fwd_realm,*|$avp(S_fwd_vlan_addr_port_gs)|*|*|*|*|*,","*|*|*|0|*|*|*");
            }
            else
            {
                $var(S_fwd_vlan_addr_ls) = $(avp(S_fwd_vlan_addr_port_gs){s.select,0,;});
                put_ip_in_paran('$var(S_fwd_vlan_addr_ls)', '$var(S_fwd_vlan_addr_ls)');
                $var(S_fwd_vlan_port_ls) = $(avp(S_fwd_vlan_addr_port_gs){s.select,1,;});
            }
            $du = "sip:" + $var(S_fwd_vlan_addr_ls) + ":" + $var(S_fwd_vlan_port_ls) + ";transport=" + $avp(C_gw_transp_gs);
            xlog("L_INFO", "CI=$ci - R18 - SSP register using FWD VLAN. DU = $du\n");
        }
        else if (not_empty("$avp(C_ssp_outbnd_pxy_domain_gs)"))
        {
            if($avp(C_outbnd_pxy_address_type_gi) == 1)   #  DNS_SRV
            {
                $var(S_outbnd_route_ls)= "<sip:" + $avp(C_ssp_outbnd_pxy_domain_gs) + ";transport=" + $avp(C_outbnd_pxy_transp_gs) +";lr>";
                $du = "sip:" +$avp(C_ssp_outbnd_pxy_domain_gs) + ";transport=" + $avp(C_outbnd_pxy_transp_gs) ;
            }
            else
            {
                $var(S_outbnd_route_ls)= "<sip:" + $avp(C_ssp_outbnd_pxy_domain_gs) + ":" + $avp(S_outbnd_pxy_port_gs) + ";transport=" + $avp(C_outbnd_pxy_transp_gs) +";lr>";
                $du = "sip:" +$avp(C_ssp_outbnd_pxy_domain_gs) + ":" + $avp(S_outbnd_pxy_port_gs) + ";transport=" + $avp(C_outbnd_pxy_transp_gs) ;
            }

            insert_hf("Route: $var(S_outbnd_route_ls)\r\n","Call-ID");
            xlog("L_INFO", "CI=$ci - R18 - SSP register using outbound proxy. Route: $var(S_outbnd_route_ls) DU = $du\n");
        }
        else
        {
            if ($var(S_use_original_domain_on_dest_lb))
               $du = "sip"+$var(S_sip_suffix_gs)+":"+$avp(S_gw_rm_ip_gs)+$var(S_gw_rm_port_ls)+";transport="+$avp(C_gw_transp_gs);
            else
               $du = "sip"+$var(S_sip_suffix_gs)+":"+$avp(C_tmp2_gs)+$var(S_gw_rm_port_ls)+";transport="+$avp(C_gw_transp_gs);

            xlog("L_INFO", "CI=$ci - R18 - Setting DU = $du\n");

        }

        t_on_failure("NM_SSP_FAILURE_ROUTE");
        $var(S_log_fr_ls) = "";
        if($avp(C_inv_noanswr_timer_gs) != $null && $avp(C_inv_noanswr_timer_gs) != '' &&
           $avp(C_inv_noreply_timer_gs) != $null && $avp(C_inv_noreply_timer_gs) != '')
        {
            t_set_fr("$(avp(C_inv_noanswr_timer_gs){s.int})","$(avp(C_inv_noreply_timer_gs){s.int})"); # Set reply timeout for SSP register
            $var(S_log_fr_ls) = "Setting FR timers to ssp <" + $avp(C_inv_noanswr_timer_gs) + "," + $avp(C_inv_noreply_timer_gs) + ">";
        }
        t_on_reply("NM_GENERAL_REPLY_ROUTE");

        xlog("L_INFO", "CI=$ci - R18 - REGISTER Setting WAN socket: $fs, var(S_ip_port_gs)=$var(S_ip_port_gs). $var(S_log_fr_ls)\n");


        ## *** User Agent Handling ****************************************************************

        if ( $var(C_ssp_subst_ua_gb) && $var(C_hdr_ua_gi) == 1)
        {
            if($avp(C_ssp_ua_gs)!=$null){
                $var(C_new_ua_hdr_gs) = "";
                $var(C_new_ua_hdr_gs) = $avp(C_ssp_ua_gs);
                xlog("L_INFO", "CI=$ci - R18 - SSP UA Replaced - ua=$var(C_new_ua_hdr_gs)\n");
            }
            else
                xlog("L_INFO", "CI=$ci - R18 - not able to REPLACE ua because C_ssp_ua_gs=$avp(C_ssp_ua_gs)\n");

        }
        else if ( $var(C_ssp_add_ua_gb) && $var(C_hdr_ua_gi) == 0)
        {
            if($avp(C_ssp_ua_gs)!=$null)
            {
                $var(C_new_ua_hdr_gs) = "";
                $var(C_new_ua_hdr_gs) = $avp(C_ssp_ua_gs);
                xlog("L_INFO", "CI=$ci - R18 - SSP UA Add - ua=$var(C_new_ua_hdr_gs)\n");
            }
            else
                xlog("L_INFO", "CI=$ci - R18 - not able to ADD ua because C_ssp_ua_gs=$avp(C_ssp_ua_gs)\n");
        }
        else
            xlog("L_INFO", "CI=$ci - R18 - SSP UA PassThru - ua=$var(C_new_ua_hdr_gs)\n");


        ## Apply all manipulations
        route(SIP_HEADERS_CHANGE_ROUTE);

        xlog("L_INFO", "CI=$ci - R18 - Sending registration to service provider: $var(S_ssp_ls):$avp(C_tmp2_gs) - RURI=$ru F=$fu T=$tu IP=$var(C_si_var_gs), temp=$avp(S_tmp_gs)\n");

        if(t_relay_to()<0)
        {
            xlog("L_ERR", "CI=$ci - R18 - Relay failure - Registration failed - M=$rm F=$fu T=$tu CT=$ct IP=$var(C_si_var_gs) DU=$du FS=$fs\n");
            append_to_reply("Warning: 399 $var(C_ri_var_gs) - R18 - Registration failed: relay error.\r\n");
            append_to_reply("X-SP-Rst-Reg-Tmr=32\r\n"); #FRN7774 - Set the REGISTER retry timer again to 32 secs.
            sl_reply_error();
        }
    }
    else
    {
        sl_send_reply("404","Not Found");
    }


    if (is_gflag("6"))
    {
        xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
        bm_log_timer("route-18");
    }
    exit;
}

########################################################################
# SSP_PROFILE_REQUESTS_ROUTE: Service provider Request treatment
########################################################################
route[SSP_PROFILE_REQUESTS_ROUTE]
{
    xlog("L_INFO", "CI=$ci - R29 - Entry Profile: $avp(C_ssp_gw_profile_gs) rd=$rd, Ct=$ct - is_fssp=$var(S_is_fssp_gb) - is_tssp=$var(S_is_tssp_gb) - flags=$mF - db_load_only=$var(S_ssp_db_load_only_gb)\n");

    route(SSP_REQUEST_COMMON_ROUTE);

    $avp(S_hdr_from_user_gs) = $fU;

    if (is_present_hf("P-Preferred-Identity") && ($avp(C_ssp_ppi_user_gs) == $null || $avp(C_ssp_ppi_user_gs) == ""))
        $avp(C_ssp_ppi_user_gs) = $pU;

    if (is_present_hf("P-Asserted-Identity") && ($avp(C_ssp_pai_user_gs) == $null || $avp(C_ssp_pai_user_gs) == ""))
        $avp(C_ssp_pai_user_gs) = $(ai{uri.user});

    if (is_present_hf("Diversion") && ($avp(C_ssp_div_user_gs) == $null || $avp(C_ssp_div_user_gs) == ""))
        $avp(C_ssp_div_user_gs) = $(hdr(Diversion)[0]{nameaddr.uri}{uri.user});

    ### TLS Signalling Treatment
    if(isflagset(2) && ($(ru{s.select,0,:}) == "sips") && ($var(C_ssp_trans_eq_tls_gs) ||  $var(C_ssp_tls_config_gb)) && (is_method("INVITE") || is_method("OPTIONS")))
    {
       # if (!isflagset(13) && is_method("INVITE") && $var(C_ssm_msg_gb) != 1)
       #     dialog_log("RESPONSE timestamp=$Ts;call_id=$ci;from_tag=$ft;to_tag=$tt;code=416;reason=Unsupported URI Scheme;$var(S_trunkid_gs)\n");
       append_to_reply("Warning: 399 $Ri - R29 - sips not supported in RURI\r\n");
       sl_send_reply("416", "Unsupported URI Scheme");
       exit;
    }

    xlog("L_INFO", "CI=$ci - R29 - SSP type avp(C_ssp_type_gi)=$avp(C_ssp_type_gi)\n");
    if($avp(C_ssp_use_sip_service_address_gs) =='y' && not_empty("$avp(C_ssp_service_addr_gs)"))
    {
        $var(S_hdr_div_domain_gs) = $avp(C_ssp_service_addr_gs);
        $var(S_hdr_from_domain_buf_gs) = $avp(C_ssp_service_addr_gs);
        $avp(S_hdr_to_dom_gs) = $avp(C_ssp_service_addr_gs);
        $var(S_hdr_pai_domain_gs) = $avp(C_ssp_service_addr_gs);
    }
    else
    {
        $var(S_hdr_div_domain_gs) = '';
        $var(S_hdr_pai_domain_gs) = '';
        $avp(S_hdr_to_dom_gs) = $avp(S_gw_rm_ip_gs);
        $avp(S_hdr_from_dom_gs) = $avp(S_gw_rm_ip_gs);
    }

    if(isflagset(1) && $avp(C_ssp_business_id_dn_req_gs) =='y')
        $avp(S_hdr_from_user_gs) = $avp(C_ssp_business_id_dn_gs);
    else
        $avp(S_hdr_from_user_gs) = $fU;


    $var(S_g_rem_from_disp_name_gs) = 0;
    $var(S_g_rem_pai_disp_name_gs)  = 0;
    $var(S_g_rem_ppi_disp_name_gs)  = 0;


    ## Incoming Calling Party Number
    if( isflagset(2) )
    {
        ##From Header: Remove Display Name
        if ( $avp(C_ssp_cpdn_from_ssp_gi) == 1 )
        {
            $var(S_g_rem_from_disp_name_gs) = 1;
            xlog("L_INFO", "CI=$ci - R29 - Remove Calling Party Display Name from From header var(S_g_rem_from_disp_name_gs)=$var(S_g_rem_from_disp_name_gs)");
        }
        ##From Header: Replace User by Display Name
        else if ( $avp(C_ssp_cpdn_from_ssp_gi) == 2 )
        {

            if ($fn != $null)
            {
                $avp(S_hdr_from_user_gs) = $(fn{s.rm,\"});
                $avp(S_hdr_from_user_gs) = $(avp(S_hdr_from_user_gs){s.trim});
            }

            xlog("L_INFO", "CI=$ci - R29 - Replace Calling Party User by Display Name in From header: avp(S_hdr_from_user_gs)=$avp(S_hdr_from_user_gs) fn = $fn");

        }
        ## PAI: Remove Display Name
        else if ( $avp(C_ssp_cpdn_from_ssp_gi) == 3 )
        {
            $var(S_g_rem_pai_disp_name_gs)  = 1;
            xlog("L_INFO", "CI=$ci - R29 - Remove Calling Party Display Name from PAI header var(S_g_rem_pai_disp_name_gs)=$var(S_g_rem_pai_disp_name_gs)");
        }
        ## PAI: Replace User by Display Name
        else if ( $avp(C_ssp_cpdn_from_ssp_gi) == 4 )
        {
            if(is_present_hf("P-Asserted-Identity") && $(hdr(P-Asserted-Identity){nameaddr.name}{s.len}))
            {
                    $avp(C_ssp_pai_user_gs) = $(hdr(P-Asserted-Identity){nameaddr.name});
                    $avp(C_ssp_pai_user_gs) = $(avp(C_ssp_pai_user_gs){s.rm,\"});
                    $avp(C_ssp_pai_user_gs) = $(avp(C_ssp_pai_user_gs){s.trim});

                xlog("L_INFO", "CI=$ci - R29 - Replace Calling Party User by Display Name in PAI header: avp(C_ssp_pai_user_gs)=$avp(C_ssp_pai_user_gs)");
            }
        }
        ## Send header as is
        else
        {
            xlog("L_INFO", "CI=$ci - R29 - No Calling Party Display Name manipulation");
        }


        if($(fU{s.tolower}) == "anonymous")
        {
            if( is_present_hf("P-Asserted-Identity") && is_present_hf("Privacy") && $avp(C_ssp_privacy_override_gi) )
            {
                $avp(S_hdr_from_user_gs) = $avp(C_ssp_pai_user_gs);
                xlog("L_INFO", "CI=$ci - R29 - Privacy override: $avp(C_ssp_privacy_override_gi). Setting avp(S_hdr_from_user_gs) = $avp(S_hdr_from_user_gs)");
            }
        }
    }

    if ($var(S_ssp_db_load_only_gb) == 1)
    {
        $var(S_ssp_db_load_only_gb) = 0;
        return;
    }

    ### Replace To header URI domain with FQDN
    if ($avp(C_ssp_fqdn_toh_gs) == 'y')
    {
        xlog("L_INFO", "CI=$ci - R29 - Replace To header with FQDN is enabled \n");
        if (isflagset(13) && ($(tu{uri.user}{s.tolower})=="anonymous") && search("Route:.*;fwan"))
            $avp(S_hdr_to_dom_gs) = "anonymous.invalid";
        else if (isflagset(2) || $var(S_is_tssp_gb)!=1)
            $avp(S_hdr_to_dom_gs) = $null;
    }

    ### Replace Request URI domain with FQDN
    if ($avp(C_ssp_fqdn_ruri_gs) == 'y')
    {
         xlog("L_INFO", "CI=$ci - R29 - Replace RURI with FQDN is enabled\n");
         ## For future use: SSP is configured with FQDN (may be in local DNS) but SSP needs to receive
         ## the resolved IP in INVITE request URI.
    }

    # To update ssp_status table in case of failure
    if(isflagset(1) && (is_method("REGISTER") || is_method("OPTIONS")))
    {
        t_on_failure("NM_SSP_FAILURE_ROUTE");
    }
}

#######################################################################################################################################
# route SSP_PROFILE_RESPONSE_ROUTE: Service provider Response treatment
# input pseudo-variables:  $avp(C_ssp_flags_gi), $avp(C_ssp_gw_profile_gs), $avp(C_ssp_pai_user_gs), $avp(C_ssp_ppi_user_gs),
#                          $var(C_ssp_tls_config_gb), $var(C_ssp_tls_sips_scheme_gb),$var(C_ssp_trans_eq_tls_gs)
# output pseudo-variables: $avp(C_ssp_flags_gi), $avp(C_ssp_div_user_gs),   $avp(C_ssp_pai_user_gs), $avp(C_ssp_ppi_user_gs),
#                          $var(C_ssp_sip_no_suffix_gb), $var(C_ssp_sip_o_tls_set_gb), $var(C_ssp_tls_config_gb),
#                          $var(C_ssp_tls_sips_scheme_gb), $var(C_ssp_trans_eq_tls_gs)
# input headers: Diversion, P-Asserted-Identity, P-Preferred-Identity, To
# input flags: 1, 2
# changed flags:
########################################################################################################################################
route[SSP_PROFILE_RESPONSE_ROUTE]
{
    xlog("L_INFO", "CI=$ci - R30 - Entry Profile: $avp(C_ssp_gw_profile_gs) - Flags: $mF sp_flags=$avp(C_ssp_flags_gi)\n");

    if($rs == 200 && is_method("REGISTER"))
    {
        xlog("L_INFO", "CI=$ci - R30 - Registration successful for SSP Profile: $avp(C_ssp_gw_profile_gs)\n");
        osb_memdb_update("sip_svc_providers,*|$avp(C_ssp_gw_profile_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1","*|*|y|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|$Ts|*|*|*|*|*|*|*|*|*|*|*");
        if ($avp(S_dynamic_fwd_nw_addr_port_gs) != $null)
            osb_memdb_update("remote_ep_fwd_realm,*|$avp(S_fwd_vlan_addr_port_gs)|$avp(S_dynamic_fwd_nw_addr_port_gs)|*|*|*|*,1","*|*|*|1|*|*|*");
    }

    # Updates state only for success
    # In case of failure, the state will be updated on NM_SSP_FAILURE_ROUTE
    if ($rs == 200)
    {
        route(SSP_STATUS_ROUTE);
    }

    ### TLS Signalling Treatment
    ### need to initialize the avp before avp_check
    $var(C_ssp_flags_gi) = $(avp(C_ssp_flags_gi)[0]{s.int});
    $(avp(C_ssp_flags_gi)[*]) = $null;
    $avp(C_ssp_flags_gi) = $var(C_ssp_flags_gi);

    if(avp_check("$avp(C_ssp_flags_gi)","and/i:2048/g"))
       $var(C_ssp_trans_eq_tls_gs)   = 1;
    else if(avp_check("$avp(C_ssp_flags_gi)","and/i:4096/g"))
    {
       $var(C_ssp_tls_sips_scheme_gb)= 1;
       $var(C_ssp_sip_o_tls_set_gb)  = 1;  # Remove transport=tls
       $var(C_ssp_sip_no_suffix_gb) = 0;   # Don't use sip, but sips
    }
    else if(avp_check("$avp(C_ssp_flags_gi)","and/i:8192/g"))
    {
       $var(C_ssp_tls_config_gb)     = 1;
       $var(C_ssp_sip_o_tls_set_gb)  = 1;  # Remove transport=tls
    }
    if($var(C_ssp_tls_config_gb) || $var(C_ssp_trans_eq_tls_gs))
       $var(C_ssp_sip_no_suffix_gb) = 1;   # Don't use sips

    if(avp_check("$avp(C_ssp_flags_gi)","and/i:16384/g"))
       $var(C_ssp_use_tel_gb)              = 1;
    if(avp_check("$avp(C_ssp_flags_gi)","and/i:32768/g"))
      $var(C_ssp_user_eq_phone_gb)        = 1;

    if (isflagset(2) && $avp(C_ssp_not_snd_div_gs) == 'y' && is_present_hf("Diversion"))
        $(avp(C_ssp_div_user_gs)[*]) = 'del';

    # User Agent
    if($avp(C_ssp_ua_to_gi) > 0) $var(C_ssp_add_ua_gb) = 1;
    if($avp(C_ssp_ua_to_gi) == 2) $var(C_ssp_subst_ua_gb) = 1;

    route(SSP_RESPONSE_COMMON_ROUTE);

}

########################################################################
#SSP_STATUS_ROUTE: Updates the SSP status
########################################################################
route[SSP_STATUS_ROUTE]
{
    if(!isflagset(1))
        return;

    xlog("L_INFO", "CI=$ci - R64 - Entry M=$rm code=$T_reply_code avp(S_ep_name_gs)=$avp(S_ep_name_gs)\n");

    if (is_method("REGISTER"))
    {
        $var(S_ssp_registered_uri_ls) = "";
        $var(S_ssp_unregister_lb) = 0;

        if ($sel(contact.expires) != $null || $hdr(Expires) != $null)
        {
            # Check expires on response
            if ($sel(contact.expires) == "0" || $hdr(Expires) == "0")
                $var(S_ssp_unregister_lb) = 1;
        }
        else # Check expires on request if it's not present on response
        {
            if ($T_req($sel(contact.expires)) == "0" || $T_req($hdr(Expires)) == "0")
                $var(S_ssp_unregister_lb) = 1;
        }

        if ($T_reply_code == 200 && $var(S_ssp_unregister_lb) == 0) {
            $var(S_ssp_state_li) = "Registered";
            $var(S_ssp_registered_uri_ls) = "sip:" + $si + ":" + $sp + ";transport=" + $pr;
            xlog("L_INFO", "CI=$ci - R64 - Setting registration state='$var(S_ssp_state_li)' for ssp=$avp(S_ep_name_gs) with uri=$var(S_ssp_registered_uri_ls)\n");
        } else if ($var(S_ssp_unregister_lb) == 1) {
            $var(S_ssp_state_li) = "Suspended";
            xlog("L_INFO", "CI=$ci - R64 - Setting registration state='$var(S_ssp_state_li)' for ssp=$avp(S_ep_name_gs)\n");
        } else if ($T_reply_code == 403) {
            $var(S_ssp_state_li) = "DA Failure";
            xlog("L_INFO", "CI=$ci - R64 - Setting registration state='$var(S_ssp_state_li)' for ssp=$avp(S_ep_name_gs)\n");
        } else {
            $var(S_ssp_state_li) = "Not Registered";
            xlog("L_INFO", "CI=$ci - R64 - Setting registration state='$var(S_ssp_state_li)' for ssp=$avp(S_ep_name_gs)\n");
        }

        osb_memdb_update("ssp_status,$avp(S_ep_name_gs)|*|*|*|*|*,","*|*|*|*|$var(S_ssp_state_li)|$var(S_ssp_registered_uri_ls)");
    }
    else if (is_method("OPTIONS"))
    {
        if ($T_reply_code == 408 && $T(reply_type) == 1)
        {
            $var(S_ssp_state_li) = "Not Connected";
            $var(S_ssp_alarm_state_li) = 1;
        }
        else
        {
            $var(S_ssp_state_li) = "Connected";
            $var(S_ssp_alarm_state_li) = 0;
        }

        xlog("L_INFO", "CI=$ci - R64 - Setting connection state='$var(S_ssp_state_li)' for ssp=$avp(S_ep_name_gs)\n");
        xlog("L_ALERT", "@larm: 5, 68, $var(S_ssp_alarm_state_li), @$avp(S_ep_name_gs) $avp(S_ep_name_gs)");
        osb_memdb_update("ssp_status,$avp(S_ep_name_gs)|*|*|*|*|*,","*|*|*|$var(S_ssp_state_li)|*|*");
    }
}




########################################################################
# route PORT_MAPPING_ADD_NEW_ROUTE: adding an element in Port map
########################################################################
route[PORT_MAPPING_ADD_NEW_ROUTE]
{
   # Route called from route PORT_MAPPING_CATALOGUE_ROUTE for REGISTER only
   if (is_gflag("6"))
        bm_start_timer("route-20");
    xlog("L_INFO", "CI=$ci - R20 - Entry M=$rm CT=$ct,var(S_pmap_property_changed_gb)=$var(S_pmap_property_changed_gb),var(S_ep_id_in_pm_gb)=$var(S_ep_id_in_pm_gb),var(S_ep_id_gi)=$var(S_ep_id_gi),avp(S_pmap_ep_id_gi)=$avp(S_pmap_ep_id_gi),pm_transport=$avp(S_pm_transport_gs),var(S_wosmo_client_ip_gs)=$var(S_wosmo_client_ip_gs)\n");

   # Reset var(S_expire_gi), checked in R1 instead of double dip.
   $var(S_expire_gi) = -1;

   # Keyset handling - use the same external port of the primary line
   # extract first the IP and port from contact
   $(avp(C_port_gi)[*])=$null;
   avp_subst("$avp(S_reg_ct_gs)/$avp(C_port_gi)","/(.*):([0-9]*).*/\2/ig");

   if($avp(C_port_gi)==$null)
   {
      if (($(var(S_sys_transp_gs){s.tolower}) == "tls")|| ($avp(S_reg_ct_gs)=~"(.*)sips:(.*)"))
          $avp(C_port_gi)=5061;
      else
          $avp(C_port_gi)=5060;
   }

   $(avp(S_tmp_gs)[*]) = $null;

   #let's do the same function in kamailio:

   if($avp(S_pmap_ext_port_gi) != 0 && $avp(S_pmap_ext_port_gi) != $null) # Route 4 or Route 21 found the external port
       xlog("L_INFO","CI=$ci - R20 - used ext_port=$avp(S_pmap_ext_port_gi) avp(C_port_gi)=$avp(C_port_gi),var(S_sys_transp_gs)=$var(S_sys_transp_gs), ip=avp(C_tmp2_gs)=$avp(C_tmp2_gs), var(S_pmap_wan_interface_ls)=$var(S_pmap_wan_interface_ls)\n");
   else if( ($ua =~ "OpenScape Mobile Client.*" && $var(S_ep_id_gi) != 0) || $var(S_webRtc_gi) == 1)
   {
       ### OSMO or WebRTC

       xlog("L_INFO","CI=$ci - R20 - User-Agent: $ua epid: $var(S_ep_id_gi) webRTC: $var(S_webRtc_gi)\n");

       ### Try to find the ONS in the port map. If found, create another entry in port map using same port for OND.
       osb_memdb_nl_select("port_map,*|*|*|*|*|*|*|*|*|$var(S_ep_id_gi)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1","||||$avp(S_pmap_ext_port_gi)|||||||||||||||||||||");

       if ($avp(S_pmap_ext_port_gi) == 0 || $avp(S_pmap_ext_port_gi) == $null)
          # ONS registration
          xlog("L_INFO","CI=$ci - R20 - Epid is not in port map. It shall be ONS registration. Get new external port\n");
       else
          # OND registration
          xlog("L_INFO","CI=$ci - R20 - Epid is in port map. It shall be OND registration. Use external port = $avp(S_pmap_ext_port_gi)\n");

   }
   else
   {
       ### Following case would only be for the scenario where R4 did not find an entry in the port map for primary,
       ### dip here to see if secondary registered before primary or epid changed for primary

       xlog("L_INFO","CI=$ci - R20 - dipping to get rows for secondary with var(si_var)=$var(C_si_var_gs),avp(C_port_gi)=$avp(C_port_gi),var(S_sys_transp_gs)=$var(S_sys_transp_gs), ip=avp(C_tmp2_gs)=$avp(C_tmp2_gs), var(S_pmap_wan_interface_ls)=$var(S_pmap_wan_interface_ls)\n");
       $avp(S_pmap_ext_port_gi) = 0;

       # This is the secondary registered before primary scenario
       osb_memdb_nl_select("port_map,*|$var(C_si_var_gs)|*|*|*|*|*|*|*|0|*|$avp(C_tmp2_gs)|$avp(C_port_gi)|*|*|*|*|*|*|*|*|*|*|*|*|*,1","||||$avp(S_pmap_ext_port_gi)|||||$avp(S_tmp_gs)||||||||||||||||");
       if ($avp(S_pmap_ext_port_gi) == 0 || $avp(S_pmap_ext_port_gi) == $null)  # This is the epid change scenario

       {
           osb_memdb_nl_select("port_map,*|$var(C_si_var_gs)|*|*|*|*|*|*|*|*|*|$avp(C_tmp2_gs)|$avp(C_port_gi)|*|*|*|*|*|*|*|*|*|*|*|*|*,1","||||$avp(S_pmap_ext_port_gi)|||||$avp(S_tmp_gs)||||||||||||||||");
           xlog("L_INFO", "CI=$ci - R20 - DIP FAILED, DIP again with $var(C_si_var_gs)=$var(C_si_var_gs), avp(C_tmp2_gs)=$avp(C_tmp2_gs),avp(C_port_gi)=$avp(C_port_gi), stored epid=$avp(S_tmp_gs)\n");
       }

   }


   if($avp(S_pmap_ext_port_gi) != 0 && $avp(S_pmap_ext_port_gi) != $null)
   {
       if(($avp(S_pmap_ext_port_gi) > 49999) || ($avp(S_pmap_ext_port_gi) < 10000))
       {
          xlog("L_ERR", "CI=$ci - R20 - keyset handling returned port $avp(S_pmap_ext_port_gi) out of range\n");
          append_to_reply("Warning: 399 $var(C_ri_var_gs) - R20 -Failure in port mapping. $avp(S_pmap_ext_port_gi) out of range.\r\n");
          sl_reply_error();
          if (is_gflag("6"))
          {
             xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
             bm_log_timer("route-20");
          }
          exit;
       }

       xlog("L_INFO","CI=$ci - R20 - Insert External port $avp(S_pmap_ext_port_gi) int_port $rp si=$var(C_si_var_gs) reg_contact $avp(S_reg_ct_gs) used also for $var(C_hdr_ct_user_gs), avp(C_tmp2_gs)=$avp(C_tmp2_gs),var(S_pmap_wan_interface_ls)=$var(S_pmap_wan_interface_ls) \n");
       $avp(C_pmap_port_gi)=$avp(S_pmap_ext_port_gi);

       ### =================================================================================================================================================
       ##  Following could happen if we have Primary registering through two seperate threads, first one added the port map by the time second one came here.
       ### =================================================================================================================================================
       if(!is_gflag("8") && $var(S_ep_id_gi) != 0 && $avp(S_tmp_gs) == $var(S_ep_id_gi))
       {
           xlog("L_INFO","CI=$ci - R20 - Update properties of external port $avp(S_pmap_ext_port_gi) \n");
           xlog("L_INFO","CI=$ci - R20 - New data: *|$var(C_si_var_gs)|$avp(S_reg_ct_gs)|$sp|*|*|$var(S_expire_gi)|*|$var(S_pmap_wan_interface_ls)|$avp(S_pmap_ep_id_gi)|$(avp(S_reg_ct_gs){uri.user})|$(avp(S_reg_ct_gs){uri.domain})|$(avp(S_reg_ct_gs){uri.port})|$var(S_interface_src_gs)|$avp(S_pm_transport_gs)|*|$avp(C_wan_port_gs)|$avp(S_core_realm_profile_gs)|$avp(S_wosmo_client_ip_gs)|$var(S_ct_indication_gs)|$var(S_dev_token_gs)|*|*|* \n");

           osb_memdb_update("port_map,*|$var(C_si_var_gs)|*|*|*|*|*|*|*|$var(S_ep_id_gi)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","*|$var(C_si_var_gs)|$avp(S_reg_ct_gs)|$sp|*|*|$var(S_expire_gi)|*|$var(S_pmap_wan_interface_ls)|$avp(S_pmap_ep_id_gi)|$(avp(S_reg_ct_gs){uri.user})|$(avp(S_reg_ct_gs){uri.domain})|$(avp(S_reg_ct_gs){uri.port})|$var(S_interface_src_gs)|$avp(S_pm_transport_gs)|*|$avp(C_wan_port_gs)|$avp(S_core_realm_profile_gs)|$avp(S_wosmo_client_ip_gs)|$var(S_ct_indication_gs)|$var(S_dev_token_gs)|*|*|*|*|*");
       }
       ### =================================================================================================================================================
       ##  Secondary line or Primary after secondary
       ### =================================================================================================================================================
       else if (is_gflag("8") ||  $var(S_ep_id_gi) == 0 || $avp(S_tmp_gs) == $null || $avp(S_tmp_gs) == 0)
       {
          xlog("L_INFO","CI=$ci - R20 - Keyset or OSMO registration. Insert new entry in the port map using external port = $avp(S_pmap_ext_port_gi) \n");
          xlog("L_INFO","CI=$ci - R20 - New entry: <id>|$var(C_si_var_gs)|$avp(S_reg_ct_gs)|$sp|$avp(S_pmap_ext_port_gi)|$Ts|-1||$var(S_pmap_wan_interface_ls)|$var(S_ep_id_gi)|$(avp(S_reg_ct_gs){uri.user})|$(avp(S_reg_ct_gs){uri.domain})|$(avp(S_reg_ct_gs){uri.port})|$var(S_interface_src_gs)|$avp(S_pm_transport_gs)||$avp(C_wan_port_gs)|$avp(S_core_realm_profile_gs)|$avp(S_wosmo_client_ip_gs)|$var(S_ct_indication_gs)|$var(S_dev_token_gs)|||| \n");

          $avp(S_exp_as_gi) = -1;

          $var(S_memdb_return_gi) = osb_memdb_insert("port_map,|$var(C_si_var_gs)|$avp(S_reg_ct_gs)|$sp|$avp(S_pmap_ext_port_gi)|$Ts|-1||$var(S_pmap_wan_interface_ls)|$var(S_ep_id_gi)|$(avp(S_reg_ct_gs){uri.user})|$(avp(S_reg_ct_gs){uri.domain})|$(avp(S_reg_ct_gs){uri.port})|$var(S_interface_src_gs)|$avp(S_pm_transport_gs)||$avp(C_wan_port_gs)|$avp(S_core_realm_profile_gs)|$avp(S_wosmo_client_ip_gs)|$var(S_ct_indication_gs)|$var(S_dev_token_gs)|||||");

       }
       ### =================================================================================================================================================
       ##   Entry found in Port map with some other epid, get new one.
       ### =================================================================================================================================================
       else
       {
           xlog("L_INFO","CI=$ci - R20 - External port = $avp(S_pmap_ext_port_gi) found for some other epid (epid = $var(S_ep_id_gi) Pmap epid = $avp(S_tmp_gs)). Get new external port.\n");
           $(avp(S_pmap_ext_port_gi)[*]) = $null;
       }


       if ($avp(S_pmap_ext_port_gi) != $null && $avp(S_pmap_ext_port_gi) != 0)
       {
           if (is_gflag("6"))
           {
               xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
               bm_log_timer("route-20");
           }
           return;
       }
   }

   #the first non keyset Register should be replied with 200 OK
   #with expires=30 && exp_as=-1 without saving to location
   #if the sub comes back with second request then we proceed with
   #normal handling (TODO: change the portmap_get_free)

   $(avp(S_tmp_gs)[*]) = $null;
   osb_memdb_row_count("port_map", "$avp(S_tmp_gs)");
   xlog("L_INFO", "CI=$ci - R20 - Port Map entries = $avp(S_tmp_gs)\n");
   if ($avp(S_tmp_gs) >= 75000)
   {
       $var(S_sys_rand_gi) = ($RANDOM /16777279); # Random Value from 2^6 to 2^7(i.e 64 to 128)
       xlog("L_ERR", "CI=$ci - R20 - Registration failed (maximal number of registered reached) - F=$fu T=$tu CT=$ct  IP=$var(C_si_var_gs) RD=$rd Retry after:$var(S_sys_rand_gi)\n");
       append_to_reply("Retry-After: $var(S_sys_rand_gi)\r\n");
       append_to_reply("Warning: 399 $var(C_ri_var_gs) - R20 - Registration failed: maximal number of registered reached.\r\n");
       sl_send_reply("403", "Forbidden");
       if (is_gflag("6"))
       {
           xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
           bm_log_timer("route-20");
       }
       exit;
   }
   $avp(S_pmap_ext_port_gi) = osb_memdb_get_port("EXT");
   if($avp(S_pmap_ext_port_gi) > 0) {
        $(avp(S_pmap_id_gi)[*]) = $null;
        osb_memdb_nl_select("port_map,*|*|*|*|$avp(S_pmap_ext_port_gi)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1","$avp(S_pmap_id_gi)|||||||||||||||||||||||||");

        if ($avp(S_pmap_id_gi) != $null) {
           xlog("L_ERR", "CI=$ci - got avp(ext_port)=$avp(S_pmap_ext_port_gi) which is already in use by pm_id=$avp(S_pmap_id_gi). Find another free port\n");

           $avp(S_pmap_ext_port_gi) = osb_memdb_get_port("EXT");
           xlog("L_INFO", "CI=$ci - got new avp(S_pmap_ext_port_gi)=$avp(S_pmap_ext_port_gi)\n");
        }
    }


    if($avp(S_pmap_ext_port_gi) > 0) {
        $avp(S_exp_as_gi) = -1;
        $var(S_memdb_return_gi) = osb_memdb_insert("port_map,|$var(C_si_var_gs)|$avp(S_reg_ct_gs)|$sp|$avp(S_pmap_ext_port_gi)|$Ts|-1||$var(S_pmap_wan_interface_ls)|$var(S_ep_id_gi)|$(avp(S_reg_ct_gs){uri.user})|$(avp(S_reg_ct_gs){uri.domain})|$(avp(S_reg_ct_gs){uri.port})|$var(S_interface_src_gs)|$avp(S_pm_transport_gs)||$avp(C_wan_port_gs)|$avp(S_core_realm_profile_gs)|$avp(S_wosmo_client_ip_gs)|$var(S_ct_indication_gs)|$var(S_dev_token_gs)|||||");
        xlog("L_INFO","CI=$ci - R20 - The IP=$var(C_si_var_gs) was bound to a new PORT=$avp(S_pmap_ext_port_gi),var(S_memdb_return_gi)=$var(S_memdb_return_gi)\n");
        $avp(C_pmap_port_gi)=$avp(S_pmap_ext_port_gi);
    }
    else {
       xlog("L_WARN","R20 - Registration failed!\n No free port available for mapping F=$fu T=$tu CT=$ct IP=$var(C_si_var_gs) CI=$ci\n");
       append_to_reply("Warning: 399 $var(C_ri_var_gs) - R20 - No free port available for mapping.\r\n");
       sl_reply_error();
       if (is_gflag("6"))
       {
           xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
           bm_log_timer("route-20");
       }
       exit;
    }

   if (is_gflag("6"))
   {
        xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
        bm_log_timer("route-20");
   }
}

########################################################################
# route PORT_MAPPING_CATALOGUE_ROUTE: port mapping: catalogue
########################################################################
route[PORT_MAPPING_CATALOGUE_ROUTE]
{

    if (is_gflag("6"))
        bm_start_timer("route-21");

    xlog("L_INFO", "CI=$ci - R21 - Entry M=$rm CT=$ct,var(S_pmap_property_changed_gb)=$var(S_pmap_property_changed_gb),var(S_ep_id_in_pm_gb)=$var(S_ep_id_in_pm_gb),avp(S_pmap_ep_id_gi)=$avp(S_pmap_ep_id_gi),pm_transport=$avp(S_pm_transport_gs),var(S_wosmo_client_ip_gs)=$var(S_wosmo_client_ip_gs)\n");
    $avp(C_pmap_port_gi)=0;
    $avp(C_src_ip_gs)=$var(C_si_var_gs);

    $avp(S_wosmo_client_ip_gs) =$var(S_wosmo_client_ip_gs);

    $var(S_pmap_wan_interface_ls) = $var(C_ri_var_gs);

    $var(S_expire_gi)=3600;
    if ($sel(contact.expires) != $null)
        $var(S_expire_gi)=$sel(contact.expires);
    else if (is_present_hf("Expires"))
        $var(S_expire_gi)=$(hdr(Expires){s.int});
    $var(S_stored_expire_gi) = $var(S_expire_gi);

    $var(S_pmap_rcv_ct_ls) = $avp(S_reg_ct_gs);

    $avp(S_reg_ct_gs) = $(avp(S_reg_ct_gs){nameaddr.nc_uri});## some send contact without bracket

    if(!($avp(S_reg_ct_gs) != $null && $avp(S_reg_ct_gs) != "") )
    {
        xlog("L_INFO","CI=$ci - R21 - no contact probably fraudulent, let's exit\n");
        append_to_reply("Warning: 399 $var(C_ri_var_gs) - R21 - Missing Contact.\r\n");
        sl_send_reply("403", "Forbidden");
        if (is_gflag("6"))
        {
            xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
            bm_log_timer("route-21");
        }
        exit;
    }

    $(avp(S_tmp_gs)[*]) = $(avp(S_reg_ct_gs){uri.user});
    if($avp(S_tmp_gs)==$null)
    {
        xlog("L_ERR", "CI=$ci - R21 - No User Name in the Contact:$avp(S_reg_ct_gs)");
        append_to_reply("Warning: 399 $var(C_ri_var_gs) - R21 - Missing user name in contact.\r\n");
        sl_send_reply("403", "Forbidden");
        if (is_gflag("6"))
        {
            xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
            bm_log_timer("route-21");
        }
        exit;
    }
    else
        $var(C_hdr_ct_user_gs) = $avp(S_tmp_gs);

    # if it is sub behind SBC extract first port from contact
    if(isflagset(8))
    {
       $avp(C_port_gi) = $(avp(S_reg_ct_gs){uri.port});
    }

    #now get the domain ip from contact into avp(S_tmp_gs)
    $(avp(C_tmp2_gs)[*]) = $null;
    $avp(C_tmp2_gs) = $(avp(S_reg_ct_gs){uri.host});

    if(($var(S_expire_gi) == 0))
    {
        # Unregistering does not clear the port mapping, but updates the  exp_as in pm
        xlog("L_INFO","CI=$ci - R21 - dipping with var(C_hdr_ct_user_gs)=$var(C_hdr_ct_user_gs), ip=avp(C_tmp2_gs)=$avp(C_tmp2_gs)\n");

        #always update the port map so that the expiry looks OK, later the corresponding record can be omited
        $avp(C_pmap_port_gi)=0;


        if(isflagset(8) || $var(S_webRtc_gi) == 1)
            osb_memdb_nl_select("port_map,*|$avp(S_int_ip_gs)|*|*|*|*|*|*|*|*|$var(C_hdr_ct_user_gs)|$avp(C_tmp2_gs)|$var(C_port_gi)|*|*|*|*|*|*|*|*|*|*|*|*|*,1","$avp(S_pmap_id_gi)||||$avp(S_pmap_ext_port_gi)||$avp(S_exp_as_gi)|||||||||||||||||||");
        else
            osb_memdb_nl_select("port_map,*|$avp(S_int_ip_gs)|*|*|*|*|*|*|*|*|$var(C_hdr_ct_user_gs)|$avp(C_tmp2_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1","$avp(S_pmap_id_gi)||||$avp(S_pmap_ext_port_gi)||$avp(S_exp_as_gi)|||||||||||||||||||");

        $avp(C_pmap_port_gi)=$avp(S_pmap_ext_port_gi);

        if (is_gflag("6"))
        {
            xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
            bm_log_timer("route-21");
        }

        if($avp(C_pmap_port_gi) ==0 || $avp(S_exp_as_gi) == -1)
        {
            xlog("L_INFO","CI=$ci - R21 - Port Map entry Not found and expiry was 0. Send 200 OK for $avp(S_reg_ct_gs)\n");
            append_to_reply("Contact: $hdr(Contact)\r\n");
            sl_send_reply("200","OK");
            exit;
        }

        xlog("L_INFO","CI=$ci - R21 - Unreg avp(S_pmap_id_gi)=$avp(S_pmap_id_gi), avp(S_pmap_ep_id_gi)=$avp(S_pmap_ep_id_gi),avp(S_pmap_ext_port_gi)=$avp(S_pmap_ext_port_gi),exp_as =$var(S_expire_gi), ep_contact =$avp(S_reg_ct_gs)\n");
        return(1);
    }
    else
    {
        # Check for expires less than maximum allowed value
        # Expires > maximum then reject


        if($var(S_expire_gi)>5000)
        {
            xlog("L_ERR", "CI=$ci - R21 - Expires is too high:$var(S_expire_gi)");
            append_to_reply("Warning: 399 $var(C_ri_var_gs) - R21 - Expires should be less than 5000.\r\n");
            sl_send_reply("403", "Forbidden");
            if (is_gflag("6"))
            {
                xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
                bm_log_timer("route-21");
            }
            exit;
        }

        $var(S_dev_token_gs)     = "";
        $var(S_push_server_gs)   = "";
        $var(S_ct_indication_gs) = "";


        if($avp(S_pmap_ext_port_gi) > 0) # Route 4 found the external port
        {
            $avp(S_tmp_gs) = $var(S_pmap_ct_gs);

            #we need to update port map here too because in unregister case we set exp_as=0
            #now we need to set exp_as to unzero value since exp_as is used for throttling mechanism

            # Contact or received/listen port was changed - update port map
            #also if exp_as==-1 then we need to update the pm

            ### exp_as=-1 means initial Register received 503
            ### exp_as=-2 means Register has been challenged but is blocked for other SIP methods
            ### exp_as=-3 means initial Register sent to 8k awaiting response
            ### exp_as=-4 means subscriber sent UNREGISTER, waiting for TTL to cleanup
            ### exp_as=-5 means Register has been challenged and it was already registered (do not block once until next REGISTER)

            if($avp(S_exp_as_gi) == -1)
            {
                xlog("L_INFO", "CI=$ci - R21 - Initial Register received 503 (exp_as = -1). Update it to (exp_as = -3)\n");
                $avp(S_exp_as_gi) = -3;
                $var(S_expire_gi) = $avp(S_exp_as_gi);
            }
            if($avp(S_exp_as_gi) == -2)
            {
                xlog("L_INFO", "CI=$ci - R21 - Register has been challenged but is blocked for other SIP methods (exp_as = -2) \n");
                $var(S_expire_gi) = $avp(S_exp_as_gi);
            }
            else if ($avp(S_exp_as_gi) == -3 )
            {
                xlog("L_INFO", "CI=$ci - R21 - Initial Register sent to SIP Server awaiting response (exp_as = -3) \n");
                $var(S_expire_gi) = $avp(S_exp_as_gi);
            }
            else if ($avp(S_exp_as_gi) == -4)
            {
                xlog("L_INFO", "CI=$ci - R21 - Subscriber sent UNREGISTER, waiting for TTL to cleanup (exp_as = -4). Update it to (exp_as = -3) \n");
                $var(S_expire_gi) = -3;
            }

            if ( $avp(S_wan_interface_gs)   != $var(S_pmap_wan_interface_ls)     ||    # WAN interface changed
                 $avp(S_pmap_int_port_gi)   != $sp                               ||    # Source port changed
                 !compare_ips('$avp(S_int_ip_gs)', '$var(C_si_var_gs)')          ||    # Source IP changed
                 $var(S_old_pmap_transp_gs) != $avp(S_pm_transport_gs)           ||    # Transport changed
                 $var(S_interface_src_gs)   != $avp(S_network_interface_src_gs)  )     # Network interface changed
            {
                $var(S_pmap_property_changed_gb) = 1;

                $var(S_tmp_ls) =  "\nProperty    : Old Value|New Value" +
                                  "\nWAN int     : " + $var(S_pmap_wan_interface_ls)    + "|" + $avp(S_wan_interface_gs) +
                                  "\nSrc port    : " + $avp(S_pmap_int_port_gi)         + "|" + $sp +
                                  "\nSrc ip      : " + $avp(S_int_ip_gs)                + "|" + $var(C_si_var_gs) +
                                  "\nTransport   : " + $var(S_old_pmap_transp_gs)       + "|" + $avp(S_pm_transport_gs) +
                                  "\nNetwork     : " + $avp(S_network_interface_src_gs) + "|" + $var(S_interface_src_gs) +
                                  "\nEpid        : " + $avp(S_pmap_ep_id_gi)            + "|" + $var(S_ep_id_gi) ;

                xlog("L_INFO","CI=$ci - R21 - Subscriber has some property changed: $var(S_tmp_ls)\n");

            }



            xlog("L_INFO", "CI=$ci - R21 - avp(S_reg_ct_gs)=$avp(S_reg_ct_gs) var(S_pmap_ct_gs)=$var(S_pmap_ct_gs) var(S_ep_id_in_pm_gb)=$var(S_ep_id_in_pm_gb) \n");

            if ($var(S_pmap_property_changed_gb) == 1 || $var(S_pmap_ct_gs) != $avp(S_reg_ct_gs))
            {
                ## If secondary phone uses new nat ip then it get new port map and doesn't come here. When primary registers with new nat ip, then secondary with new port map gets deleted
                if (!compare_ips('$avp(S_int_ip_gs)', '$var(C_si_var_gs)'))
                {
                   xlog("L_INFO","CI=$ci - R21 - New source IP ($var(C_si_var_gs)), look for any secondary entry which got the new port_map because it came in before primary and delete it\n");
                   osb_memdb_delete("port_map,*|$var(C_si_var_gs)|*|*|*|*|*|*|*|0|*|$(avp(S_reg_ct_gs){uri.domain})|$(avp(S_reg_ct_gs){uri.port})|*|*|*|*|*|*|*|*|*|*|*|*|*");
                }

                ## Update entry for the existing contact for new
                if ($(var(S_pmap_ct_gs){s.len})==0 || $var(S_pmap_ct_gs) == $null || $var(S_pmap_ct_gs) == 0)
                    $var(S_pmap_ct_gs)="*";

                xlog("L_INFO","CI=$ci - R21 - Update entry with ep_contact=$var(S_pmap_ct_gs) and source port=$avp(S_pmap_ext_port_gi) with old values of S_pmap_int_port_gi=$avp(S_pmap_int_port_gi), S_int_ip_gs=$avp(S_int_ip_gs), S_wan_interface_gs=$avp(S_wan_interface_gs), S_old_pmap_transp_gs=$var(S_old_pmap_transp_gs),S_interface_src_gi=$var(S_interface_src_gs)\n");
                xlog("L_INFO","CI=$ci - R21 - New values: *|*|$avp(S_reg_ct_gs)|*|*|*|$var(S_expire_gi)|*|*|$avp(S_pmap_ep_id_gi)|$(avp(S_reg_ct_gs){uri.user})|$(avp(S_reg_ct_gs){uri.domain})|$(avp(S_reg_ct_gs){uri.port})|$var(S_interface_src_gs)|*|*|*|*|*|$var(S_ct_indication_gs)|$var(S_dev_token_gs)|*|*|*|*|$var(S_push_server_gs)\n");

                $var(S_memdb_return_li) = osb_memdb_update("port_map,*|*|$var(S_pmap_ct_gs)|*|$avp(S_pmap_ext_port_gi)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","*|*|$avp(S_reg_ct_gs)|*|*|*|$var(S_expire_gi)|*|*|$avp(S_pmap_ep_id_gi)|$(avp(S_reg_ct_gs){uri.user})|$(avp(S_reg_ct_gs){uri.domain})|$(avp(S_reg_ct_gs){uri.port})|$var(S_interface_src_gs)|*|*|*|*|*|$var(S_ct_indication_gs)|$var(S_dev_token_gs)|*|*|*|*|$var(S_push_server_gs)");

                if ( $var(S_memdb_return_li) != 1)
                    xlog("L_ERR","CI=$ci - R21 - osb_memdb_update failed (return code: $var(S_memdb_return_li))\n");

                ## if primary uses a new nat ip then go ahead and update all entries
                ## if secondary uses a new nat port or wan interface then go ahead and update all entries
                ## if secondary uses a new nat ip, then it does not reach here because R4 doesn't find a port map and gets a new one which gets deleted later on when primary registers.
                if ($var(S_pmap_property_changed_gb) == 1)
                {
                    xlog("L_INFO", "CI=$ci - R21 - Property changed. Update all entries for port = $avp(S_pmap_ext_port_gi) \n");
                    $var(S_memdb_return_li) = osb_memdb_update("port_map,*|*|*|*|$avp(S_pmap_ext_port_gi)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","*|$var(C_si_var_gs)|*|$sp|*|*|*|*|$var(S_pmap_wan_interface_ls)|$avp(S_pmap_ep_id_gi)|*|*|*|$var(S_interface_src_gs)|$avp(S_pm_transport_gs)|*|*|*|*|$var(S_ct_indication_gs)|$var(S_dev_token_gs)|*|*|*|*|$var(S_push_server_gs)");

                    if ( $var(S_memdb_return_li) != 1)
                        xlog("L_ERR","CI=$ci - R21 - osb_memdb_update failed (return code: $var(S_memdb_return_li))\n");
                }
            }

            $avp(C_pmap_port_gi)=$avp(S_pmap_ext_port_gi);
        }
        else
        {
            xlog("L_INFO","CI=$ci - R21 - External port not found for avp(S_reg_ct_gs)=$avp(S_reg_ct_gs), si=$var(C_si_var_gs), contact_user=$var(C_hdr_ct_user_gs), ip=$avp(C_tmp2_gs) check for keyset\n");

            route(PORT_MAPPING_ADD_NEW_ROUTE);

        }
    }
    $var(S_expire_gi) = $var(S_stored_expire_gi);

    xlog("L_INFO","CI=$ci - R21 - avp(S_pmap_id_gi)=$avp(S_pmap_id_gi), avp(S_pmap_ep_id_gi)=$avp(S_pmap_ep_id_gi),avp(S_pmap_ext_port_gi)=$avp(S_pmap_ext_port_gi),exp_as =$var(S_expire_gi), ep_contact =$avp(S_reg_ct_gs)\n");
    if (is_gflag("6"))
    {
        xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
        bm_log_timer("route-21");
    }
}

########################################################################
# route NM_PORT_MAPPING_TO_OSV_ROUTE: port mapping: to H8K  - Normal mode
########################################################################
route[NM_PORT_MAPPING_TO_OSV_ROUTE]
{
    if (is_gflag("6"))
        bm_start_timer("route-22");

    $var(S_sip_uri_tel_flags_ls) = 0;
    $var(S_sip_uri_flags_ls) = 0;
    if($var(C_ssp_use_tel_gb))
    {
      $var(S_sip_uri_tel_flags_ls) = URI_TEL2SIP;
    }
    xlog("L_INFO", "CI=$ci - R22 - Entry M=$rm rp=$rp Rp=$Rp flags=$mF to=$to ct=$ct, C_ssp_use_tel_gb=$var(C_ssp_use_tel_gb) avp(C_port_gi)=$avp(C_port_gi), gwbehindep=$avp(C_gw_behind_ep_gi), avp(C_req_transp_gs)=$avp(C_req_transp_gs),avp(C_ssp_flags_gi)=$avp(C_ssp_flags_gi),pm_transport=$avp(S_pm_transport_gs)\n");

    if(($avp(C_pmap_port_gi) != $null && $avp(C_pmap_port_gi) != "") && $avp(C_pmap_port_gi) !=0 )
       $avp(C_port_gi)=$avp(C_pmap_port_gi);

    #remove PATH header if found
    if(is_present_hf("PATH"))
       remove_hf("PATH");

    # Set transport of current bind in $var(S_sys_transp_gs)
    $var(S_sys_transp_gs) = "";
    $var(C_sys_binding_port_gi) = "";
    $var(S_sys_binding_ip_ls) = "";
    if(!not_empty("$sht(dlg-info=>$ci-$ft::listnodes)") || (!not_empty("$sht(dlg-info=>$ci-$ft::listnodes)") && $var(S_un_reg_gb) == 1))
    {
       xlog("L_INFO", "CI=$ci - R22 - sht(dlg-info=>$ci-$ft::listnodes) empty\n");

       $var(S_sys_binding_ip_ls) = $avp(C_sys_current_binding_ip_gs);
       $var(C_sys_binding_port_gi) = $avp(C_sys_current_binding_port_gi);
       $var(S_sys_transp_gs) = $avp(C_sys_current_binding_transp_gs);
    }
    else
    {
       $var(S_sys_binding_ip_ls) = $(sht(dlg-info=>$ci-$ft::listnodes){s.select,0,,}{s.trim});
       $var(C_sys_binding_port_gi) = $(sht(dlg-info=>$ci-$ft::listports){s.select,0,,}{s.trim});
       $var(S_sys_transp_gs) = $(sht(dlg-info=>$ci-$ft::listproto){s.select,0,,}{s.trim});
    }
    xlog("L_INFO", "CI=$ci - R22 - var(S_sys_binding_ip_ls)=$var(S_sys_binding_ip_ls),var(C_sys_binding_port_gi)=$var(C_sys_binding_port_gi),var(S_sys_transp_gs)=$var(S_sys_transp_gs),avp(C_core_ip_gs)=$avp(C_core_ip_gs) \n\n");

    put_ip_in_paran('$avp(C_core_ip_gs)','$avp(C_core_ip_gs)');
    if(isflagset(11)) {
       $var(S_pmap_ob_ip_to_apply_ls) = $var(S_lanip_4_6_gs);
       put_ip_in_paran('$var(S_pmap_ob_ip_to_apply_ls)','$var(S_pmap_ob_ip_to_apply_ls)');

       if (is_gflag("16")) {
          xlog("L_INFO", "CI=$ci - R22 - GFLAG 16 set. Overwriting osv_port with avp(C_port_gi)=$avp(C_port_gi)\n\n");
          $var(C_sys_osv_port_gi) = $avp(C_port_gi);
       }
       $var(C_fs_gs) = $var(S_sys_transp_gs)+":"+$var(S_pmap_ob_ip_to_apply_ls)+":"+$var(C_sys_osv_port_gi);
    }
    else {

       xlog("L_INFO", "CI=$ci - R22 - not remote sub, EP involved \n\n");
       if ($var(S_sys_transp_gs) == "udp")
           $var(S_gw_transp_ls) = "tcp";
       else
           $var(S_gw_transp_ls) = $var(S_sys_transp_gs);

       $var(S_sys_transp_gs) = $var(S_gw_transp_ls); # Use core transport towards OSV

       if($avp(C_gw_behind_ep_gi)==2)
           $var(C_fs_gs) = $var(S_sys_transp_gs)+":"+$avp(C_core_ip_gs)+":"+$var(C_ep1_core_port_gi);
       else
           $var(C_fs_gs) = $var(S_sys_transp_gs)+":"+$avp(C_core_ip_gs)+":"+$avp(C_gw_core_port_gi);


       if($(avp(S_gw_core_fqdn_gs){s.len}) > 0)
          $var(S_pmap_ob_ip_to_apply_ls) = $avp(S_gw_core_fqdn_gs);
       else
          $var(S_pmap_ob_ip_to_apply_ls) = $avp(C_core_ip_gs);
    }
    put_ip_in_paran('$var(S_pmap_ob_ip_to_apply_ls)','$var(S_pmap_ob_ip_to_apply_ls)');

    if($avp(C_gw_behind_ep_gi)==2)
       $var(C_core_port_gi) = $avp(C_gw_core_port_gi);
    else
       $var(C_core_port_gi) = $avp(C_port_gi);

    xlog("L_INFO", "CI=$ci - R22 - using the transport $var(S_sys_transp_gs), port=$var(C_sys_binding_port_gi), ip=$var(S_sys_binding_ip_ls), core_port=$var(C_core_port_gi), socket variable = $var(C_fs_gs)\n");

    $var(S_pmap_destination_ls) = '';
    if($var(C_ssm_msg_gb) == 0 && $var(C_call_msg_gb) != 1 && !is_method("REGISTER"))
    {
       #use record_route_preset here with coreip:core_port
       put_ip_in_paran('$avp(C_core_ip_gs)', '$avp(C_core_ip_gs)');
       if (!isflagset(11))
          $avp(C_tmp2_gs) = $avp(C_core_ip_gs)+":"+$avp(C_gw_core_port_gi)+";transport="+$avp(C_sys_current_binding_transp_gs);
       else
          $avp(C_tmp2_gs) = $avp(C_core_ip_gs)+":"+$var(C_sys_osv_port_gi)+";transport="+$avp(C_sys_current_binding_transp_gs);

       xlog("L_INFO", "CI=$ci - R22 - record_route_preset with $avp(C_tmp2_gs), avp(C_gw_transp_gs)=$avp(C_gw_transp_gs)\n");
       record_route_preset("$avp(C_tmp2_gs);oss=oss-09.04.13.00-2");
    }

    if (!isflagset(25) && !isflagset(10))
    {
        xlog("L_INFO", "CI=$ci - R22 - rd is= $rd, ru is= $ru\n");
        $var(S_pmap_destination_ls) = $rd;
    }
    else if ($var(S_sys_binding_ip_ls) != "0.0.0.0")
    {
        $var(S_pmap_destination_ls) = $var(S_sys_binding_ip_ls);
    }

#    $var(S_pmap_ob_ip_to_convert_gs) = $avp(C_wan_ip_gs);
    $var(S_pmap_ob_ip_to_convert_gs) = $avp(C_advertised_ip_gs);

    if ($avp(C_sys_current_binding_transp_gs) == "tls")
        $var(S_sip_suffix_gs) = "s";
    else
        $var(S_sip_suffix_gs) = "";

    $var(C_pmap_ct_port_gi) = $avp(C_core_port_gi);



    $var(S_sip_suffix_gs) = "sip" + $var(S_sip_suffix_gs);

    if(isflagset(28))
       $avp(C_port_gi) = $var(C_ep1_core_port_gi);

    xlog("L_INFO", "CI=$ci - R22 - avp(C_port_gi)=$avp(C_port_gi),avp(C_pmap_port_gi)=$avp(C_pmap_port_gi),var(C_ep1_core_port_gi)=$var(C_ep1_core_port_gi)\n");
    if(!($avp(C_port_gi) != $null && $avp(C_port_gi) != ""))
    {
         xlog("L_INFO", "CI=$ci - R22 - Unable to load external port for CT=$ct\n");
         append_to_reply("Warning: 399 $var(C_ri_var_gs) - R22 -Failure in port mapping, unable to load ext port.\r\n");
         sl_reply_error();
         if (is_gflag("6"))
         {
             xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
             bm_log_timer("route-22");
         }
         exit;
    }

    if($avp(C_gw_behind_ep_gi) != 2) {
        $var(S_viah_from_portmap_ls)=$var(S_pmap_ob_ip_to_apply_ls)+":"+$avp(C_port_gi);
        $var(S_use_core_ipaddr_ls)=$var(S_pmap_ob_ip_to_apply_ls);
        $var(S_use_core_port_li)=$avp(C_port_gi);
    }
    else {
        $var(S_viah_from_portmap_ls)=$var(C_ep2_core_ip_gs)+":"+$var(C_ep2_core_port_gi);
        $var(S_use_core_ipaddr_ls)=$var(C_ep2_core_ip_gs);
        $var(S_use_core_port_li)=$var(C_ep2_core_port_gi);
    }


    $var(S_rep_transp_gs) = "udp";
    if($avp(C_gw_behind_ep_gi) == 2 )
    {
       $var(S_ip_port_gs) = $var(C_ep2_core_ip_gs) + ":" + $var(C_ep2_core_port_gi);
       $var(S_use_ip_ls) = $var(C_ep2_core_ip_gs);
       $var(S_use_port_li) =  $var(C_ep2_core_port_gi);
       $var(S_rep_transp_gs) = $var(C_ep2_transp_gs);
       xlog("L_INFO", "CI=$ci - R22 -avp(C_gw_behind_ep_gi)=$avp(C_gw_behind_ep_gi) \n");
    }
    else if( isflagset(5) || isflagset(1))
    {
       $var(S_ip_port_gs) = $var(S_pmap_ob_ip_to_apply_ls) + ":" + $var(C_ep1_core_port_gi);
       $var(S_use_ip_ls) = $var(S_pmap_ob_ip_to_apply_ls);
       $var(S_use_port_li) =  $var(C_ep1_core_port_gi);
       $var(S_rep_transp_gs) = $var(C_ep1_transp_gs);
    }
    else
    {
       $var(S_ip_port_gs) = $var(S_pmap_ob_ip_to_apply_ls) + ":" + $avp(C_port_gi);
       $var(S_use_ip_ls) = $var(S_pmap_ob_ip_to_apply_ls);
       $var(S_use_port_li) =  $avp(C_port_gi);
       xlog("L_INFO", "CI=$ci - R22 -var(S_ip_port_gs)=$var(S_ip_port_gs) \n");
    }

    $var(S_ip_port_bak_ls) = $var(S_ip_port_gs);
    if ($avp(S_is_fqdn_gs) == 2 && $avp(S_rm_fqdn_gs) != $null && $avp(S_rm_fqdn_gs) != '')
    {
       if($avp(C_gw_behind_ep_gi) == 2 )
          $var(S_ip_port_gs) = $avp(S_rm_fqdn_gs) + ":" + $var(C_ep2_core_port_gi);
       else if( isflagset(5) || isflagset(1))
          $var(S_ip_port_gs) = $avp(S_rm_fqdn_gs) + ":" + $var(C_ep1_core_port_gi);
       else
          $var(S_ip_port_gs) = $avp(S_rm_fqdn_gs) + ":" + $avp(C_port_gi);
    }
    xlog("L_INFO", "CI=$ci - R22 - var(S_pmap_ob_ip_to_apply_ls)= $var(S_pmap_ob_ip_to_apply_ls),var(S_ip_port_bak_ls)=$var(S_ip_port_bak_ls), var(S_ip_port_gs)=$var(S_ip_port_gs), avp(S_is_fqdn_gs)=$avp(S_is_fqdn_gs)\n");



    if (is_gflag("6"))
    {
       xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
       bm_log_timer("route-22");
    }


}

########################################################################
# route PORT_MAPPING_FROM_OSV_ROUTE: port mapping: from H8K - Normal mode
########################################################################
route[PORT_MAPPING_FROM_OSV_ROUTE]
{
    if (is_gflag("6"))
        bm_start_timer("route-24");


    xlog("L_INFO", "CI=$ci - R24 - Entry M=$rm rp=$rp Rp=$Rp flags=$mF CT=$ct to=$to,avp(C_gw_transp_gs)=$avp(C_gw_transp_gs),avp(C_ssp_flags_gi)=$avp(C_ssp_flags_gi),pm_transport=$avp(S_pm_transport_gs)\n");

    $var(S_uri_type_ls)   ='sip';
    $var(S_sip_suffix_gs) = "";
    $var(S_pmap_colon_ls) =":";
    $var(S_sip_uri_tel_flags_ls) = 0;
    $var(S_sip_uri_flags_ls) =  0 ;
    $var(S_hdr_pai_user_ls) = "";
    $var(S_opt_transp_ls) = "";

    if($var(C_ssp_use_tel_gb))
    {
      $var(S_sip_uri_tel_flags_ls) = URI_SIP2TEL;
      # $var(S_uri_type_ls) = 'tel';
    }

    if(isflagset(11))
    {
        $var(S_pmap_dest_transp_ls) = $avp(S_pm_transport_gs);
    }
    else
    {
       if ($(avp(C_gw_transp_gs){s.tolower}) == "tcp")
           xlog("L_INFO", "CI=$ci - R24 - trans is tcp, var(C_pmap_ct_port_gi)=$var(C_pmap_ct_port_gi)\n");
       else if ($(avp(C_gw_transp_gs){s.tolower}) == "tls") {
           if ($var(C_ssp_tls_sips_scheme_gb)==1 && $avp(C_ssp_type_gi) != 7 &&  $avp(C_ssp_type_gi) != 10)
               $var(S_sip_suffix_gs) = "s";
           xlog("L_INFO", "CI=$ci - R24 - trans is tls, var(S_sip_suffix_gs)=$var(S_sip_suffix_gs),var(C_pmap_ct_port_gi)=$var(C_pmap_ct_port_gi)\n");
       }

       $var(S_pmap_dest_transp_ls) = $avp(C_gw_transp_gs);
    }

    if($avp(C_gw_type_gi)==6 ) {
        $var(S_ip_replacement_gs) = $var(S_local_ip_gs);
        $var(C_pmap_ct_port_gi) = $var(S_local_port_gs);
    }
    else if(($avp(C_gw_type_gi)==1 || $avp(C_gw_type_gi)==9) && $var(S_pstn_dialin_route_gi)  == 1)
    {
        # pstn dialin, initiated on LAN.
        $var(S_ip_replacement_gs) =  $var(S_lanip_4_6_gs) ;
        $var(C_pmap_ct_port_gi) = $var(S_local_port_gs);
        xlog("L_INFO", "CI=$ci - R24-  S_ip_replacement_gs=$var(S_ip_replacement_gs) ,C_pmap_ct_port_gi=$var(C_pmap_ct_port_gi)\n");
    }
    else {
        $var(S_ip_replacement_gs) = $avp(C_advertised_ip_gs);
        $var(C_pmap_ct_port_gi) = $avp(C_wan_port_gs);
        if(not_empty("$avp(C_fwd_ep_ip_gs)") && ($avp(S_fwd_ep_used_gb) == 1))
        {
            if($var(S_pmap_dest_transp_ls) =="tcp")
            {
                xlog("L_INFO", "CI=$ci - R24 - Port for TCP fwd EP. avp(C_fwd_ep_port_tcp_gs)=$avp(C_fwd_ep_port_tcp_gs)\n");
                if ($avp(C_fwd_ep_port_tcp_gs) != 0)
                    $var(C_pmap_ct_port_gi) = $avp(C_fwd_ep_port_tcp_gs);
            }
            else if($var(S_pmap_dest_transp_ls) =="tls")
            {
                xlog("L_INFO", "CI=$ci - R24 - Port for TLS fwd EP. avp(C_fwd_ep_port_tls_gs)=$avp(C_fwd_ep_port_tls_gs) avp(C_fwd_ep_port_mtls_gs)=$avp(C_fwd_ep_port_mtls_gs) avp(S_rep_bitmap_gi)=$avp(S_rep_bitmap_gi)\n");
                $avp(S_rep_bitmap_li) = $(avp(S_rep_bitmap_gi){s.int});
                if ($avp(C_fwd_ep_port_mtls_gs) != 0 && avp_check("$avp(S_rep_bitmap_li)","and/i:4/g")) # Check mtls
                    $var(C_pmap_ct_port_gi) = $avp(C_fwd_ep_port_mtls_gs);
                else if ($avp(C_fwd_ep_port_tls_gs) != 0)
                    $var(C_pmap_ct_port_gi) = $avp(C_fwd_ep_port_tls_gs);
            }
            else
            {
                xlog("L_INFO", "CI=$ci - R24 - Port for UDP fwd EP. avp(C_fwd_ep_port_udp_gs)=$avp(C_fwd_ep_port_udp_gs)\n");
                if ($avp(C_fwd_ep_port_udp_gs) != 0)
                    $var(C_pmap_ct_port_gi) = $avp(C_fwd_ep_port_udp_gs);
            }
        }
    }

    xlog("L_INFO", "CI=$ci - R24 - using wan_port as var(C_pmap_ct_port_gi)=$var(C_pmap_ct_port_gi)\n");

    $var(S_hdr_from_ct_port_li) = $var(C_pmap_ct_port_gi);
    if (($var(S_standalone_route_gi) == 0) || ($avp(S_fwd_ep_used_gb) == 1))
       $avp(C_advertised_port_gi) = $var(C_pmap_ct_port_gi);


    if(isflagset(11) || isflagset(15))
        $var(S_ru_type_ls) = $var(S_uri_type_ls);
    else
        $var(S_ru_type_ls) = $var(S_uri_type_ls)+$var(S_sip_suffix_gs) ;


    $var(S_pmap_ob_ip_to_convert_gs) = $var(S_lanip_4_6_gs);

    xlog("L_INFO", "CI=$ci - R24 - var(S_ru_type_ls)=$var(S_ru_type_ls),avp(C_port_gi)=$avp(C_port_gi) and avp(C_pmap_port_gi)= $avp(C_pmap_port_gi), var(S_ip_replacement_gs)=$var(S_ip_replacement_gs), avp(S_int_ip_gs)=$avp(S_int_ip_gs), avp(C_gw_type_gi)=$avp(C_gw_type_gi)\n");
    $avp(C_port_gi)= $avp(C_pmap_port_gi);

    if(($avp(S_gw_rm_ip_gs) != $null && $avp(S_gw_rm_ip_gs) != ""))
        put_ip_in_paran('$avp(S_gw_rm_ip_gs)','$avp(S_gw_rm_ip_gs)');

    if(!(isflagset(11) || isflagset(15))) # Not a registered subscrtiber
    {
        xlog("L_INFO", "CI=$ci - R24 - this is not a subscriber set port to $avp(C_pmap_port_gi), gw_rm_ip = $avp(S_gw_rm_ip_gs)\n");

        if($avp(C_rm_address_type_gi) != 1) {
           $avp(C_port_gi) = $avp(S_gw_rm_port_gi);
           if (is_method("OPTIONS"))
               $ru = "sip"+$var(S_sip_suffix_gs)+":"+$avp(S_gw_rm_ip_gs)+":"+$avp(S_gw_rm_port_gi)+";transport="+$avp(C_gw_transp_gs);
        }
        else {
           $avp(C_port_gi) = "";
           if (is_method("OPTIONS"))
               $ru = "sip"+$var(S_sip_suffix_gs)+":"+$avp(S_gw_rm_ip_gs)+";transport="+$avp(C_gw_transp_gs);
        }


        if ($var(C_ssp_user_eq_phone_gb) && $rU != $null)
           osb_set_uri("$ru","",URI_PARAM_USER_EQ_PHONE);

        if ($avp(C_ssp_pt_params_list_gs) != $null)
            osb_set_passthrough_params("$ou","$ru","$avp(C_ssp_pt_params_list_gs)");
        xlog("L_INFO", "CI=$ci - R24 - RURI updated to $ru\n");

        $avp(S_int_ip_gs) = $avp(S_gw_rm_ip_gs); ## TODO: Seems to be nt used. DELETE ?
    }
    if($avp(C_rm_address_type_gi)==0 && ($avp(C_port_gi)==$null || $avp(C_port_gi)==0))
    {
        if (is_gflag("6"))
        {
            xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
            bm_log_timer("route-24");
        }

        return(-1); # port map not found returning error!
    }
    else
    {
        xlog("L_INFO", "CI=$ci - R24 - int port:$avp(C_port_gi) and $avp(S_int_ip_gs) avp(C_gw_type_gi)=$avp(C_gw_type_gi)\n");

        $var(S_r_transp_gs) = '';
        $(avp(S_new_du_ls)[*]) = $null;

        if(isflagset(11))
        {
           $var(S_use_ip_ls) = $avp(S_int_ip_gs);
           put_ip_in_paran('$var(S_use_ip_ls)', '$var(S_use_ip_ls)');

           $var(S_r_transp_gs) = $(ru{uri.transport}{s.tolower}); #Modified transport
           $avp(S_new_du_ls) = "sip:" + $var(S_use_ip_ls) + ":" + $avp(C_port_gi) + ";transport=" +  $avp(S_pm_transport_gs);
        }
        else
        {
            $var(S_r_transp_gs) = $avp(C_gw_transp_gs);

            if (not_empty("$avp(S_fwd_vlan_addr_port_gs)") && $var(C_call_msg_gb) != 1) # Message that will not be sent to SSM
            {
                # Check first dynamic forward nw
                $(avp(S_dynamic_fwd_nw_addr_port_gs)[*]) = $null;
                if(osb_memdb_select("remote_ep_fwd_realm,*|$avp(S_fwd_vlan_addr_port_gs)|*|1|$avp(S_access_realm_profile_gs)|$avp(S_ep_name_gs)|*,","||$avp(S_dynamic_fwd_nw_addr_port_gs)||||") == 1 ||
                   osb_memdb_select("remote_ep_fwd_realm,*|$avp(S_fwd_vlan_addr_port_gs)|*|0|$avp(S_access_realm_profile_gs)|$avp(S_ep_name_gs)|*,","||$avp(S_dynamic_fwd_nw_addr_port_gs)||||") == 1)
                {
                    $var(S_fwd_vlan_addr_ls) = $(avp(S_dynamic_fwd_nw_addr_port_gs){s.select,0,;});
                    put_ip_in_paran('$var(S_fwd_vlan_addr_ls)', '$var(S_fwd_vlan_addr_ls)');
                    $var(S_fwd_vlan_port_ls) = $(avp(S_dynamic_fwd_nw_addr_port_gs){s.select,1,;});
                    osb_memdb_update("remote_ep_fwd_realm,*|$avp(S_fwd_vlan_addr_port_gs)|*|*|*|*|*,","*|*|*|0|*|*|*");
                }
                else
                {
                    $var(S_fwd_vlan_addr_ls) = $(avp(S_fwd_vlan_addr_port_gs){s.select,0,;});
                    put_ip_in_paran('$var(S_fwd_vlan_addr_ls)', '$var(S_fwd_vlan_addr_ls)');
                    $var(S_fwd_vlan_port_ls) = $(avp(S_fwd_vlan_addr_port_gs){s.select,1,;});
                }
                $avp(S_new_du_ls) = "sip:" + $var(S_fwd_vlan_addr_ls) + ":" + $var(S_fwd_vlan_port_ls) + ";transport=" + $avp(C_gw_transp_gs);
                xlog("L_INFO", "CI=$ci - R24 - SSP message using FWD VLAN. avp(S_new_du_ls) = $avp(S_new_du_ls)\n");
            }
            else if($var(S_ep1_natted_gi) == 1) ## NAT EP
            {
                $var(S_use_ip_ls) = $var(S_ep1_nat_ip_gs);
                put_ip_in_paran('$var(S_use_ip_ls)', '$var(S_use_ip_ls)');
                $avp(S_new_du_ls) = "sip:" +  $var(S_use_ip_ls)+":"+$var(C_ep1_nat_port_gs)+";transport="+$avp(C_gw_transp_gs);
                xlog("L_INFO", "CI=$ci - R24- NAT EP \n");
            }
            else # No NAT detected
            {
                xlog("L_INFO", "CI=$ci - R24- var(S_ssp_ip_addr_r1_gs)=$var(S_ssp_ip_addr_r1_gs) len=$(var(S_ssp_ip_addr_r1_gs){s.len}) \n");
                if ($(var(S_ssp_ip_addr_r1_gs){s.len}) > 0)
                {
                    $var(S_use_ip_ls) = $var(S_ssp_ip_addr_r1_gs);
                    put_ip_in_paran('$var(S_use_ip_ls)', '$var(S_use_ip_ls)');
                    if($var(S_ssp_ip_port_r1_gs) != "")
                    {
                        $avp(S_new_du_ls) = "sip:" + $var(S_use_ip_ls)+":"+$var(S_ssp_ip_port_r1_gs)+";transport="+$avp(C_gw_transp_gs);
                        xlog("L_INFO", "CI=$ci - R24 - Use ssp_ip_addr_r1 and ssp_ip_port_r1\n");
                    }
                    else
                    {
                        $avp(S_new_du_ls) = "sip:" + $var(S_use_ip_ls)+";transport="+$avp(C_gw_transp_gs);
                        xlog("L_INFO", "CI=$ci - R24 - Use ssp_ip_addr_r1\n");
                    }
                }
                else if ($(var(S_ssp_ip_addr_r0_gs){s.len}) > 0)
                {
                    xlog("L_INFO", "CI=$ci - R24- var(S_ssp_ip_addr_r0_gs)=$var(S_ssp_ip_addr_r0_gs) len=$(var(S_ssp_ip_addr_r0_gs){s.len}) \n");
                    $var(S_use_ip_ls) = $var(S_ssp_ip_addr_r0_gs);
                    put_ip_in_paran('$var(S_use_ip_ls)', '$var(S_use_ip_ls)');

                    if ($(var(S_ssp_ip_port_r0_gs){s.len}) > 0)
                    {
                        $avp(S_new_du_ls) = "sip:" + $var(S_use_ip_ls)+":"+$var(S_ssp_ip_port_r0_gs);
                        xlog("L_INFO", "CI=$ci - R24 - Use S_ssp_ip_addr_r0_gs and S_ssp_ip_port_r0_gs\n");
                    }
                    else
                    {
                        $avp(S_new_du_ls) = "sip:" + $var(S_use_ip_ls);
                        xlog("L_INFO", "CI=$ci - R24 - Use S_ssp_ip_addr_r0_gs without port\n");
                    }

                    # Use GW transport if it is the same of $var(S_r_transp_gs) and $var(S_ssp_ip_tran_r0_gs) is udp,
                    # since there are SSPs that do not send transport in contact and do not use UDP. And, in that case
                    # $var(S_ssp_ip_tran_r0_gs) is set with udp (default).
                    $var(S_force_use_gw_transp_lb) = 0;
                    if ( $var(S_r_transp_gs) != $var(S_ssp_ip_tran_r0_gs) && $var(S_r_transp_gs) == $avp(C_gw_transp_gs) && $var(S_ssp_ip_tran_r0_gs) == "udp" )
                       $var(S_force_use_gw_transp_lb) = 1;

                    if ($(var(S_ssp_ip_tran_r0_gs){s.len}) > 0 && !$var(S_force_use_gw_transp_lb))
                    {
                        $avp(S_new_du_ls) = $avp(S_new_du_ls) + ";transport="+$var(S_ssp_ip_tran_r0_gs);
                        xlog("L_INFO", "CI=$ci - R24 - Use ssp_ip_tran_r0 = $var(S_ssp_ip_tran_r0_gs)\n");
                    }
                    else # SHOULD NOT HAPPEN, BUT IF IT DOES THEN USE FIRST EP TRANSPORT
                    {
                        $avp(S_new_du_ls) = $avp(S_new_du_ls) + ";transport="+$avp(C_gw_transp_gs);
                        xlog("L_INFO", "CI=$ci - R24 - Use gw_transport = $avp(C_gw_transp_gs)\n");
                    }
                }
                else if($avp(C_rm_address_type_gi) !=1)
                {
                    xlog("L_INFO", "CI=$ci - R24 - Use gw_rm_ip:$avp(S_gw_rm_ip_gs) with gw_rm_port:$avp(S_gw_rm_port_gi)\n");
                    $var(S_use_ip_ls) = $avp(S_gw_rm_ip_gs);
                    put_ip_in_paran('$var(S_use_ip_ls)', '$var(S_use_ip_ls)');
                    $avp(S_new_du_ls) = "sip:" + $var(S_use_ip_ls)+":"+$avp(S_gw_rm_port_gi)+";transport="+$avp(C_gw_transp_gs);
                }
                else if($avp(C_ssp_use_sip_service_address_gs) =='y' && not_empty("$avp(C_ssp_service_addr_gs)"))
                {
                    xlog("L_INFO", "CI=$ci - R24 - Use sp_service_address\n");
                    $var(S_use_ip_ls) = $avp(S_gw_rm_ip_gs); # Already contains paran
                    ## put_ip_in_paran('$var(S_use_ip_ls)', '$var(S_use_ip_ls)');
                    $avp(S_new_du_ls) = "sip:" + $var(S_use_ip_ls)+";transport="+$avp(C_gw_transp_gs);
                }
                else if ($avp(S_gw_rm_ip_gs) != "")
                {
                    xlog("L_INFO", "CI=$ci - R24 - Use gw_rm_ip without port\n");
                    $var(S_use_ip_ls) = $avp(S_gw_rm_ip_gs); # Already contains paran
                    ## put_ip_in_paran('$var(S_use_ip_ls)', '$var(S_use_ip_ls)');
                    $avp(S_new_du_ls) = "sip:" + $var(S_use_ip_ls)+";transport="+$avp(C_gw_transp_gs);
                }
                else
                {
                    xlog("L_INFO", "CI=$ci - R24 - Use Uri Base Routing \n");
                    osb_set_uri("$ru","",0x08);
                    $avp(S_new_du_ls) = $ru;
                    osb_set_uri("$avp(S_new_du_ls)","$avp(C_gw_transp_gs)",0x10);
                }
            }
        }

        if ($var(S_r_transp_gs) == "")
            $var(S_r_transp_gs) = "udp";

        # For TLS always use the du for direct subscribers as we can not setup the TLS connection towards subscriber
        # Problem was Contact port was 5061 but the actual TLS connection was on different port.
        if(isflagset(11) && $var(S_r_transp_gs) != "tls" && $var(S_wan_natted_gb) == 0)
        {
           xlog("L_INFO", "CI=$ci - R24 - not changing the du\n");
           $var(S_do_not_set_du_gi) =1;
        }
        else
        {
           $var(S_do_not_set_du_gi) =0;
           $du =$avp(S_new_du_ls);
           xlog("L_INFO", "CI=$ci - R24 - the du can be changed and set: du=$du\n");
        }

        $var(S_ip_port_gs) = $var(S_ip_replacement_gs) + $var(S_pmap_colon_ls) + $var(C_pmap_ct_port_gi);
        xlog("L_INFO", "CI=$ci - R24 - Message for dest:$du, var(S_pmap_colon_ls)=$var(S_pmap_colon_ls),var(C_pmap_ct_port_gi)=$var(C_pmap_ct_port_gi),C_wan_port_gs= $avp(C_wan_port_gs),var(S_ip_replacement_gs)=$var(S_ip_replacement_gs)\n");

        $avp(S_req_fromh_gs) = $hdr(From);
        $avp(S_req_toh_gs) = $hdr(To);
        $var(S_pmap_rcv_to_ls) = $avp(S_req_toh_gs) ;

        # replace Via
        if(is_present_hf("Via"))
        {
            # Store all via headers in rcv_via
            $(avp(S_req_via_gs)[*]) = $null;
            $var(S_via_count_gi) = 0;
            while($(hdr(Via)[$var(S_via_count_gi)]) != $null)
            {
                $(avp(S_req_via_gs)[$var(S_via_count_gi)]) = "Via: " + $(hdr(Via)[$var(S_via_count_gi)]);

                $var(S_via_count_gi) = $var(S_via_count_gi) + 1;
            }
            # As Via header is changed, rport and received will be set by AVP (not automatically)
            avp_subst("$(avp(S_req_via_gs)[0])","/([^,]*;received=)[^;,\n]*/\1$var(C_si_var_gs)/i"); # Set received parameter with source ip
            avp_subst("$(avp(S_req_via_gs)[0])","/([^,]*;rport)[^;,\n]*/\1=$sp/i"); # Set rport parameter with source port

            route(MANIPULATE_VIA_ROUTE);
        }

        if(is_present_hf("Contact"))
        {
            $(avp(S_req_ct_gs)[*]) = $null;
            $avp(S_req_ct_gs) = $hdr(Contact);

            $var(S_pmap_domain_ip_gs) = $var(S_ip_replacement_gs);
            $var(S_use_port_li) = $var(C_pmap_ct_port_gi);

            if($var(S_NG911_notification_gb) == 0)
            {
                xlog("L_INFO", "CI=$ci - R24 - var(S_pmap_domain_ip_gs)=$var(S_pmap_domain_ip_gs),var(S_use_port_li)=$var(S_use_port_li)\n");
                xlog("L_INFO", "CI=$ci - R24 - var(C_ssp_sip_o_tls_set_gb)=$var(C_ssp_sip_o_tls_set_gb),var(S_ru_type_ls)=$var(S_ru_type_ls),var(S_r_transp_gs)=$var(S_r_transp_gs) \n");

                put_ip_in_paran('$var(S_pmap_domain_ip_gs)', '$var(S_pmap_domain_ip_gs)');

                ## Remove maddr towards WAN
                if($var(C_ssp_sip_o_tls_set_gb))
                  osb_update_uri("$avp(S_req_ct_gs)","$var(S_ru_type_ls),$var(S_pmap_domain_ip_gs),$var(S_use_port_li),,",0x3D);
                else {
                  osb_update_uri("$avp(S_req_ct_gs)","$var(S_ru_type_ls),$var(S_pmap_domain_ip_gs),$var(S_use_port_li),$(var(S_r_transp_gs){s.tolower}),",0x3D);
                  osb_set_uri("$avp(S_req_ct_gs)","$(var(S_r_transp_gs){s.tolower})",0x10); # Force the transport if not present in the contact from OSV
                }

                osb_set_uri("$avp(S_req_ct_gs)","$var(S_use_port_li)",0x08); # Force the port if not present in the contact from OSV

                xlog("L_INFO", "CI=$ci - R24 0 - S_new_du_ls=$avp(S_new_du_ls) tU=$tU tu=$tu\n");
                if(!$var(C_ssp_use_tel_gb) && ($var(C_ssp_user_eq_phone_gb) && $sel(contact.uri.user) != $null))
                {
                   osb_set_uri("$avp(S_req_ct_gs)","",URI_PARAM_USER_EQ_PHONE); # When '+' is available add user=phone if not previously set
                }
                xlog("L_INFO", "CI=$ci - R24 1 - S_req_ct_gs=$avp(S_req_ct_gs) cU=$sel(contact.uri.user) ct=$ct\n");

                xlog("L_INFO", "CI=$ci - R24 - mf=$mF, C_ssp_flags_gi=$avp(C_ssp_flags_gi), avp(C_ssp_default_home_dn_gs) =$avp(C_ssp_default_home_dn_gs) \n");
                $var(S_ssp_flags_gi) = $(avp(C_ssp_flags_gi)[0]{s.int});
                $(avp(C_ssp_flags_gi)[*]) = $null;
                $avp(C_ssp_flags_gi) = $var(S_ssp_flags_gi);
                if(isflagset(1) && avp_check("$avp(C_ssp_flags_gi)", "and/i:0x04") && is_avp_set("$avp(C_ssp_default_home_dn_gs)") && $avp(C_ssp_default_home_dn_gs) != "")
                {
                    xlog("L_INFO", "CI=$ci - R24 - call to SSP and spare flag(3) is set, avp(C_ssp_default_home_dn_gs) =$avp(C_ssp_default_home_dn_gs) \n");
                    osb_update_uri("$avp(S_req_ct_gs)","$avp(C_ssp_default_home_dn_gs)",0x02);
                }

                xlog("L_INFO", "CI=$ci - R24 - replacing contact with avp(S_req_ct_gs)=$avp(S_req_ct_gs),var(S_ip_port_gs)=$var(S_ip_port_gs),var(S_r_transp_gs)=$var(S_r_transp_gs)\n");

                ## Can expect gr=urn in Contact header of any request INVITE ACK BYE etc...Always add the Magic Cokkie
                if (search("^Contact:.*gr="))
                {
                   xlog("L_INFO", "R24 - found GRUU in Contact header. Adding Magic Cookie to be used for NG911 Callback avp(S_req_ct_gs) before insertion =$avp(S_req_ct_gs)\n");

                   ### Save two parts of contact header just before and just after where the Magic Cookie should be placed.
                   ### Looking for "=urn"
                   $var(S_pos_li)    = $(avp(S_req_ct_gs){s.strpos,=urn});

                   if  $var(S_pos_li) > 0
                   {
                        $var(S_contact1_ls) = $(avp(S_req_ct_gs){s.substr,0,$var(S_pos_li)});

                        $var(S_contact2_ls) = $(avp(S_req_ct_gs){s.substr,$var(S_pos_li),0});

                        ### Put it back together with the Magic Cookie
                        $avp(S_req_ct_gs) = $var(S_contact1_ls)+$var(S_magic_cookie_gs)+$var(S_contact2_ls);
                    }
                }
                if ($avp(C_ssp_pt_params_list_gs) != $null)
                    osb_set_passthrough_params("$hdr(Contact)","$avp(S_req_ct_gs)","$avp(C_ssp_pt_params_list_gs)");

                if (is_method("BYE"))
                    remove_hf("Contact");
                else
                    subst('/^Contact:.*$/Contact: $avp(S_req_ct_gs)\r/ig');
            }

            $(avp(S_req_ct_gs)[*]) = $null;

            if ($var(C_g_useSsmRecordRoute_gb) == 1 && $var(C_call_msg_gb) == 1) # H4K Load balancer could send the Contact IP different than primary binding.
            {
                $var(C_rr_preset_hdr_gs) = "";

                if ($var(S_standalone_route_gi) == 1 && $avp(S_recv_adv_socket_gs) != $null)
                {
                    $var(C_rr_preset_hdr_gs) = $(avp(S_recv_adv_socket_gs){s.select,1,;})+":"+$(avp(S_recv_adv_socket_gs){s.select,2,;})+";transport="+$(avp(S_recv_adv_socket_gs){s.select,0,;});
                    xlog("L_INFO", "CI=$ci - R24 - var(C_rr_preset_hdr_gs)=$var(C_rr_preset_hdr_gs), avp(S_recv_adv_socket_gs)=$avp(S_recv_adv_socket_gs)\n");
                }
                else
                {
                    $var(C_rr_preset_hdr_gs) = $var(S_pmap_domain_ip_gs)+":"+$var(S_use_port_li)+";transport="+$avp(C_req_transp_gs);
                    xlog("L_INFO", "CI=$ci - R24 - var(C_rr_preset_hdr_gs)=$var(C_rr_preset_hdr_gs), var(S_pmap_domain_ip_gs)=$var(S_pmap_domain_ip_gs), var(S_use_port_li)=$var(S_use_port_li), avp(C_req_transp_gs)=$avp(C_req_transp_gs),\n");
                }
                # read the maddr from contact and provide this in record route
                if ($(sel(contact.uri){uri.maddr}{s.len}))
                    $var(S_com_ip_addr_r0_ls) = $(sel(contact.uri){uri.maddr});
                else
                    $var(S_com_ip_addr_r0_ls) = $sel(contact.uri.host);

                $var(C_rr_preset_hdr_gs) = $var(C_rr_preset_hdr_gs)+";comIP="+$var(S_com_ip_addr_r0_ls);

                $var(C_rr_preset_hdr_gs) = $var(C_rr_preset_hdr_gs)+"~"; # Need to add delimter irrespective of the next field
                if($(sel(contact.uri.port){s.len}) )
                {
                    $var(S_com_ip_port_r0_ls) = $sel(contact.uri.port);
                    $var(C_rr_preset_hdr_gs) = $var(C_rr_preset_hdr_gs)+$var(S_com_ip_port_r0_ls);
                }

                $var(C_rr_preset_hdr_gs) = $var(C_rr_preset_hdr_gs)+"~"; # Need to add delimter irrespective of the next field
                if ($(sel(contact.uri){uri.transport}{s.len}))
                    $var(S_com_ip_tran_r0_ls) = $(sel(contact.uri){uri.transport});
                else if ($sel(via[2]) != $null)
                    $var(S_com_ip_tran_r0_ls) = $(sel(via[-1].transport){s.tolower}); # With multiple via headers, set transport of last Via when contact transport is unavailable
                else
                    $var(S_com_ip_tran_r0_ls) = $avp(C_req_transp_gs);

                $var(C_rr_preset_hdr_gs) = $var(C_rr_preset_hdr_gs)+$var(S_com_ip_tran_r0_ls);

                if (!is_present_hf("Record-Route"))
                {
                   if ($var(S_standalone_route_gi) == 0)
                   {
                       $var(C_rr_preset_hdr_gs) = "Record-Route: <sip:"+$var(C_rr_preset_hdr_gs)+";lr;ftag="+$ft+">";
                       insert_hf("$var(C_rr_preset_hdr_gs)\r\n","Record-Route");
                   }
                }
                else
                  record_route_preset("$var(C_rr_preset_hdr_gs)");

                xlog("L_INFO", "CI=$ci - R24 - Addding our Record-Route $var(C_rr_preset_hdr_gs)\n");

            }
        }
        else if (is_present_hf("Record-Route") && $var(S_standalone_route_gi) == 1)
        {
            if ($var(C_g_useSsmRecordRoute_gb) == 1 && $var(C_call_msg_gb) == 1) # H4K Load balancer could send the Contact IP different than primary binding.
            {
                $var(C_rr_preset_hdr_gs) = "";
                if ($avp(S_recv_adv_socket_gs) != $null)
                {
                    $var(C_rr_preset_hdr_gs) = $(avp(S_recv_adv_socket_gs){s.select,1,;})+":"+$(avp(S_recv_adv_socket_gs){s.select,2,;})+";transport="+$(avp(S_recv_adv_socket_gs){s.select,0,;});
                    xlog("L_INFO", "CI=$ci - R24 - No contact var var(C_rr_preset_hdr_gs)=$var(C_rr_preset_hdr_gs), avp(S_recv_adv_socket_gs)=$avp(S_recv_adv_socket_gs)\n");
                }
                else
                {
                    $var(C_rr_preset_hdr_gs) = $var(S_pmap_domain_ip_gs)+":"+$var(S_use_port_li)+";transport="+$avp(C_req_transp_gs);
                    xlog("L_INFO", "CI=$ci - R24 - No contact var(C_rr_preset_hdr_gs)=$var(C_rr_preset_hdr_gs), var(S_pmap_domain_ip_gs)=$var(S_pmap_domain_ip_gs), var(S_use_port_li)=$var(S_use_port_li), avp(C_req_transp_gs)=$avp(C_req_transp_gs),\n");
                }
                record_route_preset("$var(C_rr_preset_hdr_gs)");
            }
        }

        if ($avp(S_hdr_to_dom_gs) == $null || $avp(S_hdr_to_dom_gs) == '') {
            if(isflagset(10) || $var(S_standalone_route_gi))
            {
                if($avp(C_ssp_use_sip_service_address_gs) =='y' && not_empty("$avp(C_ssp_service_addr_gs)"))
                    $avp(S_hdr_to_dom_gs) = $avp(C_ssp_service_addr_gs);
                else
                {
                    if ($(avp(S_gw_rm_ip_gs){s.len}) > 0)
                        $avp(S_hdr_to_dom_gs) = $avp(S_gw_rm_ip_gs);
                    else
                    $avp(S_hdr_to_dom_gs) = $rd;
                }

                xlog("L_INFO", "CI=$ci - R24 - flags=$mF, Standalone=$var(S_standalone_route_gi), C_ssp_use_sip_service_address_gs=$avp(C_ssp_use_sip_service_address_gs), C_ssp_service_addr_gs=$avp(C_ssp_service_addr_gs), rd=$rd, S_hdr_to_dom_gs=$avp(S_hdr_to_dom_gs)\n");
            }
        }

        xlog("L_INFO", "CI=$ci - R24 - before manip fu=$fu, avp(S_hdr_from_user_gs)=$avp(S_hdr_from_user_gs),var(S_ru_type_ls)=$var(S_ru_type_ls),var(S_hdr_from_domain_buf_gs)=$var(S_hdr_from_domain_buf_gs),var(S_ip_replacement_gs)=$var(S_ip_replacement_gs),avp(S_hdr_to_dom_gs)=$avp(S_hdr_to_dom_gs)\n");

        $var(C_new_fromh_hdr_gs) = $hdr(From);
        $var(S_isFqdn_ls) = $fd;
        if (( from_uri != myself) && !PROC_IS_PURE_IP)
        {
            $var(S_hdr_from_is_fqdn_gb)=1;
            xlog("L_INFO", "CI=$ci - R24 - fqdn in From , var(C_new_fromh_hdr_gs) = $var(C_new_fromh_hdr_gs)\n");
        }
        else
           $var(S_hdr_from_is_fqdn_gb)=0;

        if( $(fu{uri.host}{s.tolower}) == "anonymous.invalid")
           $var(S_hdr_from_is_anonymous_lb) =1;
        else
           $var(S_hdr_from_is_anonymous_lb) =0;

        # for skype From should point to business ID

        if( $var(S_hdr_from_is_fqdn_gb)!=1  && is_method("REGISTER")) # For REGISTER everything must point to H8K
        {
            if (!isflagset(12))  # REGISTER NOT FROM OSV OR H4000
               osb_set_uri("$var(C_new_fromh_hdr_gs)","$avp(C_sys_current_binding_ip_gs),",0xC);
            else # REGISTER FROM OSV OR H4000
               osb_set_uri("$var(C_new_fromh_hdr_gs)","$avp(S_hdr_to_dom_gs),",0xC);
        }
        else
        {
            ### need to initialize the avp before avp_check
            $var(C_ssp_flags_gi) = $(avp(C_ssp_flags_gi)[0]{s.int});
            $(avp(C_ssp_flags_gi)[*]) = $null;
            $avp(C_ssp_flags_gi) = $var(C_ssp_flags_gi);

            if($avp(C_ssp_type_gi) != 10)
            {
                if($(fu{uri.host}{s.tolower}) == "anonymous.invalid")
                    $var(S_hdr_from_domain_buf_gs) = $fd;
                else if ($var(S_hdr_from_is_fqdn_gb)==1 && $avp(C_ssp_use_sip_service_address_gs) != 'y' )  # FQDN is coming in and Use SSP address is not set
                    $var(S_hdr_from_domain_buf_gs) = $fd;
                else if ($avp(C_ssp_use_sip_service_address_gs) != 'y') # No FQDN coming in
                {
                    if($(avp(S_hdr_from_user_gs){s.tolower}) == "anonymous")
                        $var(S_hdr_from_domain_buf_gs) = "anonymous.invalid";
                    else
                        $var(S_hdr_from_domain_buf_gs) = $var(S_ip_replacement_gs); # Non SSP call, use OS-SBC WAN IP in From
                }

                if( $var(S_hdr_from_is_fqdn_gb)==1 && $var(C_ssp_dis_FQDN_passthrough_from_gb) == 1 )
                {
                    xlog("L_INFO", "CI=$ci - R24 - Flag Disable FQDN Pass-through in From Header is enabled use OS-SBC WAN IP $var(S_ip_replacement_gs) in From\n");
                    $var(S_hdr_from_domain_buf_gs) = $var(S_ip_replacement_gs);
                }
            }
            else   #### this is skype
            {
                xlog("L_INFO", "CI=$ci - R24 - Use SSP Service Address in from domain for Skype\n");
                $var(S_hdr_from_domain_buf_gs) = $avp(C_ssp_service_addr_gs);
            }
            put_ip_in_paran('$var(S_hdr_from_domain_buf_gs)', '$var(S_hdr_from_domain_buf_gs)');
            $var(S_opt_port_ls) = "";
            if ($(fu{uri.port}{s.len}))
                $var(S_opt_port_ls) = $(fu{uri.port});

            if (!is_gflag("2") && !( avp_check("$avp(C_ssp_flags_gi)", "and/i:0x02"))) # Don't Preserve To and From per RFC2543
            {
                if (($avp(S_hdr_from_user_gs) == $null || $avp(S_hdr_from_user_gs) == '') && $fU != $null)
                    $avp(S_hdr_from_user_gs) = $fU;

                $var(S_sip_uri_flags_ls) = $var(S_sip_uri_tel_flags_ls) + 0x07;
                xlog("L_INFO", "CI=$ci - R241.0 - var(S_ru_type_ls)=$var(S_ru_type_ls),var(S_hdr_from_domain_buf_gs)=$var(S_hdr_from_domain_buf_gs),var(S_sip_uri_flags_ls)=$var(S_sip_uri_flags_ls)\n");

                osb_set_uri("$var(C_new_fromh_hdr_gs)","$var(S_ru_type_ls),$avp(S_hdr_from_user_gs),$var(S_hdr_from_domain_buf_gs)","$var(S_sip_uri_flags_ls)");

                if ($var(S_standalone_route_gi) || $var(S_hdr_from_is_fqdn_gb)==1 && $avp(C_ssp_use_sip_service_address_gs) != 'y')
                    $var(S_opt_port_ls) = $var(S_hdr_from_ct_port_li);

                $var(S_opt_transp_ls) = $(var(S_r_transp_gs){s.tolower});
                xlog("L_INFO", "CI=$ci - R24 - Set transport var(S_r_transp_gs){s.tolower}=$var(S_opt_transp_ls), var(S_opt_transp_ls)=$var(S_opt_transp_ls)\n");

                if($var(C_ssp_user_eq_phone_gb) && $fU!= $null)
                {
                   osb_set_uri("$var(C_new_fromh_hdr_gs)","",URI_PARAM_USER_EQ_PHONE); # When '+' is available add user=phone if not previously set
                   xlog("L_INFO", "CI=$ci - R241.0 - var(C_new_fromh_hdr_gs)=$var(C_new_fromh_hdr_gs) fU=$fU fu=$fu tU=$tU tu=$tu\n");
                }
                xlog("L_INFO", "CI=$ci - R241.1 - var(C_new_fromh_hdr_gs)=$var(C_new_fromh_hdr_gs) fU=$fU fu=$fu\n");

                osb_set_uri("$avp(S_req_fromh_gs)","$avp(S_hdr_from_user_gs)",0x02);
                $(avp(S_hdr_from_user_gs)[*]) = $null; # Set avp to $null, so route 28 won't use it to header subst.
            }
            else
            {
                $var(S_reg_exp_field_name_gs) ="From";

                if ($avp(S_hdr_from_user_gs) != $null && $avp(S_hdr_from_user_gs) != '')
                   $var(S_reg_exp_user_gs) = $avp(S_hdr_from_user_gs);
                else if ($fU != $null)
                   $var(S_reg_exp_user_gs) = $fU;
                else
                   $var(S_reg_exp_user_gs) = "";

                if($fd == $var(C_ep1_core_ip_gs) || $fd == $var(C_ep2_core_ip_gs) || $fd == $var(S_lanip_4_6_gs))
                {
                   $var(S_reg_exp_dom_gs)    = $avp(S_hdr_to_dom_gs);
                   $var(S_reg_exp_transp_gs) = $var(S_pmap_dest_transp_ls);
                   $var(S_reg_exp_port_gs)      = $rp;
                }
                else
                {
                   $var(S_reg_exp_dom_gs)    = $var(S_hdr_from_domain_buf_gs);
                   $var(S_reg_exp_transp_gs) = $var(S_pmap_dest_transp_ls);
                   $var(S_reg_exp_port_gs)      = $var(C_pmap_ct_port_gi);
                }
                put_ip_in_paran('$var(S_reg_exp_dom_gs)', '$var(S_reg_exp_dom_gs)');
                xlog("L_INFO", "CI=$ci - R24 -  var(S_reg_exp_dom_gs)=$var(S_reg_exp_dom_gs),var(S_reg_exp_transp_gs)=$var(S_reg_exp_transp_gs),var(S_reg_exp_port_gs)=$var(S_reg_exp_port_gs)\n");
                $var(S_sip_uri_flags_ls) = $var(S_sip_uri_tel_flags_ls) + 0x1F;

                osb_set_uri("$var(C_new_fromh_hdr_gs)","$var(S_ru_type_ls),$var(S_reg_exp_user_gs),$var(S_reg_exp_dom_gs)","$var(S_sip_uri_tel_flags_ls)");

                $var(S_opt_port_ls) = $var(S_reg_exp_port_gs);
                $var(S_opt_transp_ls) = $var(S_reg_exp_transp_gs);
                xlog("L_INFO", "CI=$ci - R24 - Set transport var(S_reg_exp_transp_gs)=$var(S_reg_exp_transp_gs), var(S_opt_transp_ls)=$var(S_opt_transp_ls)\n");
            }

            xlog("L_INFO", "CI=$ci - R24 - Set transport var(S_port_transp_opt_gs)=$var(S_port_transp_opt_gs)\n");
            if ($(var(S_port_transp_opt_gs){s.len}))
            {
                $var(S_opt_port_ls) = $var(S_fromh_opt_port_gs);
                $var(S_opt_transp_ls) = $var(S_fromh_opt_transp_gs);
                xlog("L_INFO", "CI=$ci - R24 - Set transport var(S_fromh_opt_transp_gs)=$var(S_fromh_opt_transp_gs), var(S_opt_transp_ls)=$var(S_opt_transp_ls)\n");
            }
            else if ($avp(C_ssp_use_sip_service_address_gs) == 'y' && not_empty("$avp(C_ssp_service_addr_gs)")) # Don't set from port for service address
                $var(S_opt_port_ls) = "";

            osb_set_uri("$var(C_new_fromh_hdr_gs)","$var(S_opt_port_ls),$var(S_opt_transp_ls)", 0x18);

            xlog("L_INFO", "CI=$ci - R24 - From changed to var(C_new_fromh_hdr_gs)=$var(C_new_fromh_hdr_gs) var(S_opt_port_ls)=$var(S_opt_port_ls) var(S_opt_transp_ls)=$var(S_opt_transp_ls) \n");
        }
        if ($avp(C_ssp_pt_params_list_gs) != $null)
            osb_set_passthrough_params("$hdr(From)","$var(C_new_fromh_hdr_gs)","$avp(C_ssp_pt_params_list_gs)");
        subst('/^From:.*/From: $var(C_new_fromh_hdr_gs)\r/i');
        $var(S_reg_exp_dom_gs) = '';
        $var(S_reg_exp_user_gs) = '';
        $var(S_reg_exp_transp_gs) = '';
        $var(S_reg_exp_port_gs) = '';
        if(isflagset(5) || isflagset(15))
        {
            $var(S_ip_replacement_To_ls) = $avp(S_gw_rm_ip_gs);
            $var(S_ip_replacement_To_port_li) = $avp(S_gw_rm_port_gi);
        }
        else
        {
            $var(S_ip_replacement_To_ls) = $rd;
            $var(S_ip_replacement_To_port_li) = $rp;
        }

        xlog("L_INFO", "CI=$ci - R24 - Before replacing To Header fu=$fu, $ru $rd $rp user=$avp(S_hdr_to_user_gs),var(S_reg_exp_dom_gs)=$var(S_reg_exp_dom_gs),var(S_ip_replacement_gs)=$var(S_ip_replacement_gs)\n");

        if ($avp(S_hdr_to_user_gs) != $null && $avp(S_hdr_to_user_gs) != '')
           $var(S_reg_exp_user_gs) = $avp(S_hdr_to_user_gs);
        else if ($tU != $null)
           $var(S_reg_exp_user_gs) = $tU;
        else
           $var(S_reg_exp_user_gs) = "";

        xlog("L_INFO", "CI=$ci - R24 - var(S_standalone_route_gi)=$var(S_standalone_route_gi), td=$td, var(C_ep2_core_ip_gs)=$var(C_ep2_core_ip_gs), var(S_lanip_4_6_gs)=$var(S_lanip_4_6_gs) \n");
        if($var(S_standalone_route_gi) || $td == $var(C_ep1_core_ip_gs) || $td == $var(C_ep2_core_ip_gs) || $td == $var(S_lanip_4_6_gs))
        {
           $var(S_reg_exp_dom_gs)    = $avp(S_hdr_to_dom_gs);
           $var(S_reg_exp_transp_gs) = $var(S_pmap_dest_transp_ls);
           $var(S_reg_exp_port_gs)   = $rp;
           xlog("L_INFO", "CI=$ci - R24 - avp(S_hdr_to_dom_gs)=$avp(S_hdr_to_dom_gs) $var(S_reg_exp_transp_gs):$var(S_reg_exp_dom_gs):$var(S_reg_exp_port_gs)\n");
        }
        else
        {
           $var(S_reg_exp_dom_gs)    = $var(S_ip_replacement_To_ls);
           $var(S_reg_exp_transp_gs) = $var(S_pmap_dest_transp_ls);
           $var(S_reg_exp_port_gs)   = $var(S_ip_replacement_To_port_li);
           xlog("L_INFO", "CI=$ci - R24 - var(S_ip_replacement_To_ls)=$var(S_ip_replacement_To_ls) $var(S_reg_exp_transp_gs):$var(S_reg_exp_dom_gs):$var(S_reg_exp_port_gs)\n");
        }

        $var(S_isFqdn_ls) = $td;
        if (( to_uri != myself ) && !PROC_IS_PURE_IP)
        {
            $var(S_toh_is_fqdn_gb)=1;
            xlog("L_INFO", "CI=$ci - R24 - fqdn in To \n");
        }
        else
           $var(S_toh_is_fqdn_gb)=0;

        xlog("L_INFO", "CI=$ci - R24 - still Before replacing To Header var(S_reg_exp_dom_gs)=$var(S_reg_exp_dom_gs),var(S_reg_exp_transp_gs)=$var(S_reg_exp_transp_gs),var(S_reg_exp_port_gs)=$var(S_reg_exp_port_gs),var(S_reg_exp_user_gs)=$var(S_reg_exp_user_gs)\n");
        $var(C_new_toh_hdr_gs) = $hdr(To);

        #Do not replace To Header for NG911 Call
        if (!($var(C_new_toh_hdr_gs) =~ "urn:service:(sos|counseling).*"))
        {
            if($var(S_toh_is_fqdn_gb) !=1)
            {
                ### need to initialize the avp before avp_check
                $var(C_ssp_flags_gi) = $(avp(C_ssp_flags_gi)[0]{s.int});
                $(avp(C_ssp_flags_gi)[*]) = $null;
                $avp(C_ssp_flags_gi) = $var(C_ssp_flags_gi);
                if (!is_gflag("2") && !(avp_check("$avp(C_ssp_flags_gi)", "and/i:0x02"))) # Don't Preserve To and From per RFC2543
                {
                    $var(S_opt_port_ls) = "";
                    if($avp(C_ssp_use_sip_service_address_gs) != 'y')
                        $var(S_opt_port_ls) = $var(S_reg_exp_port_gs);
                    $var(S_opt_transp_ls) = $var(S_reg_exp_transp_gs);
                    xlog("L_INFO", "CI=$ci - R24.a - Set To transport var(S_opt_port_ls)=$var(S_opt_port_ls), var(S_opt_transp_ls)=$var(S_opt_transp_ls)\n");
                    if($var(C_ssp_sip_o_tls_set_gb))
                        $var(S_opt_transp_ls) = "";

                    if ($avp(S_hdr_to_user_gs) != $null && $avp(S_hdr_to_user_gs) != '' && $avp(S_hdr_to_user_gs) != $tU)
                    {
                        if( not_empty("$var(S_opt_port_ls)") && $var(S_opt_port_ls) != 0)
                            osb_set_uri("$avp(S_req_toh_gs)","$var(S_ru_type_ls),$var(S_reg_exp_user_gs),$var(S_reg_exp_dom_gs),$var(S_opt_port_ls),$var(S_opt_transp_ls)",0x1F);
                        else
                            osb_set_uri("$avp(S_req_toh_gs)","$var(S_ru_type_ls),$var(S_reg_exp_user_gs),$var(S_reg_exp_dom_gs),,$var(S_opt_transp_ls)",0x1F);

                        $(avp(S_hdr_to_user_gs)[*]) = $null; # Set avp to null, so route 28 won't use it to header subst.
                        xlog("L_INFO", "CI=$ci - R24 - !flag(2), avp(S_hdr_to_user_gs),  avp(S_req_toh_gs)=$avp(S_req_toh_gs)\n");
                    }
                    else
                    {
                        if( not_empty("$var(S_opt_port_ls)") && $var(S_opt_port_ls) != 0)
                            osb_set_uri("$avp(S_req_toh_gs)","$var(S_ru_type_ls),$var(S_reg_exp_dom_gs),$var(S_opt_port_ls),$var(S_opt_transp_ls)",0x1D);
                        else
                            osb_set_uri("$avp(S_req_toh_gs)","$var(S_ru_type_ls),$var(S_reg_exp_dom_gs),,$var(S_opt_transp_ls)",0x1D);
                    }
                    if(!$var(C_ssp_use_tel_gb) && $var(C_ssp_user_eq_phone_gb) && $tU != $null)
                    {
                        osb_set_uri("$avp(S_req_toh_gs)","",URI_PARAM_USER_EQ_PHONE); # When '+' is available add user=phone if not previously set
                    }
                    $var(S_sip_uri_flags_ls) = $var(S_sip_uri_tel_flags_ls);
                    osb_set_uri("$avp(S_req_toh_gs)","","$var(S_sip_uri_flags_ls)");

                    xlog("L_INFO", "CI=$ci - R24 1 - S_req_toh_gs=$avp(S_req_toh_gs) tU=$tU tu=$tu\n");

                    $var(C_new_toh_hdr_gs) = $avp(S_req_toh_gs);
                }
                else
                {
                    xlog("L_INFO", "CI=$ci - R24 - flag(2), avp(S_req_toh_gs)=$avp(S_req_toh_gs)\n");
                    $var(S_reg_exp_field_name_gs) ="To";

                    if ($avp(S_hdr_to_user_gs) != $null && $avp(S_hdr_to_user_gs) != '')
                        $var(S_reg_exp_user_gs) = $avp(S_hdr_to_user_gs);
                    else if ($tU != $null)
                        $var(S_reg_exp_user_gs) = $tU;
                    else
                        $var(S_reg_exp_user_gs) = "";

                    if($td == $var(C_ep1_core_ip_gs) || $td == $var(C_ep2_core_ip_gs) || $td == $var(S_lanip_4_6_gs))
                    {
                        $var(S_reg_exp_dom_gs)    = $avp(S_hdr_to_dom_gs);
                        $var(S_reg_exp_transp_gs) = $var(S_pmap_dest_transp_ls);
                        $var(S_reg_exp_port_gs)      = $rp;
                    }
                    else
                    {
                        $var(S_reg_exp_dom_gs)    = $var(S_ip_replacement_gs);
                        $var(S_reg_exp_transp_gs) = $var(S_pmap_dest_transp_ls);
                        $var(S_reg_exp_port_gs)      = $var(C_pmap_ct_port_gi);
                    }

                    $var(S_sip_uri_flags_ls) = $var(S_sip_uri_tel_flags_ls) + 0x06;
                    osb_set_uri("$var(C_new_toh_hdr_gs)","$var(S_reg_exp_user_gs),$var(S_reg_exp_dom_gs)","$var(S_sip_uri_flags_ls)");

                    $var(S_opt_port_ls) = $var(S_reg_exp_port_gs);
                    $var(S_opt_transp_ls) = $var(S_reg_exp_transp_gs);
                    xlog("L_INFO", "CI=$ci - R24.b - Set To transport var(S_opt_port_ls)=$var(S_opt_port_ls), var(S_opt_transp_ls)=$var(S_opt_transp_ls)\n");
                    xlog("L_INFO", "CI=$ci - R24 - To  changed var(C_new_toh_hdr_gs)=$var(C_new_toh_hdr_gs)\n");
                }
            }
            else # To is FQDN
            {
                # Map port/transport
                if (!is_gflag("2") && !(avp_check("$avp(C_ssp_flags_gi)", "and/i:0x02")))
                {
                    $var(S_opt_port_ls) = $var(S_reg_exp_port_gs);
                    $var(S_opt_transp_ls) = $var(S_reg_exp_transp_gs);
                    xlog("L_INFO", "CI=$ci - R24.c - Set To transport var(S_opt_port_ls)=$var(S_opt_port_ls), var(S_opt_transp_ls)=$var(S_opt_transp_ls)\n");
                }
                else
                {
                    $var(S_opt_port_ls) = $var(C_pmap_ct_port_gi);
                    $var(S_opt_transp_ls) = $var(S_pmap_dest_transp_ls);
                    xlog("L_INFO", "CI=$ci - R24 - Flag 2 set transport var(S_opt_port_ls)=$var(S_opt_port_ls), var(S_opt_transp_ls)=$var(S_opt_transp_ls)\n");
                }
                if($var(C_ssp_sip_o_tls_set_gb))
                    $var(S_opt_transp_ls) = "";

                xlog("L_INFO", "CI=$ci - R24 - To map changed var(C_new_toh_hdr_gs)=$var(C_new_toh_hdr_gs)\n");

                if (has_totag() && $(td{s.tolower}) == "anonymous.invalid")
                {
                    xlog("L_INFO", "CI=$ci - R24 - To header not changed for anonymous.invalid\n");
                }
                else if($avp(C_ssp_use_sip_service_address_gs) =='y' )
                {
                    $var(S_sip_uri_flags_ls) = $var(S_sip_uri_tel_flags_ls) + 0xD;
                    osb_set_uri("$var(C_new_toh_hdr_gs)","sip$var(S_sip_suffix_gs),$avp(S_hdr_to_dom_gs),","$var(S_sip_uri_flags_ls)");
                    $var(S_opt_port_ls) = "";
                    xlog("L_INFO", "CI=$ci - R24 - use sip service address in To: $avp(S_hdr_to_dom_gs)\n");
                }
                else
                {
                    xlog("L_INFO", "CI=$ci - R24 - To header not changed since toisfqdn=$var(S_toh_is_fqdn_gb)\n");
                }
            }
            if ($(var(S_port_transp_opt_gs){s.len}))
            {
                $var(S_opt_port_ls) = $var(S_toh_opt_port_gs);
                $var(S_opt_transp_ls) = $var(S_toh_opt_transp_gs);
                xlog("L_INFO", "CI=$ci - R24.d - Set To transport var(S_opt_port_ls)=$var(S_opt_port_ls), var(S_opt_transp_ls)=$var(S_opt_transp_ls)\n");
            }

            if( not_empty("$var(S_opt_port_ls)") && $var(S_opt_port_ls) != 0)
                osb_set_uri("$var(C_new_toh_hdr_gs)","$var(S_opt_port_ls),$var(S_opt_transp_ls)", 0x18);
            else
                osb_set_uri("$var(C_new_toh_hdr_gs)",",$var(S_opt_transp_ls)", 0x18);

        }
        if ($avp(C_ssp_pt_params_list_gs) != $null)
            osb_set_passthrough_params("$hdr(To)","$var(C_new_toh_hdr_gs)","$avp(C_ssp_pt_params_list_gs)");

        subst('/(To:).*/\1 $var(C_new_toh_hdr_gs)\r/i');

        if ($avp(C_ssp_fqdn_toh_gs) == 'y' && isflagset(1) && (!isflagset(13) || search("^Route:.*tossp")))
        {
           $var(S_sip_uri_flags_ls) = $var(S_sip_uri_tel_flags_ls) + 0x5;
           osb_set_uri("$avp(S_req_toh_gs)","$var(S_ru_type_ls),$avp(S_hdr_to_dom_gs)","$var(S_sip_uri_flags_ls)");
           xlog("L_INFO", "CI=$ci - R24 - request to SSP - avp(S_hdr_to_dom_gs)=$avp(S_hdr_to_dom_gs),avp(S_req_toh_gs)=$avp(S_req_toh_gs)\n");
        }

        xlog("L_INFO", "CI=$ci - R24 - Restore avp(S_req_toh_gs) from $avp(S_req_toh_gs) to $var(S_pmap_rcv_to_ls)\n");
        $avp(S_req_toh_gs) = $var(S_pmap_rcv_to_ls) ;

        # replace Referred-By
        if (is_present_hf("Referred-By"))
        {
            $var(C_new_refby_hdr_gs) = $hdr(Referred-By);
            if(($avp(S_hdr_refby2_gs) != $null && $avp(S_hdr_refby2_gs) != ""))
            {
                $var(S_sip_uri_flags_ls) = $var(S_sip_uri_tel_flags_ls) + 0x04;
                osb_set_uri("$avp(S_hdr_refby2_gs)","$var(S_ip_replacement_gs))","$var(S_sip_uri_flags_ls)");
            }
            else
            {
                $var(S_sip_uri_flags_ls) = $var(S_sip_uri_tel_flags_ls) + 0xC;
                osb_set_uri("$var(C_new_refby_hdr_gs)","$var(S_ip_replacement_gs),","$var(S_sip_uri_flags_ls)");
                subst('/(Referred-By:).*/\1 $var(C_new_refby_hdr_gs)\r/i');
            }
        }

        # replace Refer-To
        if(is_present_hf("Refer-To"))
        {
            $var(C_new_refto_hdr_gs) = $hdr(Refer-To);
            $var(S_sip_uri_flags_ls) = $var(S_sip_uri_tel_flags_ls) + 0xC;
            osb_set_uri("$var(C_new_refto_hdr_gs)","$var(S_ip_replacement_gs),","$var(S_sip_uri_flags_ls)");
            subst('/(Refer-To:).*/\1 $var(C_new_refto_hdr_gs)\r/i');
        }
        # replace Event header
        if (is_present_hf("Event") && $hdr(Event) =~ "(.*)[Cc]aller=(.*)")
        {
            $avp(C_tmp2_gs) = $hdr(Event);
            avp_subst("$avp(C_tmp2_gs)", "/(.*caller=\"sips?:[^>]+)@[^>;]+(.+)/\1@$var(S_ip_replacement_gs)\2/ig");
            insert_hf("Event: $avp(C_tmp2_gs)\r\n", "Event");
            remove_hf("Event");
            xlog("L_INFO", "CI=$ci - R24 - changed header Event to: $avp(C_tmp2_gs), var(S_ip_replacement_gs)=$var(S_ip_replacement_gs)\n");
        }

        # replace Diversion
        if(is_present_hf("Diversion"))
        {
            if($var(S_div_manipulated_gi) != 1)
            {
                if($var(S_hdr_div_user_gs) != '')
                   $avp(C_ssp_div_user_gs) = $var(S_hdr_div_user_gs);
                else
                   $avp(C_ssp_div_user_gs) = $(hdr(Diversion)[0]{nameaddr.uri}{uri.user});
            }

            if($var(S_hdr_div_domain_gs) == '')
                $var(S_hdr_div_domain_gs) = $var(S_ip_replacement_gs);
            route(SETUP_DIVERSION_ROUTE);

        }

        if(is_present_hf("Warning")) {
           $(avp(C_tmp2_gs)[*]) = $hdr(Warning);
           avp_subst("$avp(C_tmp2_gs)", "/[0-9]?[0-9]?[0-9][.][0-9]?[0-9]?[0-9][.][0-9]?[0-9]?[0-9][.][0-9]?[0-9]?[0-9]/$var(S_ip_replacement_gs)/ig");
           insert_hf("Warning: $avp(C_tmp2_gs)\r\n", "Warning");
           remove_hf("Warning");
        }

        if($var(S_hdr_pai_domain_gs) == '')
        {
           if($avp(C_ssp_use_sip_service_address_gs) =='y' && not_empty("$avp(C_ssp_service_addr_gs)"))
               $var(S_hdr_pai_domain_gs) = $avp(C_ssp_service_addr_gs);
           else
               $var(S_hdr_pai_domain_gs) = $var(S_ip_replacement_gs);
        }

        # If $avp(C_ssp_insert_anonymous_cid_gs) checked, and the INVITE sent by OpenScape Voice includes a Privacy header field with value of 'id',
        # or the user identifies the call is to be made private (Privacy:user), OpenScape Branch overwrites the P-Asserted-Identity URI with
        # the anonymous URI of anonymous@anonymous.invalid.

        if(isflagset(1))
        {
           if (is_present_hf("Privacy"))
              $var(S_hdr_priv_ls) = $hdr(Privacy);
           else
              $var(S_hdr_priv_ls) = '';

           if($avp(C_ssp_insert_anonymous_cid_gs) == 'y' && ($var(S_hdr_priv_ls) != '' || $var(S_hdr_from_is_anonymous_lb) ==1))
           {
              if($var(S_hdr_priv_ls) == 'id' || $var(S_hdr_priv_ls) == 'user')
              {
                 $var(S_hdr_pai_user_ls) = "anonymous";
                 $var(S_hdr_pai_domain_gs) = "anonymous.invalid";
                 xlog("L_INFO", "CI=$ci - R24 - var(S_hdr_priv_ls)=$var(S_hdr_priv_ls),var(S_hdr_pai_user_ls)=$var(S_hdr_pai_user_ls),var(S_hdr_pai_domain_gs)=$var(S_hdr_pai_domain_gs)\n");
              }
           }
        }

        put_ip_in_paran('$var(S_hdr_pai_domain_gs)', '$var(S_hdr_pai_domain_gs)');
        put_ip_in_paran('$var(S_ip_replacement_gs)', '$var(S_ip_replacement_gs)');
        xlog("L_INFO", "CI=$ci - R24 - avp(C_ssp_pai_user_gs)=$avp(C_ssp_pai_user_gs),avp(C_ssp_ppi_user_gs)=$avp(C_ssp_ppi_user_gs),avp(C_ssp_hDn_pai_gb)=$avp(C_ssp_hDn_pai_gb),avp(C_ssp_hDn_ppi_gb)=$avp(C_ssp_hDn_ppi_gb),var(S_SSP_disable_pai_gb)=$var(S_SSP_disable_pai_gb),var(S_SSP_disable_ppi_gb)=$var(S_SSP_disable_ppi_gb)\n");
        # replace P-Asserted-Identity
        if($var(S_SSP_disable_pai_gb) != 1)
        {
            if ($avp(C_ssp_pai_user_gs) != $null && $avp(C_ssp_pai_user_gs) != '')
            {
                xlog("L_INFO", "CI=$ci - R24 - P-Asserted var(S_hdr_priv_ls)=$var(S_hdr_priv_ls),var(S_hdr_pai_user_ls)=$var(S_hdr_pai_user_ls),var(S_hdr_pai_domain_gs)=$var(S_hdr_pai_domain_gs)\n");
                if($(var(S_hdr_pai_user_ls){s.len}))
                    $avp(C_ssp_pai_user_ls) = $var(S_hdr_pai_user_ls);
                if(is_present_hf("P-Asserted-Identity"))
                {
                    $var(C_new_pai_hdr_gs) = $(hdr(P-Asserted-Identity)[*]);
                    xlog("L_INFO", "CI=$ci - R24 - Test PAI is present  ai=$ai, var(C_ssp_user_eq_phone_gb)=$var(C_ssp_user_eq_phone_gb), var(C_ssp_use_tel_gb)=$var(C_ssp_use_tel_gb)\n");
                    if(!$var(C_ssp_use_tel_gb) && ($var(C_ssp_user_eq_phone_gb) && $(ai{uri.user}{s.len})))
                    {
                        osb_set_uri("$var(C_new_pai_hdr_gs)","",URI_PARAM_USER_EQ_PHONE); # When '+' is available add user=phone if not previously set
                        xlog("L_INFO", "CI=$ci - R24 - PAI is present and user=phone was added var(C_new_pai_hdr_gs) = $var(C_new_pai_hdr_gs) \n");
                    }
                    if($avp(C_ssp_hDn_pai_gb)  == 1)
                    {
                        if ($var(S_g_rem_pai_disp_name_gs) == 1)
                            $var(C_new_pai_hdr_gs) = "<" + $(var(C_new_pai_hdr_gs){nameaddr.nc_uri}) + ">";
                        $var(S_sip_uri_flags_ls) = $var(S_sip_uri_tel_flags_ls) + 0xE;
                        osb_set_uri("$var(C_new_pai_hdr_gs)","$avp(C_ssp_pai_user_gs),$var(S_ip_replacement_gs),","$var(S_sip_uri_flags_ls)");
                        if ($avp(C_ssp_pt_params_list_gs) != $null)
                            osb_set_passthrough_params("$hdr(P-Asserted-Identity)","$var(C_new_pai_hdr_gs)","$avp(C_ssp_pt_params_list_gs)");
                        xlog("L_INFO", "CI=$ci - R24 - C_ssp_hDn_pai_gb is set, using home DN for PAI,  var(C_new_pai_hdr_gs)=$var(C_new_pai_hdr_gs)\n");
                        subst('/(P-Asserted-Identity:).*/\1$var(C_new_pai_hdr_gs)\r/i');
                    }
                    else if (!search("^P-Asserted-Identity:.*@anonymous"))
                    {
                        if ($var(S_hdr_pai_domain_gs) =~ "anonymous")
                            $var(C_new_pai_hdr_gs) = "<" + $(var(C_new_pai_hdr_gs){nameaddr.nc_uri}) + ">";
                        $var(S_sip_uri_flags_ls) = $var(S_sip_uri_tel_flags_ls) + 0xE;
                        osb_set_uri("$var(C_new_pai_hdr_gs)","$avp(C_ssp_pai_user_gs),$var(S_hdr_pai_domain_gs),","$var(S_sip_uri_flags_ls)");
                        if ($avp(C_ssp_pt_params_list_gs) != $null)
                            osb_set_passthrough_params("$hdr(P-Asserted-Identity)","$var(C_new_pai_hdr_gs)","$avp(C_ssp_pt_params_list_gs)");
                        subst('/(P-Asserted-Identity:).*/\1 $var(C_new_pai_hdr_gs)\r/i');

                    }
                }
                else if ((is_method("INVITE") || is_method("BYE") || is_method("OPTIONS") || is_method("SUBSCRIBE") || is_method("NOTIFY") || is_method("REFER")))
                {
                    if ($var(S_g_pai_display_gs) && $var(S_g_pai_display_gs) != '')
                        insert_hf("P-Asserted-Identity: $var(S_g_pai_display_gs) <sip:$avp(C_ssp_pai_user_gs)@$var(S_hdr_pai_domain_gs)>\r\n", "Content-Length");
                    else
                        insert_hf("P-Asserted-Identity: <sip:$avp(C_ssp_pai_user_gs)@$var(S_hdr_pai_domain_gs)>\r\n", "Content-Length");
                }
                $(avp(C_ssp_pai_user_gs)[*]) = $null; # Set avp to $null, so route 28 won't use it to header subst.
            }
            else
            {
                if(is_present_hf("P-Asserted-Identity"))
                {
                    if (!search("^P-Asserted-Identity:.*@anonymous"))
                    {
                            if ($(var(S_hdr_pai_user_ls){s.len}))
                            {
                               $var(S_sip_uri_flags_ls) = $var(S_sip_uri_tel_flags_ls) + 0x6;
                               osb_set_uri("$avp(C_tmp2_gs)","$var(S_hdr_pai_user_ls),$var(S_hdr_pai_domain_gs))","$var(S_sip_uri_flags_ls)");
                            }
                            else
                               $avp(C_tmp2_gs) = "<sip:"+$var(S_hdr_pai_domain_gs)+">";
                            insert_hf("P-Asserted-Identity: $avp(C_tmp2_gs)\r\n", "P-Asserted-Identity");
                            remove_hf("P-Asserted-Identity");
                    }
                }
            }
        }

        xlog("L_INFO", "CI=$ci - R24 - avp(C_ssp_ppi_user_gs)=$avp(C_ssp_ppi_user_gs),S_ip_replacement_gs=$var(S_ip_replacement_gs),sip_uri_falgs=$var(S_sip_uri_flags_ls)\n");
        if($var(S_SSP_disable_ppi_gb) != 1)
        {
            # replace P-Preferred-Identity
            if ($avp(C_ssp_ppi_user_gs) != $null && $avp(C_ssp_ppi_user_gs) != '')
            {
                if(is_present_hf("P-Preferred-Identity"))
                {

                    $var(C_new_ppi_hdr_gs) = $hdr(P-Preferred-Identity);

                    if($avp(C_ssp_hDn_ppi_gb)  == 1)
                    {
                        if ($var(S_g_rem_ppi_disp_name_gs) == 1)
                            $var(C_new_ppi_hdr_gs) = "<" + $(var(C_new_ppi_hdr_gs){nameaddr.nc_uri}) + ">";
                        $var(S_sip_uri_flags_ls) = $var(S_sip_uri_tel_flags_ls) + 0xE;
                        osb_set_uri("$var(C_new_ppi_hdr_gs)","$avp(C_ssp_ppi_user_gs),$var(S_ip_replacement_gs),","$var(S_sip_uri_flags_ls)");
                        if ($avp(C_ssp_pt_params_list_gs) != $null)
                            osb_set_passthrough_params("$hdr(P-Preferred-Identity)","$var(C_new_ppi_hdr_gs)","$avp(C_ssp_pt_params_list_gs)");
                        xlog("L_INFO", "CI=$ci - R24 - C_ssp_hDn_ppi_gb is set, using home DN for PPI,  var(C_new_ppi_hdr_gs)=$var(C_new_ppi_hdr_gs)\n");
                        subst('/(P-Preferred-Identity:).*/\1$var(C_new_ppi_hdr_gs)\r/i');
                    }
                    else if (!search("^P-Preferred-Identity:.*@anonymous"))
                    {
                        if ($var(S_g_rem_ppi_disp_name_gs) == 1)
                            $var(C_new_ppi_hdr_gs) = "<" + $(var(C_new_ppi_hdr_gs){nameaddr.nc_uri}) + ">";
                        $var(S_sip_uri_flags_ls) = $var(S_sip_uri_tel_flags_ls) + 0xE;
                        osb_set_uri("$var(C_new_ppi_hdr_gs)","$avp(C_ssp_ppi_user_gs),$var(S_ip_replacement_gs),","$var(S_sip_uri_flags_ls)");
                        if ($avp(C_ssp_pt_params_list_gs) != $null)
                            osb_set_passthrough_params("$hdr(P-Preferred-Identity)","$var(C_new_ppi_hdr_gs)","$avp(C_ssp_pt_params_list_gs)");
                        subst('/(P-Preferred-Identity:).*/\1$var(C_new_ppi_hdr_gs)\r/i');
                    }
                }
                else
                {
                    insert_hf("P-Preferred-Identity: <sip:$avp(C_ssp_ppi_user_gs)@$var(S_ip_replacement_gs)>\r\n", "Content-Length");
                }
                $(avp(C_ssp_ppi_user_gs)[*]) = $null; # Set avp to $null, so route 28 won't use it to header subst.
            }
            else
            {
                if(is_present_hf("P-Preferred-Identity"))
                {

                    if (!search("^P-Preferred-Identity:.*@anonymous"))
                    {
                        $var(C_new_ppi_hdr_gs) = $hdr(P-Preferred-Identity);
                        if ($var(S_g_rem_ppi_disp_name_gs) == 1)
                            $var(C_new_ppi_hdr_gs) = "<" + $(var(C_new_ppi_hdr_gs){nameaddr.nc_uri}) + ">";

                        $var(S_sip_uri_flags_ls) = $var(S_sip_uri_tel_flags_ls) + 0xC;
                        osb_set_uri("$var(C_new_ppi_hdr_gs)","$var(S_ip_replacement_gs),","$var(S_sip_uri_flags_ls)");
                        if ($avp(C_ssp_pt_params_list_gs) != $null)
                            osb_set_passthrough_params("$hdr(P-Preferred-Identity)","$var(C_new_ppi_hdr_gs)","$avp(C_ssp_pt_params_list_gs)");
                        subst('/(P-Preferred-Identity:).*/\1$var(C_new_ppi_hdr_gs)\r/i');
                    }
                }
            }
        }
        if(is_present_hf("P-Preferred-Identity") && is_present_hf("P-Asserted-Identity"))
        {
            ### both PAI and PPI present, remove one
            if($var(S_SSP_disable_pai_gb) == 1)
            {
                ### remove PAI
                $var(C_new_pai_hdr_gs) = "";
                $(avp(C_ssp_pai_user_gs)[*]) = $null; # Set avp to $null, so route 28 won't use it to header subst.
                xlog("L_INFO", "CI=$ci - R24 - dropping the pai, var(C_new_pai_hdr_gs)=$var(C_new_pai_hdr_gs),C_ssp_pai_user_gs=$avp(C_ssp_pai_user_gs)\n");
            }
            if($var(S_SSP_disable_ppi_gb) == 1)
            {
                ### remove PAI
                $var(C_new_ppi_hdr_gs) = "";
                $(avp(C_ssp_ppi_user_gs)[*]) = $null; # Set avp to $null, so route 28 won't use it to header subst.
                xlog("L_INFO", "CI=$ci - R24 - dropping the ppi, var(C_new_ppi_hdr_gs)=$var(C_new_ppi_hdr_gs),C_ssp_ppi_user_gs=$avp(C_ssp_ppi_user_gs)\n");
            }
        }

        if(is_present_hf("X-Siemens-Original-Called-Identity"))
        {
            if (!search("^X-Siemens-Original-Called-Identity:.*@anonymous"))
                subst('/(X-Siemens-Original-Called-Identity:.*@)[^>;]+(.+)/\1$var(S_ip_replacement_gs)\2/i');
        }


        xlog("L_INFO", "CI=$ci - R24 - Content Type is $hdr(Content-Type) \n");

        # Keyset-Info+xml handling
        if(is_method("NOTIFY") && !($hdr(Content-Type) =~ "application\/conference-info\+xml")) # Pass Conference XML body as is as it does not include IP for now
        {
            sl_send_reply("100","Trying");  # To avoid retransmission due to port map conversion time

            # Notify message with XML keyset information
            if(search_body(" *entity=[^>]*@")) # Entity contains IP/domain
            {
                $avp(S_tmp_gs)=$rb;
                # Get the Username (contact) into avp temp
                avp_subst("$avp(S_tmp_gs)","/[\r\n]//ig");  # Remove new lines
                $(avp(S_int_ip_gs)[*]) = $null;
                $avp(S_int_ip_gs) = $(avp(S_tmp_gs){s.selectstr,1, entity=}{s.select,1,"}{uri.host});  # uri between
                $avp(C_port_gi) = $(avp(S_tmp_gs){s.selectstr,1, entity=}{s.select,1,"}{uri.port});
                if ($avp(C_port_gi) == $null || $avp(C_port_gi) == 0|| avp_check("$avp(S_int_ip_gs)","eq/$avp(C_sys_current_binding_ip_gs)/i"))
                {
                    # No external port is set. Replace only WAN IP address by LAN IP address
                    subst_body('/( *entity=[^>]*)@([^;\">]*)"/\1@$var(S_ip_replacement_gs)"/ig');
                    xlog("L_INFO", "CI=$ci - R24 - Keyset-Xml $avp(C_sys_current_binding_ip_gs) from entity replaced to $var(S_ip_replacement_gs).\n");
                }
                else
                {
                    # No need to do dip again if we already know the subscriber from route 6
                    if ($avp(C_port_gi) != $avp(C_pmap_port_gi))
                    {
                        $(avp(S_int_ip_gs)[*]) = $null;

                        if ($avp(S_pmap_name_gs) == "port_map")
                        {
                            osb_memdb_nl_select("port_map,*|*|*|*|$avp(C_port_gi)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1","|$avp(S_int_ip_gs)||$avp(C_port_gi)||||||||||||||||||||||");
                        }
                        else
                        {
                            xlog("L_INFO", "CI=$ci - R24.1 - ***** TODO: ADD PARTNER_PM CODE HERE)\n");
                        }
                        xlog("L_INFO", "CI=$ci - R24.1 - Keyset-Xml port_map dip for $avp(S_int_ip_gs):$avp(C_port_gi).\n");
                    }

                    if(($avp(S_int_ip_gs) != $null && $avp(S_int_ip_gs) != ""))
                    {
                        put_ip_in_paran('$avp(S_int_ip_gs)', '$var(S_pmap_us_ip_gs)');
                        # Replace ip address/port of entity. IP and port can be unavailable
                        subst_body('/( *entity=[^>]*)@([^;\">]*)"/\1@$var(S_pmap_us_ip_gs):$avp(C_port_gi)"/ig');
                        #format example: entity="sip:554133413004@10.200.102.102:5060">
                        xlog("L_INFO", "CI=$ci - R24 - Keyset-Xml WAN IP from entity replaced to $var(S_pmap_us_ip_gs):$avp(C_port_gi).\n");
                    }
                }
            }
            else if(search_body(" *entity=[^>]*:")) # Entity contains IP/domain
            {
                $avp(S_tmp_gs)=$rb;
                # Get the Username (contact) into avp temp
                avp_subst("$avp(S_tmp_gs)","/[\r\n]//ig");  # Remove new lines
                $(avp(S_int_ip_gs)[*]) = $null;
                $avp(S_int_ip_gs) = $(avp(S_tmp_gs){s.selectstr,1, entity=}{s.select,1,"}{uri.host});  # uri between
                $avp(C_port_gi) = $(avp(S_tmp_gs){s.selectstr,1, entity=}{s.select,1,"}{uri.port});
                subst_body('/( *entity=[^>]*):([^;\">]*)"/\1:$var(S_ip_replacement_gs)"/ig');
                xlog("L_INFO", "CI=$ci - R24 - Keyset-Xml $avp(C_sys_current_binding_ip_gs) from entity replaced to $var(S_ip_replacement_gs).\n");
            }

            if(search_body("<identity display=[^>]*@")) # identity display contains IP/domain
            {
                $avp(S_tmp_gs)=$rb;
                # Get the Username (contact) into avp temp
                avp_subst("$avp(S_tmp_gs)","/[\r\n]//ig");  # Remove new lines
                $(avp(S_int_ip_gs)[*]) = $null;
                $(avp(C_port_gi)[*]) = $null;
                avp_subst("$avp(S_tmp_gs)/$avp(S_int_ip_gs)/d","/.*<identity display=[^>]*@([^\"<:>]*).*/\1/");
                # Get the external port into avp
                avp_subst("$avp(S_tmp_gs)/$avp(C_port_gi)/d","/.*<identity display=[^>]*@[^\"<>]*:([0-9]+)[^>]*.*/\1/");
                if ($avp(C_port_gi) == $null || avp_check("$avp(S_int_ip_gs)","eq/$avp(C_sys_current_binding_ip_gs)/i"))
                {
                    # No external port is set. Replace only WAN IP address by LAN IP address
                    subst_body('/(<identity display=[^>]*)@([^;\">]*)/\1@$var(S_ip_replacement_gs)"/ig');
                    xlog("L_INFO", "CI=$ci - R24 - Keyset-Xml $avp(C_sys_current_binding_ip_gs) from entity replaced to $var(S_ip_replacement_gs).\n");
                }
                else
                {
                    # No need to do dip again if we already know the subscriber from route 6
                    if ($avp(C_port_gi) != $avp(C_pmap_port_gi))
                    {
                        $(avp(S_int_ip_gs)[*]) = $null;

                        if ($avp(S_pmap_name_gs) == "port_map")
                        {
                            osb_memdb_nl_select("port_map,*|*|*|*|$avp(C_port_gi)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1","|$avp(S_int_ip_gs)||$avp(C_port_gi)||||||||||||||||||||||");
                        }
                        else
                        {
                            xlog("L_INFO", "CI=$ci - R24.2 - ***** TODO: ADD PARTNER_PM CODE HERE)\n");
                        }
                        xlog("L_INFO", "CI=$ci - R24.2 - Keyset-Xml port_map dip for $avp(S_int_ip_gs):$avp(C_port_gi).\n");
                    }

                    if(($avp(S_int_ip_gs) != $null && $avp(S_int_ip_gs) != ""))
                    {
                        # Replace ip address/port of entity. IP and port can be unavailable
                        subst_body('/(<identity display=[^>]*)@([^;\">]*)/\1@$avp(S_int_ip_gs):$avp(C_port_gi)"/ig');
                        xlog("L_INFO", "CI=$ci - R24 - Keyset-Xml WAN IP from entity replaced to $avp(S_int_ip_gs):$avp(C_port_gi).\n");
                    }
                }
            }

            if(search_body("<identity display=[^<]*@")) # identity display contains IP/domain
            {
                $avp(S_tmp_gs)=$rb;
                # Get the Username (contact) into avp temp
                avp_subst("$avp(S_tmp_gs)","/[\r\n]//ig");  # Remove new lines
                $(avp(S_int_ip_gs)[*]) = $null;
                $(avp(C_port_gi)[*]) = $null;
                avp_subst("$avp(S_tmp_gs)/$avp(S_int_ip_gs)/d","/.*<identity display=[^<]*@([^\"<:>]*).*/\1/");
                # Get the external port into avp
                avp_subst("$avp(S_tmp_gs)/$avp(C_port_gi)/d","/.*<identity display=[^<]*@[^\"<>]*:([0-9]+)[^<]*.*/\1/");
                if ($avp(C_port_gi) == $null || avp_check("$avp(S_int_ip_gs)","eq/$avp(C_sys_current_binding_ip_gs)/i"))
                {
                    # No external port is set. Replace only WAN IP address by LAN IP address
                    subst_body('/(<identity display=[^<]*)@([^;\"<]*)/\1@$var(S_ip_replacement_gs)"/ig');
                    xlog("L_INFO", "CI=$ci - R24 - Keyset-Xml $avp(C_sys_current_binding_ip_gs) from entity replaced to $var(S_ip_replacement_gs).\n");
                }
                else
                {
                    # No need to do dip again if we already know the subscriber from route 6
                    if ($avp(C_port_gi) != $avp(C_pmap_port_gi))
                    {
                        $(avp(S_int_ip_gs)[*]) = $null;

                        if ($avp(S_pmap_name_gs) == "port_map")
                        {
                            osb_memdb_nl_select("port_map,*|*|*|*|$avp(C_port_gi)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1","|$avp(S_int_ip_gs)||$avp(C_port_gi)||||||||||||||||||||||");
                        }
                        else
                        {
                            xlog("L_INFO", "CI=$ci - R24.3 - ***** TODO: ADD PARTNER_PM CODE HERE)\n");
                        }
                        xlog("L_INFO", "CI=$ci - R24.3 - Keyset-Xml port_map dip for $avp(S_int_ip_gs):$avp(C_port_gi).\n");
                    }

                    if(($avp(S_int_ip_gs) != $null && $avp(S_int_ip_gs) != ""))
                    {
                        # Replace ip address/port of entity. IP and port can be unavailable
                        subst_body('/(<identity display=[^<]*)@([^;\"<]*)/\1@$avp(S_int_ip_gs):$avp(C_port_gi)"/ig');
                        xlog("L_INFO", "CI=$ci - R24 - Keyset-Xml WAN IP from entity replaced to $avp(S_int_ip_gs):$avp(C_port_gi).\n");
                    }
                }
            }

            if(search_body("<ki-assertedIdentity>[^<]*@"))
            {
                $avp(S_tmp_gs)=$rb;
                # Get the Username (contact) into avp temp
                avp_subst("$avp(S_tmp_gs)","/[\r\n]//ig");  # Remove new lines
                $(avp(S_int_ip_gs)[*]) = $null;
                $(avp(C_port_gi)[*]) = $null;
                $avp(S_int_ip_gs) = $(avp(S_tmp_gs){s.selectstr,1, <ki-assertedIdentity>}{s.select,1,"}{uri.host});  # uri between
                $avp(C_port_gi) = $(avp(S_tmp_gs){s.selectstr,1, <ki-assertedIdentity>}{s.select,1,"}{uri.port});
                if ($avp(C_port_gi) == $null || avp_check("$avp(S_int_ip_gs)","eq/$avp(C_sys_current_binding_ip_gs)/i"))
                {
                    # No external port is set. Replace only WAN IP address by LAN IP address
                    subst_body('/(<ki-assertedIdentity>[^<]*)@([^;\"<]*)/\1@$var(S_ip_replacement_gs)/ig');
                    xlog("L_INFO", "CI=$ci - R24 - Keyset-Xml $avp(C_sys_current_binding_ip_gs) from ki-assertedIdentity replaced to $var(S_ip_replacement_gs).\n");
                }
                else
                {
                    # No need to do dip again if we already know the subscriber from route 6
                    if ($avp(C_port_gi) != $avp(C_pmap_port_gi))
                    {
                        $(avp(S_int_ip_gs)[*]) = $null;

                        if ($avp(S_pmap_name_gs) == "port_map")
                        {
                            osb_memdb_nl_select("port_map,*|*|*|*|$avp(C_port_gi)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1","|$avp(S_int_ip_gs)||$avp(C_port_gi)||||||||||||||||||||||");
                        }
                        else
                        {
                            xlog("L_INFO", "CI=$ci - R24.4 - ***** TODO: ADD PARTNER_PM CODE HERE)\n");
                        }
                        xlog("L_INFO", "CI=$ci - R24.4 - Keyset-Xml port_map dip for $avp(S_int_ip_gs):$avp(C_port_gi).\n");
                    }

                    if(($avp(S_int_ip_gs) != $null && $avp(S_int_ip_gs) != ""))
                    {
                        # Replace ip address/port of <ki:assertedIdentity>
                        subst_body('/(<ki-assertedIdentity>[^<]*)@([^;\"<]*)/\1@$avp(S_int_ip_gs):$avp(C_port_gi)/ig');
                        #format example: <ki-assertedIdentity>"sip:554133413070@10.200.102.102:5060;transport=udp"</ki-assertedIdentity>
                        xlog("L_INFO", "CI=$ci - R24 - Keyset-Xml WAN IP from ki-assertedIdentity replaced to $avp(S_int_ip_gs):$avp(C_port_gi).\n");
                    }
                }
            }

            if(search_body("<di:local-uri>[^<]*@"))
            {
                $avp(S_tmp_gs)=$rb;
                # Get the Username (contact) into avp temp
                avp_subst("$avp(S_tmp_gs)","/[\r\n]//ig");  # Remove new lines
                $(avp(S_int_ip_gs)[*]) = $null;
                $(avp(C_port_gi)[*]) = $null;
                $avp(S_int_ip_gs) = $(avp(S_tmp_gs){s.selectstr,1,<di:local-uri>}{s.selectstr,0,</di:local-uri>}{uri.host});
                $avp(C_port_gi) = $(avp(S_tmp_gs){s.selectstr,1,<di:local-uri>}{s.selectstr,0,</di:local-uri>}{uri.port});
                if ($avp(C_port_gi) == $null || avp_check("$avp(S_int_ip_gs)","eq/$avp(C_sys_current_binding_ip_gs)/i"))
                {
                    # No external port is set. Replace only WAN IP address by LAN IP address
                    subst_body('/(<di:local-uri>[^<]*)@([^;\"<]*)/\1@$var(S_ip_replacement_gs)/ig');
                    xlog("L_INFO", "CI=$ci - R24 - Keyset-Xml $avp(C_sys_current_binding_ip_gs) from di:local-uri replaced to $var(S_ip_replacement_gs).\n");
                }
                else
                {
                    # No need to do dip again if we already know the subscriber from route 6
                    if ($avp(C_port_gi) != $avp(C_pmap_port_gi))
                    {
                        $(avp(S_int_ip_gs)[*]) = $null;

                        if ($avp(S_pmap_name_gs) == "port_map")
                        {
                            osb_memdb_nl_select("port_map,*|*|*|*|$avp(C_port_gi)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1","|$avp(S_int_ip_gs)||$avp(C_port_gi)||||||||||||||||||||||");
                        }
                        else
                        {
                            xlog("L_INFO", "CI=$ci - R24.5 - ***** TODO: ADD PARTNER_PM CODE HERE)\n");
                        }
                        xlog("L_INFO", "CI=$ci - R24.5 - Keyset-Xml port_map dip for $avp(S_int_ip_gs):$avp(C_port_gi).\n");
                    }

                    if(($avp(S_int_ip_gs) != $null && $avp(S_int_ip_gs) != ""))
                    {
                        # Replace ip address/port of <di:local-uri> . Port can be unavailable
                        subst_body('/(<di:local-uri>[^<]*)@([^;\"<]*)/\1@$avp(S_int_ip_gs):$avp(C_port_gi)/ig');
                        #format example: <di:local-uri>sip:554133413003@10.20.3.3</di:local-uri>
                        xlog("L_INFO", "CI=$ci - R24 - Keyset-Xml WAN IP from di:local-uri replaced to $avp(S_int_ip_gs):$avp(C_port_gi).\n");
                    }
                }
            }

            if(search_body("<di:remote-uri>[^<]*@"))
            {
                $avp(S_tmp_gs)=$rb;
                # Get the Username (contact) into avp temp
                avp_subst("$avp(S_tmp_gs)","/[\r\n]//ig");  # Remove new lines
                $(avp(S_int_ip_gs)[*]) = $null;
                $(avp(C_port_gi)[*]) = $null;
                $avp(S_int_ip_gs) = $(avp(S_tmp_gs){s.selectstr,1,<di:remote-uri>}{s.selectstr,0,</di:remote-uri>}{uri.host});
                $avp(C_port_gi) = $(avp(S_tmp_gs){s.selectstr,1,<di:remote-uri>}{s.selectstr,0,</di:remote-uri>}{uri.port});
                if ($avp(C_port_gi) == $null || avp_check("$avp(S_int_ip_gs)","eq/$avp(C_sys_current_binding_ip_gs)/i"))
                {
                    # No external port is set. Replace only WAN IP address by LAN IP address
                    subst_body('/(<di:remote-uri>[^>]*)@([^;\"<]*)/\1@$var(S_ip_replacement_gs):$var(S_use_port_li)/ig');
                    xlog("L_INFO", "CI=$ci - R24 - Keyset-Xml $avp(C_sys_current_binding_ip_gs) from di:remote-uri replaced to $var(S_ip_replacement_gs):$var(S_use_port_li).\n");
                }
                else
                {
                    # No need to do dip again if we already know the subscriber from route 6
                    if ($avp(C_port_gi) != $avp(C_pmap_port_gi))
                    {
                        $(avp(S_int_ip_gs)[*]) = $null;

                        if ($avp(S_pmap_name_gs) == "port_map")
                        {
                            osb_memdb_nl_select("port_map,*|*|*|*|$avp(C_port_gi)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1","|$avp(S_int_ip_gs)||$avp(C_port_gi)||||||||||||||||||||||");
                        }
                        else
                        {
                            xlog("L_INFO", "CI=$ci - R24.6 - ***** TODO: ADD PARTNER_PM CODE HERE)\n");
                        }
                        xlog("L_INFO", "CI=$ci - R24.6 - Keyset-Xml port_map dip for $avp(S_int_ip_gs):$avp(C_port_gi).\n");
                    }

                    if(($avp(S_int_ip_gs) != $null && $avp(S_int_ip_gs) != ""))
                    {
                        # Replace ip address/port of <di:remote-uri> . Port can be unavailable
                        subst_body('/(<di:remote-uri>[^>]*)@([^;\"<]*)/\1@$avp(S_int_ip_gs):$avp(C_port_gi)/ig');
                        #format example <di:remote-uri>sip:554133413001@10.200.102.102</di:remote-uri>
                        xlog("L_INFO", "CI=$ci - R24 - Keyset-Xml WAN IP from di:remote-uri replaced to $avp(S_int_ip_gs):$avp(C_port_gi).\n");
                    }
                }
            }

            ### Just replace the ip and remove the port;transport;maddr. Phones are able to send the request using the proper RURI based on the configuration
            if(search_body("<target uri=[^>]*@")) # Entity contains IP/domain
            {
                $avp(S_tmp_gs)=$rb;
                # Get the Username (contact) into avp temp
                avp_subst("$avp(S_tmp_gs)","/[\r\n]//ig");  # Remove new lines
                subst_body('/(<target uri=[^>]*)@([^\">]*)"/\1@$var(S_ip_replacement_gs)"/ig');
                xlog("L_INFO", "CI=$ci - R24 - Keyset-Xml target uri $avp(C_sys_current_binding_ip_gs) from entity replaced to $var(S_ip_replacement_gs).\n");
            }
        }

        route(SSM_ROUTE); # Set rtpProxy if needed

        if (is_gflag("6"))
        {
            xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
            bm_log_timer("route-24");
        }
        return(1);
    }

    if (is_gflag("6"))
    {
        xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
        bm_log_timer("route-24");
    }
}

########################################################################
# route PORT_MAPPING_REPLY_HDR_ROUTE: port mapping: Reply Header Transformation
########################################################################
route[PORT_MAPPING_REPLY_HDR_ROUTE]
{
    if (is_gflag("6"))
        bm_start_timer("route-25");

    xlog("L_INFO", "CI=$ci - R25 - Entry M=$rm avp(C_src_ip_gs)=$avp(C_src_ip_gs) flags=$mF RURI=$ru From=$fu To=$tu RD= $rd IP=$var(C_si_var_gs) SIP=$src_ip rp=$rp Rp=$Rp Code:$rs Reason=$rr CT=$ct  CI=$ci,avp(C_pmap_port_gi)=$avp(C_pmap_port_gi), avp(C_req_transp_gs)=$avp(C_req_transp_gs) \n\n");
    xlog("L_INFO", "CI=$ci - R25 - avp(C_port_gi)=$avp(C_port_gi),avp(C_gw_core_port_gi)=$avp(C_gw_core_port_gi),avp(S_uri_based_route_gb)=$avp(S_uri_based_route_gb) \n\n");


    $var(S_sip_uri_tel_flags_ls) = 0;
    $var(S_sip_uri_flags_ls) = 0;
    if($avp(S_call_type_gi) & SSM_CT_X_STANDALONE_ROUTE)
       $var(S_standalone_route_gi) = 1;
    #csbc is Normal mode
    # Set transport of current bind in $var(S_sys_transp_gs)
    $var(S_sys_transp_gs) = $avp(C_sys_current_binding_transp_gs);

    $var(S_transport_gs) = $avp(C_req_transp_gs);
    xlog("L_INFO", "CI=$ci - R25 - using transport avp(C_req_transp_gs)=$avp(C_req_transp_gs) standlone_route=$var(S_standalone_route_gi) calltype=$avp(S_call_type_gi)\n");

    if (is_present_hf("P-Preferred-Identity"))
            $avp(C_ssp_ppi_user_gs) = $pU; # Username of P-Preferred Identity header
    if (is_present_hf("P-Asserted-Identity") )
            $avp(C_ssp_pai_user_gs) = $(ai{uri.user}); # Username of P-Asserted identity header
    if (is_present_hf("Diversion"))
            $avp(C_ssp_div_user_gs) = $(hdr(Diversion)[0]{nameaddr.uri}{uri.user}); # Username of diversion header

    route(SDP_MANIPULATION_ROUTE);
    if(isflagset(10)) # 8k response
    {
        if($var(C_ssp_use_tel_gb))
          $var(S_sip_uri_tel_flags_ls) = URI_TEL2SIP;
        xlog("L_INFO", "CI=$ci - R25 - flag(10) set C_ssp_use_tel_gb=$var(C_ssp_use_tel_gb)\n");

        $var(S_pmap_sip_sec_ls)="";

        if ($(var(S_sys_transp_gs){s.tolower}) == "tls")
            $var(S_pmap_sip_sec_ls)="s";
        else if ($var(S_sys_transp_gs) == "")
            $var(S_sys_transp_gs) = "udp";

        $var(S_sip_suffix_gs) = "sip"+$var(S_pmap_sip_sec_ls);

        if(isflagset(11))
        {
                $var(S_ip_replacement_gs) = $var(S_lanip_4_6_gs);
                $avp(C_core_ip_gs) = $var(S_ip_replacement_gs) ;
        }

        if (isflagset(11)) {
            $var(S_ip_replacement_gs) = $var(S_lanip_4_6_gs);
        }
        else if ($avp(C_gw_behind_ep_gi)) {
            $var(S_ip_replacement_gs) = $avp(S_gw_core_ip2_gs);
        }
        else if ($avp(C_gw_core_ip_gs) != $null && $avp(C_gw_core_ip_gs) != '')
        {
            $var(S_ip_replacement_gs) = $avp(C_gw_core_ip_gs);
        }
        else
            $var(S_ip_replacement_gs) = $var(S_lanip_4_6_gs);

        xlog("L_INFO", "CI=$ci - R25 - C_pmap_port_gi=$avp(C_pmap_port_gi), C_pmap_resp_port_gi=$avp(C_pmap_resp_port_gi), C_sys_osv_port_gi=$var(C_sys_osv_port_gi) and avp(C_port_gi)=$avp(C_port_gi)\n\n");

# NOTIFY AND SUBSCRIBE NOW THROUGH SSM
#        if(is_method("NOTIFY") || is_method("SUBSCRIBE"))
#        {
#           if(isflagset(11) || isflagset(15))
#           {
#               if (isflagset(11) && is_gflag("16"))
#                  $avp(C_port_gi)=$avp(C_pmap_port_gi);
#               else
#                  $avp(C_port_gi)=$avp(C_pmap_resp_port_gi);
#           }
#           else
#               $avp(C_port_gi)=$avp(C_gw_core_port_gi);
#        }
#        else {
            if (isflagset(11) || isflagset(15))
                $avp(C_port_gi)=$avp(C_pmap_port_gi);
#        }

        if (isflagset(11) && is_gflag("16")) {
           xlog("L_INFO", "CI=$ci - R25 - GFLAG 16 set. Overwriting C_sys_osv_port_gi with avp(C_port_gi)=$avp(C_port_gi)\n\n");
           $var(C_sys_osv_port_gi) = $avp(C_port_gi);
        }

        xlog("L_INFO", "CI=$ci - R25 - Using new var(C_sys_osv_port_gi)=$var(C_sys_osv_port_gi) and avp(C_port_gi)=$avp(C_port_gi)\n\n");



        if(!is_avp_set("$avp(C_port_gi)"))
        {
            xlog("L_INFO", "CI=$ci - R25 - Unable to load external port for CT=$ct, rm=$rm, flags=$mf, avp(C_gw_core_port_gi)=$avp(C_gw_core_port_gi),avp(C_pmap_port_gi)=$avp(C_pmap_port_gi) ,avp(C_pmap_resp_port_gi)=$avp(C_pmap_resp_port_gi)\n");
        }

        xlog("L_INFO", "CI=$ci - R25 - changing port to $avp(C_port_gi). for $rm\n");

        if(isflagset(11) || isflagset(15))
           $var(S_ip_port_gs) = $var(S_ip_replacement_gs) + ":" + $avp(C_port_gi);
        else
           $var(S_ip_port_gs) = $var(S_ip_replacement_gs) + ":" + $avp(C_gw_core_port_gi);

        if(is_present_hf("Contact"))
        {
            $(avp(C_tmp2_gs)[*]) = $null;
            $var(S_isFqdn_ls) = $sel(contact.uri.host);

            if (!PROC_IS_PURE_IP)
            {
                $var(C_pmap_ct_is_fqdn_lb)=1;
                xlog("L_INFO", "CI=$ci - R25 - fqdn in Contact \n");
                $avp(C_tmp2_gs) = $sel(contact.uri.host);
                $var(C_hdr_ct_user_gs) = $sel(contact.uri.user);
                xlog("L_INFO", "CI=$ci - R25 - avp(C_tmp2_gs)=$avp(C_tmp2_gs) \n");
            }
            else
                $var(C_pmap_ct_is_fqdn_lb)=0;

##########   in FRN4848 above code was commented out. need to check later

            #### for Contact the core IP is always used
###### REQUEST DO NOT PRESERVE THE CONTACT's FQDN. For Remote EP, rely upon the gwIP sent to OSV
#            if ($var(C_pmap_ct_is_fqdn_lb)==1)
#                $var(S_ip_port_gs) = $avp(C_tmp2_gs) + ":" + $avp(C_gw_core_port_gi);
######

            xlog("L_INFO", "CI=$ci - R25 - var(S_ip_replacement_gs)=$var(S_ip_replacement_gs),var(S_ip_port_gs)=$var(S_ip_port_gs),var_transport=$var(S_transport_gs), var(S_sys_transp_gs)=$var(S_sys_transp_gs),avp(coreip)=$avp(C_core_ip_gs)\n");
        }

        $var(S_pmap_rr_ls) = $avp(C_core_ip_gs);
        put_ip_in_paran('$var(S_pmap_rr_ls)', '$var(S_pmap_rr_ls)');

        # replace Record-Route
        if (isflagset(11))
            $var(S_pmap_rr_ls) = $var(S_pmap_rr_ls)+":"+$var(C_sys_osv_port_gi)+";transport="+$avp(C_sys_current_binding_transp_gs);
        else # core_ip and core_port always point to first ep.
        {
            $var(S_pmap_rr_ls) = $var(S_pmap_rr_ls)+":"+$avp(C_core_port_gi)+";transport="+$var(S_sys_transp_gs);
            # if (isflagset(5)) # GW Only... WHY ? TODO: SHOULD HAPPEN FOR ALL NON REGUSTERED SUBSCRIBERS.
            if (!isflagset(15) && is_present_hf("Contact")) # Not a registered subscriber
            {
                # read the maddr from contact and provide this in record route
                if ($(sel(contact.uri){uri.maddr}{s.len}))
                    $var(S_ssp_ip_addr_r0_gs) = $(sel(contact.uri){uri.maddr});
                else
                    $var(S_ssp_ip_addr_r0_gs) = $sel(contact.uri.host);

                # gwIP parameter format: [contactAddress]~[contactPort]~[contactTransport]~[ToTransport]-[ToPort]-[FromTransport]-[FromPort]
                $var(S_port_transp_opt_ls) = "";
                $var(S_pmap_rr_ls) = $var(S_pmap_rr_ls)+";gwIP="+$var(S_ssp_ip_addr_r0_gs);

                $var(S_pmap_rr_ls) = $var(S_pmap_rr_ls)+"~"; # Need to add delimter irrespective of the next field
                if($(sel(contact.uri.port){s.len}) )
                {
                    $var(S_ssp_ip_port_r0_gs) = $sel(contact.uri.port);
                    $var(S_pmap_rr_ls) = $var(S_pmap_rr_ls)+$var(S_ssp_ip_port_r0_gs);
                }

                $var(S_pmap_rr_ls) = $var(S_pmap_rr_ls)+"~"; # Need to add delimter irrespective of the next field
                if ($(sel(contact.uri){uri.transport}{s.len}))
                    $var(S_ssp_ip_tran_r0_gs) = $(sel(contact.uri){uri.transport});
                else
                    $var(S_ssp_ip_tran_r0_gs) = "udp";

                $var(S_pmap_rr_ls) = $var(S_pmap_rr_ls)+$var(S_ssp_ip_tran_r0_gs);

                # To/From transport-port storage
                if ($(sel(to.uri){uri.transport}{s.len}))
                    $var(S_port_transp_opt_ls) = $var(S_port_transp_opt_ls) + $(sel(to.uri){uri.transport});
                $var(S_port_transp_opt_ls) = $var(S_port_transp_opt_ls) + "-";
                if($(sel(to.uri.port){s.len}))
                    $var(S_port_transp_opt_ls) = $var(S_port_transp_opt_ls) + $sel(to.uri.port);
                $var(S_port_transp_opt_ls) = $var(S_port_transp_opt_ls) + "-";
                if ($(sel(from.uri){uri.transport}{s.len}))
                    $var(S_port_transp_opt_ls) = $var(S_port_transp_opt_ls) + $(sel(from.uri){uri.transport});
                $var(S_port_transp_opt_ls) = $var(S_port_transp_opt_ls) + "-";
                if($(sel(from.uri.port){s.len}))
                    $var(S_port_transp_opt_ls) = $var(S_port_transp_opt_ls) + $sel(from.uri.port);

                # rm-addr parameter format: [Address]~[Port]~[Transport]
                if ($si != $var(S_ssp_ip_addr_r0_gs) || (not_empty("$var(S_ssp_ip_port_r0_gs)") && $sp != $var(S_ssp_ip_port_r0_gs)))  # FQDN or contact port differs from src port
                    $var(C_ssm_call_side_data_gs) = "rm-addr=" + $si + "~" + $sp + "~" + $proto;

                xlog("L_INFO", "CI=$ci - R25 - var(S_port_transp_opt_ls)=$var(S_port_transp_opt_ls) var(C_ssm_call_side_data_gs)=$var(C_ssm_call_side_data_gs)\n");
                $var(S_pmap_rr_ls) = $var(S_pmap_rr_ls) + "~" + $var(S_port_transp_opt_ls);
            }

            xlog("L_INFO", "CI=$ci - R25 - M=$rm Code:$rs - Record-Route header: $var(S_pmap_rr_ls)\n");
        }


        if(isflagset(1)) ## SSP
            $var(S_pmap_rr_ls) = $var(S_pmap_rr_ls)+";tossp";
        if(!is_method("OPTIONS") && !is_method("REGISTER")) # DO NOT ADD RECORD ROUTE FOR OPTIONS OR REGISTER
        {
           if ($var(C_g_useSsmRecordRoute_gb) == 1 && $var(C_call_msg_gb) == 1)
           {
               if ($si == $var(S_lanip_4_6_noparan_gs) && $sp == $var(S_ms_port_gs))
                   xlog("L_INFO", "CI=$ci - R25  - local MediaServer Response, no RR handling\n");
               else {
                   xlog("L_INFO", "CI=$ci - R25  - 4K, RR is preserved towards SSM, var(S_pmap_rr_ls)=$var(S_pmap_rr_ls)\n");
                   insert_hf("X-rRR: $var(S_pmap_rr_ls)\r\n","Call-ID");
                  PROC_SET_SSM_HDR_X_RR;
               }
           }
           else
           {
               ## CODE FROM R23

               if (is_present_hf("Record-Route"))
               {
                   $(avp(C_tmp2_gs)[*]) = $null;
                   $var(S_r_count_gi) = 0;
                   while($(hdr(Record-Route)[$var(S_r_count_gi)]) != $null)
                   {
                       $(avp(C_tmp2_gs)[$var(S_r_count_gi)]) =  "Record-Route: " +$(hdr(Record-Route)[$var(S_r_count_gi)]);
                       xlog("L_INFO", "CI=$ci - R25  - Reply $var(S_r_count_gi) $(avp(C_tmp2_gs)[$var(S_r_count_gi)])\n");
                       $var(S_r_count_gi) = $var(S_r_count_gi) + 1;
                   }
                   $var(S_r_count_gi) = $var(S_r_count_gi) - 1;

                   while($var(S_r_count_gi) >= 0)
                   {
                       xlog("L_INFO", "CI=$ci - R25.1 - Setting $var(S_r_count_gi) with $(avp(C_tmp2_gs)[$var(S_r_count_gi)])\n");
                       insert_hf("$(avp(C_tmp2_gs)[$var(S_r_count_gi)])\r\n","Record-Route");
                       $var(S_r_count_gi) = $var(S_r_count_gi) - 1;
                   }

                   # insert our record route at the bottom
                   $var(S_pmap_rr_ls) = "Record-Route: <sip:"+$var(S_pmap_rr_ls)+";lr;ftag="+$ft+";oss=oss-09.04.13.00-2>";
                   xlog("L_INFO", "CI=$ci - R25  - Add our Record-Route $var(S_pmap_rr_ls)\n");
                   insert_hf("$var(S_pmap_rr_ls)\r\n","Record-Route");
                   remove_hf("Record-Route");
               }
               else
               {
                   xlog("L_INFO", "CI=$ci - R25.2 - setting record-route with $var(S_pmap_rr_ls)\n");
                   record_route_preset("$var(S_pmap_rr_ls);oss=oss-09.04.13.00-2");


               }
           }
        }
        else
            xlog("L_INFO", "CI=$ci - R25 -  flag(10) set,OPTIONS no RR \n");

        $(avp(C_tmp2_gs)[*]) = $null;


        $var(S_pmap_domain_ip_gs) = $var(S_ip_replacement_gs);
        put_ip_in_paran('$var(S_pmap_domain_ip_gs)', '$var(S_pmap_domain_ip_gs)');
        $var(S_use_port_li) = $(var(S_ip_port_gs){s.select,-1,:});

        if(is_method("INVITE") && $T_reply_code  == 200 && ($si == $var(S_lanip_4_6_noparan_gs) && $sp == $var(S_ms_port_gs)) )  ### 200 OK from gtc for generated Invite
            xlog("L_INFO", "CI=$ci - R25 - 200 OK from gtc, do not change COntact\n");
        else
        {
            if(is_present_hf("Contact"))
            {
                ## Do not replace Contact header for NG911 Calls
                $(avp(S_req_ct_gs)[*]) = $null;
                $avp(S_req_ct_gs) = $hdr(Contact);
                $var(S_sip_uri_flags_ls) = $var(S_sip_uri_tel_flags_ls) + 0x3C;
                osb_set_uri("$avp(S_req_ct_gs)","$var(C_ct_domain_ip_ls),$var(C_pmap_ct_port_gi),$(var(S_transport_gs){s.tolower}),","$var(S_sip_uri_flags_ls)");
                $avp(S_req_ct_gs) = $(avp(S_req_ct_gs){s.selectstr,1,urn:service});
                if ($(avp(S_req_ct_gs){s.len}) > 0)
                {
                    xlog("L_INFO", "R25 - PORT_MAPPING_REPLY_HDR_ROUTE -  NG911 Call. Do not replace Contact header if urn:service is present in Contact header\n");
                    $var(S_no_contact_replacement_lb)=1;
                }

                if ($avp(S_uri_based_route_gb)==1){
                    xlog("L_INFO", "R25 -  Based URI set, Do not replace Contact header present in Contact header\n");
                    $var(S_no_contact_replacement_lb)=1;
                }

                if (isflagset(12))
                {
                    xlog("L_INFO", "CI=$ci - R25 - Reply Route Updating Contact using $avp(S_reg_ct_gs) !\n");
                    $(avp(S_req_ct_gs)[*]) = $null;
                    $avp(S_req_ct_gs) = $hdr(Contact);
                    avp_subst("$avp(S_req_ct_gs)","/(.*<).*(>.*)/\1$avp(S_reg_ct_gs)\2/i");
                }
                else if ($avp(S_req_ct_gs) == $null || $avp(S_req_ct_gs) == '')
                {
                    $(avp(S_req_ct_gs)[*]) = $null;
                    $avp(S_req_ct_gs) = $hdr(Contact);

                    xlog("L_INFO", "CI=$ci - R25 -f10, contact=$avp(S_req_ct_gs), var(S_pmap_domain_ip_gs)=$var(S_pmap_domain_ip_gs),var(S_use_port_li)=$var(S_use_port_li),var(S_ip_port_gs)=$var(S_ip_port_gs),var(S_transport_gs)=$var(S_transport_gs) avp(S_gw_core_fqdn_gs)=avp(S_gw_core_fqdn_gs)\n");

                    if(not_empty("$avp(S_gw_core_fqdn_gs)"))
                    {
                      xlog("L_INFO", "CI=$ci - R25 - Setting Contact domain to Core FQDN: avp(S_gw_core_fqdn_gs)=$avp(S_gw_core_fqdn_gs)\n");
                      $var(S_pmap_domain_ip_gs) = $avp(S_gw_core_fqdn_gs);
                    }

                    if (is_method("INVITE") && $T_reply_code  =~ "3[0-9][0-9]")
                    {
                       $var(C_ct_domain_ip_ls) = $avp(C_sys_current_binding_ip_gs);
                       $var(C_pmap_ct_port_gi) = $var(C_sys_osv_port_gi);
                    }
                    else
                    {
                       $var(C_ct_domain_ip_ls) = $var(S_pmap_domain_ip_gs);
                       $var(C_pmap_ct_port_gi) = $var(S_use_port_li);
                    }
                    $var(S_MSport_ls) = $sht(call-info=>$ci::MSport);


                    if($sht(call-info=>$ci::MSport) != $null )
                    {
                        if($sp != $var(C_ssm_port_gi) && is_method("INVITE") && $T_reply_code  == 200){
                            $var(C_pmap_ct_port_gi) = $var(S_local_port_gs);
                            $avp(S_req_ct_gs) = $hdr(Contact);

                            xlog("L_INFO", "CI=$ci - R25 - using MSport in C_pmap_ct_port_gi=$var(C_pmap_ct_port_gi) sp=$sp  \n");
                        }
                    }

                    if ((!isflagset(11) && !isflagset(15)) || # Not a registered subscrtiber
                        (isflagset(11) && is_gflag("16")))   # Direct subscriber with dynamic port opened on core side
                    {
                       $var(S_sip_uri_flags_ls) = $var(S_sip_uri_tel_flags_ls) + 0x3C;
                       osb_set_uri("$avp(S_req_ct_gs)","$var(C_ct_domain_ip_ls),$var(C_pmap_ct_port_gi),$(var(S_transport_gs){s.tolower}),","$var(S_sip_uri_flags_ls)");
                    }
                    else
                    {
                       $var(S_sip_uri_flags_ls) = $var(S_sip_uri_tel_flags_ls) + 0x2C;
                       osb_set_uri("$avp(S_req_ct_gs)","$var(C_ct_domain_ip_ls),$var(C_pmap_ct_port_gi),","$var(S_sip_uri_flags_ls)");
                    }

                    xlog("L_INFO", "CI=$ci - R25 -f10, New contact=$avp(S_req_ct_gs)\n");
                }

                ## Do not replace contact header if urn:service
                if ($var(S_no_contact_replacement_lb) == 0)
                    subst('/^Contact:.*$/Contact: $avp(S_req_ct_gs)\r/ig');
                $(avp(S_req_ct_gs)[*]) = $null; # RESET IT TO MAKE SURE THAT ITS NOT set from previous response for subsequent replies e.g. 302 after 180

            }
        }


        if(($avp(S_req_fromh_gs) != $null && $avp(S_req_fromh_gs) != ""))
        {
            # restore original From
            subst('/^From:.*/From: $avp(S_req_fromh_gs)\r/i');
            xlog("L_INFO", "CI=$ci - R25 - flag 10, avp(S_req_fromh_gs)=$avp(S_req_fromh_gs)\n");
        }

        if (($avp(S_req_toh_gs) != $null && $avp(S_req_toh_gs) != ""))
        {
            $(avp(S_tmp_gs)[*]) = $null;
            if (!isflagset(13) && $tt != $null && $tt != "")
                $avp(S_req_toh_gs) = $avp(S_req_toh_gs) + ";tag=" + $tt;
            subst('/^To:.*/To: $avp(S_req_toh_gs)\r/i');
            xlog("L_INFO", "CI=$ci - R25 - flag 10, avp(S_req_toh_gs)=$avp(S_req_toh_gs)\n");
        }

        $(avp(C_tmp2_gs)[*]) = $null;

        # replace diversion
        if(is_present_hf("Diversion"))
        {
            $var(S_hdr_div_domain_gs) = $var(S_ip_port_gs);
            $avp(C_ssp_div_user_gs) = $null;

            route(SETUP_DIVERSION_ROUTE);
        }
        if(is_present_hf("P-Asserted-Identity") && $var(C_ssp_use_tel_gb))
        {
           $var(C_tmp_pai_hdr_ls) = "";
           $var(C_counter_li) = 0;
           while (($var(C_counter_li) < 2) && $(var(C_new_pai_hdr_gs){s.selhdrlst,$var(C_counter_li)}{s.len}))
           {

              xlog("L_INFO", "CI=$ci - R22 - PAI $(var(C_new_pai_hdr_gs){s.selhdrlst,$var(C_counter_li)})\n");
              if(pcre_match("$(var(C_new_pai_hdr_gs){s.selhdrlst,$var(C_counter_li)})", "^.*(sips?):"))
              {
                 if ($(var(C_tmp_pai_hdr_ls){s.len}))
                    $var(C_tmp_pai_hdr_ls) = $var(C_tmp_pai_hdr_ls) + "," + $(var(C_new_pai_hdr_gs){s.selhdrlst,$var(C_counter_li)});
                 else
                    $var(C_tmp_pai_hdr_ls) = $(var(C_new_pai_hdr_gs){s.selhdrlst,$var(C_counter_li)});
              }
              $var(C_counter_li) = $var(C_counter_li) + 1;
           }
           if($var(C_counter_li) == 2)
           {
              remove_hf("P-Asserted-Identity");
              insert_hf("P-Asserted-Identity: $var(C_tmp_pai_hdr_ls)\r\n", "Call-ID");
            }
              $var(C_new_pai_hdr_gs) = $var(C_tmp_pai_hdr_ls);
           xlog("L_INFO", "CI=$ci - R22 - New PAI= $var(C_new_pai_hdr_gs)\n");
        }


        # replace P-Asserted-Identity
        if ($avp(C_ssp_pai_user_gs) != $null && $avp(C_ssp_pai_user_gs) != '')
        {
            if(is_present_hf("P-Asserted-Identity"))
            {
                $var(C_new_pai_hdr_gs) = $(hdr(P-Asserted-Identity)[*]);
                if (!search("^P-Asserted-Identity:.*@anonymous"))
                {
                    if ($var(S_g_rem_pai_disp_name_gs) == 1)
                        $var(C_new_pai_hdr_gs) = "<" + $(var(C_new_pai_hdr_gs){nameaddr.nc_uri}) + ">";

                    $var(S_sip_uri_flags_ls) = $var(S_sip_uri_tel_flags_ls) + 0xE;
                    osb_set_uri("$var(C_new_pai_hdr_gs)","$avp(C_ssp_pai_user_gs),$var(S_ip_replacement_gs),","$var(S_sip_uri_flags_ls)");

                    if ($avp(C_ssp_pt_params_list_gs) != $null)
                        osb_set_passthrough_params("$hdr(P-Asserted-Identity)","$var(C_new_pai_hdr_gs)","$avp(C_ssp_pt_params_list_gs)");
                   subst('/(P-Asserted-Identity:).*/\1 $var(C_new_pai_hdr_gs)\r/i');
                }
            }
            else if (is_method("INVITE") || is_method("BYE") || is_method("OPTIONS") || is_method("SUBSCRIBE") || is_method("NOTIFY") || is_method("REFER"))
            {
               $var(C_new_pai_hdr_gs) = "<sip:" + $avp(C_ssp_pai_user_gs) + "@" + $var(S_ip_replacement_gs) + ">";
               insert_hf("P-Asserted-Identity: $var(C_new_pai_hdr_gs)\r\n", "Content-Length");
            }
            $(avp(C_ssp_pai_user_gs)[*]) = $null; # Set avp to $null, so route 28 won't use it to header subst.
        }
        else
        {
            if(is_present_hf("P-Asserted-Identity"))
            {

                if (!search("^P-Asserted-Identity:.*@anonymous"))
                {
                $var(C_new_pai_hdr_gs) = $(hdr(P-Asserted-Identity)[*]);

                    if ($var(S_g_rem_pai_disp_name_gs) == 1)
                       $var(C_new_pai_hdr_gs) = "<" + $(var(C_new_pai_hdr_gs){nameaddr.nc_uri}) + ">";

                    $var(S_sip_uri_flags_ls) = $var(S_sip_uri_tel_flags_ls) + 0xC;
                    osb_set_uri("$var(C_new_pai_hdr_gs)","$var(S_ip_replacement_gs),","$var(S_sip_uri_flags_ls)");

                    if ($avp(C_ssp_pt_params_list_gs) != $null)
                        osb_set_passthrough_params("$hdr(P-Asserted-Identity)","$var(C_new_pai_hdr_gs)","$avp(C_ssp_pt_params_list_gs)");
                   subst('/(P-Asserted-Identity:).*/\1 $var(C_new_pai_hdr_gs)\r/i');
                }
            }
        }

        # replace P-Preferred-Identity
        if ($avp(C_ssp_ppi_user_gs) != $null && $avp(C_ssp_ppi_user_gs) != '')
        {
            if(is_present_hf("P-Preferred-Identity"))
            {
                $var(C_new_ppi_hdr_gs) = $hdr(P-Preferred-Identity);
                if (!search("^P-Preferred-Identity:.*@anonymous"))
                {
                    if ($var(S_g_rem_ppi_disp_name_gs) == 1)
                        $var(C_new_ppi_hdr_gs) = "<" + $(var(C_new_ppi_hdr_gs){nameaddr.nc_uri}) + ">";
                    $var(S_sip_uri_flags_ls) = $var(S_sip_uri_tel_flags_ls) + 0xE;
                    osb_set_uri("$var(C_new_ppi_hdr_gs)","$avp(C_ssp_ppi_user_gs),$var(S_ip_replacement_gs),","$var(S_sip_uri_flags_ls)");
                    if ($avp(C_ssp_pt_params_list_gs) != $null)
                        osb_set_passthrough_params("$hdr(P-Preferred-Identity)","$var(C_new_ppi_hdr_gs)","$avp(C_ssp_pt_params_list_gs)");
                   subst('/(P-Preferred-Identity:).*/\1 $var(C_new_ppi_hdr_gs)\r/i');
                }
            }
            else
            {
                insert_hf("P-Preferred-Identity: <sip:$avp(C_ssp_ppi_user_gs)@$var(S_ip_replacement_gs)>\r\n", "Content-Length");
            }
            $(avp(C_ssp_ppi_user_gs)[*]) = $null; # Set avp to $null, so route 28 won't use it to header subst.
        }
        else
        {
            if(is_present_hf("P-Preferred-Identity"))
            {
                if (!search("^P-Preferred-Identity:.*@anonymous"))
                {
                    $var(C_new_ppi_hdr_gs) = $hdr(P-Preferred-Identity);

                    if ($var(S_g_rem_ppi_disp_name_gs) == 1)
                        $var(C_new_ppi_hdr_gs) = "<" + $(var(C_new_ppi_hdr_gs){nameaddr.nc_uri}) + ">";
                    $var(S_sip_uri_flags_ls) = $var(S_sip_uri_tel_flags_ls) + 0xC;
                    osb_set_uri("$var(C_new_ppi_hdr_gs)","$var(S_ip_replacement_gs),","$var(S_sip_uri_flags_ls)");
                    if ($avp(C_ssp_pt_params_list_gs) != $null)
                        osb_set_passthrough_params("$hdr(P-Preferred-Identity)","$var(C_new_ppi_hdr_gs)","$avp(C_ssp_pt_params_list_gs)");
                   subst('/(P-Preferred-Identity:).*/\1 $var(C_new_ppi_hdr_gs)\r/i');
                }
            }
        }

        if(is_present_hf("X-Siemens-Original-Called-Identity"))
        {
            if (!search("^X-Siemens-Original-Called-Identity:.*@anonymous"))
                subst('/(X-Siemens-Original-Called-Identity:.*@)[^>;]+(.+)/\1$var(S_ip_replacement_gs)\2/i');
        }
    }
    else     #flag10 not set
    {
        xlog("L_INFO", "CI=$ci - R25 -  flag(10) not set,avp(C_req_transp_gs)=$avp(C_req_transp_gs),avp(C_port_gi)=$avp(C_port_gi),avp(C_pmap_port_gi)=$avp(C_pmap_port_gi),avp(C_pmap_resp_port_gi)=$avp(C_pmap_resp_port_gi), avp(C_wan_ip_gs)=$avp(C_wan_ip_gs) \n");

        if($var(C_ssp_use_tel_gb))
          $var(S_sip_uri_tel_flags_ls) = URI_SIP2TEL;
#        $var(S_ip_replacement_gs) = $avp(C_wan_ip_gs);

        if($avp(C_gw_type_gi)==6) {
            $var(S_ip_replacement_gs) = $var(S_local_ip_gs);
            $var(C_port_gi) = $var(S_local_port_gs);
        }
        else {
            $var(S_ip_replacement_gs) = $avp(C_advertised_ip_gs);

            if (not_empty("$avp(S_recv_adv_socket_gs)"))
            {
                xlog("L_INFO", "CI=$ci - R25- Use received advertise socket port from avp(S_recv_adv_socket_gs)=$avp(S_recv_adv_socket_gs)\n");
                $var(C_port_gi) = $(avp(S_recv_adv_socket_gs){s.select,2,;});
                $var(S_ip_replacement_gs) = $(avp(S_recv_adv_socket_gs){s.select,1,;});
            }
            else if($avp(C_advertised_port_gi) != $null && $avp(C_advertised_port_gi) != '')
               $var(C_port_gi) = $avp(C_advertised_port_gi);
            else
               $var(C_port_gi) = $avp(C_wan_port_gs);
        }

        if (!($avp(C_req_transp_gs) != $null && $avp(C_req_transp_gs) != ""))
        {
            xlog("L_WARN", "R25 - Force received transport as udp.\n");
            $avp(C_req_transp_gs) = "udp"; # Force transport as udp if not set previously
        }

        # $var(S_transport_gs) = $avp(C_req_transp_gs);
        # xlog("L_INFO", "CI=$ci - R25 - using transport $avp(C_req_transp_gs)\n");

        if ($var(C_ssp_sip_no_suffix_gb)==0 &&  $avp(C_req_transp_gs) == "tls" && $avp(C_ssp_type_gi) != 7 &&  $avp(C_ssp_type_gi) != 10)
        {
            if ($var(C_ssp_tls_sips_scheme_gb) == 1)
                $var(S_pmap_sip_sec_ls) = "s";
            if(is_method("REGISTER") && !search("connectivity-check"))
            {
                insert_hf("Server: HiPath8000_v4.0 connectivity-check \r\n", "Content-Length");
                xlog("L_INFO", "CI=$ci - R25 - adding connectivity-check\n");
           }
        }
        else
            $var(S_pmap_sip_sec_ls) = "";
        $var(S_sip_suffix_gs) = "sip"+$var(S_pmap_sip_sec_ls);
        $var(S_transport_gs)=" ";


         $var(S_pmap_colon_ls) =":";

         $var(S_pmap_domain_ip_gs) = $var(S_ip_replacement_gs);
         put_ip_in_paran('$var(S_pmap_domain_ip_gs)', '$var(S_pmap_domain_ip_gs)');
         $var(S_use_port_li) = $var(C_port_gi);
           $var(S_ip_port_gs) = "" + $var(S_ip_replacement_gs) +  $var(S_pmap_colon_ls) + $var(C_port_gi);

         xlog("L_INFO", "CI=$ci - R25 -var(S_ip_port_gs)=$var(S_ip_port_gs) for $rm \n");


        # For REGISTER, restore original contact with updated expiry
        if (!is_method("REGISTER"))
        {
            if ($avp(S_req_ct_gs) != $null && $avp(S_req_ct_gs) != '')
            {
            xlog("L_INFO", "CI=$ci - R25 - no flag 10, avp(S_req_ct_gs) =$avp(S_req_ct_gs),$var(S_sip_suffix_gs),$var(S_ip_port_gs),$var(S_ip_replacement_gs),$avp(C_req_transp_gs)\n");
            if(isflagset(27))
                osb_update_uri("$avp(S_req_ct_gs)","$var(S_pmap_domain_ip_gs),$var(S_use_port_li),$avp(C_req_transp_gs),",0x3C);
            else
                osb_update_uri("$avp(S_req_ct_gs)","$var(S_pmap_domain_ip_gs),$var(S_use_port_li),$avp(C_req_transp_gs),",0x3C);

            osb_set_uri("$avp(S_req_ct_gs)","$var(S_use_port_li)",0x08); # Force the port if not present in the contact from OSV

            xlog("L_INFO", "CI=$ci - R25.1 - mf=$mF, C_ssp_flags_gi=$avp(C_ssp_flags_gi), avp(C_ssp_default_home_dn_gs) =$avp(C_ssp_default_home_dn_gs) \n");
            $var(S_ssp_flags_gi) = $(avp(C_ssp_flags_gi)[0]{s.int});
            $(avp(C_ssp_flags_gi)[*]) = $null;
            $avp(C_ssp_flags_gi) = $var(S_ssp_flags_gi);

            if(isflagset(2) && avp_check("$avp(C_ssp_flags_gi)", "and/i:0x04") && is_avp_set("$avp(C_ssp_default_home_dn_gs)") && $avp(C_ssp_default_home_dn_gs) != "")
            {
                xlog("L_INFO", "CI=$ci - R25.1 - call to SSP and spare flag(3) is set, avp(C_ssp_default_home_dn_gs) =$avp(C_ssp_default_home_dn_gs) \n");
                osb_update_uri("$avp(S_req_ct_gs)","$avp(C_ssp_default_home_dn_gs)",0x02);
            }

                subst('/^Contact:.*$/Contact: $avp(S_req_ct_gs)\r/ig');
                $(avp(S_req_ct_gs)[*]) = $null;
            }
            else if(is_present_hf("Contact"))
            {
                xlog("L_INFO", "CI=$ci - R25 - nf10, avp(S_req_ct_gs) =$avp(S_req_ct_gs),$var(S_sip_suffix_gs),$var(S_ip_port_gs),$var(S_ip_replacement_gs),$avp(C_req_transp_gs)\n");
                $avp(S_req_ct_gs) = $(hdr(Contact)[*]);
                xlog("L_INFO", "CI=$ci - R25 - var(S_pmap_domain_ip_gs)=$var(S_pmap_domain_ip_gs),var(S_use_port_li)=$var(S_use_port_li)\n");
                if(not_empty("$avp(S_is_srec_gs)") && $avp(S_is_srec_gs) != '')
                    osb_update_uri("$avp(S_req_ct_gs)","$var(S_sip_suffix_gs),$avp(S_AccessMainIPv4_gs),$var(S_local_port_gs),$avp(C_req_transp_gs),$var(S_pmap_domain_ip_gs)",0x3D);
                else
                {
                    if ($var(S_pmap_sip_sec_ls) == "")
                        osb_update_uri("$avp(S_req_ct_gs)","$var(S_sip_suffix_gs),$var(S_pmap_domain_ip_gs),$var(S_use_port_li),$avp(C_req_transp_gs),$var(S_pmap_domain_ip_gs)",0x3D);
                    else
                        osb_update_uri("$avp(S_req_ct_gs)","$var(S_pmap_domain_ip_gs),$var(S_use_port_li),$avp(C_req_transp_gs),$var(S_pmap_domain_ip_gs)",0x3C);
                }

                xlog("L_INFO", "CI=$ci - R25.2 - mf=$mF, C_ssp_flags_gi=$avp(C_ssp_flags_gi), avp(C_ssp_default_home_dn_gs) =$avp(C_ssp_default_home_dn_gs) \n");
                $var(S_ssp_flags_gi) = $(avp(C_ssp_flags_gi)[0]{s.int});
                $(avp(C_ssp_flags_gi)[*]) = $null;
                $avp(C_ssp_flags_gi) = $var(S_ssp_flags_gi);

                if(isflagset(2) && avp_check("$avp(C_ssp_flags_gi)", "and/i:0x04") && is_avp_set("$avp(C_ssp_default_home_dn_gs)") && $avp(C_ssp_default_home_dn_gs) != "")
                {
                    xlog("L_INFO", "CI=$ci - R25.2 - call to SSP and spare flag(3) is set, avp(C_ssp_default_home_dn_gs) =$avp(C_ssp_default_home_dn_gs) \n");
                    osb_update_uri("$avp(S_req_ct_gs)","$avp(C_ssp_default_home_dn_gs)",0x02);
                }
                xlog("L_INFO", "CI=$ci - R25 - avp(S_req_ct_gs)=$avp(S_req_ct_gs)\n");

                subst('/^Contact:.*$/Contact: $avp(S_req_ct_gs)\r/ig');
                $avp(S_req_ct_gs) = $null;
            }
        }
        if (($avp(S_req_toh_gs) != $null && $avp(S_req_toh_gs) != ""))
        {
            $(avp(S_tmp_gs)[*]) = $null;
            if (!isflagset(13) && $tt != $null && $tt != "")
                $avp(S_req_toh_gs) = $avp(S_req_toh_gs) + ";tag=" + $tt;
            subst('/^To:.*/To: $avp(S_req_toh_gs)\r/i');
            xlog("L_INFO", "CI=$ci - R25 - no flag 10, avp(S_req_toh_gs)=$avp(S_req_toh_gs)\n");
        }

        if (($avp(S_req_fromh_gs) != $null && $avp(S_req_fromh_gs) != ""))
        {
            # restore original From
            subst('/^From:.*/From: $avp(S_req_fromh_gs)\r/i');
            xlog("L_INFO", "CI=$ci - R25 - no flag 10, avp(S_req_fromh_gs)=$avp(S_req_fromh_gs)\n");
        }


        # H4K Load balancer could send the Contact IP different than primary binding.
        if ($var(C_g_useSsmRecordRoute_gb) == 1 && $var(C_call_msg_gb) == 1)  # rcv_rr should be null above as SSM doesnt return any Record Route in Request
        {
            $var(S_pmap_rr_ls) = $var(S_pmap_domain_ip_gs)+":"+$var(S_use_port_li)+";transport="+$avp(C_req_transp_gs);
            if (is_present_hf("Contact")) # Not a registered subscriber
            {
                # read the maddr from contact and provide this in record route
                if ($(sel(contact.uri){uri.maddr}{s.len}))
                    $var(S_com_ip_addr_r0_ls) = $(sel(contact.uri){uri.maddr});
                else
                    $var(S_com_ip_addr_r0_ls) = $sel(contact.uri.host);

                $var(S_pmap_rr_ls) = $var(S_pmap_rr_ls)+";comIP="+$var(S_com_ip_addr_r0_ls);

                $var(S_pmap_rr_ls) = $var(S_pmap_rr_ls)+"~"; # Need to add delimter irrespective of the next field
                $var(S_com_ip_port_r0_ls) = "";
                if($(sel(contact.uri.port){s.len}) )
                {
                    $var(S_com_ip_port_r0_ls) = $sel(contact.uri.port);
                    $var(S_pmap_rr_ls) = $var(S_pmap_rr_ls)+$var(S_com_ip_port_r0_ls);
                }

                $var(S_pmap_rr_ls) = $var(S_pmap_rr_ls)+"~"; # Need to add delimter irrespective of the next field
                if ($(sel(contact.uri){uri.transport}{s.len}))
                    $var(S_com_ip_tran_r0_ls) = $(sel(contact.uri){uri.transport});
                else
                    $var(S_com_ip_tran_r0_ls) = $avp(C_req_transp_gs);

                $var(S_pmap_rr_ls) = $var(S_pmap_rr_ls)+$var(S_com_ip_tran_r0_ls);

                if ($var(S_standalone_route_gi) == 1 && ($si != $var(S_com_ip_addr_r0_ls) || (not_empty("$var(S_com_ip_port_r0_ls)") && $sp != $var(S_com_ip_port_r0_ls))))
                    $var(C_ssm_call_side_data_gs) = "rm-addr=" + $si + "~" + $sp + "~" + $proto;

                xlog("L_INFO", "CI=$ci - R25 - M=$rm Code:$rs - Record-Route header: $var(S_pmap_rr_ls) var(C_ssm_call_side_data_gs)=$var(C_ssm_call_side_data_gs)\n");
            }

            if (is_present_hf("Record-Route"))
            {
               $(avp(C_tmp2_gs)[*]) = $null;

               $avp(C_tmp2_gs) = $(hdr(Record-Route)[*]); # RR could be seperate or comma seperated or combination. Combine all to make it comma seperated.
               xlog("L_INFO", "CI=$ci - R25 - COMPLETE Record-Route C_tmp2_gs, $avp(C_tmp2_gs)\n");

               $var(S_sys_count_gi) = 0;
               while($(avp(C_tmp2_gs){s.select,$var(S_sys_count_gi),,}{s.len}))
               {
                   xlog("L_INFO", "CI=$ci - R25 - FOUND Record-Route rcv_rr, $var(S_sys_count_gi) : $(avp(C_tmp2_gs){s.select,$var(S_sys_count_gi),,})\n");
                   $var(S_sys_count_gi) = $var(S_sys_count_gi) + 1;
               }
               $var(S_last_uri_index_li) = $var(S_sys_count_gi) - 1;
               $var(S_last_rr_uri_ls) = $(avp(C_tmp2_gs){s.select,$var(S_last_uri_index_li),,});
               xlog("L_INFO", "CI=$ci - R25 - Check $(var(S_last_rr_uri_ls){nameaddr.nc_uri}{uri.host}) and $sel(via[1].host)\n");
               if ($(var(S_last_rr_uri_ls){nameaddr.nc_uri}{uri.host}) == $sel(via[1].host))
                   $var(S_sys_count_gi) = $var(S_sys_count_gi) - 1;

               if ($var(S_sys_count_gi) == 0) # 0 indicates only our own Record Route which should be replaced with the new one
               {
                   xlog("L_INFO", "CI=$ci - R25.1 - SKIPPING local only Record-Route rcv_rr, $var(S_sys_r_ins_count_gi) : $avp(C_tmp2_gs)\n");
                   xlog("L_INFO", "CI=$ci - R25.1 - Addding our Record-Route at the end $var(S_pmap_rr_ls)\n");
                   $var(S_pmap_rr_ls) = "<sip:"+$var(S_pmap_rr_ls)+";lr;ftag="+$ft+">";
                   # Insert_hf is used instead of append_hf because the previous record-route header is automatically removed, and with
                   # append_hf Kamailio generates a wrong lump, resulting in a sip message with errors.
                   insert_hf("Record-Route: $var(S_pmap_rr_ls)\r\n","Record-Route"); ## Add as the last Record-Route

               }
               else
               {
                   $var(S_sys_r_ins_count_gi) = 0;
                   $var(S_new_rr_list_ls) = '';
                   while($(avp(C_tmp2_gs){s.select,$var(S_sys_r_ins_count_gi),,}{s.len}))
                   {
                       xlog("L_INFO", "CI=$ci - R25 - STORING Record-Route rcv_rr, $var(S_sys_r_ins_count_gi) : $(avp(C_tmp2_gs){s.select,$var(S_sys_r_ins_count_gi),,})\n");
                       if (not_empty("$var(S_new_rr_list_ls)"))
                           $var(S_new_rr_list_ls) = $var(S_new_rr_list_ls) + ', ';
                       $var(S_new_rr_list_ls) = $var(S_new_rr_list_ls) + $(avp(C_tmp2_gs){s.select,$var(S_sys_r_ins_count_gi),,});

                       $var(S_sys_r_ins_count_gi) = $var(S_sys_r_ins_count_gi) + 1;

                       if ($var(S_sys_count_gi) == $var(S_sys_r_ins_count_gi)) # 4K adds its own Record-Route on top on OS-SBC. Replace the last entry pointing to OS-SBC
                       {
                           xlog("L_INFO", "CI=$ci - R25 - SKIPPING local Record-Route rcv_rr, $var(S_sys_r_ins_count_gi) : $(avp(C_tmp2_gs){s.select,$var(S_sys_r_ins_count_gi),,})\n");
                           xlog("L_INFO", "CI=$ci - R25 - Addding our Record-Route at the end $var(S_pmap_rr_ls)\n");
                           $var(S_pmap_rr_ls) = "<sip:"+$var(S_pmap_rr_ls)+";lr;ftag="+$ft+">";
                           $var(S_new_rr_list_ls) = $var(S_new_rr_list_ls) + ', ' + $var(S_pmap_rr_ls);

                           break;
                       }
                   }
                   if (not_empty("$var(S_new_rr_list_ls)"))
                       insert_hf("Record-Route: $var(S_new_rr_list_ls)\r\n","Call-ID");
               }

               $(avp(C_tmp2_gs)[*]) = $null;
            }
            else if ($var(S_standalone_route_gi) == 0)
            {
               record_route_preset("$var(S_pmap_rr_ls)");
               xlog("L_INFO", "CI=$ci - R25 - Addding our Record-Route $var(S_pmap_rr_ls)\n");
            }
            xlog("L_INFO", "CI=$ci - R25  - 4K, RR is preserved towards SSM\n");
        }
        else
        {


            # WHY RESTORE THE RECORD-ROUTE in RESPONSE...
            # Apparantly, OSV returnrs OSS RR in response as well.
            # If not deleted, thsi would go back to the sub.
            # Better is to keep whatever is coming in to match the OSV behaviour as well
            # replace Record-Route
            # if(is_present_hf("Record-Route"))
            if (($avp(S_req_rrh_gs) != $null && $avp(S_req_rrh_gs) != ""))
            {
                #read the rcv_rr
                $var(S_rr_count_gi)=0;
                while($(avp(S_req_rrh_gs)[$var(S_rr_count_gi)]) != $null)
                {
                       $var(S_rr_count_gi) = $var(S_rr_count_gi) + 1;
                }
                $var(S_rr_count_gi) = $var(S_rr_count_gi) - 1;

                while($var(S_rr_count_gi) >= 0)
                {
                   if(($(avp(S_req_rrh_gs)[$var(S_rr_count_gi)]) != $null && $(avp(S_req_rrh_gs)[$var(S_rr_count_gi)]) != "")){
                       insert_hf("$(avp(S_req_rrh_gs)[$var(S_rr_count_gi)])\r\n","Call-ID");
                       xlog("L_INFO", "R25  - Reply Route rcv_rr, $var(S_rr_count_gi) $(avp(S_req_rrh_gs)[$var(S_rr_count_gi)])\n");
                       $var(S_rr_count_gi) = $var(S_rr_count_gi) - 1;
                   }
                }
            }
        }


        # remove original Record-Routes(s)
        remove_hf("Record-Route");
        xlog("L_INFO", "CI=$ci - R25  - rcv_rr inserted\n");

        # replace diversion
        if(is_present_hf("Diversion") &&
           ($avp(C_ssp_div_user_gs) == $null || $avp(C_ssp_div_user_gs) == '' ||
           ($avp(C_ssp_div_user_gs) != $null && $avp(C_ssp_div_user_gs) != 'del')))
        {
            $var(S_hdr_div_domain_gs) = $var(S_ip_replacement_gs);
            route(SETUP_DIVERSION_ROUTE);
        }
        # replace P-Asserted-Identity
        if ($avp(C_ssp_pai_user_gs) != $null && $avp(C_ssp_pai_user_gs) != '')
        {
            if(is_present_hf("P-Asserted-Identity"))
            {
                $var(C_new_pai_hdr_gs) = $(hdr(P-Asserted-Identity)[*]);
                if (!search("^P-Asserted-Identity:.*@anonymous"))
                {
                    if ($var(S_g_rem_pai_disp_name_gs) == 1)
                        $var(C_new_pai_hdr_gs) = "<" + $(var(C_new_pai_hdr_gs){nameaddr.nc_uri}) + ">";

                    $var(S_sip_uri_flags_ls) = $var(S_sip_uri_tel_flags_ls) + 0xE;
                    osb_set_uri("$var(C_new_pai_hdr_gs)","$avp(C_ssp_pai_user_gs),$var(S_pmap_domain_ip_gs),","$var(S_sip_uri_flags_ls)");

                    if ($avp(C_ssp_pt_params_list_gs) != $null)
                        osb_set_passthrough_params("$hdr(P-Asserted-Identity)","$var(C_new_pai_hdr_gs)","$avp(C_ssp_pt_params_list_gs)");
                   subst('/(P-Asserted-Identity:).*/\1 $var(C_new_pai_hdr_gs)\r/i');
                }
            }
            else if (is_method("INVITE") || is_method("BYE") || is_method("OPTIONS") || is_method("SUBSCRIBE") || is_method("NOTIFY") || is_method("REFER"))
            {
                $var(C_new_pai_hdr_gs) = "<sip:" + $avp(C_ssp_pai_user_gs) + "@" + $var(S_pmap_domain_ip_gs) + ">";
                insert_hf("P-Asserted-Identity: $var(C_new_pai_hdr_gs)\r\n", "Content-Length");
            }
            $(avp(C_ssp_pai_user_gs)[*]) = $null; # Set avp to $null, so route 28 won't use it to header subst.
        }
        else
        {
            if(is_present_hf("P-Asserted-Identity"))
            {
                if (!search("^P-Asserted-Identity:.*@anonymous"))
                {
                    $var(C_new_pai_hdr_gs) = $(hdr(P-Asserted-Identity)[*]);
                    if ($var(S_g_rem_pai_disp_name_gs) == 1)
                        $var(C_new_pai_hdr_gs) = "<" + $(var(C_new_pai_hdr_gs){nameaddr.nc_uri}) + ">";

                    $var(S_sip_uri_flags_ls) = $var(S_sip_uri_tel_flags_ls) + 0xC;
                    osb_set_uri("$var(C_new_pai_hdr_gs)","$var(S_pmap_domain_ip_gs),","$var(S_sip_uri_flags_ls)");

                    if ($avp(C_ssp_pt_params_list_gs) != $null)
                        osb_set_passthrough_params("$hdr(P-Asserted-Identity)","$var(C_new_pai_hdr_gs)","$avp(C_ssp_pt_params_list_gs)");
                   subst('/(P-Asserted-Identity:).*/\1 $var(C_new_pai_hdr_gs)\r/i');
                }
            }
        }
        xlog("L_INFO", "CI=$ci - R25  - done: var(C_new_pai_hdr_gs)=$var(C_new_pai_hdr_gs) \n");

        # replace P-Preferred-Identity
        if ($avp(C_ssp_ppi_user_gs) != $null && $avp(C_ssp_ppi_user_gs) != '')
        {
            if(is_present_hf("P-Preferred-Identity"))
            {
                $var(C_new_ppi_hdr_gs) = $hdr(P-Preferred-Identity);
                if (!search("^P-Preferred-Identity:.*@anonymous"))
                {
                    if ($var(S_g_rem_ppi_disp_name_gs) == 1)
                        $var(C_new_ppi_hdr_gs) = "<" + $(var(C_new_ppi_hdr_gs){nameaddr.nc_uri}) + ">";
                    $var(S_sip_uri_flags_ls) = $var(S_sip_uri_tel_flags_ls) + 0xE;
                    osb_set_uri("$var(C_new_ppi_hdr_gs)","$avp(C_ssp_ppi_user_gs),$var(S_pmap_domain_ip_gs),","$var(S_sip_uri_flags_ls)");
                    if ($avp(C_ssp_pt_params_list_gs) != $null)
                        osb_set_passthrough_params("$hdr(P-Preferred-Identity)","$var(C_new_ppi_hdr_gs)","$avp(C_ssp_pt_params_list_gs)");
                   subst('/(P-Preferred-Identity:).*/\1 $var(C_new_ppi_hdr_gs)\r/i');
                }

            }
            else
            {
                insert_hf("P-Preferred-Identity: <sip:$avp(C_ssp_ppi_user_gs)@$var(S_pmap_domain_ip_gs)>\r\n", "Content-Length");
            }
            $(avp(C_ssp_ppi_user_gs)[*]) = $null; # Set avp to $null, so route 28 won't use it to header subst.
        }
        else
        {
            if(is_present_hf("P-Preferred-Identity"))
            {
                if (!search("^P-Preferred-Identity:.*@anonymous"))
                {

                    $var(C_new_ppi_hdr_gs) = $hdr(P-Preferred-Identity);
                    if ($var(S_g_rem_ppi_disp_name_gs) == 1)
                        $var(C_new_ppi_hdr_gs) = "<" + $(var(C_new_ppi_hdr_gs){nameaddr.nc_uri}) + ">";
                    $var(S_sip_uri_flags_ls) = $var(S_sip_uri_tel_flags_ls) + 0xE;
                    osb_set_uri("$var(C_new_ppi_hdr_gs)","$var(S_pmap_domain_ip_gs),","$var(S_sip_uri_flags_ls)");
                    if ($avp(C_ssp_pt_params_list_gs) != $null)
                        osb_set_passthrough_params("$hdr(P-Preferred-Identity)","$var(C_new_ppi_hdr_gs)","$avp(C_ssp_pt_params_list_gs)");
                   subst('/(P-Preferred-Identity:).*/\1 $var(C_new_ppi_hdr_gs)\r/i');
                }
            }
        }
        if(is_present_hf("X-Siemens-Original-Called-Identity"))
        {
            if (!search("^X-Siemens-Original-Called-Identity:.*@anonymous"))
                subst('/(X-Siemens-Original-Called-Identity:[^:]*sips?:)([^@]+@)?[^>; ]+(.+)/\1\2$var(S_pmap_domain_ip_gs)\3/i');
        }
        #remove the LAN ip from the warning
        if($var(S_mod_resp_code_gi) == 0 && is_present_hf("Warning"))
        {
           $(avp(C_tmp2_gs)[*]) = $null;
           $avp(C_tmp2_gs) = $hdr(Warning);
           avp_subst("$avp(C_tmp2_gs)", "/[0-9]?[0-9]?[0-9][.][0-9]?[0-9]?[0-9][.][0-9]?[0-9]?[0-9][.][0-9]?[0-9]?[0-9]/$avp(C_wan_ip_gs)/ig");
           insert_hf("Warning: $avp(C_tmp2_gs)\r\n", "Warning");
           remove_hf("Warning");
        }
    }
    route(SSM_ROUTE);  # Set rtpProxy if needed
    route(MANIPULATE_VIA_ROUTE);
    if (is_gflag("6"))
    {
        xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
        bm_log_timer("route-25");
    }
}

########################################################################
# route PORT_MAPPING_SSM_REPLY_HDR_ROUTE: port mapping: Reply Header Transformation
########################################################################
route[PORT_MAPPING_SSM_REPLY_HDR_ROUTE]
{
    if (is_gflag("6"))
        bm_start_timer("route-26");

    xlog("L_INFO", "CI=$ci - R26 - Entry M=$rm avp(C_src_ip_gs)=$avp(C_src_ip_gs) RURI=$ru From=$fu To=$tu RD= $rd IP=$var(C_si_var_gs) SIP=$src_ip rp=$rp Rp=$Rp Code:$rs Reason=$rr CT=$ct  avp(C_pmap_port_gi)=$avp(C_pmap_port_gi)\n\n");

    #csbc is Normal mode

    if (($avp(S_req_fromh_gs) != $null && $avp(S_req_fromh_gs) != ""))
    {
        # restore original From
        subst('/^From:.*/From: $avp(S_req_fromh_gs)\r/i');
    }

    # Convert external to internal ip/port in To Header:
    if (($avp(S_req_toh_gs) != $null && $avp(S_req_toh_gs) != ""))
    {
        $(avp(S_tmp_gs)[*]) = $null;
        $avp(S_tmp_gs) = $avp(S_req_toh_gs);

        $var(S_pmap_toh_suf_ls)=$(hdr(To){nameaddr.usuffix});
        $var(S_req_toh_suf_ls)=$(avp(S_req_toh_gs){nameaddr.usuffix});

        if($var(S_pmap_toh_suf_ls) != $var(S_req_toh_suf_ls))
             $avp(S_tmp_gs) = $(hdr(To){nameaddr.uprefix}) + $(avp(S_req_toh_gs){nameaddr.uri}) + $var(S_pmap_toh_suf_ls);

        subst('/^To:.*/To: $avp(S_tmp_gs)\r/i');

        xlog("L_INFO", "CI=$ci - R26 - 2 no flag 10, avp(S_tmp_gs)=$avp(S_tmp_gs), var(C_new_toh_hdr_gs)=$var(C_new_toh_hdr_gs)\n");
    }
    if(isflagset(10) && $sp == $var(C_ssm_port_gi) && $sht(call-info=>$ci::sent) == 1)
    {
        ### LAN invoked pstn dialin, the $avp(C_advertised_port_gi) is pointing to correct port
#       xlog("L_INFO", "CI=$ci - R26 - avp(C_advertised_port_gi)=$avp(C_advertised_port_gi)  \n");
#        $var(C_pmap_ct_port_gi) = $avp(C_advertised_port_gi);
        $avp(C_tmp2_gs) = $hdr(Contact);
#        osb_set_uri("$avp(C_tmp2_gs)","$var(C_pmap_ct_port_gi),$(avp(C_sys_current_binding_transp_gs){s.tolower})",0x18);
        xlog("L_INFO", "CI=$ci - R26 - Using GW Core settings from the original EP: $avp(S_final_C_gw_core_ip_gs):$avp(S_final_C_gw_core_port_gs):$(avp(C_sys_current_binding_transp_gs){s.tolower}) \n");
        osb_set_uri("$avp(C_tmp2_gs)","$avp(S_final_C_gw_core_ip_gs),$avp(S_final_C_gw_core_port_gs),$(avp(C_sys_current_binding_transp_gs){s.tolower})",0x1C);
        subst('/^Contact:.*/Contact: $avp(C_tmp2_gs)\r/i');
        record_route_preset("$avp(S_final_C_gw_core_ip_gs):$avp(S_final_C_gw_core_port_gs);transport=$(avp(C_sys_current_binding_transp_gs){s.tolower})");
#        xlog("L_INFO", "CI=$ci - R26 - using lanport in C_pmap_ct_port_gi=$var(C_pmap_ct_port_gi) sp=$sp  \n");

    }

    route(SSM_ROUTE);  # Set rtpProxy if needed
    route(MANIPULATE_VIA_ROUTE);

    # Additional CDR Info for Response
    # ReINVITE doesn not get counted in CDR but negative response reduces the count.
    # Handle Negative response from SSM only as negative responses generated by Kamailio itself does not come here
#    if(!isflagset(13) && is_method("INVITE"))
#    {
        # Only Handle Negative response from SSM as negative responses generated by Kamailio itself does not come here
        # CDR ignores some of the 4XX and 3XX responses. Simply pass 480 to release the session
        # if (status=~"[3-9][0-9][0-9]")
        #     dialog_log("RESPONSE timestamp=$Ts;call_id=$ci;from_tag=$ft;to_tag=$tt;code=480;reason=$rr;\n");
        # else if (status=~"200")
        #     dialog_log("RESPONSE timestamp=$Ts;call_id=$ci;from_tag=$ft;to_tag=$tt;contact=$ct;code=$rs;reason=$rr;\n");
#    }


    if (is_gflag("6"))
    {
        xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
        bm_log_timer("route-26");
    }
}

########################################################################
# route NM_PORT_MAPPING_TO_OSV_PRE_ROUTE: port mapping: to H8K  - Normal mode, none OSV related header
########################################################################
route[NM_PORT_MAPPING_TO_OSV_PRE_ROUTE]
{
    if (is_gflag("6"))
        bm_start_timer("route-40");

    xlog("L_INFO", "CI=$ci - R40 - Entry M=$rm rp=$rp Rp=$Rp flags=$mF to=$to ct=$ct, avp(C_port_gi)=$avp(C_port_gi), gwbehindep=$avp(C_gw_behind_ep_gi), avp(C_req_transp_gs)=$avp(C_req_transp_gs),avp(C_ssp_flags_gi)=$avp(C_ssp_flags_gi),pm_transport=$avp(S_pm_transport_gs)\n");

    xlog("L_INFO", "CI=$ci - R40  - var(S_viah_from_portmap_ls)=$var(S_viah_from_portmap_ls)\n");
    # replace Via
    if(is_present_hf("Via"))
    {
        # Store all via headers in rcv_via
        $var(S_via_count_gi) = 0;
        $(avp(S_req_via_gs)[*]) = $null;

        while($(hdr(Via)[$var(S_via_count_gi)]) != $null)
        {
            $(avp(S_req_via_gs)[$var(S_via_count_gi)]) = "Via: " + $(hdr(Via)[$var(S_via_count_gi)]);

            xlog("L_INFO", "CI=$ci - R40  - Request Route rcv_via, $var(S_via_count_gi) $avp(S_req_via_gs)\n");
            $var(S_via_count_gi) = $var(S_via_count_gi) + 1;
        }
        xlog("L_INFO", "CI=$ci - R40  - Request Route rcv_via $avp(S_req_via_gs)\n");

        if (($var(S_wan_natted_gb) == 1 || not_empty("$var(S_fwd_nw_id_gs)")) &&                  ## WAN Side is NATted or it use fwd realm
            ($var(C_call_msg_gb) == 1 || isflagset(11)))    ## Call Msg goes through the SSM and could use rport, Via after SSM would be modified anyway.
                                                       ## Direct subscribers, force rport irrespective of Call or Non Call. Dynamic Subs in OSV is fine with additional bottom Via
                                                       ## Remote EPs behind NAT sending non Call message like REGISTER/SUBSCRIBE - TODO verify of OSV has any issue with additional bottom Via
           force_rport();
        else
           route(MANIPULATE_VIA_ROUTE);

        xlog("L_INFO", "CI=$ci - R40  - Request Route avp(C_port_mtls_gs)=$avp(C_port_mtls_gs), C_ep1_transp_gs=$var(C_ep1_transp_gs), C_sys_current_binding_transp_gs=$avp(C_sys_current_binding_transp_gs), Accept=$hdr(Accept), Via=$(hdr(Via)[0])\n");

        if(is_method("REGISTER") && isflagset(15) && $var(C_ep1_transp_gs) == "tls" && $avp(C_sys_current_binding_transp_gs) == "tls" && $(hdr(Via)[0]) =~ "x-oscar-transport=mtls")
        {
            osb_set_via_params(";x-oscar-transport=mtls");
            xlog("L_INFO", "CI=$ci - R40  - REGISTER request, setting x-oscar-transport=mtls\n");
        }
    }

    xlog("L_INFO", "CI=$ci - R40 - var(S_pmap_ob_ip_to_apply_ls)= $var(S_pmap_ob_ip_to_apply_ls),var(S_ip_port_bak_ls)=$var(S_ip_port_bak_ls), var(S_ip_port_gs)=$var(S_ip_port_gs), avp(S_is_fqdn_gs)=$avp(S_is_fqdn_gs)\n");

    $var(S_ip_port_gs) = $var(S_ip_port_bak_ls);


    #read and store the Record-Route for usage in the other direction
    $var(S_rr_count_gi) = 0;
    $(avp(S_req_rrh_gs)[*]) = $null;
    if(is_present_hf("Record-Route"))
    {
        while($(hdr(Record-Route)[$var(S_rr_count_gi)]) != $null)
        {
            $(avp(S_req_rrh_gs)[$var(S_rr_count_gi)]) =  "Record-Route: " +$(hdr(Record-Route)[$var(S_rr_count_gi)]);
            xlog("L_INFO", "CI=$ci - R40  - rcv_rr, $var(S_rr_count_gi) $avp(S_req_rrh_gs)\n");
            $var(S_rr_count_gi) = $var(S_rr_count_gi) + 1;
        }
    }

# replace P-Asserted-Identity
    if(is_present_hf("P-Asserted-Identity"))
    {
       $var(C_new_pai_hdr_gs) = $(hdr(P-Asserted-Identity)[*]);

        if($var(C_ssp_use_tel_gb))
        {
           $var(C_tmp_pai_hdr_ls) = "";
           $var(C_counter_li) = 0;
           while (($var(C_counter_li) < 2) && $(var(C_new_pai_hdr_gs){s.selhdrlst,$var(C_counter_li)}{s.len}))
           {

              xlog("L_INFO", "CI=$ci - R40 - PAI $(var(C_new_pai_hdr_gs){s.selhdrlst,$var(C_counter_li)})\n");
              if(pcre_match("$(var(C_new_pai_hdr_gs){s.selhdrlst,$var(C_counter_li)})", "^.*(sips?):"))
              {
                 if ($(var(C_tmp_pai_hdr_ls){s.len}))
                    $var(C_tmp_pai_hdr_ls) = $var(C_tmp_pai_hdr_ls) + "," + $(var(C_new_pai_hdr_gs){s.selhdrlst,$var(C_counter_li)});
                 else
                    $var(C_tmp_pai_hdr_ls) = $(var(C_new_pai_hdr_gs){s.selhdrlst,$var(C_counter_li)});
              }
              $var(C_counter_li) = $var(C_counter_li) + 1;
           }
           if($var(C_counter_li) == 2)
           {

              $var(C_new_pai_hdr_gs) = $var(C_tmp_pai_hdr_ls);
              remove_hf("P-Asserted-Identity");
              insert_hf("P-Asserted-Identity: $var(C_new_pai_hdr_gs)\r\n", "Call-ID");
           }
           xlog("L_INFO", "CI=$ci - R40 - New PAI= $var(C_new_pai_hdr_gs)\n");
        }
        if (!search("^P-Asserted-Identity:.*@anonymous"))
        {

           if ($var(S_g_rem_pai_disp_name_gs) == 1)
               $var(C_new_pai_hdr_gs) = "<" + $(var(C_new_pai_hdr_gs){nameaddr.nc_uri}) + ">";

           if (is_avp_set("$avp(C_ssp_pai_user_gs)"))
           {
               $var(S_sip_uri_flags_ls) = $var(S_sip_uri_tel_flags_ls) + 0xE;
               osb_set_uri("$var(C_new_pai_hdr_gs)","$avp(C_ssp_pai_user_gs),$var(S_pmap_ob_ip_to_apply_ls),","$var(S_sip_uri_flags_ls)");
           }
           else
           {
               $var(S_sip_uri_flags_ls) = $var(S_sip_uri_tel_flags_ls) + 0xC;
               osb_set_uri("$var(C_new_pai_hdr_gs)","$var(S_pmap_ob_ip_to_apply_ls),","$var(S_sip_uri_flags_ls)");
           }

           xlog("L_INFO", "CI=$ci - R40 - New PAI= $var(C_new_pai_hdr_gs)\n");

           remove_hf("P-Asserted-Identity");
           insert_hf("P-Asserted-Identity: $var(C_new_pai_hdr_gs)\r\n", "Call-ID");

        }
    }
    # replace P-Preferred-Identity
    if(is_present_hf("P-Preferred-Identity"))
    {
        if (!search("^P-Preferred-Identity:.*@anonymous"))
        {
            $var(C_new_ppi_hdr_gs) = $hdr(P-Preferred-Identity);
            if ($var(S_g_rem_ppi_disp_name_gs) == 1)

            $var(C_new_ppi_hdr_gs) = "<" + $(var(C_new_ppi_hdr_gs){nameaddr.nc_uri}) + ">";
            $var(S_sip_uri_flags_ls) = $var(S_sip_uri_tel_flags_ls) + 0xC;
            osb_set_uri("$var(C_new_ppi_hdr_gs)","$var(S_pmap_ob_ip_to_apply_ls),","$var(S_sip_uri_flags_ls)");
           remove_hf("P-Preferred-Identity");
           insert_hf("P-Preferred-Identity: $var(C_new_ppi_hdr_gs)\r\n", "Call-ID");

        }
    }
    # Keyset-Info+xml handling
    if(is_method("NOTIFY") && $hdr(Content-Type) =~ "application\/keyset-info\+xml")
    {
        # Notify message with XML keyset information
        if(search_body(" *entity=[^>]*@")) # Entity contains IP/domain
        {
            $avp(S_tmp_gs)=$rb;
            avp_subst("$avp(S_tmp_gs)","/[\r\n]//ig");  # Remove new lines
            $(avp(S_int_ip_gs)[*]) = $null;
            $avp(S_int_ip_gs) = $(avp(S_tmp_gs){s.selectstr,1, entity=}{s.select,1,"}{uri.host});  # uri between
            if ($avp(S_int_ip_gs) != $var(S_pmap_ob_ip_to_apply_ls) && avp_check("$avp(S_int_ip_gs)","ne/$var(S_pmap_destination_ls)/i"))
            {
                if ($avp(S_int_ip_gs) == $var(S_pmap_ob_ip_to_convert_gs))
                {
                    subst_body('/( *entity=[^>]*[^>:]*)@[^\">]*(.*)/\1@$var(S_pmap_ob_ip_to_apply_ls)\2/ig');
                    xlog("L_INFO", "CI=$ci - R40 - Keyset-Xml $avp(S_int_ip_gs) from entity replaced to WAN_IP.\n");
                }
                else
                {
                    if ((isflagset(11) || isflagset(15)) && ($avp(C_pmap_port_gi) != $null && $avp(C_pmap_port_gi) != ""))
                       $avp(C_port_gi) = $avp(C_pmap_port_gi);

                    if(($avp(C_port_gi) != $null && $avp(C_port_gi) != ""))
                    {
                        # Replace ip address/port of entity. IP and port can be unavailable
                        subst_body('/( *entity=[^>]*[^>:]*)@[^\">]*(.*)/\1@$var(S_pmap_ob_ip_to_apply_ls):$avp(C_port_gi)\2/ig');
                        #format example: entity="sip:554133413004@10.200.102.102:5060">
                        xlog("L_INFO", "CI=$ci - R40 - Keyset-Xml $avp(S_int_ip_gs) from entity replaced to WAN_IP:$avp(C_port_gi).\n");
                    }
                }
            }
        }

        if(search_body("<ki-assertedIdentity>[^<]*@.*<\/ki-assertedIdentity>")) # ki-assertedIdentity contains IP/domain
        {
            $avp(S_tmp_gs)=$rb;
            avp_subst("$avp(S_tmp_gs)","/[\r\n]//ig");  # Remove new lines
            $(avp(S_int_ip_gs)[*]) = $null;
            $avp(S_int_ip_gs) =  $(avp(S_tmp_gs){s.selectstr,1,<ki-assertedIdentity>}{s.selectstr,0,</ki-assertedIdentity>}{s.select,-1,>}{s.select,0,<}{uri.host});
            if ($avp(S_int_ip_gs) != $var(S_pmap_ob_ip_to_apply_ls) && avp_check("$avp(S_int_ip_gs)","ne/$var(S_pmap_destination_ls)/i"))
            {
                if ($avp(S_int_ip_gs) == $var(S_pmap_ob_ip_to_convert_gs))
                {
                    subst_body('/(<ki-assertedIdentity>[^<]*)@([^;\"<]*)/\1@$var(S_pmap_ob_ip_to_apply_ls)/ig');
                    xlog("L_INFO", "CI=$ci - R40 - Keyset-Xml $avp(S_int_ip_gs) from ki-assertedIdentity replaced to WAN_IP.\n");
                }
                else
                {
                    if ((isflagset(11) || isflagset(15)) && ($avp(C_pmap_port_gi) != $null && $avp(C_pmap_port_gi) != ""))
                       $avp(C_port_gi) = $avp(C_pmap_port_gi);

                    if(($avp(C_port_gi) != $null && $avp(C_port_gi) != ""))
                    {
                        # Replace ip address/port of <ki:assertedIdentity>
                        subst_body('/(<ki-assertedIdentity>[^<]*)@([^;\"<]*)/\1@$var(S_pmap_ob_ip_to_apply_ls):$avp(C_port_gi)/ig');
                        #format example: <ki-assertedIdentity>"sip:554133413070@10.200.102.102:5060;transport=udp"</ki-assertedIdentity>
                        xlog("L_INFO", "CI=$ci - R40 - Keyset-Xml $avp(S_int_ip_gs) from ki-assertedIdentity replaced to WAN_IP:$avp(C_port_gi).\n");
                    }
                }
            }
        }

        if(search_body("<di:local-uri>[^<]*@.*<\/di:local-uri>")) # di-local-uri contains IP/domain
        {
            $avp(S_tmp_gs)=$rb;
            avp_subst("$avp(S_tmp_gs)","/[\r\n]//ig");  # Remove new lines
            $(avp(S_int_ip_gs)[*]) = $null;
            $avp(S_int_ip_gs) = $(avp(S_tmp_gs){s.selectstr,1,<di:local-uri>}{s.selectstr,0,</di:local-uri>}{uri.host});
            if(isflagset(25))
            {
                subst_body('/(<di:local-uri>[^<]*)@(.*)</\1@$var(S_pmap_ob_ip_to_apply_ls)</ig');
            }
        }

        if(search_body("<di:remote-uri>[^<]*@.*<\/di:remote-uri>")) # di-remote-uri contains IP/domain
        {
            $avp(S_tmp_gs)=$rb;
            avp_subst("$avp(S_tmp_gs)","/[\r\n]//ig");  # Remove new lines
            $(avp(S_int_ip_gs)[*]) = $null;
            $avp(S_int_ip_gs) = $(avp(S_tmp_gs){s.selectstr,1,<di:remote-uri>}{s.selectstr,0,</di:remote-uri>}{uri.host});
            if ($avp(S_int_ip_gs) != $var(S_pmap_ob_ip_to_apply_ls) && avp_check("$avp(S_int_ip_gs)","ne/$var(S_pmap_destination_ls)/i"))
            {
                if ($avp(S_int_ip_gs) == $var(S_pmap_ob_ip_to_convert_gs))
                {
                    subst_body('/(<di:remote-uri>[^<]*)@(.*)</\1@$var(S_pmap_ob_ip_to_apply_ls)</ig');
                    xlog("L_INFO", "CI=$ci - R40 - Keyset-Xml $avp(S_int_ip_gs) from di:remote-uri replaced to WAN_IP.\n");
                }
                else
                {
                    if ((isflagset(11) || isflagset(15)) && ($avp(C_pmap_port_gi) != $null && $avp(C_pmap_port_gi) != ""))
                       $avp(C_port_gi) = $avp(C_pmap_port_gi);

                    if(($avp(C_port_gi) != $null && $avp(C_port_gi) != ""))
                    {
                        # Replace ip address/port of <di:remote-uri> . Port can be unavailable
                        subst_body('/(<di:remote-uri>[^<]*)@(.*)</\1@$var(S_pmap_ob_ip_to_apply_ls):$avp(C_port_gi)</ig');
                        #format example: <di:remote-uri>sip:554133413001@10.200.102.102</di:remote-uri>
                        xlog("L_INFO", "CI=$ci - R40 - Keyset-Xml $avp(S_int_ip_gs) from di:remote-uri replaced to WAN_IP:$avp(C_port_gi).\n");
                    }
                }
            }
        }
    }
    if (is_gflag("6"))
    {
        xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
        bm_log_timer("route-40");
    }


}

########################################################################
# route NM_PORT_MAPPING_TO_OSV_POST_ROUTE: port mapping: to H8K  - Normal mode, only OSV related header
########################################################################
route[NM_PORT_MAPPING_TO_OSV_POST_ROUTE]
{
    if (is_gflag("6"))
        bm_start_timer("route-41");

    xlog("L_INFO", "CI=$ci - R41 - Entry M=$rm rp=$rp Rp=$Rp flags=$mF to=$to ct=$ct, avp(C_port_gi)=$avp(C_port_gi), gwbehindep=$avp(C_gw_behind_ep_gi), avp(C_req_transp_gs)=$avp(C_req_transp_gs),avp(C_ssp_flags_gi)=$avp(C_ssp_flags_gi),pm_transport=$avp(S_pm_transport_gs)\n");

    # For NG911 Emergency Callback Remove Magic Cookie if present
    $var(S_pos_li) = $(ru{s.strpos,;gr=L6[dG!zt&v});
    if ( $var(S_pos_li) > 0 )
    {
        xlog("L_INFO", "CI=$ci - R41 -ru= $ru Removing Magic Cookie in Request Uri \n");

        ### Save up to just before the Magic Cookie loking for ";gr="
        $var(S_pos_li)    = $(ru{s.strpos,;gr=});
        if ( $var(S_pos_li) > 0 )
        {
            $var(S_ru1_ls) = $(ru{s.substr,0,$var(S_pos_li)});

            ### Save the rest of the line after the  Magic Cookie looking for "urn:"
            $var(S_pos_li)    = $(ru{s.strpos,urn:});
            if  $var(S_pos_li) > 0
            {
               $var(S_pos_li)    = $var(S_pos_li)- 1;
               $var(S_ru2_ls) = $(ru{s.substr,$var(S_pos_li),0});

               ### Put it back together without the Magic Cookie
               $ru  = $var(S_ru1_ls)+"gr="+$var(S_ru2_ls);
            }
        }
    }
    #replace transport
    $var(S_isFqdn_ls) = $rd;
    if(!PROC_IS_PURE_IP)
    {
        # ru is FQDN, keep it if dynamic peer
        if($avp(S_uri_based_route_gb) == 1)
            $var(S_ru_is_fqdn_gb) = 1;
        else
            $var(S_ru_is_fqdn_gb) = 0;
    }
    if ($var(S_pmap_destination_ls) != '' && $var(S_ru_is_fqdn_gb) != 1 && $var(S_NG911_notification_gb) == 0 )
    {
        put_ip_in_paran('$var(S_pmap_destination_ls)','$var(S_pmap_destination_ls)');

       $var(S_sip_uri_flags_ls) = $var(S_sip_uri_tel_flags_ls) + 0x3C;
       xlog("L_INFO", "CI=$ci - R41 - set RU var(S_pmap_destination_ls)=$var(S_pmap_destination_ls), var(C_sys_binding_port_gi)=$var(C_sys_binding_port_gi), var(S_sys_transp_gs)=$var(S_sys_transp_gs), var(S_sip_uri_flags_ls)=$var(S_sip_uri_flags_ls), ru=$ru\n");
       osb_set_uri("$ru","$var(S_pmap_destination_ls),$var(C_sys_binding_port_gi),$(var(S_sys_transp_gs){s.tolower}),","$var(S_sip_uri_flags_ls)");
    }
    if(is_method("OPTIONS"))
    {
        $ru = "sip:" + $avp(C_sys_current_binding_ip_gs) + ":" + $var(C_sys_binding_port_gi) + ";transport=" + $var(S_sys_transp_gs);
        if ($avp(C_ssp_pt_params_list_gs) != $null)
            osb_set_passthrough_params("$ou","$ru","$avp(C_ssp_pt_params_list_gs)");
    }
    xlog("L_INFO", "CI=$ci - R41 - Updated RU to $ru\n");

    if(is_method("REGISTER"))
    {
       if (isflagset(11) && is_gflag("16"))
          xlog("L_INFO", "CI=$ci - R41 - GFLAG 16 set. Not setting the PATH header \n\n");
       else
       {
           if (isflagset(11))
              $var(S_path_port_gi) = $var(C_pmap_ct_port_gi);
           else
              $var(S_path_port_gi) =  $var(C_ep1_core_port_gi);

            $avp(C_tmp2_gs) = "<"+$var(S_sip_suffix_gs)+":"+$var(S_pmap_ob_ip_to_apply_ls)+":"+$var(S_path_port_gi)+";transport="+$(var(S_sys_transp_gs){s.tolower})+";lr>";
            insert_hf("Path: $avp(C_tmp2_gs)\r\n", "To");
        }
    }
    # replace Contact with WAN settings
    if (is_method("PRACK") && is_present_hf("Contact"))
    {
        xlog("L_INFO", "CI=$ci -R41 - M=$rm Code:$rs -PRACK should not contains Contact. Remove it.\n");
        remove_hf("Contact");
    }
    else if(is_present_hf("Contact"))
    {
        $(avp(C_tmp2_gs)[*]) = $null;

        if ($avp(S_req_ct_gs) != $null && $avp(S_req_ct_gs) != '')
            $avp(C_tmp2_gs) = $avp(S_req_ct_gs);
        else {
            if (is_method("REGISTER")) {
                if ($hdr(Contact) == "*")
                   $avp(C_tmp2_gs) = "*";
                else {
                    $avp(C_tmp2_gs) = $(hdr(Contact){nameaddr.nc_uri});## some send contact without bracket
                    $avp(C_tmp2_gs) = "<" + $avp(C_tmp2_gs) + ">;expires=" + $var(S_expire_gi);
                    $var(C_params_ls) = $(hdr(contact){nameaddr.usuffix});
                    if ($(var(C_params_ls){param.exist,+sip.ice}))
                    {
                        xlog("L_INFO", "CI=$ci - R41 - parameter +sip.ice is found and repassed.\n");
                        $avp(C_tmp2_gs) = $avp(C_tmp2_gs) + ";+sip.ice";
                    }
                    if ($(var(C_params_ls){param.exist,+u.unify.com%2Fice-no-updated-offer}))
                    {
                        xlog("L_INFO", "CI=$ci - R41 - parameter +u.unify.com%2Fice-no-updated-offer is found and repassed.\n");
                        $avp(C_tmp2_gs) = $avp(C_tmp2_gs) + ";+u.unify.com%2Fice-no-updated-offer";
                    }
                }
            }
            else
                $avp(C_tmp2_gs) = $hdr(Contact);
        }

        if ($(sel(contact.uri){uri.maddr}{s.len}))
            $avp(C_ssp_rip_gs) = $(sel(contact.uri){uri.maddr});
        else
            $avp(C_ssp_rip_gs) = $sel(contact.uri.host);

        $var(S_port_transp_opt_ls) = "";

        $avp(S_rep_ip_gs) = $avp(C_ssp_rip_gs)+"~"; # Add delimiter irrespective of the next field
        if($(sel(contact.uri.port){s.len}) )
        {
            $var(S_rep_port_gi) = $sel(contact.uri.port);
            $avp(S_rep_ip_gs) = $avp(S_rep_ip_gs)+$var(S_rep_port_gi);
        }

        $avp(S_rep_ip_gs) = $avp(S_rep_ip_gs)+"~"; # Add delimiter irrespective of the next field
        # Set the transport from the Contact (for all: ep1, ep2, sub, etc.). If not found use, ep2 or ep1 transport. Default is set to udp.
        if ($(sel(contact.uri){uri.transport}{s.len}))
            $var(S_rep_transp_gs) = $(sel(contact.uri){uri.transport});
        else
            $var(S_rep_transp_gs) = "udp";

        $avp(S_rep_ip_gs) = $avp(S_rep_ip_gs)+$var(S_rep_transp_gs);

        # From/To transport-port storage
        if ($(sel(from.uri){uri.transport}{s.len}))
            $var(S_port_transp_opt_ls) = $var(S_port_transp_opt_ls) + $(sel(from.uri){uri.transport});
        $var(S_port_transp_opt_ls) = $var(S_port_transp_opt_ls) + "-";
        if($(sel(from.uri.port){s.len}))
            $var(S_port_transp_opt_ls) = $var(S_port_transp_opt_ls) + $sel(from.uri.port);
        $var(S_port_transp_opt_ls) = $var(S_port_transp_opt_ls) + "-";
        if ($(sel(to.uri){uri.transport}{s.len}))
            $var(S_port_transp_opt_ls) = $var(S_port_transp_opt_ls) + $(sel(to.uri){uri.transport});
        $var(S_port_transp_opt_ls) = $var(S_port_transp_opt_ls) + "-";
        if($(sel(to.uri.port){s.len}))
            $var(S_port_transp_opt_ls) = $var(S_port_transp_opt_ls) + $sel(to.uri.port);
        $avp(S_rep_ip_gs) = $avp(S_rep_ip_gs) + "~" + $var(S_port_transp_opt_ls);

        xlog("L_INFO", "CI=$ci -R41 - M=$rm Code:$rs - Record-Route header: avp(C_ssp_rip_gs)=$avp(C_ssp_rip_gs), avp(S_rep_ip_gs)=$avp(S_rep_ip_gs)\n");

        if ($avp(C_tmp2_gs) != $null && $avp(C_tmp2_gs) != '')
        {
            put_ip_in_paran('$var(S_use_ip_ls)','$var(S_use_ip_ls)');
            ####  always remove the maddr   ###############
            if ($avp(C_tmp2_gs) != "*")
            {
                if ((!isflagset(11) && !isflagset(15)) || # Not a registered subscrtiber
                    (isflagset(11) && is_gflag("16")))   # Direct subscriber with dynamic port opened on core side
                {
                    $var(S_sip_uri_flags_ls) = $var(S_sip_uri_tel_flags_ls) + 0x3C;
                    osb_set_uri("$avp(C_tmp2_gs)","$var(S_use_ip_ls),$var(S_use_port_li),$(var(S_sys_transp_gs){s.tolower}),","$var(S_sip_uri_flags_ls)");
                }
                else
                {
                    $var(S_sip_uri_flags_ls) = $var(S_sip_uri_tel_flags_ls) + 0x2C;
                    osb_set_uri("$avp(C_tmp2_gs)","$var(S_use_ip_ls),$var(S_use_port_li),","$var(S_sip_uri_flags_ls)");
                }
            }

            if ($avp(C_ssp_pt_params_list_gs) != $null)
                osb_set_passthrough_params("$hdr(Contact)","$avp(C_tmp2_gs)","$avp(C_ssp_pt_params_list_gs)");

            if($var(S_NG911_notification_gb) == 0)
            {

            subst('/^Contact:.*$/Contact: $avp(C_tmp2_gs)\r/ig');
            }

            $(avp(S_req_ct_gs)[*]) = $null;
        }
    }

    # Referred-By Header transformation
    if (is_present_hf("Referred-By"))
    {

        if(!($avp(S_hdr_refby2_gs) != $null && $avp(S_hdr_refby2_gs) != ""))
            $(avp(S_hdr_refby2_gs)[*]) = $hdr(Referred-By);
        if (!isflagset(11) && !isflagset(15) && $(avp(S_hdr_refby2_gs){nameaddr.nc_uri}{uri.host}) != $var(S_pmap_ob_ip_to_convert_gs)) {
            $var(S_replace_ip_gs) = $var(S_pmap_ob_ip_to_apply_ls);
            $var(S_replace_port_gi) = $var(S_use_port_li);
        }
        else {
            $var(S_replace_ip_gs) = $var(S_pmap_destination_ls);
            $var(S_replace_port_gi) = $var(C_sys_binding_port_gi);
        }
        ## dropping maddr since OSV does not like maddr to point to OSV
        xlog("L_INFO", "CI=$ci - R41 - var(S_replace_ip_gs)=$var(S_replace_ip_gs), var(S_replace_port_gi)=$var(S_replace_port_gi),var(S_pmap_ob_ip_to_apply_ls)=$var(S_pmap_ob_ip_to_apply_ls)\n");

        $var(S_sip_uri_flags_ls) = $var(S_sip_uri_tel_flags_ls) + 0x3C;
        osb_set_uri("$avp(S_hdr_refby2_gs)","$var(S_replace_ip_gs),$var(S_replace_port_gi),$(var(S_sys_transp_gs){s.tolower}),","$var(S_sip_uri_flags_ls)");

        subst('/^Referred-By:.*$/Referred-By: $avp(S_hdr_refby2_gs)\r/ig');
    }

    if(is_present_hf("Refer-To") )
    {
        $avp(S_hdr_refto_gs)=$hdr(Refer-To);
        if (!isflagset(11) && !isflagset(15) && $(rt{uri.host}) != $var(S_pmap_ob_ip_to_convert_gs)) {
            $var(S_replace_ip_gs) = $var(S_pmap_ob_ip_to_apply_ls);
            $var(S_replace_port_gi) = $var(S_use_port_li);
        }
        else {
            $var(S_replace_ip_gs) = $var(S_pmap_destination_ls);
            $var(S_replace_port_gi) = $var(C_sys_binding_port_gi);
        }

        ## dropping maddr since OSV does not like maddr to point to OSV
        $var(S_sip_uri_flags_ls) = $var(S_sip_uri_tel_flags_ls) + 0x3C;
        osb_set_uri("$avp(S_hdr_refto_gs)","$var(S_replace_ip_gs),$var(S_replace_port_gi),$(var(S_sys_transp_gs){s.tolower}),","$var(S_sip_uri_flags_ls)");

        if ($avp(S_hdr_refto_gs) == $(avp(S_hdr_refto_gs){nameaddr.uri}))
            $avp(S_hdr_refto_gs) = "<" + $avp(S_hdr_refto_gs) + ">";  # Add < and > if not available - OSV can't parse the uri without it

        subst('/^Refer-To:.*$/Refer-To: $avp(S_hdr_refto_gs)\r/ig');
    }
    $avp(S_req_fromh_gs) = $hdr(From);
    $var(S_pmap_rcv_from_ls) = $avp(S_req_fromh_gs);

    if(isflagset(16) && ($avp(S_e911_send_lin_instead_cpn_ls) == 1 && $avp(S_e911_lin_gs) != $null  &&  $avp(S_e911_lin_gs) !="")){
       $avp(S_hdr_from_user_gs) = $avp(S_e911_lin_gs);
       xlog("L_INFO", "CI=$ci - R41 - avp(S_hdr_from_user_gs)=$avp(S_hdr_from_user_gs), fU=$fU,avp(S_hdr_to_user_gs)=$avp(S_hdr_to_user_gs), tU=$tU\n");
    }
    $var(S_isFqdn_ls) = $fd;
    if ((from_uri != myself) && !PROC_IS_PURE_IP)
    {
        $var(S_hdr_from_is_fqdn_gb)=1;
        xlog("L_INFO", "CI=$ci - R41 - fqdn in From \n");
    }
    else
       $var(S_hdr_from_is_fqdn_gb)=0;
       $var(C_new_fromh_hdr_gs) = $hdr(From);
    ## check the 1st bit in the $avp(C_ssp_flags_gi)
    ### need to initialize the avp before avp_check
    $var(C_ssp_flags_gi) = $(avp(C_ssp_flags_gi)[0]{s.int});
    $(avp(C_ssp_flags_gi)[*]) = $null;
    $avp(C_ssp_flags_gi) = $var(C_ssp_flags_gi);

    if( $var(S_hdr_from_is_fqdn_gb) !=1 && (is_method("REGISTER")|| is_method("NOTIFY")))
    {
       # For REGISTER everything must point to H8K
       $var(S_sip_uri_flags_ls) = $var(S_sip_uri_tel_flags_ls) + 0xC;
       osb_set_uri("$var(C_new_fromh_hdr_gs)","$var(S_pmap_destination_ls),","$var(S_sip_uri_flags_ls)");
       subst('/^From:.*$/From: $var(C_new_fromh_hdr_gs)\r/ig');
       # subst('/(From:.*@)[^>;]+(.+)/\1$var(S_pmap_destination_ls)\2/i');
    }
    else if($var(S_hdr_from_is_fqdn_gb) !=1)
    {
        if (!is_gflag("2") && !(avp_check("$avp(C_ssp_flags_gi)", "and/i:0x02")))
        {
            $var(S_hdr_from_domain_buf_gs) = $var(S_viah_from_portmap_ls);
            if ($avp(S_hdr_from_user_gs) != $null && $avp(S_hdr_from_user_gs) != '' && $avp(S_hdr_from_user_gs) != $fU)
            {
               if($(avp(S_hdr_from_user_gs){s.tolower}) == "anonymous")
                   $var(S_hdr_from_domain_buf_gs) = "anonymous.invalid";

               if ($var(S_g_rem_from_disp_name_gs) == 1)
                   $var(C_new_fromh_hdr_gs) = $(var(C_new_fromh_hdr_gs){nameaddr.clrname});

               $var(S_sip_uri_flags_ls) = $var(S_sip_uri_tel_flags_ls) + 0xE;
               osb_set_uri("$var(C_new_fromh_hdr_gs)","$avp(S_hdr_from_user_gs),$var(S_hdr_from_domain_buf_gs),","$var(S_sip_uri_flags_ls)");

               if ($avp(C_ssp_pt_params_list_gs) != $null)
                   osb_set_passthrough_params("$hdr(From)","$var(C_new_fromh_hdr_gs)","$avp(C_ssp_pt_params_list_gs)");
               subst('/^From:.*$/From: $var(C_new_fromh_hdr_gs)\r/ig');
               avp_subst("$avp(S_req_fromh_gs)", "/(.*sip[s]?:).*@/\1$avp(S_hdr_from_user_gs)@/i");

               $(avp(S_hdr_from_user_gs)[*]) = $null; # Set avp to $null, so route 28 won't use it to header subst.
            }
            else
            {
               if($(fu{uri.host}{s.tolower}) == "anonymous.invalid")
                  $var(S_hdr_from_domain_buf_gs) = $fd;

               if ($var(S_g_rem_from_disp_name_gs) == 1)
                   $var(C_new_fromh_hdr_gs) = $(var(C_new_fromh_hdr_gs){nameaddr.clrname});

               $var(S_sip_uri_flags_ls) = $var(S_sip_uri_tel_flags_ls) + 0xC;
               osb_set_uri("$var(C_new_fromh_hdr_gs)","$var(S_hdr_from_domain_buf_gs),","$var(S_sip_uri_flags_ls)");

               if ($avp(C_ssp_pt_params_list_gs) != $null)
                   osb_set_passthrough_params("$hdr(From)","$var(C_new_fromh_hdr_gs)","$avp(C_ssp_pt_params_list_gs)");
               subst('/^From:.*$/From: $var(C_new_fromh_hdr_gs)\r/ig');
            }
        }
        else
        {
            xlog("L_INFO", "CI=$ci - R41 - From URI S_g_rem_from_disp_name_gs = $var(S_hdr_from_domain_buf_gs)\n");
            $var(S_reg_exp_field_name_gs) ="From";

            if ($avp(S_hdr_from_user_gs) != $null && $avp(S_hdr_from_user_gs) != '')
            {
                $var(S_reg_exp_user_gs) = $avp(S_hdr_from_user_gs);

                if($(avp(S_hdr_from_user_gs){s.tolower}) == "anonymous")
                      $var(S_reg_exp_dom_gs) = "anonymous.invalid";
            }
            else if ($fU != $null)
               $var(S_reg_exp_user_gs) = $fU;
            else
               $var(S_reg_exp_user_gs) = "";

            $(avp(C_tmp2_gs)[*])=$null;
            $var(S_network_type_gi) = 1;#1="access" and 0= "core"
            if (osb_memdb_nl_select("network_id,*|$var(S_network_type_gi)|*|*|*|$fd|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1", "||$avp(C_tmp2_gs)|||||||||||||||||") != 1)
                osb_memdb_nl_select("network_id,*|$var(S_network_type_gi)|*|*|*|*|*|*|*|*|*|*|$fd|*|*|*|*|*|*|*,1", "||$avp(C_tmp2_gs)|||||||||||||||||");
            if($avp(C_tmp2_gs) != $null)
            {
               if($(fu{uri.host}{s.tolower}) != "anonymous.invalid")
                   $var(S_reg_exp_dom_gs)    = $var(S_pmap_destination_ls);
               $var(S_reg_exp_transp_gs) = $avp(C_sys_current_binding_transp_gs);
               $var(S_reg_exp_port_gs)      = $var(C_sys_binding_port_gi);
            }
            else
            {
               if($(fu{uri.host}{s.tolower}) != "anonymous.invalid")
                   $var(S_reg_exp_dom_gs)    = $var(S_use_core_ipaddr_ls);
               $var(S_reg_exp_transp_gs) = $avp(C_sys_current_binding_transp_gs);
               $var(S_reg_exp_port_gs)      = $var(S_use_core_port_li);
            }
            put_ip_in_paran('$var(S_reg_exp_dom_gs)', '$var(S_reg_exp_dom_gs)');

            $avp(C_tmp2_gs) = $hdr(From);
            $var(S_sip_uri_flags_ls) = $var(S_sip_uri_tel_flags_ls) + 0x1E;
            osb_set_uri("$avp(C_tmp2_gs)","$var(S_reg_exp_user_gs),$var(S_reg_exp_dom_gs),$var(S_reg_exp_port_gs),$var(S_reg_exp_transp_gs)","$var(S_sip_uri_flags_ls)");
            subst('/^From:.*/From: $avp(C_tmp2_gs)\r/i');
            xlog("L_INFO", "CI=$ci - R41 - From  changed avp(C_tmp2_gs)=$avp(C_tmp2_gs)\n");
            $var(S_hdr_from_domain_buf_gs) = $var(S_viah_from_portmap_ls);
        }
    }
    else # TODO: Not resetting the From header cause invalid message to SSM ?
    {
        if ($avp(S_hdr_from_user_gs) != $null && $avp(S_hdr_from_user_gs) != $fU)
        {
            xlog("L_INFO", "CI=$ci - R41 - 11 FQDN avp(S_req_fromh_gs)=$avp(S_req_fromh_gs), fU=$fU,avp(S_hdr_from_user_gs)=$avp(S_hdr_from_user_gs) C_core_port_gi=$var(C_core_port_gi)\n");
            $var(S_sip_uri_flags_ls) = $var(S_sip_uri_tel_flags_ls) + 0x0A;
            osb_set_uri("$avp(S_req_fromh_gs)","$avp(S_hdr_from_user_gs),$var(C_core_port_gi)","$var(S_sip_uri_flags_ls)");
        }
        else if (!is_gflag("2") && !(avp_check("$avp(C_ssp_flags_gi)", "and/i:0x02")))
        {
            $var(S_sip_uri_flags_ls) = $var(S_sip_uri_tel_flags_ls) + 0x08;
            osb_set_uri("$avp(S_req_fromh_gs)","$var(C_core_port_gi)","$var(S_sip_uri_flags_ls)");
        }

        $var(C_new_fromh_hdr_gs) = $avp(S_req_fromh_gs);
        if ($var(S_g_rem_from_disp_name_gs) == 1)
            $var(C_new_fromh_hdr_gs) = $(var(C_new_fromh_hdr_gs){nameaddr.clrname});

       subst('/^From:.*/From: $var(C_new_fromh_hdr_gs)\r/i');

       xlog("L_INFO", "CI=$ci - R41 - avp(S_is_fqdn_gs)=$avp(S_is_fqdn_gs), var(C_new_fromh_hdr_gs)=$var(C_new_fromh_hdr_gs)\n");
    }
    $avp(S_req_fromh_gs) = $var(S_pmap_rcv_from_ls);
    xlog("L_INFO", "CI=$ci - R41 - rcv_from restored, avp(S_hdr_from_user_gs)=$avp(S_hdr_from_user_gs), avp(S_req_fromh_gs)=$avp(S_req_fromh_gs)\n");

    $avp(S_req_toh_gs) = $hdr(To);
    $var(S_pmap_rcv_to_ls) = $avp(S_req_toh_gs) ;

    # For NG911 Emergency Callback Remove Magic Cookie from To Header
    $var(S_pos_li) = $(avp(S_req_toh_gs){s.strpos,;gr=L6[dG!zt&v});
    if ( $var(S_pos_li) > 0 )
    {

        xlog("L_INFO", "CI=$ci - R41 - avp(S_req_toh_gs)= $avp(S_req_toh_gs) Removing Magic Cookie in To Header \n");

        ### Save up to just before the Magic Cookie loking for ";gr="
        $var(S_pos_li)    = $(avp(S_req_toh_gs){s.strpos,;gr=});
        if ( $var(S_pos_li) > 0 )
        {
            $var(S_rcvtoh1_ls) = $(avp(S_req_toh_gs){s.substr,0,$var(S_pos_li)});

            ### Save the rest of the line after the  Magic Cookie looking for "urn:"
            $var(S_pos_li)    = $(avp(S_req_toh_gs){s.strpos,urn:});
            if  $var(S_pos_li) > 0
            {
                $var(S_pos_li)    = $var(S_pos_li)- 1;
                $var(S_rcvtoh2_ls) = $(avp(S_req_toh_gs){s.substr,$var(S_pos_li),0});

                ### Put it back together without the Magic Cookie
                $avp(S_req_toh_gs) = $var(S_rcvtoh1_ls)+"gr="+$var(S_rcvtoh2_ls);
            }
        }
    }
    $var(S_isFqdn_ls) = $td;
    if (( to_uri != myself ) && !PROC_IS_PURE_IP)
    {
        $var(S_toh_is_fqdn_gb)=1;
        xlog("L_INFO", "CI=$ci - R41 - fqdn in To \n");
    }
    else
       $var(S_toh_is_fqdn_gb)=0;

    if($var(S_toh_is_fqdn_gb) !=1)
    {
        # For REGISTER, everything must point to OSV
        if ($avp(S_hdr_to_dom_gs) == $null || $avp(S_hdr_to_dom_gs) == '' || is_method("REGISTER"))
            $avp(S_hdr_to_dom_gs) = $var(S_pmap_destination_ls);

        xlog("L_INFO", "CI=$ci - R41 - avp(S_hdr_to_dom_gs)=$avp(S_hdr_to_dom_gs),avp(S_hdr_to_user_gs)=$avp(S_hdr_to_user_gs)\n");
        # For REGISTER, everything must point to OSV

        ### need to initialize the avp before avp_check
        $var(C_ssp_flags_gi) = $(avp(C_ssp_flags_gi)[0]{s.int});
        $(avp(C_ssp_flags_gi)[*]) = $null;
        $avp(C_ssp_flags_gi) = $var(C_ssp_flags_gi);

        if (is_method("REGISTER") || (!(is_gflag("2") && (avp_check("$avp(C_ssp_flags_gi)", "and/i:0x02")))))
        {
            $var(S_sip_uri_flags_ls) = $var(S_sip_uri_tel_flags_ls) + 0x1C;
            osb_update_uri("$avp(S_req_toh_gs)","$avp(S_hdr_to_dom_gs),$var(C_sys_binding_port_gi),$(var(S_sys_transp_gs){s.tolower})","$var(S_sip_uri_flags_ls)");
            $(avp(S_hdr_to_dom_gs)[*]) = $null;
        }
        else
        {
            $var(S_reg_exp_field_name_gs) ="To";

            if ($avp(S_hdr_to_user_gs) != $null && $avp(S_hdr_to_user_gs) != '')
               $var(S_reg_exp_user_gs) = $avp(S_hdr_to_user_gs);
            else if ($tU != $null)
               $var(S_reg_exp_user_gs) = $tU;
            else
               $var(S_reg_exp_user_gs) = "";

            $(avp(C_tmp2_gs)[*])=$null;
            $var(S_network_type_gi) = 1;#1="access" and 0= "core"
            if (osb_memdb_nl_select("network_id,*|$var(S_network_type_gi)|*|*|*|$fd|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1", "||$avp(C_tmp2_gs)|||||||||||||||||") != 1)
                osb_memdb_nl_select("network_id,*|$var(S_network_type_gi)|*|*|*|*|*|*|*|*|*|*|$fd|*|*|*|*|*|*|*,1", "||$avp(C_tmp2_gs)|||||||||||||||||");
            if($avp(C_tmp2_gs) != $null)
            {
               $var(S_reg_exp_dom_gs)    = $var(S_pmap_destination_ls);
               $var(S_reg_exp_transp_gs) = $avp(C_sys_current_binding_transp_gs);
               $var(S_reg_exp_port_gs)      = $var(C_sys_binding_port_gi);
            }
            else
            {
               $var(S_reg_exp_dom_gs)    = $var(S_use_core_ipaddr_ls);
               $var(S_reg_exp_transp_gs) = $avp(C_sys_current_binding_transp_gs);
               $var(S_reg_exp_port_gs)      = $var(S_use_core_port_li);
            }
            put_ip_in_paran('$var(S_reg_exp_dom_gs)', '$var(S_reg_exp_dom_gs)');

            $avp(C_tmp2_gs) = $hdr(To);
            $var(S_sip_uri_flags_ls) = $var(S_sip_uri_tel_flags_ls) + 0x1E;
            osb_update_uri("$avp(C_tmp2_gs)","$var(S_reg_exp_user_gs),$var(S_reg_exp_dom_gs),$var(S_reg_exp_port_gs),$var(S_reg_exp_transp_gs)","$var(S_sip_uri_flags_ls)");
            $avp(S_req_toh_gs) = $avp(C_tmp2_gs);
            xlog("L_INFO", "CI=$ci - R41 - To  changed avp(C_tmp2_gs)=$avp(C_tmp2_gs)\n");
        }
        $(avp(S_hdr_to_dom_gs)[*]) = $null;
    }
    else # TODO: Not resetting the To header cause invalid message to SSM ?
    {
        $var(S_sip_uri_flags_ls) = $var(S_sip_uri_tel_flags_ls) + 0x18;
        osb_update_uri("$avp(S_req_toh_gs)","$var(C_sys_binding_port_gi),$(var(S_sys_transp_gs){s.tolower})",0x18);

        xlog("L_INFO", "CI=$ci - R41 - To not changed avp(S_is_fqdn_gs)=$avp(S_is_fqdn_gs)\n");
    }
    subst('/^To:.*/To: $avp(S_req_toh_gs)\r/i');
    $avp(S_req_toh_gs) = $var(S_pmap_rcv_to_ls) ;
    xlog("L_INFO", "CI=$ci - R41 - S_req_toh_gs restored, avp(S_req_toh_gs)=$avp(S_req_toh_gs)\n");

    xlog("L_INFO", "CI=$ci - R41 ***** var(S_x_call_type_alpha_uri_gs) = $var(S_x_call_type_alpha_uri_gs) ");
    if($var(S_x_call_type_alpha_uri_gs)!= '')
       insert_hf("X-Call-Type-Alpha: restricted  $var(S_x_call_type_alpha_uri_gs)\r\n", "Call-ID");

    # replace Diversion
    if(is_present_hf("Diversion"))
    {
        $var(S_hdr_div_domain_gs) = $var(S_ip_port_gs);
        $avp(C_ssp_div_user_gs) = $null;

        route(SETUP_DIVERSION_ROUTE);
    }
    if (is_gflag("6"))
    {
        xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
        bm_log_timer("route-41");
    }

}



########################################################################
# SIP_MANIPULATION_ROUTE: Common Route for SIP Manipulation
########################################################################
route[SIP_MANIPULATION_ROUTE]
{
    if (is_gflag("6"))
       bm_start_timer("route-27");

    xlog("L_INFO", "CI=$ci - R27 - Entry M=$rm RURI=$ru  avp(C_ssp_name_gs)=$avp(C_ssp_name_gs),var(S_man_sip_gb)=$var(S_man_sip_gb)\n\n");
    xlog("L_INFO", "CI=$ci - R27 - Entry M=$rm avp(S_hdr_from_user_gs)=$avp(S_hdr_from_user_gs)\n\n");
    xlog("L_INFO", "CI=$ci - R27 - Entry M=$rm avp(C_ssp_ppi_user_gs)=$avp(C_ssp_ppi_user_gs)\n\n");
    xlog("L_INFO", "CI=$ci - R27 - Entry M=$rm avp(C_ssp_pai_user_gs)=$avp(C_ssp_pai_user_gs)\n\n");
    xlog("L_INFO", "CI=$ci - R27 - Entry M=$rm avp(C_ssp_div_user_gs)=$avp(C_ssp_div_user_gs)\n\n");

    if($var(S_man_sip_gb))
    {
        if (osb_sip_manipulation("$rU",0,"$var(S_man_sip_gb)","$avp(C_ssp_name_gs)") > 0) # R-URI - All
        {
            xlog("L_INFO", "CI=$ci - R27 - Manipulated R-URI: $rU\n");
            $var(S_ruri_manipulated_gi) = 1;
        }

        if (is_present_hf("P-Asserted-Identity") &&
            osb_sip_manipulation("$avp(C_ssp_pai_user_gs)",5,"$var(S_man_type_gi)","$avp(C_ssp_name_gs)") > 0) # PAI or From (PAI)
        {
            xlog("L_INFO", "CI=$ci - R27 - Manipulated P-Asserted-Identity (not From): $avp(C_ssp_pai_user_gs)\n");
            $var(S_pai_manipulated_gi) = 1;
        }

        if ($var(S_pai_manipulated_gi) != 1 &&
            osb_sip_manipulation("$avp(S_hdr_from_user_gs)",5,"$var(S_man_type_gi)","$avp(C_ssp_name_gs)") > 0) # PAI or From (From)
        {
            xlog("L_INFO", "CI=$ci - R27 - Manipulated From (not PAI): $avp(S_hdr_from_user_gs)\n");
            $var(S_from_manipulated_gi) = 1;
        }

        if ($var(S_from_manipulated_gi) != 1 &&
            osb_sip_manipulation("$avp(S_hdr_from_user_gs)",1,"$var(S_man_type_gi)","$avp(C_ssp_name_gs)") > 0) # From
        {
            xlog("L_INFO", "CI=$ci - R27 - Manipulated From: $avp(S_hdr_from_user_gs)\n");
            $var(S_from_manipulated_gi) = 1;
        }
        if (osb_sip_manipulation("$avp(C_ssp_ppi_user_gs)",2,"$var(S_man_type_gi)","$avp(C_ssp_name_gs)") > 0) # PPI
        {
            xlog("L_INFO", "CI=$ci - R27 - Manipulated P-Preferred-Identity: $avp(C_ssp_ppi_user_gs)\n");
            $var(S_ppi_manipulated_gi) = 1;
        }
        if ($var(S_pai_manipulated_gi) != 1 &&
            osb_sip_manipulation("$avp(C_ssp_pai_user_gs)",3,"$var(S_man_type_gi)","$avp(C_ssp_name_gs)") > 0) # PAI
        {
            xlog("L_INFO", "CI=$ci - R27 - Manipulated P-Asserted-Identity: $avp(C_ssp_pai_user_gs)\n");
            $var(S_pai_manipulated_gi) = 1;
        }
        if (osb_sip_manipulation("$avp(C_ssp_div_user_gs)",4,"$var(S_man_type_gi)","$avp(C_ssp_name_gs)") > 0) # Diversion
        {
            xlog("L_INFO", "CI=$ci - R27 - Manipulated Diversion: $avp(C_ssp_div_user_gs)\n");
            $var(S_div_manipulated_gi) = 1;
        }

        $var(S_man_sip_gb) =0;
        $var(S_man_type_gi) = 3; # All (default)
    }
    else
       xlog("L_INFO", "CI=$ci - R27 - No Manipulation Done M=$rm RURI=$ru CI=$ci\n\n");

    if (is_gflag("6"))
    {
        xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
        bm_log_timer("route-7");
    }
}

########################################################################
# MANIPULATE_VIA_ROUTE: Route for via manipulation
########################################################################
route[MANIPULATE_VIA_ROUTE]
{
    if (is_gflag("6"))
       bm_start_timer("route-7");

    xlog("L_INFO", "CI=$ci - R7- transp= $proto; avp(C_gw_behind_ep_gi)=$avp(C_gw_behind_ep_gi),avp(C_pmap_port_gi)=$avp(C_pmap_port_gi),avp(C_sys_current_binding_transp_gs)=$avp(C_sys_current_binding_transp_gs) avp(C_gw_core_ip_gs)=$avp(C_gw_core_ip_gs),avp(C_gw_core_port_gi)=$avp(C_gw_core_port_gi),avp(C_gw_transp_gs)=$avp(C_gw_transp_gs),var(C_ep2_transp_gs)=$var(C_ep2_transp_gs),var(C_ep2_core_ip_gs)=$var(C_ep2_core_ip_gs),var(C_ep1_transp_gs)=$var(C_ep1_transp_gs)\n");

    if ($ru==$null)
    {
            xlog("L_INFO", "CI=$ci - R7 - Restore Original Via in the response source is=$var(C_si_var_gs), Via=$(avp(S_req_via_gs)[*])\n");
               #restore original Via Header
               if(($avp(S_req_via_gs) != $null && $avp(S_req_via_gs) != ""))
               {
                   $var(S_via_count_gi) = 0;
                   $var(C_new_via_hdr_gs) = "";
                   while($(avp(S_req_via_gs)[$var(S_via_count_gi)]) != $null)
                   {
                       $var(S_via_count_gi) = $var(S_via_count_gi) + 1;
                   }
                   $var(S_via_count_gi) = $var(S_via_count_gi) - 1;
                   # avp_subst("$(avp(S_req_via_gs)[$var(S_via_count_gi)])/$avp(S_tmp_gs)","/(.*SIP\/2.0\/)+(.+) (.*)/\2/i");
                   # $var(S_transport_gs)=$(avp(S_tmp_gs){s.tolower});

                   while($var(S_via_count_gi) >= 0)
                   {
                       insert_hf("$(avp(S_req_via_gs)[$var(S_via_count_gi)])\r\n","Via");

                       $var(S_via_count_gi) = $var(S_via_count_gi) - 1;
                   }
                   # remove original via(s)
                   remove_hf("Via");

               }
               else
               {
                   xlog("L_INFO", "CI=$ci - R7 -  Reply Route Via Manipulation failure - Via header not previously stored !\n");
               }

        return;
    }

    if(isflagset(10) && $var(C_ep1_type_gi)==6)
    {
        $var(C_port_gi) = "";
        $var(S_ip_gs) = $var(S_local_ip_gs);
        xlog("L_INFO", "CI=$ci - R7  - mesage to gtc, using var(S_ip_gs)=$var(S_ip_gs),var(C_port_gi)=$var(C_port_gi)\n");
        $avp(C_tmp2_gs) = $(avp(S_req_via_gs)[0]) ;
        avp_subst("$avp(C_tmp2_gs)","/(.*SIP\/[^ ]*) [^:\n,]*/\1 $var(S_ip_gs)/i");
        remove_hf("Via");
        insert_hf("$avp(C_tmp2_gs)\r\n","Via");
        if (is_gflag("6"))
        {
           xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
           bm_log_timer("route-7");
        }
        return;
    }

    if (isflagset(10))
    {
         xlog("L_INFO", "CI=$ci - R7 -  Request from OSV, remove Via header !\n");
         # remove original via(s)
         remove_hf("Via");

          if (is_gflag("6"))
          {
             xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
             bm_log_timer("route-7");
          }

         return;
    }

    if ($var(C_call_msg_gb) == 1 && $var(C_ssm_msg_gb) == 0)
    {
         xlog("L_INFO", "CI=$ci - R7 -  Request to SSM, keep Via header to preserve rport changes!\n");

          if (is_gflag("6"))
          {
             xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
             bm_log_timer("route-7");
          }

         return;
    }

    xlog("L_INFO", "CI=$ci - R7 -  Request to OSV, Update Via header !\n");

    #read & store rcv_via into a new variable, all via by comma separated
    $avp(C_tmp2_gs) = "";
    $var(S_via_count_gi) = 0;
    $var(C_new_via_hdr_gs) = "";

    $var(C_port_gi) = $avp(C_pmap_port_gi);  # IF PM IS NOT FOUND THEM pm_port is ep1_core_port

    $var(S_ip_gs) = "";

    $var(S_via_param_ls) = "";
    if(isflagset(11))
    {
        #this is subscriber, change to csbc and pm port
        $var(S_ip_gs) = $var(S_lanip_4_6_gs);
        ### FRN8163: top most via has to be manipulated    #####
        ## if $avp(C_port_mtls_gs) set then add mtls port to top most VIA

        if ($var(C_ssm_msg_gb) == 1)
        {
            $var(S_tmp_port_gi) = $avp(C_advertised_port_gi);
            $var(S_tmp_transport_gi) = $var(C_hdr_rcv_transp_gs);
        }
        else
        {
            $var(S_tmp_port_gi) = $Rp;
            $var(S_tmp_transport_gi) = $proto;
        }

        if($avp(C_port_mtls_gs) != $null && $var(S_tmp_port_gi) == $avp(C_port_mtls_gs) && $var(S_tmp_transport_gi) == "tls")
        {
           xlog("L_INFO", "CI=$ci - R7  - FRN8163: avp(C_port_mtls_gs)= $avp(C_port_mtls_gs) should be added to VIA\n");
           $var(S_via_param_ls) = ";x-oscar-transport=mtls";
        }
    }
    else if( $avp(C_gw_behind_ep_gi) == 2) {
        # Check outbound proxy. As it uses the same core port for SSP and proxy, and for OSV only one
        # endpoint is configured, the second via (duplicated) shouldn't be included
        if ($var(C_ep1_type_gi) == 4 && $var(C_ep2_type_gi) == 5 && $var(C_ep2_core_port_gi) == $var(C_sys_osv_port_gi))
        {
            xlog("L_INFO", "CI=$ci - R7  - Detected SBC outbound proxy. Disable second via.\n");
        }
        else
        {
            $var(C_port_gi) = $var(C_ep2_core_port_gi);
            $var(S_ip_gs) = $var(C_ep2_core_ip_gs);
            put_ip_in_paran('$var(S_ip_gs)', '$var(S_ip_gs)');
        }
    }
    else if(isflagset(15) || is_method("OPTIONS")) {
        $var(S_ip_gs) = $var(C_ep1_core_ip_gs);
        put_ip_in_paran('$var(S_ip_gs)', '$var(S_ip_gs)');
    }



    if ($var(S_ip_gs) != "") {
        $avp(C_tmp2_gs) = $(avp(S_req_via_gs)[$var(S_via_count_gi)]) ;
        $var(S_hdr_via_transp_gs) = $(avp(C_sys_current_binding_transp_gs){s.toupper});

        avp_subst("$avp(C_tmp2_gs)","/(.*SIP\/2.0\/)+(.+) (.*)/\1$var(S_hdr_via_transp_gs) \3/i");

        if (is_method("OPTIONS") && !isflagset(11) && !isflagset(15) && $avp(C_gw_behind_ep_gi) == 0 && !is_ipv6('$var(C_ep1_rm_ip_gs)')) # MUST BE OPTIONS from Direct Endpoint
            avp_subst("$avp(C_tmp2_gs)","/(.*SIP\/[^ ]*) [^:\n,]*/\1 $var(S_ip_gs)/i");
        else
            avp_subst("$avp(C_tmp2_gs)","/(.*SIP\/[^ ]*) [^;\n,]*/\1 $var(S_ip_gs):$var(C_port_gi)$var(S_via_param_ls)/i");

        xlog("L_INFO", "CI=$ci - R7  - manpltd Received Via $avp(C_tmp2_gs)\n");

        #now insert this
        # remove original via(s)
        remove_hf("Via");
        insert_hf("$avp(C_tmp2_gs)\r\n","Via");
    }
    else {
        # remove original via(s)
        remove_hf("Via");
    }

    if (is_gflag("6"))
    {
        xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
        bm_log_timer("route-7");
    }
}

########################################################################
# SETUP_RR_ROUTE: Route to setup RR
########################################################################
route[SETUP_RR_ROUTE]
{
    xlog("L_INFO", "CI=$ci - R11 - Entry M=$rm avp(C_wan_ip_gs)=$avp(C_wan_ip_gs), avp(C_core_ip_gs)=$avp(C_core_ip_gs), var(S_pmap_ob_ip_to_apply_ls)=$var(S_pmap_ob_ip_to_apply_ls) rp=$rp Rp=$Rp flags=$mF to=$to ct=$ct\n");
}

########################################################################
# SETUP_DIVERSION_ROUTE: Route to Manipulation multiple or single Diversion Header
########################################################################
route[SETUP_DIVERSION_ROUTE]
{
    if (is_gflag("6"))
       bm_start_timer("route-14");

        xlog("L_INFO", "CI=$ci - R14 - var(S_ru_type_ls)=$var(S_ru_type_ls),avp(C_ssp_div_user_gs)=$avp(C_ssp_div_user_gs),var(S_hdr_div_domain_gs)=$var(S_hdr_div_domain_gs)\n");

        # replace Diversion
        if(is_present_hf("Diversion"))
        {
            $var(C_new_div_hdr_gs) = $(hdr(Diversion)[*]); # Everything is now comma separated
            $var(S_man_div_count_li) = 0;
            $var(S_man_hdr_div_ls) = "";

            while ($(var(C_new_div_hdr_gs){s.selhdrlst,$var(S_man_div_count_li)}{s.len}))
            {
                $var(S_div_uri_ls) = $(var(C_new_div_hdr_gs){s.selhdrlst,$var(S_man_div_count_li)});
                if ($var(S_man_div_count_li) == 0)
                    osb_update_uri("$var(S_div_uri_ls)","$avp(C_ssp_div_user_gs)",0x2);   # Update username if available
                osb_set_uri("$var(S_div_uri_ls)","$var(S_hdr_div_domain_gs),,",0x1C);  # Replace domain removing Port and transport

                if ($(var(S_man_hdr_div_ls){s.len}))
                   $var(S_man_hdr_div_ls) = $var(S_man_hdr_div_ls) + "," + $var(S_div_uri_ls);
                else
                   $var(S_man_hdr_div_ls) = $var(S_div_uri_ls);

                $var(S_man_div_count_li) = $var(S_man_div_count_li) + 1;
            }

            xlog("L_INFO", "CI=$ci - R14 - Adding Diversion Header using var(S_man_hdr_div_ls)=$var(S_man_hdr_div_ls)\n");

            insert_hf("Diversion: $var(S_man_hdr_div_ls)\r\n", "Diversion");
            remove_hf("Diversion");
        }

    if (is_gflag("6"))
    {
        xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
        bm_log_timer("route-14");
    }
}




########################################################################
# SSM_TAGS_LAN_2_WAN_ROUTE: Route to setup SSM TAGS in incoming msg from 8K to SSM
########################################################################
route[SSM_TAGS_LAN_2_WAN_ROUTE]
{
    if (is_gflag("6"))
        bm_start_timer("route-12");

   xlog("L_INFO", "CI=$ci - R12 - Entry M=$rm avp(C_wan_ip_gs)=$avp(C_wan_ip_gs), avp(C_core_ip_gs)=$avp(C_core_ip_gs) rp=$rp Rp=$Rp flags=$mF to=$to ct=$ct\n");
   $var(S_gtc_dst_ls) = "";
   route(SDP_MANIPULATION_ROUTE);

   xlog("L_INFO", "CI=$ci - R12- sending C_pmap_resp_port_gi= $avp(C_pmap_resp_port_gi). avp(C_gw_type_gi)=$avp(C_gw_type_gi) avp(C_gw_behind_ep_gi)=$avp(C_gw_behind_ep_gi)\n");
   $var(S_ssm_epname_dst_par_ls) = "";

   put_ip_in_paran('$avp(C_wan_ip_gs)', '$avp(C_wan_ip_gs)');

   if($avp(C_gw_type_gi)==6)
   {
       # GTC is running on the local interface. Send using the same.
       $var(C_original_socket_gs) = "tcp:" + $var(S_local_ip_gs) + ":" + $var(S_local_port_gs);
       xlog("L_INFO", "CI=$ci - R12- gwtype=$avp(C_gw_type_gi),S_pstn_dialin_route_gi=$var(S_pstn_dialin_route_gi), sending var(C_original_socket_gs)=$var(C_original_socket_gs)\n");
   }
   else if(($avp(C_gw_type_gi)==1 || $avp(C_gw_type_gi)==9) && $var(S_pstn_dialin_route_gi)  == 1 && $var(S_LanInvoked_gi) == 1)
   {
       # pstn dialin, initiated on LAN. use the values set in R46 for Original socket and advertised port
       xlog("L_INFO", "CI=$ci - R12- gwtype=$avp(C_gw_type_gi),S_pstn_dialin_route_gi=$var(S_pstn_dialin_route_gi), sending var(C_original_socket_gs)=$var(C_original_socket_gs)\n");
       #### both advertised port and C_original_socket_gs should use the $Rp
       $avp(C_advertised_port_gi) = $Rp;
       xlog("L_INFO", "CI=$ci - R12- LAN invoked pstn dialin, sending avp(C_advertised_port_gi)=$avp(C_advertised_port_gi)\n");
   }
   else
   {
       $var(C_original_socket_gs) = "";
       if($avp(C_gw_behind_ep_gi) != 1 && isflagset(11))
       {
#TCP subscriber behind TLS branch and OSV is sending the call for Direct Sub, use the transport used during REGISTER
            $avp(C_tmp2_gs) = $avp(S_pm_transport_gs) + ":" + $avp(S_wan_interface_gs);
            xlog("L_INFO", "CI=$ci - R12- Flag 11 is set\n");
       }
       else if($var(S_standalone_route_gi) == 1 && not_empty("$avp(C_advertised_ip_gs)") && $avp(C_advertised_ip_gs) == $avp(C_wan_ip_gs))
       {
            $var(C_original_socket_gs) = $var(C_ep1_transp_gs) + ":" + $avp(C_advertised_ip_gs);
            if ((!not_empty("$avp(C_advertised_port_gi)") || $avp(C_advertised_port_gi) == 0) && not_empty("$avp(C_wan_port_gs)"))
                $avp(C_advertised_port_gi) = $avp(C_wan_port_gs);

            if (not_empty("$avp(C_advertised_port_gs)") && $avp(C_advertised_port_gs) != 0)
                $var(C_original_socket_gs) = $var(C_ep1_transp_gs) + ":" + $avp(C_advertised_ip_gs) + ":" + $avp(C_advertised_port_gs);
            else
                $var(C_original_socket_gs) = $var(C_ep1_transp_gs) + ":" + $avp(C_advertised_ip_gs);
            xlog("L_INFO", "CI=$ci - R12- Standalone - use advertised IP/port as original socket:$var(C_original_socket_gs)\n");
       }
       else
       {
            $avp(C_tmp2_gs) = $var(C_ep1_transp_gs) + ":" + $avp(C_wan_ip_gs);
       }
       xlog("L_INFO", "CI=$ci - R12 - avp(S_wan_interface_gs)=$avp(S_wan_interface_gs), avp(C_tmp2_gs)=$avp(C_tmp2_gs), var(C_ep1_transp_gs)=$var(C_ep1_transp_gs), avp(C_wan_ip_gs)=$avp(C_wan_ip_gs)\n");

       if (!not_empty("$var(C_original_socket_gs)"))
       {
           if(not_empty("$avp(C_wan_port_gs)")) {
               if($avp(S_fwd_ep_used_gb) != 1)
                   $avp(C_advertised_port_gi) = $avp(C_wan_port_gs);
               xlog("L_INFO", "CI=$ci - R12- gwtype !=6, sending avp(C_advertised_port_gi)=$avp(C_advertised_port_gi)\n");

               $var(C_original_socket_gs) = $avp(C_tmp2_gs)+":"+$avp(C_wan_port_gs);
               xlog("L_INFO", "CI=$ci - R12- gwtype !=6, sending var(C_original_socket_gs)=$var(C_original_socket_gs)\n");
           }
           else{
               $var(C_original_socket_gs) = $avp(C_tmp2_gs);
               xlog("L_INFO", "CI=$ci - R12- send var(C_original_socket_gs)=$var(C_original_socket_gs)\n");
           }
       }

       xlog("L_INFO", "CI=$ci - R12 - Check EP name avp(S_ep_name_gs)=$avp(S_ep_name_gs) avp(C_gw_type_gi)=$avp(C_gw_type_gi) var(C_ep2_type_gi)=$var(C_ep2_type_gi) avp(C_ssp_gw_profile_gs)=$avp(C_ssp_gw_profile_gs)\n");
       if (not_empty("$avp(S_ep_name_gs)") && ($avp(C_gw_type_gi) == 5 || $var(C_ep2_type_gi) == 5 || ($avp(C_gw_type_gi) == 4 && $avp(C_ssp_gw_profile_gs) == "Outbound Proxy"))) # SSP or outbound proxy
           $var(S_ssm_epname_dst_par_ls) = ";epname=" + $avp(S_ep_name_gs);
   }
   ####    preparing CT parameter for SSM
   ####    CT, call type ~ SSP, GW, 911, EP
   ####    bitwise:
   ####    bit 1  ----> emergency
   ####    bit 2  ----> Ansible Subscribers
   ####    bit 3  ----> remote subscriber
   ####    bit 4  ----> remote ENDPOINT
   ####    bit 5  ----> remote ENDPOINT - UTC
   $avp(S_call_type_gi) = 0;
   if(isflagset(16))
   {
       ### set bit for e911
       $avp(S_call_type_gi) = $avp(S_call_type_gi) | SSM_CT_X_E911;
       xlog("L_INFO", "CI=$ci - R12 - e911 call, set bit in ct param: avp(S_call_type_gi)=$avp(S_call_type_gi)\n");
   }
   if($var(S_webRtc_gi) == 1)
   {
       ### set bit for Ansible Subscribers
       $avp(S_call_type_gi) = $avp(S_call_type_gi) | SSM_CT_X_ANSIBLE_SUB;
       xlog("L_INFO", "CI=$ci - R12 - Ansible Subscribers call, set bit in ct param: avp(S_call_type_gi)=$avp(S_call_type_gi)\n");
   }
   if(isflagset(11))
   {
       ### set bit for remote subscriber
       $avp(S_call_type_gi) = $avp(S_call_type_gi) | SSM_CT_X_REMOTE_SUB;
       xlog("L_INFO", "CI=$ci - R12 - remote subscriber call, set bit in ct param: avp(S_call_type_gi)=$avp(S_call_type_gi)\n");
   }
   else
   {

       if($avp(C_gw_type_gi)==6 || $var(S_standalone_route_gi))
       {
           $avp(S_call_type_gi) = $avp(S_call_type_gi) | SSM_CT_X_UTC_REMOTE_EP;
           xlog("L_INFO", "CI=$ci - R12 - UTC call route, set bit in ct param: avp(S_call_type_gi)=$avp(S_call_type_gi)\n");
       }

       ### TODO - When SSM is ready to understand UTC then the below code should go in the else clause
       ### set bit for remote ep
       $avp(S_call_type_gi) = $avp(S_call_type_gi) | SSM_CT_X_REMOTE_EP;
       xlog("L_INFO", "CI=$ci - R12 - remote ep call, set bit in ct param: avp(S_call_type_gi)=$avp(S_call_type_gi) avp(S_gw_id_gi)=$avp(S_gw_id_gi)\n");
   }
   if($var(S_standalone_route_gi))
   {
       $avp(S_call_type_gi) = $avp(S_call_type_gi) | SSM_CT_X_STANDALONE_ROUTE;
       xlog("L_INFO", "CI=$ci - R12 - standalone call route, set bit in ct param: avp(S_call_type_gi)=$avp(S_call_type_gi)\n");
   }
   xlog("L_INFO", "CI=$ci - R12 - saving C_advertised_port_gi = $avp(C_advertised_port_gi)\n");
   xlog("L_INFO", "CI=$ci - R12 - saving X-Original-Socket = $var(C_original_socket_gs)\n");

   $var(C_hdr_send_transp_gs) = $var(S_r_transp_gs);

   xlog("L_INFO", "CI=$ci - R12 - saving var(S_rs_core_port_gi)=$var(C_rs_core_port_gi),var(S_ep1_id_gi) = $avp(S_gw_id_gi),var(C_ep1_rm_ip_gs) = $var(C_ep1_rm_ip_gs),var(C_ep1_rm_fqdn_gs) = $var(C_ep1_rm_fqdn_gs),var(C_ep1_rm_port_gi) = $var(C_ep1_rm_port_gi),var(C_ep1_nat_port_gs)=$var(C_ep1_nat_port_gs),var(C_ep1_transp_gs)=$var(C_ep1_transp_gs),var(C_ep1_type_gi)=$var(C_ep1_type_gi),var(C_ep1_core_ip_gs)=$var(C_ep1_core_ip_gs),var(C_ep1_core_fqdn_gs)=$var(C_ep1_core_fqdn_gs),var(C_ep1_core_port_gi)=$var(C_ep1_core_port_gi),$avp(C_core_ip_gs)=$avp(C_core_ip_gs),avp(C_port_gi)=$avp(C_port_gi),var(C_hdr_rr_gs)=$var(C_hdr_rr_gs) \n\n");
   xlog("L_INFO", "CI=$ci - R12 - saving X-Original-gwtype=$var(C_ep2_type_gi) in ssm fields\n");

   if ($var(C_ep1_type_gi) != 0 && $var(C_ep1_type_gi) != 0)
   {
       $var(C_ep1_type_gi) = $var(C_ep1_type_gi) + ";ct=" + $avp(S_call_type_gi);
       insert_hf( "X-e1t: $var(C_ep1_type_gi)\r\n", "Call-ID");
       PROC_SET_SSM_EP_HDR_X_E1T;
   }
   if ($var(C_ep1_rm_ip_gs) != '')
   {
       insert_hf( "X-ep1_rm_ip: $var(C_ep1_rm_ip_gs)\r\n", "Call-ID");
       PROC_SET_SSM_EP_HDR_X_EP1_RM_IP;
   }
   if ($var(C_ep1_rm_fqdn_gs) != '')
   {
       insert_hf( "X-e1rf: $var(C_ep1_rm_fqdn_gs)\r\n", "Call-ID");
       PROC_SET_SSM_EP_HDR_X_E1RF;
   }
   if ($var(C_ep1_rm_port_gi) != '')
   {
       insert_hf( "X-e1rp: $var(C_ep1_rm_port_gi)\r\n", "Call-ID");
       PROC_SET_SSM_EP_HDR_X_E1RP;
   }
   if ($var(C_ep1_nat_port_gs) != '')
   {
       insert_hf( "X-e1np: $var(C_ep1_nat_port_gs)\r\n", "Call-ID");
       PROC_SET_SSM_EP_HDR_X_E1NP;
   }
   if ($var(C_ep1_transp_gs) != '')
   {
       insert_hf( "X-e1tr: $var(C_ep1_transp_gs)\r\n", "Call-ID");
       PROC_SET_SSM_EP_HDR_X_E1TR;
   }
   if ($var(C_ep1_core_ip_gs) != '')
   {
       insert_hf( "X-e1ci: $var(C_ep1_core_ip_gs);$var(C_ep1_core_fqdn_gs)\r\n", "Call-ID");
       PROC_SET_SSM_EP_HDR_X_E1CI;
   }
   else if ($var(C_ep1_core_ip_gs) == '' && not_empty("$var(C_ep1_core_fqdn_gs)"))
   {
       insert_hf( "X-e1ci: ;$var(C_ep1_core_fqdn_gs)\r\n", "Call-ID");
       PROC_SET_SSM_EP_HDR_X_E1CI;
   }
   if ($var(C_ep1_core_port_gi) != 0)
   {
       insert_hf( "X-e1cp: $var(C_ep1_core_port_gi)\r\n", "Call-ID");
       PROC_SET_SSM_EP_HDR_X_E1CP;
   }
   if ($var(S_ep1_rm_address_type_gi) != 0)
   {
       insert_hf( "X-e1at: $var(S_ep1_rm_address_type_gi)\r\n", "Call-ID");
       PROC_SET_SSM_EP_HDR_X_E1AT;
   }
   if ($var(C_ep2_rm_ip_gs) != '')
   {
       insert_hf( "X-ep2_rm_ip: $var(C_ep2_rm_ip_gs)\r\n", "Call-ID");
       PROC_SET_SSM_EP_HDR_X_EP2_RM_IP;
   }
   if ($var(C_ep2_type_gi) != '')
   {
       insert_hf( "X-e2t: $var(C_ep2_type_gi)\r\n", "Call-ID");
       PROC_SET_SSM_EP_HDR_X_E2T;
   }

   if ($var(C_ep2_rm_fqdn_gs) != '')
   {
       insert_hf( "X-e2rf: $var(C_ep2_rm_fqdn_gs)\r\n", "Call-ID");
       PROC_SET_SSM_EP_HDR_X_E2RF;
   }

   if ($var(C_ep2_rm_port_gi) != 0)
   {
       insert_hf( "X-e2rp: $var(C_ep2_rm_port_gi)\r\n", "Call-ID");
       PROC_SET_SSM_EP_HDR_X_E2RP;
   }
   if ($var(C_ep2_core_port_gi) != 0)
   {
       insert_hf( "X-e2cp: $var(C_ep2_core_port_gi)\r\n", "Call-ID");
       PROC_SET_SSM_EP_HDR_X_E2CP;
   }
   if ($var(C_ep2_transp_gs) != '')
   {
       insert_hf( "X-e2tr: $var(C_ep2_transp_gs)\r\n", "Call-ID");
       PROC_SET_SSM_EP_HDR_X_E2TR;
   }
   if ($var(S_ep2_rm_address_type_gi) != 0)
   {
       insert_hf( "X-e2at: $var(S_ep2_rm_address_type_gi)\r\n", "Call-ID");
       PROC_SET_SSM_EP_HDR_X_E2AT;
   }
   if($avp(C_gw_behind_ep_gi) != 0)
   {
       insert_hf( "X-gwbep: $avp(C_gw_behind_ep_gi)\r\n", "Call-ID");
       PROC_SET_SSM_EP_HDR_X_GWBEP;

       insert_hf( "X-e2ci: $var(C_ep2_core_ip_gs);$var(C_ep2_core_fqdn_gs)\r\n", "Call-ID");
       PROC_SET_SSM_EP_HDR_X_E2CI;
       xlog("L_INFO", "CI=$ci - R12 - saving X-e2ci: $var(C_ep2_core_ip_gs);$var(C_ep2_core_fqdn_gs)\n");
   }

   if($var(C_rs_core_port_gi) != 0)
   {
       insert_hf( "X-rscp: $var(C_rs_core_port_gi)\r\n", "Call-ID");
       PROC_SET_SSM_HDR_X_RSCP;
   }
   if($var(C_general_core_port_gi) != 0)
   {
       insert_hf( "X-gcp: $var(C_general_core_port_gi)\r\n", "Call-ID");
       PROC_SET_SSM_HDR_X_GCP;
   }
   if($var(C_port_gi) != 0)
   {

       insert_hf( "X-avpp: $avp(C_port_gi)\r\n", "Call-ID");
       PROC_SET_SSM_HDR_X_AVPP;
   }
   if($avp(C_pmap_port_gi) != 0 && $avp(C_pmap_port_gi) != $null)
   {

       insert_hf( "X-avppmp: $avp(C_pmap_port_gi)\r\n", "Call-ID");
       PROC_SET_SSM_HDR_X_AVPPMP;
   }
   if($avp(C_pmap_resp_port_gi) != 0 && $avp(C_pmap_resp_port_gi) != $null)
   {

       insert_hf( "X-oprp: $avp(C_pmap_resp_port_gi)\r\n", "Call-ID");
       PROC_SET_SSM_HDR_X_OPRP;
   }
   xlog("L_INFO", "CI=$ci - R12- sending C_pmap_resp_port_gi= $avp(C_pmap_resp_port_gi)\n");



#########################################################################3
   insert_hf( "X-acbi: $avp(C_sys_current_binding_ip_gs)\r\n", "Call-ID");
   PROC_SET_SSM_HDR_X_ACBI;
   insert_hf( "X-acbp: $avp(C_sys_current_binding_port_gi)\r\n", "Call-ID");
   PROC_SET_SSM_HDR_X_ACBP;
   insert_hf( "X-acbtr: $avp(C_sys_current_binding_transp_gs)\r\n", "Call-ID");
   PROC_SET_SSM_HDR_X_ACBTR;
   insert_hf( "X-wanip: $avp(C_wan_ip_gs)\r\n", "Call-ID");
   PROC_SET_SSM_HDR_X_WANIP;
   insert_hf( "X-osvp: $var(C_sys_osv_port_gi)\r\n", "Call-ID");
   PROC_SET_SSM_HDR_X_OSVP;
############################################################################
   if($avp(S_uri_based_route_gb) == 1 && $var(S_dynamic_peer_found_gb) == 1)
   {
       insert_hf( "X-ubr: $avp(S_uri_based_route_gb)\r\n", "Call-ID");
       xlog("L_INFO", "CI=$ci - R12 - saving X-ubr=$avp(S_uri_based_route_gb) in ssm fields\n");
       PROC_SET_SSM_HDR_X_UBR;
   }

   if ($var(C_g_useSsmRecordRoute_gb) == 1)
   {
          $var(C_hdr_rr_gs)= $var(C_hdr_rr_gs)+";process_RR=1";
          if ($var(S_wan_natted_gb) == 1)
              $var(C_hdr_rr_gs)= $var(C_hdr_rr_gs)+";nat=1";

          xlog("L_INFO", "CI=$ci - R12 -  var(C_hdr_rr_gs)=$var(C_hdr_rr_gs) inserted, RR not removed since 4K\n");
   }
   else if(is_present_hf("Record-Route"))
   {
          $var(C_new_rr_hdr_gs) = "";
          xlog("L_INFO", "CI=$ci - R12 -  removed RR\n");
   }

   if ($avp(C_fw_ext_ip_gs) != $null && $avp(C_fw_ext_ip_gs) != '')
   {
      insert_hf( "X-fwxi: $avp(C_fw_ext_ip_gs)\r\n", "Call-ID");
      PROC_SET_SSM_HDR_X_FWXI;
   }
############################################################################

   if($avp(C_inv_noanswr_timer_gs) != "" && $avp(C_inv_noanswr_timer_gs) != $null)
   {
     #  $avp(C_new_headers_list_gs) = "X-invnat: " + $avp(C_inv_noanswr_timer_gs) + "\r\n";
       insert_hf( "X-invnat: $avp(C_inv_noanswr_timer_gs)\r\n", "Call-ID");
       PROC_SET_SSM_HDR_X_INVNAT;
       xlog("L_INFO", "CI=$ci - R12 - saving X-invnat:= $avp(C_inv_noanswr_timer_gs) in ssm fields\n");
   }
   if($avp(C_inv_noreply_timer_gs) != "" && $avp(C_inv_noreply_timer_gs) != $null)
   {
     #  $avp(C_new_headers_list_gs) = "X-invnrt: " + $avp(C_inv_noreply_timer_gs) + "\r\n";
       insert_hf( "X-invnrt: $avp(C_inv_noreply_timer_gs)\r\n", "Call-ID");
       PROC_SET_SSM_HDR_X_INVNRT;
       xlog("L_INFO", "CI=$ci - R12 - saving X-invnrt:= $avp(C_inv_noreply_timer_gs) in ssm fields\n");
   }

#################################################3
#               SKYPE
#################################################3
   if(($avp(C_ssp_name_gs) != $null && $avp(C_ssp_name_gs) != ""))
   {
       insert_hf( "X-avpspn: $avp(C_ssp_name_gs)\r\n", "Call-ID");
       insert_hf( "X-spf: $avp(C_ssp_flags_gi)\r\n", "Call-ID");

       PROC_SET_SSM_EP_HDR_X_SPF;
       PROC_SET_SSM_EP_HDR_X_AVPSPN;
       xlog("L_INFO", "CI=$ci - R12 - saved skype sp name=$avp(C_ssp_name_gs) C_ssp_flags_gi= $avp(C_ssp_flags_gi)\n");
   }

    if($var(S_do_not_set_du_gi) ==0)
    {

        if (not_empty("$avp(S_outbnd_pxy_ip_gs)") || not_empty("$avp(S_outbnd_pxy_fqdn_gs)"))
        {
            ###if outbound proxy for SSP is set then use it

            if($avp(C_outbnd_pxy_address_type_gi) ==1)   #  DNS_SRV
                $var(S_outbnd_port_ls) =  "";
            else
                $var(S_outbnd_port_ls) = ":" + $avp(S_outbnd_pxy_port_gs);

            $var(S_outbnd_pxy_addr_ls) = $avp(S_outbnd_pxy_ip_gs);
            if (!not_empty("$avp(S_outbnd_pxy_ip_gs)") && not_empty("$avp(S_outbnd_pxy_fqdn_gs)"))
                $var(S_outbnd_pxy_addr_ls) = $avp(S_outbnd_pxy_fqdn_gs);

            $var(S_outbnd_route_ls)= "<sip:" + $var(S_outbnd_pxy_addr_ls) + $var(S_outbnd_port_ls)+ ";transport=" + $avp(C_outbnd_pxy_transp_gs) +";lr>";
            if (!has_totag())
            {
                insert_hf("Route: $var(S_outbnd_route_ls)\r\n","Call-ID");
                $du = "sip:" +$var(S_outbnd_pxy_addr_ls) + $var(S_outbnd_port_ls)+ ";transport=" + $avp(C_outbnd_pxy_transp_gs) ;
            }

            xlog("L_INFO", "CI=$ci - R12 - SSP using outbound proxy var(S_outbnd_pxy_addr_ls)=$var(S_outbnd_pxy_addr_ls), avp(S_outbnd_pxy_port_gs)=$avp(S_outbnd_pxy_port_gs), avp(C_outbnd_pxy_transp_gs)=$avp(C_outbnd_pxy_transp_gs), Route: $var(S_outbnd_route_ls)\n");
        }
        else
            xlog("L_INFO", "CI=$ci - R12 - empty outbound proxy\n");

        if (not_empty("$var(S_rem_ep_addr_gs)"))
        {
            $du = "sip:" + $var(S_rem_ep_addr_gs) + ":" + $var(S_rem_ep_port_gs)+ ";transport=" + $var(S_rem_ep_tran_gs) ;
            xlog("L_INFO", "CI=$ci - R12 - SSP using route socket data du=$du\n");
        }

        if( isflagset(10) && is_method("INVITE") && $sht(call-info=>$ci-$ft::ssp-da-challenged) == 1 )
        {
            $du = $sht(call-info=>$ci-$ft::ssp-da-du);
            xlog("L_INFO", "CI=$ci - R12 - This call id was previouly challenged. Force last SSP destination du=$du \n");
            sht_rm_name_re("call-info=>^$ci-$ft::(ssp-da-challenged|ssp-da-rep-id|ssp-da-ip|ssp-da-port|ssp-da-du)");
        }

        if (not_empty("$avp(S_fwd_vlan_addr_port_gs)") && not_empty("$avp(C_fwd_ep_ip_gs)") && ($avp(S_fwd_ep_used_gb) == 1))
        {
            # FRN10673 - change destination port to be modified by iptables for VLANs
            xlog("L_INFO", "CI=$ci - R12 - Destination address and port changed for forward VLAN to $avp(S_fwd_vlan_addr_port_gs), access-realm=$avp(S_access_realm_profile_gs), avp(C_gw_type_gi)=$avp(C_gw_type_gi)\n");
            # Check first dynamic forward nw and first for registered.
            $(avp(S_dynamic_fwd_nw_addr_port_gs)[*]) = $null;

            if($avp(S_gw_rm_fqdn_gs) != "" && has_totag()) # Try to reuse forward mark by pre selected endpoint from gwId parameter
                osb_memdb_select("remote_ep_fwd_realm,$avp(S_gw_id_gi)|$avp(S_fwd_vlan_addr_port_gs)|*|*|*|$avp(S_ep_name_gs)|*,","||$avp(S_dynamic_fwd_nw_addr_port_gs)||||");

            xlog("L_INFO", "CI=$ci - R12 -  Query for *|$avp(S_fwd_vlan_addr_port_gs)|$var(S_ep1_nat_ip_gs);$var(C_ep1_nat_port_gs)|*|*|$avp(S_ep_name_gs)|*, avp(S_dynamic_fwd_nw_addr_port_gs)=$avp(S_dynamic_fwd_nw_addr_port_gs)\n");

            if( $avp(S_dynamic_fwd_nw_addr_port_gs) != $null ||
                osb_memdb_select("remote_ep_fwd_realm,*|$avp(S_fwd_vlan_addr_port_gs)|*|1|$avp(S_access_realm_profile_gs)|$avp(S_ep_name_gs)|*,","||$avp(S_dynamic_fwd_nw_addr_port_gs)||||") == 1 ||
                osb_memdb_select("remote_ep_fwd_realm,*|$avp(S_fwd_vlan_addr_port_gs)|*|0|$avp(S_access_realm_profile_gs)|$avp(S_ep_name_gs)|*,","||$avp(S_dynamic_fwd_nw_addr_port_gs)||||") == 1)
            {
                $var(S_fwd_vlan_addr_ls) = $(avp(S_dynamic_fwd_nw_addr_port_gs){s.select,0,;});
                put_ip_in_paran('$var(S_fwd_vlan_addr_ls)', '$var(S_fwd_vlan_addr_ls)');
                $var(S_fwd_vlan_port_ls) = $(avp(S_dynamic_fwd_nw_addr_port_gs){s.select,1,;});
                xlog("L_INFO", "CI=$ci - R12 - avp(S_dynamic_fwd_nw_addr_port_gs)=$avp(S_dynamic_fwd_nw_addr_port_gs) var(S_fwd_vlan_addr_ls)=$var(S_fwd_vlan_addr_ls) var(S_fwd_vlan_port_ls)=$var(S_fwd_vlan_port_ls)\n");
                if ($(var(S_ssp_fwd_port_gs){s.len}) != 0 && $var(S_fwd_vlan_port_ls) != $var(S_ssp_fwd_port_gs))
                {
                     # Reuse original fwd port established in the initial INVITE
                     xlog("L_INFO", "CI=$ci - R12- fwd port changed from $avp(S_dynamic_fwd_nw_addr_port_gs) to $var(S_ssp_fwd_port_gs) with addr $var(S_fwd_vlan_addr_ls)\n");
                     $var(S_fwd_vlan_port_ls) = $var(S_ssp_fwd_port_gs);
                     $avp(S_dynamic_fwd_nw_addr_port_gs) = $var(S_fwd_vlan_addr_ls) + ";" + $var(S_fwd_vlan_port_ls);
                }
            }
            else
            {
                $var(S_fwd_vlan_addr_ls) = $(avp(S_fwd_vlan_addr_port_gs){s.select,0,;});
                put_ip_in_paran('$var(S_fwd_vlan_addr_ls)', '$var(S_fwd_vlan_addr_ls)');
                $var(S_fwd_vlan_port_ls) = $(avp(S_fwd_vlan_addr_port_gs){s.select,1,;});
            }
            xlog("L_INFO", "CI=$ci - R12 - du=$du avp(C_gw_transp_gs)=$avp(C_gw_transp_gs), var(S_fwd_vlan_addr_ls)=$var(S_fwd_vlan_addr_ls) var(S_fwd_vlan_port_ls)=$var(S_fwd_vlan_port_ls)\n");
            $du = "sip:" + $var(S_fwd_vlan_addr_ls) + ":" + $var(S_fwd_vlan_port_ls) + ";transport=" + $avp(C_gw_transp_gs);
            if (not_empty("$var(C_hdr_rr_gs)"))
                $var(C_hdr_rr_gs)= $var(C_hdr_rr_gs)+";fwd_vlan="+$var(S_fwd_vlan_addr_ls)+":"+$var(S_fwd_vlan_port_ls);

            xlog("L_INFO", "CI=$ci - R12 - After fwd vlan du=$du var(C_hdr_rr_gs)=$var(C_hdr_rr_gs)\n");
        }

        if ($avp(S_SSP_registered_uri_gs) != $null)
        {
            $var(C_original_dest_gs) = $avp(S_SSP_registered_uri_gs);
            if (not_empty("$var(C_hdr_rr_gs)"))
                $var(C_hdr_rr_gs)= $var(C_hdr_rr_gs)+";ssp_reg";
            xlog("L_INFO", "CI=$ci - R12 - setting X-Original-dest according to SSP registered uri\n");
        }
        else
        {
            $var(C_original_dest_gs) = $du;
        }

        xlog("L_INFO", "CI=$ci - R12 - saved X-Original-dest=$var(C_original_dest_gs)\n");
    }
    else
        $var(C_original_dest_gs) = "";

   $var(S_ssm_info_gs) = $var(S_ssm_rm_ip_gs);

#   if($var(S_ep1_rm_address_type_gi) == 2)    # if dynamic natting
#       $var(S_ssm_info_gs) = "auto=yes;"+$var(S_ssm_info_gs);

   ####    preparing CT parameter for SSM
   ####    CT, call type ~ SSP, GW, 911, EP
   ####    bitwise:
   ####    bit 1  ----> emergency
   ####    bit 2  ----> Ansible Subscribers
   ####    bit 3  ----> remote subscriber
   ####    bit 4  ----> remote ENDPOINT
   ####    bit 5  ----> remote ENDPOINT - UTC
   $var(C_ssm_ct_param_gi) = 0;
   if(isflagset(16))
   {
       ### set bit for e911
       $var(C_ssm_ct_param_gi) = $var(C_ssm_ct_param_gi) | SSM_CT_X_E911;
       xlog("L_INFO", "CI=$ci - R12 - e911 call, set bit in ct param: var(C_ssm_ct_param_gi)=$var(C_ssm_ct_param_gi)\n");
   }
   if($var(S_webRtc_gi) == 1)
   {
       ### set bit for Ansible Subscribers
       $var(C_ssm_ct_param_gi) = $var(C_ssm_ct_param_gi) | SSM_CT_X_ANSIBLE_SUB;
       xlog("L_INFO", "CI=$ci - R12 - Ansible Subscribers call, set bit in ct param: var(C_ssm_ct_param_gi)=$var(C_ssm_ct_param_gi)\n");
   }
   if(isflagset(11))
   {
       ### set bit for remote subscriber
       $var(C_ssm_ct_param_gi) = $var(C_ssm_ct_param_gi) | SSM_CT_X_REMOTE_SUB;
       xlog("L_INFO", "CI=$ci - R12 - remote subscriber call, set bit in ct param: var(C_ssm_ct_param_gi)=$var(C_ssm_ct_param_gi)\n");
   }
   else
   {
       if($avp(C_gw_type_gi)==6 || $var(S_standalone_route_gi))
       {
           $var(C_ssm_ct_param_gi) = $var(C_ssm_ct_param_gi) | SSM_CT_X_UTC_REMOTE_EP;
           xlog("L_INFO", "CI=$ci - R12 - UTC call route, set bit in ct param: var(C_ssm_ct_param_gi)=$var(C_ssm_ct_param_gi)\n");
       }

       ### TODO - When SSM is ready to understand UTC then the below code should go in the else clause
       ### set bit for remote ep
       $var(C_ssm_ct_param_gi) = $var(C_ssm_ct_param_gi) | SSM_CT_X_REMOTE_EP;
       xlog("L_INFO", "CI=$ci - R12 - remote ep call, set bit in ct param: var(C_ssm_ct_param_gi)=$var(C_ssm_ct_param_gi)\n");
   }
   if($var(S_pstn_dialin_route_gi) && $var(S_LanInvoked_gi) == 1)
   {
       $var(S_network_interface_media_dst_gi) = "eth0";
       $var(S_network_interface_src_sig_gi) = "eth0";
       xlog("L_INFO", "CI=$ci - R12 - gtc call invoked from lan, using var(S_network_interface_media_dst_gi)=$var(S_network_interface_media_dst_gi),var(S_network_interface_src_sig_gi)=$var(S_network_interface_src_sig_gi)\n");
   }

   $var(S_workingIp_dst_gi) = "ip="+$var(S_network_interface_media_dst_gi)+"-";
   $var(S_workingIp_src_gi) = "ip="+$var(S_network_interface_src_sig_gi)+"-";

   xlog("L_INFO", "CI=$ci - R12 -S_workingIp_dst_gi=$var(S_workingIp_dst_gi),S_workingIp_src_gi= $var(S_workingIp_src_gi)\n");

   if(!isflagset(11) && $var(S_ep1_natted_gi) == 1 && $avp(C_gw_type_gi) != 6)
   {
      get_ip_from_paran('$var(S_ep1_nat_ip_gs)', '$var(S_ssm_data_ls)');
      if ($var(S_ssm_fqdn_ls) == "")
          $var(S_ssm_iwip_ls) = $var(S_network_interface_dst_sig_gi)+ "-" +$var(S_ssm_data_ls);
      else
          $var(S_ssm_iwip_ls) = $var(S_ssm_fqdn_ls);

      $var(C_ssm_data_dst_gs) = $var(S_workingIp_dst_gi) + $var(S_ssm_data_ls) + ";nat=1;iw_ip=" +$var(S_ssm_iwip_ls) + ";" + $var(S_ssm_info_gs) + ";dst";
      $var(C_ssm_data_src_gs) = $var(S_workingIp_src_gi) + $var(S_lanip_4_6_noparan_gs) + ";nat=0;src";
      xlog("L_INFO", "CI=$ci - R12 - sending var(C_ssm_data_src_gs)=$var(C_ssm_data_src_gs),var(C_ssm_data_dst_gs)=$var(C_ssm_data_dst_gs) to SSM\n");
   }
   else if (isflagset(11) ) # Direct SUB: Use the destination
   {
       if($var(S_webRtc_gi) == 1)
       {
            avp_subst("$avp(S_wosmo_client_ip_gs)/$avp(S_wosmo_client_port_gs)","/(.*):(.*)/\2/i");
            avp_subst("$avp(S_wosmo_client_ip_gs)","/(.*):(.*)/\1/i");
            xlog("L_INFO", "CI=$ci - R12 -  Separated wosmo client ip:port avp(S_wosmo_client_ip_gs)=$avp(S_wosmo_client_ip_gs), avp(S_wosmo_client_port_gs)=$avp(S_wosmo_client_port_gs)\n");
            insert_hf("X-Siemens-Client-Socket: $avp(S_wosmo_client_port_gs)\r\n", "Call-ID");
       }

       if($var(S_wan_natted_gb) == 0) {
          $var(S_ssm_data_ls) =$rd;
          get_ip_from_paran( '$var(S_ssm_data_ls)', '$var(S_ssm_data_ls)');
          xlog("L_INFO", "CI=$ci - R12.1 - sending var(S_ssm_data_ls)=$var(S_ssm_data_ls) to SSM\n");
          $var(S_iw_addr_ls) = $var(S_ssm_data_ls);
          if($var(S_webRtc_gi) == 1)
              $var(S_iw_addr_ls) = $avp(S_wosmo_client_ip_gs);
          $var(C_ssm_data_dst_gs) = $var(S_workingIp_dst_gi) + $var(S_ssm_data_ls) + ";nat=0;iw_ip=" +$var(S_network_interface_dst_sig_gi)+"-"+ $var(S_iw_addr_ls) + ";" + $var(S_ssm_info_gs) + ";dst";
          $var(C_ssm_data_src_gs) = $var(S_workingIp_src_gi) + $var(S_lanip_4_6_noparan_gs) + ";nat=0;src";
          #$avp(C_new_headers_list_gs) = "X-SSMData: ip=" + $var(S_ssm_data_ls) + ";nat=0;" + $var(S_ssm_info_gs) + "\r\n";
       }
       else {
          $var(S_ssm_data_ls) =$(du{uri.host}{s.tolower});
          $var(S_iw_addr_ls) = $var(S_ssm_data_ls);
          if($var(S_webRtc_gi) == 1)
              $var(S_iw_addr_ls) = $avp(S_wosmo_client_ip_gs);
          $var(C_ssm_data_dst_gs) = $var(S_workingIp_dst_gi) + $var(S_ssm_data_ls) + ";nat=1;iw_ip=" +$var(S_network_interface_src_sig_gi)+"-"+ $var(S_iw_addr_ls) +";"  + $var(S_ssm_info_gs) + ";dst";
          $var(C_ssm_data_src_gs) = $var(S_workingIp_src_gi) + $var(S_lanip_4_6_noparan_gs) + ";nat=0;src";
          #$avp(C_new_headers_list_gs) = "X-SSMData: ip=" + $var(S_ssm_data_ls) + ";nat=1;" + $var(S_ssm_info_gs) + "\r\n";
          xlog("L_INFO", "CI=$ci - R12.2 - sending var(S_ssm_data_ls)=$var(S_ssm_data_ls) to SSM\n");
       }
   }
   else if (isflagset(8)) # SBC: Use the destination
   {
       $var(S_ssm_data_ls) =$(du{uri.host}{s.tolower});
       if ($var(S_ssm_fqdn_ls) == "")
          $var(S_ssm_iwip_ls) = $var(S_network_interface_dst_sig_gi)+ "-" +$var(S_ssm_data_ls);
       else
          $var(S_ssm_iwip_ls) = $var(S_ssm_fqdn_ls);

       $var(C_ssm_data_dst_gs) = $var(S_workingIp_dst_gi) + $var(S_ssm_data_ls) + ";nat=0;iw_ip=" + $var(S_ssm_iwip_ls) + ";" + $var(S_ssm_info_gs) + ";dst";
       $var(C_ssm_data_src_gs) = $var(S_workingIp_src_gi) + $var(S_lanip_4_6_noparan_gs) + ";nat=0;src";
       #$avp(C_new_headers_list_gs) = "X-SSMData: ip=" + $var(S_ssm_data_ls) + ";nat=0;" + $var(S_ssm_info_gs) + "\r\n";
       xlog("L_INFO", "CI=$ci - R12.3 - sending var(S_ssm_data_ls)=$var(S_ssm_data_ls) to SSM\n");
   }
   else if (isflagset(15)) # Sub behind Proxy, use the R-URI
   {
       $var(S_ssm_data_ls) =$rd;
       get_ip_from_paran( '$var(S_ssm_data_ls)', '$var(S_ssm_data_ls)');
       get_ip_from_paran( '$var(C_ep1_rm_ip_gs)', '$var(C_ep1_rm_ip_gs)'); # LAN 2 WAN ep1_rm_ip could have FQDN as well if configured in remote_ep

       if ($var(S_ssm_fqdn_ls) == "")
          $var(S_ssm_iwip_ls) = $var(S_network_interface_dst_sig_gi)+ "-" +$var(C_ep1_rm_ip_gs);
       else
          $var(S_ssm_iwip_ls) = $var(S_ssm_fqdn_ls);

       $var(C_ssm_data_dst_gs) = $var(S_workingIp_dst_gi) + $var(S_ssm_data_ls) + ";nat=0;" + $var(S_ssm_info_gs) + ";iw_ip=" +$var(S_ssm_iwip_ls) + ";dst";
       $var(C_ssm_data_src_gs) = $var(S_workingIp_src_gi) + $var(S_lanip_4_6_noparan_gs) + ";nat=0;src";
       #$avp(C_new_headers_list_gs) = "X-SSMData: ip=" + $var(S_ssm_data_ls) + ";nat=0;" + $var(S_ssm_info_gs) + "\r\n";
       xlog("L_INFO", "CI=$ci - R12.4 - sending var(S_ssm_data_ls)=$var(S_ssm_data_ls) to SSM\n");
   }
   else # GW, SSP, Proxy(not a subscriber).
   {
       get_ip_from_paran('$var(C_ep1_rm_ip_gs)', '$var(S_ssm_data_ls)');

       if ($var(S_ssm_fqdn_ls) == "")
          $var(S_ssm_iwip_ls) = $var(S_network_interface_dst_sig_gi)+ "-" +$var(S_ssm_data_ls);
       else
          $var(S_ssm_iwip_ls) = $var(S_ssm_fqdn_ls);

       xlog("L_INFO", "CI=$ci - R12.5 - sending var(S_ssm_data_ls)=$var(S_ssm_data_ls) to SSM\n");
       $var(S_media_ls) = $var(S_ssm_data_ls);

       # Only send IP address configured in the media ip to SSM
       if(($avp(C_gw_behind_ep_gi) == 1) && $var(S_ep2_rm_media_ip_gs) != '' && $var(S_ep2_rm_media_ip_gs) != 0 && !($var(S_ep2_rm_media_ip_gs) =~ "([a-zA-Z0-9]([a-zA-Z0-9\-])*([a-zA-Z0-9])*\.)*([a-zA-Z]([a-zA-Z0-9\-])*([a-zA-Z0-9])*)\.?$") )
           $var(S_media_ls) = $var(S_ep2_rm_media_ip_gs);
       else if((isflagset(1) || isflagset(5)) && $var(S_ep1_rm_media_ip_gs) != '' && $var(S_ep1_rm_media_ip_gs) != 0 && !($var(S_ep1_rm_media_ip_gs) =~ "([a-zA-Z0-9]([a-zA-Z0-9\-])*([a-zA-Z0-9])*\.)*([a-zA-Z]([a-zA-Z0-9\-])*([a-zA-Z0-9])*)\.?$") )
           $var(S_media_ls) = $var(S_ep1_rm_media_ip_gs);

       if($var(S_LanInvoked_gi) == 1)
           $var(S_gtc_ssp_src_gs) = $var(C_ri_var_gs);
       xlog("L_INFO", "CI=$ci - R12.5 - hosted/enterprise=$var(S_LanInvoked_gi),var(S_gtc_ssp_src_gs)=$var(S_gtc_ssp_src_gs),var(S_standalone_route_gi)=$var(S_standalone_route_gi),var(S_ep1_rm_media_ip_gs)=$var(S_ep1_rm_media_ip_gs),var(S_network_interface_media_src_gi)=$var(S_network_interface_media_src_gi),var(S_workingIp_src_gi)=$var(S_workingIp_src_gi),var(S_media_ls)=$var(S_media_ls),var(S_ssm_info_gs)=$var(S_ssm_info_gs)\n");
       if($var(S_standalone_route_gi))
       {
           if ($var(S_gtc_ssp_src_gs) == 0)
               $var(C_ssm_data_src_gs) = "ip="+$avp(S_network_interface_src_gs)+"-"+$si+ ";nat=0;" + $var(S_ssm_info_gs) + ";src";
           else
               $var(C_ssm_data_src_gs) = $var(S_workingIp_src_gi)+$var(S_gtc_ssp_src_gs)+ ";nat=0;" + $var(S_ssm_info_gs) + ";src";

           if($var(S_ep1_gtc_name_gs) != '')
           {
               $var(S_gtc_dst_ls) = ";sessionEp="+$var(S_network_interface_media_dst_gi)+"-"+$var(S_ep1_gtc_name_gs) ;
               xlog("L_INFO", "CI=$ci - R12.5 - gtc call, set sessionEp var(S_workingIp_dst_gi)=$var(S_workingIp_dst_gi)\n");
           }

           $var(C_ssm_data_dst_gs) = $var(S_workingIp_dst_gi) + $var(S_media_ls) + ";nat=0" + $var(S_ssm_dst_fqdn_gs) + ";dst";
           xlog("L_INFO", "CI=$ci - R12 - this is gtc sending var(C_ssm_data_src_gs)=$var(C_ssm_data_src_gs) to SSM\n");
           xlog("L_INFO", "CI=$ci - R12 - this is gtc sending var(C_ssm_data_dst_gs)=$var(C_ssm_data_dst_gs) to SSM\n");

           $var(S_ssm_epname_src_par_ls) = "";
           if (not_empty("$var(S_src_epname_gs)"))
               $var(S_ssm_epname_src_par_ls) = ";epname=" + $var(S_src_epname_gs);
           $var(C_ssm_data_src_gs) = $var(C_ssm_data_src_gs) + $var(S_ssm_epname_src_par_ls);
           xlog("L_INFO", "CI=$ci - R12 - sending standalone var(C_ssm_data_src_gs)=$var(C_ssm_data_src_gs) to SSM\n");
       }
       else
       {
           $var(C_ssm_data_src_gs) = $var(S_workingIp_src_gi) + $var(S_lanip_4_6_noparan_gs) + ";nat=0;src";
           $var(C_ssm_data_dst_gs) = $var(S_workingIp_dst_gi) + $var(S_media_ls) + ";nat=0;iw_ip=" +$var(S_ssm_iwip_ls) + ";dst";
       }
       #$avp(C_new_headers_list_gs) = "X-SSMData: ip=" + $var(S_ssm_data_ls) + ";nat=0;" + $var(S_ssm_info_gs) + "\r\n";
   }
   ### add the call type parameter to ssmdata:
   $var(C_ssm_data_dst_gs) = $var(C_ssm_data_dst_gs) + ";ct=" +$var(C_ssm_ct_param_gi) + $var(S_gtc_dst_ls) + $var(S_ssm_epname_dst_par_ls);
   if($var(S_pstn_dialin_route_gi))
   {
       xlog("L_INFO", "CI=$ci - R12 - pstn dialin: avp(S_gw_rm_ip_gs)=$avp(S_gw_rm_ip_gs),var(S_final_C_ep1_rm_ip_gs)=$var(S_final_C_ep1_rm_ip_gs),var(C_ep1_rm_ip_gs)=$var(C_ep1_rm_ip_gs)\n");
#       if($var(S_pstn_dialin_route_gi) && $var(S_LanInvoked_gi) == 0)
       if($var(S_pstn_dialin_route_gi))
           $var(C_ssm_data_dst_gs) = $var(C_ssm_data_dst_gs) + ";finaldest="+$var(S_netwInterfaceDst_gs)+"-"+ $var(S_final_S_final_S_ep_name_gs);
       else
           $var(C_ssm_data_dst_gs) = $var(C_ssm_data_dst_gs) + ";finaldest="+ $var(S_final_C_ep1_rm_ip_gs);
       $var(C_hdr_rr_gs)= $var(C_hdr_rr_gs)+";process_refer=1";
       ### need also to provide the final_ruri
#       $var(S_final_ruri_gs) = "sip:"+$var(S_rU_gs)+$var(C_ep1_rm_ip_gs)+":"+$var(C_ep1_rm_port_gi)+";transport="+$var(C_ep1_transp_gs);
       xlog("L_INFO", "CI=$ci - R12 - pstn dialin: added  C_ssm_data_dst_gs=$var(C_ssm_data_dst_gs),var(C_hdr_rr_gs)=$var(C_hdr_rr_gs),var(S_final_ruri_gs)=$var(S_final_ruri_gs) \n");
   }
   xlog("L_INFO", "CI=$ci - R12 - sending var(C_ssm_data_dst_gs)=$var(C_ssm_data_dst_gs), and var(C_ssm_data_src_gs)=$var(C_ssm_data_src_gs) to SSM\n");

   ##### RTP VLAN functionality is not yet used so set it to zero for now #############
#   $var(S_network_interface_dst_gs) = 0;

   if($var(S_LanInvoked_gi) != 1)
       $avp(C_tmp2_gs) = $avp(C_wan_ip_gs);
   else
   {
       $avp(C_tmp2_gs) = $var(C_ri_var_gs);
       $avp(C_advertised_ip_gs) = $var(C_ri_var_gs);
   }
   get_ip_from_paran('$avp(C_tmp2_gs)', '$var(S_ssm_data_ls)');
   ## add new ssm tag for netword ID for mat: ip4:<networkId>-<IPV4> ip6:<networkId>-<IPV6>
   ## TODO need to cal api to indicate if ipv4 or ipv6   (this is in $var(S_v4_v6_gs))
   ip_type_str('$avp(C_tmp2_gs)', '$var(S_v4_v6_gs)');
   get_ip_from_paran('$avp(C_advertised_ip_gs)', '$var(C_advertised_ip_gs)');
   get_ip_from_paran('$avp(C_wan_media_ip_gs)', '$var(C_wan_media_ip_gs)');

   $var(S_media_wan_on_sdp_gs) ="";
   if($avp(C_media_fw_ext_ip_gs) != $null && $avp(C_media_fw_ext_ip_gs) != '')
   {
       get_ip_from_paran('$avp(C_media_fw_ext_ip_gs)', '$var(S_media_fw_ext_ip_gs)');
       $var(S_media_wan_on_sdp_gs) = ";wos="+$avp(S_media_wan_on_sdp_gs);
       xlog("L_INFO", "CI=$ci - R12 - avp(C_media_fw_ext_ip_gs) = $avp(C_media_fw_ext_ip_gs)\n");
   }
   else
       $var(S_media_fw_ext_ip_gs) = $var(C_wan_media_ip_gs);

   if($var(S_LanInvoked_gi) != 1 && $var(S_gtc_pstn_dialin_gs) != 1)
       $var(C_ssm_ip_dst_gs) = $var(S_v4_v6_gs) + ":" + $var(S_network_interface_media_dst_gi) + "-" + $var(C_wan_media_ip_gs) + ";fwip="+$var(S_network_interface_dst_sig_gi)+"-" + $var(S_media_fw_ext_ip_gs) + $var(S_media_wan_on_sdp_gs);
   else
   {
       if($var(S_media_ext_firewall_set_gb) == 1)
       {
           if ($(var(S_ssm_fw_ext_ip_gs){s.len}))
           {
               xlog("L_INFO", "CI=$ci - R12 - External Firewall set var(S_ssm_fw_ext_ip_gs) = $var(S_ssm_fw_ext_ip_gs)\n");
               $var(C_ssm_ip_dst_gs) = $var(S_v4_v6_gs) + ":0-" + $var(C_wan_media_ip_gs) + ";fwip=0-"+$var(S_media_fw_ext_ip_gs)+";finalip="+$var(S_v4_v6_gs)+":"+$var(S_ssmip_dest_gs)+";finalfwip="+$var(S_ssm_fw_ext_ip_gs);
           }
           else
               $var(C_ssm_ip_dst_gs) = $var(S_v4_v6_gs) + ":0-" + $var(C_wan_media_ip_gs) + ";fwip=0-"+$var(S_media_fw_ext_ip_gs)+";finalip="+$var(S_v4_v6_gs)+":"+$var(S_ssmip_dest_gs);

           if($var(S_ssm_wos_gs) != "")
           {
               xlog("L_INFO", "CI=$ci - R12 - External Firewall set var(S_ssm_wos_gs) = $var(S_ssm_wos_gs)\n");
               $var(C_ssm_ip_dst_gs) = $var(C_ssm_ip_dst_gs) + ";wos="+$var(S_ssm_wos_gs);
           }
       }
       else
           $var(C_ssm_ip_dst_gs) = $var(S_v4_v6_gs) + ":0-" + $var(C_wan_media_ip_gs) + ";fwip=0-" + $var(C_wan_media_ip_gs)+ ";finalip="+$var(S_v4_v6_gs)+":" +$var(S_ssmip_dest_gs);
   }


   xlog("L_INFO", "CI=$ci - R12 - sending X-SSM-IP as $var(C_ssm_ip_dst_gs) to SSM as dst\n");


   #TODO: For Core Side: Get the S_network_interface_src_gs from the configured interface

   ####   $avp(C_wan_media_ip_gs) and $avp(C_wan_media_port_gs) contain the dst media ip:port
   ####   $avp(C_core_media_ip_gs) and $avp(C_core_media_port_gs) contain the src media ip:port


   ip_type_str('$var(S_lanip_4_6_gs)', '$var(S_v4_v6_gs)');
   if($var(S_standalone_route_gi))
   {
       ### $avp(C_tmp2_gs) is now pointing to wan_ip or $Ri
       ### if it was invoked from lan or wan
       ip_type_str('$var(C_wan_media_ip_gs)', '$var(S_v4_v6_gs)');
       $var(S_media_wan_on_sdp_ls)="";
       ### TO DESTINATION
       if($avp(C_media_fw_ext_ip_gs) != $null && $avp(C_media_fw_ext_ip_gs) != '')
       {
          get_ip_from_paran('$avp(C_media_fw_ext_ip_gs)', '$var(S_ssm_data_ls)');
          $var(S_media_wan_on_sdp_ls) = ";wos="+$avp(S_media_wan_on_sdp_gs);
          xlog("L_INFO", "CI=$ci - R12 - External Firewall - To Destination avp(C_media_fw_ext_ip_gs) = $avp(C_media_fw_ext_ip_gs)\n");
       }
       else
          $var(S_ssm_data_ls) = $var(C_wan_media_ip_gs);

       ### TO SRC
       $var(S_media_wan_on_sdp_src_ls) = "";
       $var(S_media_fw_ext_ip_src_ls) = "";
       if($var(S_media_fw_ext_ip_src_gs) != "")
       {
          get_ip_from_paran('$var(S_media_fw_ext_ip_src_gs)', '$var(S_media_fw_ext_ip_src_ls)');
          $var(S_media_wan_on_sdp_src_ls) = ";wos="+$var(S_media_wan_on_sdp_src_gs);
          xlog("L_INFO", "CI=$ci - R12 - External Firewall - To Src var(S_media_fw_ext_ip_src_gs = $var(S_media_fw_ext_ip_src_gs)\n");
       }

       get_ip_from_paran('$var(S_network_media_ip_src_gs)', '$var(S_network_media_ip_src_ls)');

       if($var(S_mediaserver_call_gi) == 1)
       {
           if($var(S_LanInvoked_gi) != 1)
           {
               if($var(S_media_fw_ext_ip_src_ls) == "")
               {
                   $var(C_ssm_ip_src_gs) = $var(S_v4_v6_gs) + ":" + $var(S_network_interface_media_src_gi) + "-" + $var(S_network_media_ip_src_ls) + ";fwip=" + $var(S_network_interface_media_src_gi) +"-" + $var(S_network_media_ip_src_ls);
                   ## fwip set must be included even it has the same value of media ip otherwise it will fail
                   xlog("L_INFO", "CI=$ci - R12 - var(S_media_fw_ext_ip_src_ls) is empty\n");
               }
               else
                   $var(C_ssm_ip_src_gs) = $var(S_v4_v6_gs) + ":" + $var(S_network_interface_media_src_gi) + "-" + $var(S_network_media_ip_src_ls) + ";fwip=" +$var(S_network_interface_src_sig_gi)+"-" + $var(S_media_fw_ext_ip_src_ls) + $var(S_media_wan_on_sdp_src_ls);
           }
           else
               $var(C_ssm_ip_src_gs) = $var(S_v4_v6_gs) + ":0-" + $Ri + ";fwip=0-" + $avp(C_tmp2_gs);
           xlog("L_INFO", "CI=$ci - R12 - this is mediaserver call avp(C_tmp2_gs)=$avp(C_tmp2_gs) avp(C_media_fw_ext_ip_gs)=$avp(C_media_fw_ext_ip_gs) var(S_network_media_ip_src_ls)=$var(S_network_media_ip_src_ls) var(C_wan_media_ip_gs)=$var(C_wan_media_ip_gs) avp(C_wan_media_ip_gs)=$avp(C_wan_media_ip_gs)\n");
       }
       else
       {
           xlog("L_INFO", "CI=$ci - R12 - this is none mediaserver call \n");
           if($avp(C_media_fw_ext_ip_gs) == $null || $(avp(C_media_fw_ext_ip_gs){s.len}) == 0)
           {
               $var(C_ssm_ip_src_gs) = $var(S_v4_v6_gs) + ":" + $var(S_network_interface_media_src_gi) + "-" + $var(S_network_media_ip_src_ls) + ";fwip=" +$var(S_network_interface_src_sig_gi)+"-" + $var(S_network_media_ip_src_ls) + $var(S_media_wan_on_sdp_ls);
               xlog("L_INFO", "CI=$ci - R12 - var(C_media_fw_ext_ip_gs) is empty\n");
           }
           else
               $var(C_ssm_ip_src_gs) = $var(S_v4_v6_gs) + ":" + $var(S_network_interface_media_src_gi) + "-" + $var(S_network_media_ip_src_ls) + ";fwip=" +$var(S_network_interface_src_sig_gi)+"-" + $var(S_ssm_data_ls) + $var(S_media_wan_on_sdp_ls);
       }
   }
   else
      #### V8R1 LAN LB ICMP issue ## $var(C_ssm_ip_src_gs) = $var(S_v4_v6_gs) + ":" + $avp(S_network_interface_src_gs) + "-" + $avp(C_core_media_ip_gs);
      $var(C_ssm_ip_src_gs) = $var(S_v4_v6_gs) + ":0-" + $avp(C_core_media_ip_gs);

   xlog("L_INFO", "CI=$ci - R12 - var(S_v4_v6_gs)=$var(S_v4_v6_gs) avp(S_network_interface_src_gs)=$avp(S_network_interface_src_gs) var(S_ssm_data_ls)=$var(S_ssm_data_ls) to SSM\n");

   xlog("L_INFO", "CI=$ci - R12 - sending X-SSM-IP as $var(C_ssm_ip_src_gs) to SSM as src\n");
   xlog("L_INFO", "CI=$ci - R12.5 - user_agent equal to $avp(S_hdr_user_agent_gs) \n");
   if($avp(S_hdr_user_agent_gs) != $null && $avp(S_hdr_user_agent_gs) != '')
   {
       insert_hf( "X-SSM-User-Agent: $avp(S_hdr_user_agent_gs);dst\r\n", "Call-ID");
       PROC_SET_SSM_HDR_X_UA;
   }

   #### ADD ANY NEW TAGS BEFORE THIS LINE ###############

   # == Original Route Header ==================================================================
   if( is_present_hf("Route") )
       insert_hf( "X-Original-Route: $hdr(Route)\r\n", "Call-ID");

   if (not_empty("$avp(S_recv_adv_socket_gs)"))
   {
       insert_hf( "X-recv-adv-socket: $avp(S_recv_adv_socket_gs)\r\n", "Call-ID");
       xlog("L_INFO", "CI=$ci - R17 - setting X-recv-adv-socket WITH avp(S_recv_adv_socket_gs)=$avp(S_recv_adv_socket_gs)\n");
       PROC_SET_SSM_RECV_ADV_SOCKET;
   }
   route(SSM_COMMON_TAGS_ROUTE);

   if (is_gflag("6"))
   {
       xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
       bm_log_timer("route-12");
   }
}

########################################################################
# SSM_TAGS_WAN_2_LAN_ROUTE: populate ep related fields in Reguests (called in R10)
########################################################################
route[SSM_TAGS_WAN_2_LAN_ROUTE]
{
    if (is_gflag("6"))
        bm_start_timer("route-17");

   xlog("L_INFO", "CI=$ci - R17 - Entry M=$rm avp(C_wan_ip_gs)=$avp(C_wan_ip_gs), avp(C_core_ip_gs)=$avp(C_core_ip_gs) rp=$rp Rp=$Rp flags=$mF to=$to ct=$ct, \n");

   route(SDP_MANIPULATION_ROUTE);
   #### TODO: var(C_fs_gs) is already set and could be reused over here.
#   if($avp(C_gw_behind_ep_gi)==2)
#      $avp(C_tmp2_gs) = $var(S_sys_transp_gs)+":"+$avp(C_core_ip_gs)+":"+$var(C_ep1_core_port_gi);
#   else if(isflagset(11))
#      $avp(C_tmp2_gs) = $var(S_sys_transp_gs)+":"+$var(S_lanip_4_6_gs)+":"+$var(C_sys_osv_port_gi);
#      $avp(C_tmp2_gs) = $var(S_sys_transp_gs)+":"+$var(S_lanip_4_6_gs)+":"+$var(C_sys_osv_port_gi);
#   else
#      $avp(C_tmp2_gs) = $var(S_sys_transp_gs)+":"+$avp(C_core_ip_gs)+":"+$avp(C_gw_core_port_gi);

   xlog("L_INFO", "CI=$ci - R17 - var(S_sys_transp_gs)=$var(S_sys_transp_gs), avp(C_core_ip_gs)=$avp(C_core_ip_gs), avp(C_core_port_gi)=$avp(C_core_port_gi) \n");
   $avp(C_tmp2_gs) = $var(S_sys_transp_gs)+":"+$avp(C_core_ip_gs)+":"+$avp(C_core_port_gi);

   put_ip_in_paran('$avp(C_tmp2_gs)', '$avp(C_tmp2_gs)');

   $var(C_original_socket_gs) = $avp(C_tmp2_gs);

   xlog("L_INFO", "CI=$ci - R17 -  saving X-Original-Socket:$avp(C_tmp2_gs), var(C_fs_gs)=$var(C_fs_gs) in ssm fields\n");


   ##### RTP VLAN functionality is not yet used so set it to zero for now #############
#   $var(S_network_interface_dst_gs) = 0;

   get_ip_from_paran('$avp(C_wan_media_ip_gs)', '$var(C_wan_media_ip_gs)');
   get_ip_from_paran('$avp(C_advertised_ip_gs)', '$var(C_advertised_ip_gs)');

   $var(S_media_wan_on_sdp_ls)="";
   if($avp(C_media_fw_ext_ip_gs) != $null && $avp(C_media_fw_ext_ip_gs) != '')
   {
       get_ip_from_paran('$avp(C_media_fw_ext_ip_gs)', '$var(S_ssm_data_ls)');
       $var(S_media_wan_on_sdp_ls) = ";wos="+$avp(S_media_wan_on_sdp_gs);
   }
   else
       $var(S_ssm_data_ls) = $var(C_wan_media_ip_gs);

   ####   $avp(C_wan_media_ip_gs) and $avp(C_wan_media_port_gs) contain the dst media ip:port
   ####   $avp(C_core_media_ip_gs) and $avp(C_core_media_port_gs) contain the src media ip:port



   ## add new ssm tag for netword ID for mat: ip4:<networkId>-<IPV4> ip6:<networkId>-<IPV6>
   ## TODO need to cal api to indicate if ipv4 or ipv6   (thi si in $var(S_v4_v6_gs))
   ip_type_str('$avp(C_wan_ip_gs)', '$var(S_v4_v6_gs)');
   xlog("L_INFO", "CI=$ci - R17 - using var(C_advertised_ip_gs)=$var(C_advertised_ip_gs),var(C_wan_media_ip_gs)=$var(C_wan_media_ip_gs),avp(C_wan_media_ip_gs)=$avp(C_wan_media_ip_gs),var(C_advertised_ip_gs)=$var(C_advertised_ip_gs)\n");
   xlog("L_INFO", "CI=$ci - R17 - var(S_network_interface_dst_sig_gi)=$var(S_network_interface_dst_sig_gi),var(S_network_interface_src_sig_gi)=$var(S_network_interface_src_sig_gi),var(S_network_interface_media_src_gi)=$var(S_network_interface_media_src_gi)\n");

   $var(C_ssm_ip_src_gs) = $var(S_v4_v6_gs) + ":" + $var(S_network_interface_media_src_gi) + "-" + $var(C_wan_media_ip_gs) + ";fwip=" +$var(S_network_interface_src_sig_gi)+"-" + $var(S_ssm_data_ls) + $var(S_media_wan_on_sdp_ls);
   xlog("L_INFO", "CI=$ci - R17 - sending X-SSM-AccessIP as var(C_ssm_ip_src_gs)=$var(C_ssm_ip_src_gs) to SSM\n");


   # TODO: Get S_network_interface_dst_gs from the configured core side interface
   ip_type_str('$var(S_lanip_4_6_gs)', '$var(S_v4_v6_gs)');
   xlog("L_INFO", "CI=$ci - R17 -C_core_media_ip_gs is set with: $avp(C_core_media_ip_gs)\n");
   $var(C_ssm_ip_dst_gs) = $var(S_v4_v6_gs) + ":0-" + $avp(C_core_media_ip_gs);
   ### V8R1 LAN LB ICMP ISSUE ## $var(C_ssm_ip_dst_gs) = $var(S_v4_v6_gs) + ":" + $avp(S_network_interface_dst_gs) + "-" + $avp(C_core_media_ip_gs);
   xlog("L_INFO", "CI=$ci - R17 - sending X-SSM-AccessIP as $var(S_v4_v6_gs):$avp(S_network_interface_dst_gs)-$avp(C_wan_ip_gs) to SSM\n");


   $var(C_hdr_send_transp_gs) = $avp(C_sys_current_binding_transp_gs);
   if ($var(C_ep1_type_gi) != 0)
   {
       insert_hf( "X-e1t: $var(C_ep1_type_gi)\r\n", "Call-ID");
       PROC_SET_SSM_EP_HDR_X_E1T;
   }
   if ($var(C_ep1_rm_ip_gs) != '')
   {
       insert_hf( "X-ep1_rm_ip: $var(C_ep1_rm_ip_gs)\r\n", "Call-ID");
       PROC_SET_SSM_EP_HDR_X_EP1_RM_IP;
   }
   if ($var(C_ep1_rm_fqdn_gs) != '')
   {
       insert_hf( "X-e1rf: $var(C_ep1_rm_fqdn_gs)\r\n", "Call-ID");
       PROC_SET_SSM_EP_HDR_X_E1RF;
   }
   if ($var(C_ep1_rm_port_gi) != 0)
   {
       insert_hf( "X-e1rp: $var(C_ep1_rm_port_gi)\r\n", "Call-ID");
       PROC_SET_SSM_EP_HDR_X_E1RP;
   }
   if ($var(C_ep1_nat_port_gs) != '')
   {
       insert_hf( "X-e1np: $var(C_ep1_nat_port_gs)\r\n", "Call-ID");
       PROC_SET_SSM_EP_HDR_X_E1NP;
   }
   if ($var(C_ep1_transp_gs) != '')
   {
       insert_hf( "X-e1tr: $var(C_ep1_transp_gs)\r\n", "Call-ID");
       PROC_SET_SSM_EP_HDR_X_E1TR;
   }
   if ($var(C_ep1_core_ip_gs) != '')
   {
       insert_hf( "X-e1ci: $var(C_ep1_core_ip_gs);$var(C_ep1_core_fqdn_gs)\r\n", "Call-ID");
       PROC_SET_SSM_EP_HDR_X_E1CI;
   }
   else if ($var(C_ep1_core_ip_gs) == '' && not_empty("$var(C_ep1_core_fqdn_gs)"))
   {
       insert_hf( "X-e1ci: ;$var(C_ep1_core_fqdn_gs)\r\n", "Call-ID");
       PROC_SET_SSM_EP_HDR_X_E1CI;
   }
   if ($var(C_ep1_core_port_gi) != 0)
   {
       insert_hf( "X-e1cp: $var(C_ep1_core_port_gi)\r\n", "Call-ID");
       PROC_SET_SSM_EP_HDR_X_E1CP;
   }
   if ($var(S_ep1_rm_address_type_gi) != 0)
   {
       insert_hf( "X-e1at: $var(S_ep1_rm_address_type_gi)\r\n", "Call-ID");
       PROC_SET_SSM_EP_HDR_X_E1AT;
   }
   if ($var(C_ep2_rm_ip_gs) != '')
   {
       insert_hf( "X-ep2_rm_ip: $var(C_ep2_rm_ip_gs)\r\n", "Call-ID");
       PROC_SET_SSM_EP_HDR_X_EP2_RM_IP;
   }
   if ($var(C_ep2_type_gi) != 0)
   {
       insert_hf( "X-e2t: $var(C_ep2_type_gi)\r\n", "Call-ID");
       PROC_SET_SSM_EP_HDR_X_E2T;
   }
   if ($var(C_ep2_rm_fqdn_gs) != '')
   {
       insert_hf( "X-e2rf: $var(C_ep2_rm_fqdn_gs)\r\n", "Call-ID");
       PROC_SET_SSM_EP_HDR_X_E2RF;
   }
   if ($var(C_ep2_rm_port_gi) != 0)
   {
       insert_hf( "X-e2rp: $var(C_ep2_rm_port_gi)\r\n", "Call-ID");
       PROC_SET_SSM_EP_HDR_X_E2RP;
   }
   if ($var(C_ep2_core_port_gi) != 0)
   {
       insert_hf( "X-e2cp: $var(C_ep2_core_port_gi)\r\n", "Call-ID");
       PROC_SET_SSM_EP_HDR_X_E2CP;
   }
   if ($var(C_ep2_transp_gs) != '')
   {
       insert_hf( "X-e2tr: $var(C_ep2_transp_gs)\r\n", "Call-ID");
       PROC_SET_SSM_EP_HDR_X_E2TR;
   }
   if ($var(S_ep2_rm_address_type_gi) != 0)
   {
       insert_hf( "X-e2at: $var(S_ep2_rm_address_type_gi)\r\n", "Call-ID");
       PROC_SET_SSM_EP_HDR_X_E2AT;
   }
   if($avp(C_gw_behind_ep_gi) != 0 && $avp(C_gw_behind_ep_gi) != $null)
   {
       insert_hf( "X-gwbep: $avp(C_gw_behind_ep_gi)\r\n", "Call-ID");
       PROC_SET_SSM_EP_HDR_X_GWBEP ;
   }
   if($avp(C_ssp_type_gi) != 0 && $avp(C_ssp_type_gi) != $null)
   {
       insert_hf( "X-spt: $avp(C_ssp_type_gi)\r\n", "Call-ID");
       PROC_SET_SSM_EP_HDR_X_SPT ;
   }
#   insert_hf("X-spf: $avp(C_ssp_flags_gi)\r\n", "To");
   if($avp(C_ssp_flags_gi) != 0 && $avp(C_ssp_flags_gi) != $null)
   {
       insert_hf( "X-spf: $avp(C_ssp_flags_gi)\r\n", "Call-ID");
       PROC_SET_SSM_EP_HDR_X_SPF ;

   }
#   insert_hf("X-spdhdn: $avp(C_ssp_default_home_dn_gs)\r\n", "To");
   if($avp(C_ssp_default_home_dn_gs) != 0 && $avp(C_ssp_default_home_dn_gs) != $null)
   {
       insert_hf( "X-spdhdn: $avp(C_ssp_default_home_dn_gs)\r\n", "Call-ID");
       PROC_SET_SSM_EP_HDR_X_SPDHDN ;
   }
   if($avp(C_gw_behind_ep_gi) != 0)
   {
       insert_hf( "X-e2ci: $var(C_ep2_core_ip_gs);$var(C_ep2_core_fqdn_gs)\r\n", "Call-ID");
       PROC_SET_SSM_EP_HDR_X_E2CI ;
   }
   if($var(S_dom_x_siemens_location_gs)!= '')

   {
      insert_hf( "X-Siemens-Location: $var(S_dom_x_siemens_location_gs)\r\n", "Call-ID");
      #PROC_SET_SSM_EP_HDR_X_E1T ;
   }
   if($avp(C_pmap_resp_port_gi) != 0 && $avp(C_pmap_resp_port_gi) != $null)
   {
       insert_hf( "X-oprp: $avp(C_pmap_resp_port_gi) \r\n", "Call-ID");
       PROC_SET_SSM_HDR_X_OPRP;
   }
   if ($var(C_g_useSsmRecordRoute_gb) == 1)
   {
          $var(C_hdr_rr_gs)= $var(C_hdr_rr_gs)+";process_RR=1";
          if ($var(S_wan_natted_gb) == 1)
              $var(C_hdr_rr_gs)= $var(C_hdr_rr_gs)+";nat=1";

          xlog("L_INFO", "CI=$ci - R17 -  var(C_hdr_rr_gs)=$var(C_hdr_rr_gs) inserted, RR not removed since 4K\n");
   }
   else if(is_present_hf("Record-Route"))
   {
       #copy RR in new hf and remove the RR
       $var(C_hdr_rr_gs)= $hdr(Record-Route);
   }
#   if($var(S_webRtc_gi) == 0)
#       $var(C_hdr_rr_gs)= $var(C_hdr_rr_gs)+";fwan=yes";

   xlog("L_INFO", "CI=$ci - R17 -  enhanced with fwan: var(C_hdr_rr_gs)=$var(C_hdr_rr_gs) \n");


# NOMAN
   xlog("L_INFO", "CI=$ci - R17- saved avp(S_ses_id_gi)=$avp(S_ses_id_gi) \n");

   insert_hf("X-pmp: $avp(C_pmap_port_gi)\r\n", "Call-ID");
   xlog("L_INFO", "CI=$ci - R17- saved avp(C_pmap_port_gi)=$avp(C_pmap_port_gi) \n");
   PROC_SET_SSM_HDR_X_PMP;


#   $avp(C_new_headers_list_gs) = "X-advertised_port: " +$avp(advertised_port) + "\r\n";
   xlog("L_INFO", "CI=$ci - R17- sending C_advertised_port_gi= $avp(C_advertised_port_gi)\n");

   #read & store rcv_via into a new variable, all via by comma separated
   $avp(C_tmp2_gs) = "";
   $var(S_via_count_gi) = 0;
   ## Via handling in R22

   if(is_method("INVITE") && isflagset(2)){
      xlog("L_INFO", "CI=$ci - R17 - setting X-Original-sprip for ssm=$avp(C_ssp_rip_gs)\n");
      insert_hf( "X-Original-sprip: $avp(C_ssp_rip_gs)\r\n", "Call-ID");
      PROC_SET_SSM_HDR_X_ORIGINAL_SPRIP;
   }
   if(is_method("INVITE") && (!(isflagset(11) || isflagset(15))) && $avp(S_rep_ip_gs) != $null && $avp(S_rep_ip_gs) != ''){
      xlog("L_INFO", "CI=$ci - R17 - setting X-rep_ip for ssm=$avp(S_rep_ip_gs)\n");
      insert_hf( "X-rep_ip: $avp(S_rep_ip_gs)\r\n", "Call-ID");
      PROC_SET_SSM_EP_HDR_X_REP_IP
   }

   if (($avp(S_uri_based_route_gb) == 1) || ($rz == "urn" && $rU == "service") || $var(S_NG911_notification_gb) == 1 )#in case of a request urn:service:sos urn:service:counseling
       $var(S_use_rd_ls) = $avp(C_sys_current_binding_ip_gs);
   else
       $var(S_use_rd_ls) = $rd;
   put_ip_in_paran('$var(S_use_rd_ls)', '$var(S_use_rd_ls)');
   $var(C_original_dest_gs) = "sip:" + $var(S_use_rd_ls) + ":" + $avp(C_sys_current_binding_port_gi) + ";transport="+$avp(C_sys_current_binding_transp_gs)+";";
   xlog("L_INFO", "CI=$ci - R17 - setting var(C_original_dest_gs)=$var(C_original_dest_gs)\n");


   ####    preparing CT parameter for SSM
   ####    CT, call type ~ SSP, GW, 911, EP
   ####    bitwise:
   ####    bit 1  ----> emergency
   ####    bit 2  ----> Ansible Subscribers
   ####    bit 3  ----> remote subscriber
   ####    bit 4  ----> remote ENDPOINT
   ####    bit 5  ----> remote ENDPOINT - UTC
   $var(C_ssm_ct_param_gi) = 0;
   if(isflagset(16))
   {
       ### set bit for e911
       $var(C_ssm_ct_param_gi) = $var(C_ssm_ct_param_gi) | SSM_CT_X_E911;
       xlog("L_INFO", "CI=$ci - R17 - e911 call, set bit in ct param: var(C_ssm_ct_param_gi)=$var(C_ssm_ct_param_gi)\n");
   }
   if($var(S_webRtc_gi) == 1)
   {
       ### set bit for Ansible Subscribers
       $var(C_ssm_ct_param_gi) = $var(C_ssm_ct_param_gi) | SSM_CT_X_ANSIBLE_SUB;
       xlog("L_INFO", "CI=$ci - R17 - Ansible Subscribers call, set bit in ct param: var(C_ssm_ct_param_gi)=$var(C_ssm_ct_param_gi)\n");
   }
   if(isflagset(11))
   {
       ### set bit for remote subscriber
       $var(C_ssm_ct_param_gi) = $var(C_ssm_ct_param_gi) | SSM_CT_X_REMOTE_SUB;
       xlog("L_INFO", "CI=$ci - R17 - remote subscriber call, set bit in ct param: var(C_ssm_ct_param_gi)=$var(C_ssm_ct_param_gi)\n");
   }
   else
   {
       if($avp(C_gw_type_gi)==6 || $var(S_standalone_route_gi))
       {
           $var(C_ssm_ct_param_gi) = $var(C_ssm_ct_param_gi) | SSM_CT_X_UTC_REMOTE_EP;
           xlog("L_INFO", "CI=$ci - R17 - UTC call route, set bit in ct param: var(C_ssm_ct_param_gi)=$var(C_ssm_ct_param_gi)\n");
       }

       ### TODO - When SSM is ready to understand UTC then the below code should go in the else clause
       ### set bit for remote ep
       $var(C_ssm_ct_param_gi) = $var(C_ssm_ct_param_gi) | SSM_CT_X_REMOTE_EP;
       xlog("L_INFO", "CI=$ci - R17 - remote ep call, set bit in ct param: var(C_ssm_ct_param_gi)=$var(C_ssm_ct_param_gi)\n");
   }
   if (isflagset(15) && isflagset(27)) # Subscriber behind Proxy, send the Contact information to SSM, other cases source IP would be OK.
       $avp(C_tmp2_gs) = $avp(S_contact_ip_gi);
   else
       $avp(C_tmp2_gs) =  $var(C_si_var_gs) ;

   $var(S_ssm_info_gs) = $var(S_ssm_rm_ip_gs);

#   if($var(S_ep1_rm_address_type_gi) == 2)    # if dynamic natting
#       $var(S_ssm_info_gs) = "auto=yes;"+$var(S_ssm_info_gs);

   $var(S_workingIp_dst_gi) = "ip="+$var(S_network_interface_dst_sig_gi)+"-";

   $var(S_workingInt_src_gi) = "if="+$var(S_network_interface_media_src_gi);
   $var(S_workingIp_src_gi) = "ip="+$var(S_network_interface_media_src_gi)+"-";

   $var(C_ssm_data_src_gs) = $var(S_workingIp_src_gi) + $avp(C_tmp2_gs);

   if ($var(S_ssm_fqdn_ls) == "")
       $var(S_ssm_iwip_ls) = $var(S_network_interface_src_sig_gi)+ "-" +$avp(C_tmp2_gs);
   else
       $var(S_ssm_iwip_ls) = $var(S_ssm_fqdn_ls);

  xlog("L_INFO", "CI=$ci - R17.1 - Check EP name avp(S_ep_name_gs)=$avp(S_ep_name_gs) avp(C_gw_type_gi)=$avp(C_gw_type_gi) var(C_ep2_type_gi)=$var(C_ep2_type_gi) avp(C_ssp_gw_profile_gs)=$avp(C_ssp_gw_profile_gs)\n");
  $var(S_ssm_epname_src_par_ls) = "";
  if (not_empty("$avp(S_ep_name_gs)") && ($avp(C_gw_type_gi) == 5 || $var(C_ep2_type_gi) == 5 || ($avp(C_gw_type_gi) == 4 && $avp(C_ssp_gw_profile_gs) == "Outbound Proxy"))) # SSP or outbound proxy
     $var(S_ssm_epname_src_par_ls) = ";epname=" + $avp(S_ep_name_gs);

  # if(!($(hdr(Content-Type){s.tolower}) == "application/sdp" || ($(hdr(Content-Type){s.tolower}) == "multipart/mixed" && search_body("Content-Type:.*application/sdp"))))
  # {
  #    $var(C_ssm_data_src_gs) = $var(C_ssm_data_src_gs) + ";nat=1;iw_ip=" +$var(S_ssm_iwip_ls)+";" + $var(S_ssm_info_gs) + ";src";
  #    $var(C_ssm_data_dst_gs) = $var(S_workingIp_dst_gi) + $var(S_lanip_4_6_noparan_gs) + ";nat=0;dst";
  #    xlog("L_INFO", "CI=$ci - R17.0 - sending X-SSMData: src=$var(C_ssm_data_src_gs), dst=$var(C_ssm_data_dst_gs)\n");
  # }
  # else
  if ((!isflagset(11) && $var(S_ep1_natted_gi) == 1) # First EP is behind NAT
       || $var(S_wan_natted_gb) ==1)  #RS behind NAT
   {
      if(not_empty("$avp(S_new_src_ip_gs)") && not_empty("$var(S_fwd_nw_id_gs)"))
          $avp(C_tmp2_gs) =  $avp(S_new_src_ip_gs);
      else
          $avp(C_tmp2_gs) =  $var(C_si_var_gs) ;

      $var(C_ssm_data_src_gs) = $var(S_workingIp_src_gi) + $avp(C_tmp2_gs);

      $var(C_ssm_data_src_gs) = $var(C_ssm_data_src_gs) + ";nat=1;iw_ip=" +$var(S_ssm_iwip_ls)+";" + $var(S_ssm_info_gs) + ";src";
      $var(C_ssm_data_dst_gs) = $var(S_workingIp_dst_gi) + $var(S_lanip_4_6_noparan_gs) + ";nat=0;dst";
      xlog("L_INFO", "CI=$ci - R17.1 - sending C_ssm_data_src_gs=$var(C_ssm_data_src_gs) C_ssm_data_dst_gs=$var(C_ssm_data_dst_gs) to SSM\n");
   }
   else if(!isflagset(8) && isflagset(5)) # Direct GW or SSP or GW behind Proxy
   {
      $var(C_ssm_data_src_gs) = $var(S_workingInt_src_gi);
      $var(C_ssm_data_src_gs) = $var(C_ssm_data_src_gs) +";nat=0;iw_ip=" +$var(S_ssm_iwip_ls)+";" + $var(S_ssm_info_gs) + ";src";
      $var(C_ssm_data_dst_gs) = $var(S_workingIp_dst_gi) + $var(S_lanip_4_6_noparan_gs) + ";nat=0;dst";
      xlog("L_INFO", "CI=$ci - R17.2 - sending C_ssm_data_src_gs=$var(C_ssm_data_src_gs) C_ssm_data_dst_gs=$var(C_ssm_data_dst_gs) to SSM\n");
   }
   else if ($var(S_ssm_info_gs) == "" && (isflagset(11) || isflagset(27) || (!isflagset(8) && isflagset(5)))) # NO FQDN, Direct SUB or Proxy or GW behind Proxy
   {
      $var(C_ssm_data_dst_gs) = $var(S_workingIp_dst_gi) + $var(S_lanip_4_6_noparan_gs) + ";nat=0;dst";

      $var(C_ssm_data_src_gs) = $var(S_workingInt_src_gi);

      if(isflagset(27)) # Subscriber behind Proxy without FQDN
      {
          get_ip_from_paran( '$var(C_ep1_rm_ip_gs)', '$var(C_ep1_rm_ip_gs)'); # ep1_rm_ip does not contain FQDN
          $var(C_ssm_data_src_gs) = $var(C_ssm_data_src_gs) + ";nat=0;iw_ip=" +$var(S_network_interface_src_sig_gi)+"-" + $var(C_ep1_rm_ip_gs) + ";src";
      }
      else if($var(S_webRtc_gi) == 1)
      {
          avp_subst("$avp(S_wosmo_client_ip_gs)/$avp(S_wosmo_client_port_gs)","/(.*):(.*)/\2/i");
          avp_subst("$avp(S_wosmo_client_ip_gs)","/(.*):(.*)/\1/i");
          xlog("L_INFO", "CI=$ci - R17 -  Separated wosmo client ip:port avp(S_wosmo_client_ip_gs)=$avp(S_wosmo_client_ip_gs), avp(S_wosmo_client_port_gs)=$avp(S_wosmo_client_port_gs)\n");

          $var(C_ssm_data_src_gs) = $var(C_ssm_data_src_gs) + ";nat=0;iw_ip=" +$var(S_network_interface_src_sig_gi)+"-" + $avp(S_wosmo_client_ip_gs) + ";src";
      }
      else {
           $var(C_ssm_data_src_gs) = $var(C_ssm_data_src_gs) + ";nat=0;iw_ip=" +$var(S_ssm_iwip_ls) + ";src";
      }
      xlog("L_INFO", "CI=$ci - R17.3 - sending C_ssm_data_src_gs=$var(C_ssm_data_src_gs) C_ssm_data_dst_gs=$var(C_ssm_data_dst_gs) to SSM\n");
   }
   else # Sub behind Proxy with FQDN, Sub behind SBC, GW behind SBC
   {
        if($var(S_standalone_route_gi) && $var(S_ep1_gtc_name_gs) != '' )
        {
            $var(S_gtc_src_ls) = ";sessionEp="+$var(S_network_interface_media_src_gi)+"-"+$var(S_ep1_gtc_name_gs) ;
            xlog("L_INFO", "CI=$ci - R17 - gtc call, set sessionEp var(S_workingIp_dst_gi)=$var(S_workingIp_dst_gi)\n");
        }
        if (isflagset(15) && isflagset(27)) # Subscriber behind Proxy with FQDN
           $var(C_ssm_data_src_gs) = $var(S_workingInt_src_gi);

        $var(C_ssm_data_src_gs) = $var(C_ssm_data_src_gs) + ";nat=0;iw_ip=" +$var(S_ssm_iwip_ls)+";" + $var(S_ssm_info_gs) + ";src";
        $var(C_ssm_data_dst_gs) = $var(S_workingIp_dst_gi) + $var(S_lanip_4_6_noparan_gs) + ";nat=0;dst";
        xlog("L_INFO", "CI=$ci - R17.4 - sending C_ssm_data_src_gs=$var(C_ssm_data_src_gs) C_ssm_data_dst_gs=$var(C_ssm_data_dst_gs) to SSM\n");
   }
   ### add the call type parameter to ssmdata:
   $var(C_ssm_data_src_gs) = $var(C_ssm_data_src_gs) + ";ct=" +$var(C_ssm_ct_param_gi) + $var(S_ssm_epname_src_par_ls);
   xlog("L_INFO", "CI=$ci - R17 - sending var(C_ssm_data_dst_gs)=$var(C_ssm_data_dst_gs) var(C_ssm_data_src_gs)=$var(C_ssm_data_src_gs) to SSM\n");

   ## for pstn_dialin add the final destination to ssamdata dst
   if($var(S_pstn_dialin_route_gi))
   {
       xlog("L_INFO", "CI=$ci - R17 - pstn dialin: avp(S_gw_rm_ip_gs)=$avp(S_gw_rm_ip_gs),var(S_final_C_ep1_rm_ip_gs)=$var(S_final_C_ep1_rm_ip_gs),var(C_ep1_rm_ip_gs)=$var(C_ep1_rm_ip_gs)\n");
       $var(C_ssm_data_dst_gs) = $var(C_ssm_data_dst_gs) + ";finaldest="+ $var(S_final_C_ep1_rm_ip_gs);
       $var(C_hdr_rr_gs)= $var(C_hdr_rr_gs)+";process_refer=1";
       ### need also to provide the final_ruri
       $var(S_final_ruri_gs) = "sip:"+$var(S_rU_gs)+$var(C_ep1_rm_ip_gs)+":"+$var(C_ep1_rm_port_gi)+";transport="+$var(C_ep1_transp_gs);
       xlog("L_INFO", "CI=$ci - R17 - pstn dialin: added  C_ssm_data_dst_gs=$var(C_ssm_data_dst_gs),var(C_hdr_rr_gs)=$var(C_hdr_rr_gs),var(S_final_ruri_gs)=$var(S_final_ruri_gs) \n");
   }

   xlog("L_INFO", "CI=$ci - R17.5 - user_agent equal to $avp(S_hdr_user_agent_gs) \n");
   if($avp(S_hdr_user_agent_gs) != $null && $avp(S_hdr_user_agent_gs) != '')
   {
       insert_hf( "X-SSM-User-Agent: $avp(S_hdr_user_agent_gs);src\r\n", "Call-ID");
       PROC_SET_SSM_HDR_X_UA;
   }
   insert_hf("X-acbi:  $avp(C_sys_current_binding_ip_gs)\r\n", "Call-ID");
   insert_hf("X-acbp:  $avp(C_sys_current_binding_port_gi)\r\n", "Call-ID");
   insert_hf("X-acbtr:  $avp(C_sys_current_binding_transp_gs)\r\n", "Call-ID");
   insert_hf("X-wanip:  $avp(C_wan_ip_gs)\r\n", "Call-ID");
   insert_hf("X-osvp:  $var(C_sys_osv_port_gi)\r\n", "Call-ID");
   PROC_SET_SSM_HDR_X_ACBI;
   PROC_SET_SSM_HDR_X_ACBP;
   PROC_SET_SSM_HDR_X_ACBTR;
   PROC_SET_SSM_HDR_X_WANIP;
   PROC_SET_SSM_HDR_X_OSVP;
   if ($avp(C_port_mtls_gs) != 0 && $avp(C_port_mtls_gs) != $null)
   {
       insert_hf( "X-mtls: $avp(C_port_mtls_gs)\r\n", "Call-ID");
       xlog("L_INFO", "CI=$ci - R17 - sending X-mtls $avp(C_port_mtls_gs) to SSM\n");
       PROC_SET_SSM_HDR_X_mtls;
   }

   #### ADD ANY NEW TAGS BEFORE THIS LINE ###############

   # == Original Route Header ==================================================================
   if( is_present_hf("Route") )
       insert_hf( "X-Original-Route: $hdr(Route)\r\n", "Call-ID");

   route(SSM_COMMON_TAGS_ROUTE);

   if (is_gflag("3"))
       bm_start_timer("route-17-2");

   if (is_gflag("6"))
   {
       xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
       bm_log_timer("route-17");

       if(is_present_hf("X-SSM-User-Agent"))
          remove_hf( "X-SSM-User-Agent");
   }
}



########################################################################
# Reply route general-reply-route
# input pseudo-variables:
# output pseudo-variables:
# input headers: From, To, Event, Content Length, Content Type, Method
# input flags:
# changed flags:
########################################################################
onreply_route
{
    xlog("L_INFO", "CI=$ci -RR-A005 - Message response from si=$si conid=$conid\n");
    # *** FRN4862 - Maybe we need some of this routes ***
    # route(VARIABLE_INIT_ROUTE);
    # route(HDR_INIT_ROUTE);
    # route(SIP_HEADERS_CHANGE_ROUTE);

    # FRN4862 - MoSIP general response method to stateless messages
    if((status=="183" || status=="200") && is_method("NOTIFY") && $cT =~ "application/mgcp-message.*")
    {
        xlog("L_INFO", "CI=$ci -RR-A005 - Message response from MoSIP application\n");

        if (($fU != "msadapter") ||
           ($tU != "msadapter") ||
           (!($sel(event) =~ "mgcp-encapsulate.*")) ||
           ($cl <= 0))
        {
            xlog("L_ERR", "CI=$ci -RR-A005 - Msg dropped ($rm $pr) - Message response $rs doesn't had MoSIP headers. si:sp=$si:$sp\n");
            drop();
            exit;
        }
        xlog("L_INFO", "CI=$ci -RR-A005 -  si=$si, avp(S_nat_ip_gs)=$avp(S_nat_ip_gs)\n");
        insert_hf("X-AEP-IP: $si\r\n", "Call-ID");
    }
}

########################################################################
# route PROCESS_MULT_CONTACT_ROUTE: process of multiple contacts
# input pseudo-variables: $avp(C_pmap_port_gi), $avp(C_port_gi), $avp(C_req_transp_gs), $avp(C_tmp2_ls), $avp(S_hdr_tmp_ct_gs),
#                         $avp(S_hdr_user_agent_gs), $avp(S_req_ct_gs), $avp(S_tmp_gs), $var(C_hdr_ct_uri_ls), $var(S_ep_id_gi),
#                         $var(S_expire_gi), $var(S_sys_ct_count_li), $var(S_sys_throttling_timer_gi)
# output pseudo-variables: $avp(C_new_headers_list_gs), $avp(C_port_gi), $avp(C_tmp2_ls), $avp(S_hdr_user_agent_gs), $avp(S_reg_ct_gs),
#                          $avp(S_req_ct_gs), $avp(S_tmp_gs), $var(C_hdr_ct_uri_ls), $var(C_new_ct_hdr_gs), $var(S_ep_id_gi),
#                          $var(S_expire_gi), $var(S_sys_ct_count_li), $var(S_sys_throttling_timer_gi)
# input headers: Contact, Expires
# input flags: 11, 17, g6
# changed flags:
########################################################################
route[PROCESS_MULT_CONTACT_ROUTE]
{

    if (is_gflag("6"))
        bm_start_timer("route-5");

    xlog("L_INFO", "CI=$ci - R5 - Entry - M=$rm RP=$rp\n");
    # Handling for multiple contacts (Keyset)

    remove_hf("Contact");

    # Contact found use the previous stored contact. Otherwise use the previous stored contact in (rcv_contact)
    if(is_present_hf("Contact"))
    {
        $var(C_hdr_ct_uri_ls) = $avp(S_req_ct_gs);
        $(avp(S_req_ct_gs)[*]) = $null;

        # restore all contacts
        $(avp(S_req_ct_gs)[*]) = $null;
        # Store all contacts in a list
        $var(S_sys_ct_count_li) = 0;
        while($(hdr(Contact)[$var(S_sys_ct_count_li)]) != $null)
        {
            $(avp(C_port_gi)[*]) = $null;
            $(avp(S_reg_ct_gs)[*]) = $null;
            $avp(S_req_ct_gs)= $(hdr(Contact)[$var(S_sys_ct_count_li)]);
            # Get current contact
            $avp(S_tmp_gs)  =  $(avp(S_req_ct_gs){nameaddr.nc_uri});
            $avp(C_tmp2_ls)  = $avp(S_req_ct_gs);
            $var(S_ep_id_gi)=0;
            # Get epid
            # Get epid
            if($avp(C_tmp2_ls)=~"(.*)[Ee]pid=(.*)")
            {
                xlog("L_INFO","CI=$ci - R5 - CONTACT avp(C_tmp2_ls)=$avp(C_tmp2_ls)\n");
                # $avp(C_tmp2_ls) = $(avp(C_tmp2_ls){param.value,epid}); # DOESNOT WORK WHEN THE NAME has double quotes
                avp_subst("$avp(C_tmp2_ls)","/(.*)epid=([^,>;]*)+(.*)/\2/i");
                xlog("L_INFO","CI=$ci - R5 - EPID avp(C_tmp2_ls)=$avp(C_tmp2_ls)\n");

                $var(S_ep_id_gi) = $avp(C_tmp2_ls);
            }
            # Get external port from first contact
            $avp(C_port_gi) = $(avp(S_tmp_gs){uri.port});

            #remove all other contacts from response
            if(($avp(C_port_gi) != $null && $avp(C_port_gi) != "") && $avp(C_port_gi) == $avp(C_pmap_port_gi))
            {
               $var(S_expire_gi)=0;

               if ($avp(S_req_ct_gs) =~ "(.*)[Ee]xpires=(.*)")
               {

                 $avp(C_tmp2_ls) = $(avp(S_req_ct_gs){s.select,1,>}{param.value,expires});
                 $var(S_expire_gi)=$(avp(C_tmp2_ls){s.int});
               }
               else if (is_present_hf("Expires"))
                 $var(S_expire_gi)=$(hdr(Expires){s.int});

               # $avp(S_reg_ct_gs) = $avp(S_hdr_tmp_ct_gs);

               xlog("L_INFO", "CI=$ci - R5 - avp(S_hdr_tmp_ct_gs)=$avp(S_hdr_tmp_ct_gs),var(S_expire_gi)=$var(S_expire_gi)\n");
               if(($avp(S_hdr_tmp_ct_gs) != $null && $avp(S_hdr_tmp_ct_gs) != ""))
               {
                   $var(S_sys_throttling_timer_gi) = $var(S_expire_gi);
                   if((search("(Contact:[^;]*)*;expires")) && (!search("(Contact:[^;]*)*;expires=0") && !search("Expires: 0")))
                   {   # far end NAT should force lower expiration timer to phones to keep connection alive

                       if (isflagset(17)) # Register needs to be throttled
                       {
                          if($(avp(C_req_transp_gs){s.tolower}) == "udp")
                             $var(S_sys_throttling_timer_gi) = REM_SUB_UDP_THROTTLE_INTERVAL;
                          else
                             $var(S_sys_throttling_timer_gi) = REM_SUB_TCP_THROTTLE_INTERVAL;

                           # Randomize the throttlingTimer towards Subscriber by 10 percent.
                           $var(S_sys_throttling_timer_gi) = $var(S_sys_throttling_timer_gi) - ($RANDOM / (2147483648 / ($var(S_sys_throttling_timer_gi) * 10/100)));

                           if (!isflagset(11) || ($var(S_expire_gi) < $var(S_sys_throttling_timer_gi)))
                               $var(S_sys_throttling_timer_gi) = $var(S_expire_gi);

                           # For OSMO, force the throttling to 10 mins
#                           if($var(S_sys_throttling_timer_gi) < 600 && $avp(S_hdr_user_agent_gs)=~"(.*)OpenScape Mobile Client(.*)")
#                               $var(S_sys_throttling_timer_gi)=600;

                           # TODO: What if avp(S_tmp_gs) does not contain expires and is part of main Expires header.
                       }
                       else {
                           $var(S_sys_throttling_timer_gi) = $var(S_expire_gi);
                       }
                   }
                   $avp(S_tmp_gs)="Contact: <" + $avp(S_hdr_tmp_ct_gs) + ">;expires=" + $var(S_sys_throttling_timer_gi);
                   if($var(S_ep_id_gi)!="0" && $var(S_ep_id_gi)!="")
                      $avp(S_tmp_gs)=$avp(S_tmp_gs)+";epid=" + $var(S_ep_id_gi);
                   remove_hf("Contact");
                   append_hf("$avp(S_tmp_gs)\r\n","Contact");
                   xlog("L_INFO", "CI=$ci - R5 - Converted ext port $avp(C_port_gi) to $avp(S_hdr_tmp_ct_gs)., avp(S_tmp_gs)=$avp(S_tmp_gs)\n");
               }

            }
            # Remove first contact from list
            avp_subst("$avp(S_req_ct_gs)/d","/<[^>]*[^<]*//i");
            $var(S_sys_ct_count_li) = $var(S_sys_ct_count_li) + 1;
        }
        $avp(S_req_ct_gs) = $var(C_hdr_ct_uri_ls);

        # Restore avp(C_port_gi) with pm port
        $avp(C_port_gi) = $avp(C_pmap_port_gi);
    }

    if (is_gflag("6"))
    {
        xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
        bm_log_timer("route-5");
    }
}
########################################################################
#
########################################################################
route[NM_REGISTER_FAILURE_ROUTE]
{
    xlog("L_INFO", "CI=$ci - FR4 - Entry M=$rm RURI=$ru From=$fu To=$tu RD=$rd SIP=$si SP=$sp C_call_msg_gb=$var(C_call_msg_gb), IP=$var(C_si_var_gs) Code:$T_reply_code CI=$ci,avp(S_ds_dest_gs)=$(avp(S_ds_dest_gs)[*]), C_ri_var_gs=$var(C_ri_var_gs) , C_wan_ip_gs=$avp(C_wan_ip_gs)\n");


}
########################################################################
# route NM_GENERAL_REPLY_ROUTE: general-reply-route
# input pseudo-variables: $avp(C_gw_behind_ep_gi), $avp(C_gw_core_ip_gs), $avp(S_gw_core_ip2_gs), $avp(C_gw_core_port_gi), $avp(C_gw_type_gi),
#                         $avp(C_pmap_port_gi), $avp(C_port_gi), $avp(C_req_transp_gs), $avp(C_src_ip_gs),
#                         $avp(C_sys_current_binding_ip_gs), $avp(C_sys_current_binding_transp_gs), $avp(C_tmp2_ls), $avp(C_wan_ip_gs),
#                         $avp(S_AccessMainIPv6_gs), $avp(S_gw_core_fqdn_gs), $avp(C_gw_core_port_gi), $avp(S_gw_rm2_fqdn_gs),
#                         $avp(S_gw_rm2_ip_gs), $avp(S_gw_rm_fqdn_gs), $avp(S_gw_rm_ip_list_gs), $avp(S_gw_rm_port_gi), $avp(S_req_ct_gs),
#                         $avp(S_req_via_gs), $avp(S_tmp_gs), $var(C_call_msg_gb), $var(C_gw_core_ip_gs),
#                         $var(C_gw_core_port_gi), $var(C_ri_var_gs), $var(C_si_var_gs), $var(C_ssm_msg_gb), $var(S_cmp_port_gs),
#                         $var(S_count_gi), $var(S_ct_ip_fqdn_gs), $var(S_ct_port_gs), $var(S_donot_restore_gw_avps_gb), $var(S_gw_core_fqdn_gs),
#                         $var(C_gw_core_port_gi), $var(S_matched_ip_fqdn_gb), $var(S_matched_port_gb),
#                         $var(S_via_count_gi)
# output pseudo-variables: $avp(C_core_ip_gs), $avp(C_gw_core_ip_gs), $avp(S_gw_core_ip2_gs), $avp(C_gw_core_port_gi), $avp(C_gw_type_gi),
#                          $avp(C_new_append_headers_list_gs), $avp(C_new_headers_list_gs), $avp(C_port_gi), $avp(C_remove_headers_list_gs), $avp(C_src_ip_gs),
#                          $avp(C_tmp2_ls), $avp(S_gw_core_fqdn_gs), $avp(C_gw_core_port_gi), $avp(S_req_ct_gs),
#                          $avp(S_tmp_gs), $var(C_call_msg_gb), $var(C_gw_core_ip_gs), $var(C_gw_core_port_gi),
#                          $var(C_new_warning_hdr_gs), $var(C_ssm_msg_gb), $var(C_sys_osv_port_gi), $var(S_cmp_port_gs), $var(S_count_gi),
#                          $var(S_ct_ip_fqdn_gs), $var(S_ct_port_gs), $var(S_donot_restore_gw_avps_gb), $var(S_gw_core_fqdn_gs), $var(C_gw_core_port_gi),
#                          $var(S_lanip_4_6_gs), $var(S_matched_ip_fqdn_gb), $var(S_matched_port_gb), $var(S_transport_gs),
#                          $var(S_via_count_gi)
# input headers: Call-Id, Contact, Diversion, From, To,
#                Warning, X-original-flags, X-Original-gwtype, X-Original-socket, X-Siemens-Call-Type
# input flags: 1, 10, 11, 13, 15, 2, 5, g6
# changed flags: 10
########################################################################
onreply_route[NM_GENERAL_REPLY_ROUTE]
{

    route(VARIABLE_INIT_ROUTE);
    xlog("L_INFO", "CI=$ci - RR1 - Entry M=$rm Code:$rs Reason=$rr From=$fu To=$tu CT=$ct IP=$var(C_si_var_gs) flags=$mF");
    xlog("L_INFO", "CI=$ci - RR1 - avp(C_wan_ip_gs)=$avp(C_wan_ip_gs), si=$var(C_si_var_gs), Ri=$var(C_ri_var_gs), avp(C_src_ip_gs)=$avp(C_src_ip_gs), avp(S_req_ct_gs) = $avp(S_req_ct_gs), avp(C_req_transp_gs)=$avp(C_req_transp_gs), avp(S_ds_dest_gs)=$(avp(S_ds_dest_gs)[*])");

    if ($hdr(Content-Length)==$null)
        insert_hf("Content-Length: 0\r\n", "Call-ID");

    # -----------------------------------------------------------------
    # Check if CSeq shall be updated
    # -----------------------------------------------------------------
    route(CSEQ_TRACK_UPDATES_ROUTE);

    if (status=="100" && is_method("INVITE"))
        exit;

    if (is_gflag("6"))
        bm_start_timer("reply_route-1");

    ### pstn dialin INFO handling
    ### if response from gtc, then forward it to MS
    if(is_method("INFO") && $sht(call-info=>$ci::INFOsent) == 1)
    {
        xlog("L_INFO", "CI=$ci - RR1 - INFO response from gtc si=$var(C_si_var_gs),sp=$sp,stored du was $sht(call-info=>$ci::duMS),stored fs was $sht(call-info=>$ci::fsMS)");
        xlog("L_INFO", "CI=$ci - RR1 - Sending response to MS, du=$du, fs=$fs");

        exit;
    }

    if (is_method("INVITE") && $avp(C_gw_type_gi) == 6 && $sht(call-info=>$ci::refer) == 1) ### Response for INVITE sent by the SSM, no PM
    {
        xlog("L_INFO", "CI=$ci - RR1 - INVITE response from gtc si=$var(C_si_var_gs),sp=$sp,stored du was $sht(call-info=>$ci::duMS),stored fs was $sht(call-info=>$ci::fsMS)");
        xlog("L_INFO", "CI=$ci - RR1 - Sending response to SSM, du=$du, fs=$fs");
        exit;
    }

    if((is_method("BYE") || is_method("CANCEL")) && $T_reply_code  == 200)
    {
       sht_rm_name_re("call-info=>^$ci::(sent|msdn|duMS|fsMS|epname|INFOsent|MSport|refer|srcip|srctransp|srcport|dialindn)");
       sht_rm_name_re("dlg-info=>^$ci-($ft|$tt)::cseq-.*");
       xlog("L_INFO", "CI=$ci - RR1 - Clearing MS data in call-info htab and Cseq track data dlg-info htab");
    }

    $var(S_lanip_4_6_noparan_gs) = "192.168.22.104";
    put_ip_in_paran('$var(S_lanip_4_6_noparan_gs)', '$var(S_lanip_4_6_gs)');


    $var(C_sys_osv_port_gi) = $avp(C_core_port_gi);

    if(($sp == $var(C_ssm_port_gi)) && (($var(C_si_var_gs) == $var(C_ssm_ip_gs)) || ($var(C_ri_var_gs) == $var(C_ssm_ip_gs)) || ($var(C_si_var_gs) == $avp(C_wan_ip_gs))))
        $var(C_ssm_msg_gb) = 1;
    else
        $var(C_ssm_msg_gb) = 0;




    route(HDR_INIT_ROUTE);
    if (is_method("REGISTER") || is_method("OPTIONS"))
        $var(C_call_msg_gb) = 0;
    else
        $var(C_call_msg_gb) = 1;

    $var(S_matchHomeDN_gs) = '';

    #Dummy Header to show the version of OSS and end the message with double CRLF to OSV.
    if (isflagset(10) && ($var(C_ssm_msg_gb) == 1 || $var(C_call_msg_gb) == 0))
       insert_hf("X-Siemens-OSS: OpenScape SBC V9 R4.13.00-2/UTC-68df2f3d7fe90f5b8f1a60a6621b8951\r\n", "Call-ID");
    else if($avp(C_gw_type_gi)==5)
        remove_hf_re("X-Siemens-");

    if($var(S_local_ip_gs) == $var(C_si_var_gs) && is_method("PUBLISH") && is_present_hf("x-tc-status") && $T_reply_code == 200)
    {
        $var(S_gtc_status_gs) = $hdr(x-tc-status);

        ### get the ep id from publish, ep name is included in the user part of FROM
        $avp(C_tmp2_ls) = $(fU{s.substr,4,0});

        xlog("L_INFO", "CI=$ci - RR1 - Dip remote_ep, var(S_gtc_status_gs)=$var(S_gtc_status_gs), epname=$avp(C_tmp2_ls) \n");

        ### Dip REP using the EP name
        $var(S_found_ls) =  0;

        if(osb_memdb_select("remote_ep,*|$avp(C_tmp2_ls)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,1","$avp(S_ses_id_gi)|$avp(S_ep_name_gs)|$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm_ip_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)|$avp(S_tmp_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|$avp(S_rep_home_dn_gs)|$avp(S_gw_emergency_prefixes_gs)|$avp(C_pmap_port_gi)|$avp(S_nat_ip_gs)|$avp(S_rep_bitmap_gi)||$avp(S_sys_osv_node_gs)|$avp(S_location_dom_name_gs)|$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||$avp(S_uri_based_route_gb)|$avp(S_access_control_gb)|$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||||||$avp(S_linked_ep_id_gi)") != 1)
        {
            xlog("L_INFO","CI=$ci - RR1 - Failed to lookup db for EP name $avp(C_tmp2_ls) \n");
        }
        else
        {
            if (is_present_hf("x-tc-tenant") && $hdr(x-tc-tenant) != "unknown")
            {
                $(avp(S_tnant_id_gs)[*]) = $null;
                $avp(S_tnant_id_gs) = $hdr(x-tc-tenant);
            }
            else
                $avp(S_tnant_id_gs) = "*"; ## Keep old one if none received from GTC

            if( $hdr(x-tc-status) ==  "offline")
                $avp(C_tmp2_ls) = 0;
            else
                $avp(C_tmp2_ls) = 1;

            xlog("L_INFO", "CI=$ci - RR1 - avp(S_linked_ep_id_gi)=$avp(S_linked_ep_id_gi), status= $hdr(x-tc-status), saving status=$avp(C_tmp2_ls) in REP, avp(S_tnant_id_gs)=$avp(S_tnant_id_gs)\n");
            osb_memdb_update("remote_ep,$avp(S_linked_ep_id_gi)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*||*|*|*|*|*,","*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|$avp(S_tnant_id_gs)|$avp(C_tmp2_ls)|*|*|*|*|*|*|*|*|*|*|*|*|*");
        }
        ### now return from route
        exit;
    }

    if ($var(C_call_msg_gb) == 1)
    {

       # SSM can not handle unknown headers with case mismatch

       if ($var(C_ssm_msg_gb) == 0 && is_present_hf("X-Siemens-Call-Type"))
          subst('/^X-Siemens-Call-Type:.*$/X-Siemens-Call-Type: $hdr(X-Siemens-Call-Type)\r/ig');
    }

    if(!isflagset(10) && $T_reply_code == 408)
    {
        $var(S_reply_from_server_gs)="Yes";
        insert_hf("X-reply_from_server: $var(S_reply_from_server_gs)\r\n", "Call-ID");
    }
    if (!is_present_hf("X-reply_from_server") && $T_reply_code == 408)
        $avp(S_local_reply_gb) = 1;
    else
        $avp(S_local_reply_gb) = 0;

    remove_hf("X-reply_from_server");



    if(isflagset(10) && is_method("INVITE") && $var(C_ssm_msg_gb) == 0)
    {

       if( is_present_hf("Contact") && $T_reply_code =~ "3[0-9][0-9]" )
       {

            ## 3xx received    ##
            ## read the cobatct ip and port, set the variables for dip
            xlog("L_INFO", "CI=$ci - RR1 - 302 received, avp(C_pmap_port_gi)=$avp(C_pmap_port_gi),avp(S_gw_rm2_fqdn_gs)=$avp(S_gw_rm2_fqdn_gs), avp(S_gw_rm2_ip_gs)=$avp(S_gw_rm2_ip_gs),avp(S_gw_rm_fqdn_gs)=$avp(S_gw_rm_fqdn_gs),avp(S_gw_rm_ip_list_gs)=$(avp(S_gw_rm_ip_list_gs)[*]),avp(S_gw_rm_port_gi)=$avp(S_gw_rm_port_gi)\n");

            $var(S_matched_ip_fqdn_gb) = 0;
            $var(S_matched_port_gb) = 0;

            $var(S_ct_ip_fqdn_gs) = $sel(contact.uri.host);
            if ($(sel(contact.uri){uri.maddr}{s.len}))
                $var(S_ct_ip_fqdn_gs) = $(sel(contact.uri){uri.maddr});

            $var(S_ct_port_gs) = 0;
            if($(sel(contact.uri.port){s.len}) )
                $var(S_ct_port_gs) = $sel(contact.uri.port);


            xlog("L_INFO", "CI=$ci - RR1 - var(S_ct_ip_fqdn_gs)=$var(S_ct_ip_fqdn_gs),var(S_ct_port_gs)=$var(S_ct_port_gs) \n");


            $var(S_count_gi) = 0;
            $var(S_cmp_port_gs) = 0;

            if($avp(C_gw_behind_ep_gi))
            {
                $var(S_cmp_port_gs) = $avp(S_gw_rm_port_gi);

                 if($avp(S_gw_rm2_ip_gs) == $var(S_ct_ip_fqdn_gs) || $avp(S_gw_rm2_fqdn_gs) == $var(S_ct_ip_fqdn_gs))
                    $var(S_matched_ip_fqdn_gb) = 1;

                xlog("L_INFO", "CI=$ci - RR1 - C_gw_behind_ep_gi, matching $avp(S_gw_rm2_ip_gs) or $avp(S_gw_rm2_fqdn_gs) with $var(S_ct_ip_fqdn_gs). var(S_cmp_port_gs)=$var(S_cmp_port_gs)\n");
            }
            else if(!isflagset(15) && !isflagset(11))    ### not a sub
            {
                $var(S_cmp_port_gs) = $avp(S_gw_rm_port_gi);
                xlog("L_INFO", "CI=$ci - RR1 - not a sub, using matching $avp(S_gw_rm_fqdn_gs) with $var(S_ct_ip_fqdn_gs). var(S_cmp_port_gs)=$var(S_cmp_port_gs)\n");

                if($avp(S_gw_rm_fqdn_gs) == $var(S_ct_ip_fqdn_gs))
                    $var(S_matched_ip_fqdn_gb) = 1;

                while($(avp(S_gw_rm_ip_list_gs)[$var(S_count_gi)]) != $null && $var(S_matched_ip_fqdn_gb) == 0)
                {
                    if($(avp(S_gw_rm_ip_list_gs)[$var(S_count_gi)]) == $var(S_ct_ip_fqdn_gs))
                        $var(S_matched_ip_fqdn_gb) = 1;

                    $var(S_count_gi) = $var(S_count_gi) + 1;
                }
            }

            if($var(S_ct_port_gs) != 0 && $var(S_cmp_port_gs) == $var(S_ct_port_gs))
                $var(S_matched_port_gb) = 1;

            if($var(S_matched_ip_fqdn_gb)  == 0 || ($var(S_ct_port_gs) != 0 && $var(S_matched_port_gb) == 0))
            {
                $var(S_donot_restore_gw_avps_gb) = 0;

                $var(C_gw_core_ip_gs)       = $avp(C_gw_core_ip_gs);
                $var(S_gw_core_fqdn_gs)     = $avp(S_gw_core_fqdn_gs);
                $var(C_gw_core_port_gi)     = $avp(C_gw_core_port_gi);

                $var(S_home_dn_gs) = '';

                $(avp(C_gw_core_ip_gs)[*])       = $null;
                $(avp(S_gw_core_fqdn_gs)[*])     = $null;
                $(avp(C_gw_core_port_gi)[*])     = $null;
                $(avp(S_tmp_gs)[*])       = $null;


                if ($var(S_ct_port_gs) != 0)
                {
                    ## dip using S_ct_port_gs & ct_ip
                    if(osb_memdb_select("remote_ep,*|*|*|*|*|$var(S_ct_ip_fqdn_gs)|*|$var(S_ct_port_gs)|*|*|*|*|*|$var(S_home_dn_gs)|*|*|$avp(C_wan_ip_gs)|*|*|*|*|*|*|*|*|*|*|*|*|$var(S_profile_name_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","|||||||||$avp(S_tmp_gs)|$avp(S_gw_core_fqdn_gs)|$avp(S_gw_core_port_gi)|||||||||||||||||||||||||||||||||||") != 1)
                       osb_memdb_select("remote_ep,*|*|*|*|*|*|$var(S_ct_ip_fqdn_gs)|$var(S_ct_port_gs)|*|*|*|*|*|$var(S_home_dn_gs)|*|*|$avp(C_wan_ip_gs)|*|*|*|*|*|*|*|*|*|*|*|*|$var(S_profile_name_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","|||||||||$avp(S_tmp_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|||||||||||||||||||||||||||||||||||");

                    xlog("L_INFO", "CI=$ci - RR1 - Dipping remote_ep with var(S_ct_ip_fqdn_gs)=$var(S_ct_ip_fqdn_gs),var(S_ct_port_gs)=$var(S_ct_port_gs)\n");
                }
                else
                {
                    ## dip using ct_ip
                    if(osb_memdb_select("remote_ep,*|*|*|*|*|$var(S_ct_ip_fqdn_gs)|*|*|*|*|*|*|*|$var(S_home_dn_gs)|*|*|$avp(C_wan_ip_gs)|*|*|*|*|*|*|*|*|*|*|*|*|$var(S_profile_name_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","|||||||||$avp(S_tmp_gs)|$avp(S_gw_core_fqdn_gs)|$avp(S_gw_core_port_gi)|||||||||||||||||||||||||||||||||||") != 1)
                       osb_memdb_select("remote_ep,*|*|*|*|*|*|$var(S_ct_ip_fqdn_gs)|*|*|*|*|*|*|$var(S_home_dn_gs)|*|*|$avp(C_wan_ip_gs)|*|*|*|*|*|*|*|*|*|*|*|*|$var(S_profile_name_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","|||||||||$avp(S_tmp_gs)|$avp(S_gw_core_fqdn_gs)|$avp(S_gw_core_port_gi)|||||||||||||||||||||||||||||||||||");

                    xlog("L_INFO", "CI=$ci - RR1 - Dipping remote_ep using remote $var(S_ct_ip_fqdn_gs)\n");
                }

                $var(S_matchHomeDN_gs) = $sel(contact.uri.user);
                xlog("L_INFO", "CI=$ci - RR1 - Contact user: $var(S_matchHomeDN_gs)\n");

                if($avp(S_tmp_gs) == $null && $var(S_matchHomeDN_gs) != "" )
                {
                    xlog("L_INFO", "CI=$ci - RR1 - Dipping with var(S_ct_ip_fqdn_gs)=$var(S_ct_ip_fqdn_gs),var(S_ct_port_gs)=$var(S_ct_port_gs), matchHomeDN=$var(S_matchHomeDN_gs)\n");

                    if(osb_memdb_nl_select_best_match("remote_ep,*|*|*|*|*|$var(S_ct_ip_fqdn_gs)|*|*|*|*|*|*|*|$var(S_matchHomeDN_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|$var(S_profile_name_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","$avp(S_ses_id_gi)||$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm_ip_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)|$avp(S_tmp_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|$avp(S_rep_home_dn_gs)|$avp(S_gw_emergency_prefixes_gs)|$avp(C_pmap_port_gi)|$avp(S_nat_ip_gs)|$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|$avp(S_sys_osv_node_gs)|$avp(S_location_dom_name_gs)|$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||$avp(S_uri_based_route_gb)|$avp(S_access_control_gb)|$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||||||$avp(S_linked_ep_id_gi)",13) !=1)
                    {
                       if(osb_memdb_nl_select_best_match("remote_ep,*|*|*|*|*|*|$var(S_ct_ip_fqdn_gs)|*|*|*|*|*|*|$var(S_matchHomeDN_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|$var(S_profile_name_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","$avp(S_ses_id_gi)||$avp(S_rm_logical_id_gs)|$avp(C_gw_type_gi)|$avp(C_ssp_gw_profile_gs)|$avp(S_gw_rm_ip_gs)|$avp(S_gw_rm_fqdn_gs)|$avp(S_gw_rm_port_gi)|$avp(C_gw_transp_gs)|$avp(S_tmp_gs)|$avp(S_gw_core_fqdn_gs)|$avp(C_gw_core_port_gi)|$avp(S_gw_is_natted_gs)|$avp(S_rep_home_dn_gs)|$avp(S_gw_emergency_prefixes_gs)|$avp(C_pmap_port_gi)|$avp(S_nat_ip_gs)|$avp(S_rep_bitmap_gi)|$avp(C_rm_address_type_gi)|$avp(S_sys_osv_node_gs)|$avp(S_location_dom_name_gs)|$avp(S_rm_media_ip_gs)|$avp(S_rm_media_subnet_mask_gs)||$avp(S_uri_based_route_gb)|$avp(S_access_control_gb)|$avp(S_associated_ep_id_gi)|$avp(C_inv_noanswr_timer_gs)|$avp(C_inv_noreply_timer_gs)|$avp(S_access_realm_profile_gs)|$avp(S_core_realm_profile_gs)|$avp(S_test_dn_gs)|$avp(S_tnant_id_gs)|$avp(S_trunk_status_gb)|$avp(S_options_enabled_gb)|$avp(S_socket_port_gi)|$avp(S_cluster_server_grp_gs)||||||||||$avp(S_linked_ep_id_gi)",13) !=1)
                          xlog("L_INFO", "CI=$ci - RR1 - Matched IP/FQDN NOT found\n");
                       else
                          xlog("L_INFO", "CI=$ci - RR1 - Matched FQDN found\n");
                    }
                    else
                        xlog("L_INFO", "CI=$ci - RR1 - Matched IP found\n");
                }

                if(($avp(S_tmp_gs) != $null && $avp(S_tmp_gs) != ""))
                {
                   # BUILD avp(S_req_ct_gs)
                   $(avp(S_req_ct_gs)[*]) = $null;
                   $avp(S_req_ct_gs) = $hdr(Contact);

                   # For Direct Endpoint do not restore the avps
                   if ($avp(C_gw_behind_ep_gi) == 0) {
                      $var(S_donot_restore_gw_avps_gb) = 1;

                      # UPDATE avps to build the Contact
                      $avp(C_gw_core_ip_gs) = $avp(S_tmp_gs);
                      $avp(C_port_gi) = $avp(C_gw_core_port_gi); # NOT USED in R25 BUT SET ANYWAY
                      osb_set_uri("$avp(S_req_ct_gs)","$avp(C_gw_core_ip_gs),$avp(C_gw_core_port_gi),",0x2C);


                      # UPDATE avps to build the Record-Route in R25
                      $avp(C_core_ip_gs) = $avp(C_gw_core_ip_gs);
                      $avp(C_gw_core_port_gi) = $avp(C_gw_core_port_gi);

                      xlog("L_INFO", "CI=$ci - RR1 - no gwbehindep,, S_donot_restore_gw_avps_gb\n");
                   }
                   else{
                       $avp(S_gw_core_ip2_gs)  = $avp(S_tmp_gs);
                       $avp(C_gw_core_ip_gs)   = $var(C_gw_core_ip_gs);
                       osb_set_uri("$avp(S_req_ct_gs)","$avp(S_gw_core_ip2_gs),$avp(C_gw_core_port_gi),",0x2C);
                   }

                   xlog("L_INFO", "CI=$ci - RR1 - ep found using remote $var(S_ct_ip_fqdn_gs):$var(S_ct_port_gs), avp(C_gw_core_ip_gs)=$avp(C_gw_core_ip_gs), avp(C_gw_core_port_gi)=$avp(C_gw_core_port_gi),avp(C_port_gi)=$avp(C_port_gi),avp(S_gw_core_ip2_gs)=$avp(S_gw_core_ip2_gs)\n");
                }
                else
                {
                   xlog("L_INFO", "CI=$ci - RR1 - no ep found for remote $var(S_ct_ip_fqdn_gs):$var(S_ct_port_gs)\n");
                }

                if ($var(S_donot_restore_gw_avps_gb) == 0)
                {
                   xlog("L_INFO", "CI=$ci - RR1 - old_gw_avps, ci=$avp(C_gw_core_ip_gs),cf=$avp(S_gw_core_fqdn_gs),ct=$avp(C_gw_core_port_gi),cp=$avp(C_gw_core_port_gi)\n");

                   $avp(C_gw_core_ip_gs)       = $var(C_gw_core_ip_gs);
                   $avp(S_gw_core_fqdn_gs)     = $var(S_gw_core_fqdn_gs);
                   $avp(C_gw_core_port_gi)     = $var(C_gw_core_port_gi);

                   xlog("L_INFO", "CI=$ci - RR1 - restore_gw_avps, ci=$avp(C_gw_core_ip_gs),cf=$avp(S_gw_core_fqdn_gs),ct=$avp(C_gw_core_port_gi),cp=$avp(C_gw_core_port_gi)\n");

                }
            }
       }
       else if ( !isflagset(13) && isflagset(1) && $sht(call-info=>$ci-$ft::ssp-da-rep-id) != $null && ($T_reply_code == 401 || $T_reply_code == 407) )
       {
           ## The source IP/port is stored in the hash table in order to be used to set the du in a next attempt.
           ## It avoids load balancing issue when the authorization is sent to a different ip which the challenged came from.

           xlog("L_INFO", "CI=$ci - RR1 - INVITE was challenged by SSP source IP= $var(C_si_var_gs). Save ip in htab for next attempt.\n");
           $sht(call-info=>$ci-$ft::ssp-da-challenged) = 1;
           $sht(call-info=>$ci-$ft::ssp-da-ip) = $var(C_si_var_gs);
           $sht(call-info=>$ci-$ft::ssp-da-port) = $sp;
       }
    }
    else
    {
        xlog("L_INFO", "CI=$ci - RR1- flag(10) not set, set the avp(C_port_gi) to avp(C_advertised_port_gi)=$avp(C_advertised_port_gi)\n");
        $avp(C_port_gi) = $avp(C_advertised_port_gi);
    }

    if($var(C_ssm_msg_gb) == 1)
    {
        #restore the flags first
        if(is_present_hf("X-original-flags")) {
            #read original socket from the X-original-pm-port header field
            $mf = $(hdr(X-original-flags){s.int});
            xlog("L_INFO", "CI=$ci - RR1- X-original-flags restored:  $mf , $ci\n");

            #remove the socket header field
            remove_hf("X-original-flags");
        }
        if(is_present_hf("X-Original-gwtype")) {
            #read original socket from the X-Original-gwtype header field
            $avp(C_gw_type_gi) = $hdr(X-Original-gwtype);
            xlog("L_INFO", "CI=$ci - RR1- X-Original-gwtype restored:  $avp(C_gw_type_gi)\n");

            #remove the socket header field
            remove_hf("X-Original-gwtype");
        }
        if(is_present_hf("X-Original-socket")) {
            #read original socket from the X-Original-gwtype header field
            $fs = $hdr(X-Original-socket);
            xlog("L_INFO", "CI=$ci - RR1- X-Original-socket restored:  $fs\n");

            #remove the socket header field
            remove_hf("X-Original-socket");
        }


        route(PORT_MAPPING_SSM_REPLY_HDR_ROUTE);
        xlog("L_INFO", "CI=$ci - RR1 - Message $rm sent to original destination $du, socket=$fs  , avp(S_req_via_gs)=$avp(S_req_via_gs)\n");
        if (is_gflag("6"))
        {
            xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
            bm_log_timer("reply_route-1");
        }
        exit;

       if(isflagset(5))
       {
           xlog("L_INFO", "CI=$ci - RR1 - message from ssm, and a gw call, so set flag(10) , avp(S_req_via_gs)=$avp(S_req_via_gs)\n");
           setflag(10);
       }
    }
    else
    {
        if (is_method("OPTIONS") && isflagset(10) && isflagset(11) && $T_reply_code == 408)
        {
            change_reply_status("404", "Not Found"); # it causes unregister on OSV
            xlog("L_INFO", "CI=$ci - RR1- For rem.sub. replace original code $T_reply_code to 404\n");
        }
    }

    xlog("L_INFO", "CI=$ci - RR1 - avpport=$avp(C_port_gi)\n");
    # SIP service provider response
    if (isflagset(1) || isflagset(2))
    {
        route(SSP_PROFILE_RESPONSE_ROUTE);
    }

    if ($T_req($rt) != $null && is_method("INVITE") && $sht(call-info=>$ci::INFOsent) == 1)
         xlog("L_INFO", "CI=$ci - RR1 - Port map is not performed for Resp. of INVITE generated from SSM after REFER\n");
    if (is_method("INVITE") && $sht(call-info=>$ci::SREC) == 1)
    {
        route(MANIPULATE_VIA_ROUTE);
        xlog("L_INFO", "CI=$ci - RR1 - Port map is not performed for Resp. of INVITE to SIPREC\n");
    }
    else
    {
        route(PORT_MAPPING_REPLY_HDR_ROUTE); # Always do Reply Header Transformation in CSBC mode
    }

    # CDR response handling now after SSM

    route(SIP_HEADERS_CHANGE_ROUTE);
    if (is_gflag("6"))
    {
        xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
        bm_log_timer("reply_route-1");
    }

    exit;
}
########################################################################
# route NM_REGISTER_REPLY_ROUTE: register-reply-route
# input pseudo-variables: $avp(C_gw_behind_ep_gi), $avp(C_pmap_port_gi), $avp(C_port_gi), $avp(C_src_ip_gs), $avp(C_sys_current_binding_transp_gs),
#                         $avp(C_tmp2_ls), $avp(C_wan_ip_gs), $avp(S_hdr_tmp_ct_gs), $avp(S_hdr_user_agent_gs), $avp(S_pmap_ep_id_gi),
#                         $avp(S_pmap_id_gi), $var(C_si_var_gs), $var(S_expire_gi), $var(S_mod_resp_code_Gi), $var(S_mod_resp_code_gi),
#                         $var(S_pmap_exp_lb), $var(S_pmap_sub_expiry_gi), $var(S_select_return_gb), $var(S_sys_throttling_timer_gi), $var(S_ua_id_gi)
# output pseudo-variables: $avp(C_tmp2_ls), $avp(S_hdr_user_agent_gs), $avp(S_tmp_gs), $var(C_call_msg_gb), $var(C_new_warning_hdr_gs),
#                          $var(C_ssm_msg_gb), $var(C_sys_osv_port_gi), $var(S_expire_gi), $var(S_lanip_4_6_gs), $var(S_pmap_exp_lb),
#                          $var(S_pmap_sub_expiry_gi), $var(S_select_return_gb), $var(S_ua_id_gi)
# input headers: Warning
# input flags: 28, 5, g6, g8
# changed flags:
########################################################################
onreply_route[NM_REGISTER_REPLY_ROUTE]
{
    if (is_gflag("6"))
        bm_start_timer("reply_route-3");

    if ($hdr(Content-Length)==$null)
        insert_hf("Content-Length: 0\r\n", "Call-ID");

    route(VARIABLE_INIT_ROUTE);
    route(HDR_INIT_ROUTE);

    xlog("L_INFO", "CI=$ci - RR3 - Entry M=$rm From=$fu To=$tu RD= $rd IP=$var(C_si_var_gs) CT=$ct Code:$rs Reason=$rr flags=$mF ,tmpCt= $avp(S_hdr_tmp_ct_gs),avp(C_port_gi)=$avp(C_port_gi), pm_port=$avp(C_pmap_port_gi),om_id=$avp(S_pmap_id_gi),avp(S_hdr_user_agent_gs)=$avp(S_hdr_user_agent_gs)\n\n");
    xlog("L_INFO", "CI=$ci - RR3.1 - var(S_pmap_ct_gs)=$var(S_pmap_ct_gs)\n");

    $var(C_sys_osv_port_gi) = $avp(C_core_port_gi);
    $var(S_pmap_exp_lb)=1;
    $var(S_expire_gi)=0;

    $var(C_ssm_msg_gb) = 0;
    $var(C_call_msg_gb) = 0;

    if (isflagset(5) || $avp(C_gw_behind_ep_gi) !=0) {
        route(PROCESS_MULT_CONTACT_ROUTE);
    }
    else if((status == "200"))
    {
        if (!isflagset(28)) # Registration not stored in location table
        {
           if(($avp(S_hdr_tmp_ct_gs) != $null && $avp(S_hdr_tmp_ct_gs) != ""))
           {
             route(PROCESS_MULT_CONTACT_ROUTE);   #first process the multiple contacts

             if ($var(S_expire_gi) > 0)
             {
                #here we need to      Fsent
                #1- update the port map with response from 8K
                #2- set expiry to subscriber to value provisioned (default 60)

                #change the exp_as  if exp_as NE 0, i.e. it was not an UnRegister
                #in case of keyset, the 200 OK may have the contact with expires=xx for the other memeber
                #so we need to see if this was an unregister
                #change the exp_as  if exp_as NE 0, i.e. it was not an UnRegister
                $avp(S_tmp_gs) =$null;


                if($avp(C_pmap_port_gi) != 0)
                {
                   ## now the user_agent must be considered based on $avp(S_pmap_id_gi) and $avp(S_hdr_user_agent_gs)
                   ## save it in user_agent table
                   $(avp(C_tmp2_ls)[*]) = $null;
                   $var(S_select_return_gb) =osb_memdb_nl_select("user_agent,*|$avp(S_hdr_user_agent_gs),1","$avp(C_tmp2_ls)|$avp(S_hdr_user_agent_gs)");
                   if($var(S_select_return_gb) != 1 )
                       $var(S_ua_id_gi) = osb_memdb_insert("user_agent,|$avp(S_hdr_user_agent_gs)");
                   else
                       $var(S_ua_id_gi) = $avp(C_tmp2_ls);
                   xlog("L_INFO", "CI=$ci - RR3 -var(S_select_return_gb)=$var(S_select_return_gb),var(S_ua_id_gi)=$var(S_ua_id_gi), avp(S_hdr_user_agent_gs)=$avp(S_hdr_user_agent_gs),avp(S_pmap_id_gi)=$avp(S_pmap_id_gi),avp(C_tmp2_ls)=$avp(C_tmp2_ls),var(S_select_return_gb)=$var(S_select_return_gb)\n");

                   $var(S_pmap_sub_expiry_gi) = $(Ts{s.int});
                   $var(S_pmap_sub_expiry_gi) = $var(S_pmap_sub_expiry_gi) + $var(S_sys_throttling_timer_gi);
                   xlog("L_INFO", "CI=$ci - RR3 - var(S_pmap_sub_expiry_gi)=$var(S_pmap_sub_expiry_gi)\n");

                   $(avp(S_sys_stick_with_commServer_sv_gi)[*]) = $null;
                   osb_memdb_select("osv_all,*|*|*|$var(C_si_var_gs)|$avp(C_sys_current_binding_port_gi)|$(pr{s.toupper})|*|*|*|*|*|*,","|||||||||$avp(S_sys_stick_with_commServer_sv_gi)||");

                   $var(S_memdb_return_li) = 0;
                   if(!is_gflag("8") && $avp(S_pmap_ep_id_gi) !=0)
                   {
                        $var(S_memdb_return_li) = osb_memdb_update("port_map,*|$avp(C_src_ip_gs)|$avp(S_hdr_tmp_ct_gs)|*|*|*|*|*|*|$avp(S_pmap_ep_id_gi)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","*|*|*|*|*|$Ts|$var(S_expire_gi)|$var(S_pmap_sub_expiry_gi)|*|*|*|*|*|*|*|$var(S_ua_id_gi)|$avp(C_wan_port_gs)|$avp(S_core_realm_profile_gs)|$avp(S_wosmo_client_ip_gs)|*|*|$var(C_si_var_gs)|$avp(C_sys_current_binding_port_gi)|$pr|$avp(S_sys_stick_with_commServer_sv_gi)|*");
                        if($var(S_memdb_return_li) == 1)
                            xlog("L_INFO", "CI=$ci - RR3.1 - port_map update with exp_as. avp(C_src_ip_gs)=$avp(C_src_ip_gs), avp(S_hdr_tmp_ct_gs)=$avp(S_hdr_tmp_ct_gs), avp(S_pmap_ep_id_gi)=$avp(S_pmap_ep_id_gi), Ts=$Ts, var(S_expire_gi)=$var(S_expire_gi), var(S_pmap_sub_expiry_gi)=$var(S_pmap_sub_expiry_gi), var(S_ua_id_gi)=$var(S_ua_id_gi), C_wan_port_gs=$avp(C_wan_port_gs), S_core_realm_profile_gs=$avp(S_core_realm_profile_gs), avp(S_wosmo_client_ip_gs)=$avp(S_wosmo_client_ip_gs),var(C_si_var_gs)=$var(C_si_var_gs), avp(C_sys_current_binding_port_gi)=$avp(C_sys_current_binding_port_gi), pr=$pr \n");
                        else
                        {
                            #get epid last char
                            $var(S_tmp_count_li)    = $(avp(S_pmap_ep_id_gi){s.len}) - 1;
                            $var(S_ep_id_suffix_ls) = $(avp(S_pmap_ep_id_gi){s.strip,$var(S_tmp_count_li)});

                            if( $var(S_ep_id_suffix_ls) == "i" || $var(S_ep_id_suffix_ls) == "g")
                            {
                                xlog("L_INFO", "CI=$ci - RR3.1 - Will change current epid sufix $var(S_ep_id_suffix_ls) and retry osb_memdb_update\n");
                                if ($var(S_ep_id_suffix_ls) == "i")
                                    $var(S_tmp_epid_ls)=$(avp(S_pmap_ep_id_gi){s.substr,0,$var(S_tmp_count_li)}) + "g";
                                else
                                    $var(S_tmp_epid_ls)=$(avp(S_pmap_ep_id_gi){s.substr,0,$var(S_tmp_count_li)}) + "i";

                                $var(S_memdb_return_li) = osb_memdb_update("port_map,*|$avp(C_src_ip_gs)|$avp(S_hdr_tmp_ct_gs)|*|*|*|*|*|*|$var(S_tmp_epid_ls)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","*|*|*|*|*|$Ts|$var(S_expire_gi)|$var(S_pmap_sub_expiry_gi)|*|$avp(S_pmap_ep_id_gi)|*|*|*|*|*|$var(S_ua_id_gi)|$avp(C_wan_port_gs)|$avp(S_core_realm_profile_gs)|$avp(S_wosmo_client_ip_gs)|*|*|$var(C_si_var_gs)|$avp(C_sys_current_binding_port_gi)|$pr|$avp(S_sys_stick_with_commServer_sv_gi)|*");
                                if($var(S_memdb_return_li) == 1)
                                    xlog("L_INFO", "CI=$ci - RR3.1.1 - port_map update with exp_as. avp(C_src_ip_gs)=$avp(C_src_ip_gs), avp(S_hdr_tmp_ct_gs)=$avp(S_hdr_tmp_ct_gs), avp(S_pmap_ep_id_gi)=$avp(S_pmap_ep_id_gi), Ts=$Ts, var(S_expire_gi)=$var(S_expire_gi), var(S_pmap_sub_expiry_gi)=$var(S_pmap_sub_expiry_gi), var(S_ua_id_gi)=$var(S_ua_id_gi), C_wan_port_gs=$avp(C_wan_port_gs), S_core_realm_profile_gs=$avp(S_core_realm_profile_gs), avp(S_wosmo_client_ip_gs)=$avp(S_wosmo_client_ip_gs),var(C_si_var_gs)=$var(C_si_var_gs), avp(C_sys_current_binding_port_gi)=$avp(C_sys_current_binding_port_gi), pr=$pr \n");
                                else
                                    xlog("L_INFO", "CI=$ci - RR3.1.1 - osb_memdb_update returned $var(S_memdb_return_li)\n");
                            }
                            else
                                xlog("L_INFO", "CI=$ci - RR3.1 - osb_memdb_update returned $var(S_memdb_return_li)\n");
                        }
                   }
                   else
                   {
                        $var(S_memdb_return_li) = osb_memdb_update("port_map,*|$avp(C_src_ip_gs)|$avp(S_hdr_tmp_ct_gs)|*|$avp(C_port_gi)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","*|*|*|*|*|$Ts|$var(S_expire_gi)|$var(S_pmap_sub_expiry_gi)|*|*|*|*|*|*|*|$var(S_ua_id_gi)|$avp(C_wan_port_gs)|$avp(S_core_realm_profile_gs)|$avp(S_wosmo_client_ip_gs)|*|*|$var(C_si_var_gs)|$avp(C_sys_current_binding_port_gi)|$pr|$avp(S_sys_stick_with_commServer_sv_gi)|*");
                        if($var(S_memdb_return_li) == 1)
                            xlog("L_INFO", "CI=$ci - RR3.2 - port_map update with exp_as. avp(C_src_ip_gs)=$avp(C_src_ip_gs), avp(S_hdr_tmp_ct_gs)=$avp(S_hdr_tmp_ct_gs), avp(S_pmap_ep_id_gi)=$avp(S_pmap_ep_id_gi), Ts=$Ts, var(S_expire_gi)=$var(S_expire_gi), var(S_pmap_sub_expiry_gi)=$var(S_pmap_sub_expiry_gi), var(S_ua_id_gi)=$var(S_ua_id_gi), C_wan_port_gs=$avp(C_wan_port_gs), S_core_realm_profile_gs=$avp(S_core_realm_profile_gs), avp(S_wosmo_client_ip_gs)=$avp(S_wosmo_client_ip_gs),var(C_si_var_gs)=$var(C_si_var_gs), avp(C_sys_current_binding_port_gi)=$avp(C_sys_current_binding_port_gi), pr=$pr \n");
                        else
                            xlog("L_INFO", "CI=$ci - RR3.2 - osb_memdb_update returned $var(S_memdb_return_li)\n");
                   }
                }
             }
             else
             {
                $var(S_pmap_exp_lb)=0;
                xlog("L_INFO", "CI=$ci - RR3 - expires not present or 0 should be removed from pm\n");
             }
           }
        }


    }
    else if($rs > 400)
    {
        xlog("L_INFO", "CI=$ci - RR3 - $T_reply_code - Registration failed - DOS check, mod resp_code to $var(S_mod_resp_code_gi)  from rs:$rs\n");
        route(GLOBAL_DOS_ROUTE);
        if($var(S_mod_resp_code_gi) == 403)
        {
            change_reply_status(403,"Forbidden");
        }
    }

    xlog("L_INFO", "CI=$ci - RR3.2 - var(S_pmap_ct_gs)=$var(S_pmap_ct_gs)\n");
    route(PORT_MAPPING_REPLY_HDR_ROUTE);
    #  pm can now be delted (only after forwarding)
    xlog("L_INFO", "CI=$ci - RR3 - expires not present or 0 should be removed from pm temp_contact =$avp(S_hdr_tmp_ct_gs), exp=$var(S_expire_gi), var(S_pmap_ct_gs)=$var(S_pmap_ct_gs) \n");
    if(($avp(S_hdr_tmp_ct_gs) != $null && $avp(S_hdr_tmp_ct_gs) != ""))
    {
        if($var(S_pmap_exp_lb)==0 )
            osb_memdb_update("port_map,*|$avp(C_src_ip_gs)|$avp(S_hdr_tmp_ct_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","*|*|*|*|*|*|-4|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*");
    }
    route(SIP_HEADERS_CHANGE_ROUTE);


    if (is_gflag("6"))
    {
        xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
        bm_log_timer("reply_route-3");
    }
    exit;
}


########################################################################
# route NM_GENERAL_FAILURE_ROUTE: 8k request - failure-route
# input pseudo-variables: $avp(C_port_gi), $avp(S_hdr_tmp_ct_gs), $avp(S_pmap_id_gi), $var(C_si_var_gs)
# output pseudo-variables:
# input headers:
# input flags:  g6
# changed flags:
########################################################################
failure_route[NM_GENERAL_FAILURE_ROUTE]
{
    if (is_gflag("6"))
        bm_start_timer("failure_route-1");

    xlog("L_INFO", "CI=$ci - FR1 - Entry M=$rm RURI=$ru From=$fu To=$tu RD= $rd SIP=$si SP=$sp C_call_msg_gb=$var(C_call_msg_gb), C_ssm_msg_gb=$var(C_ssm_msg_gb) IP=$var(C_si_var_gs) Code:$T_reply_code CI=$ci,avp(S_ds_dest_gs)=$(avp(S_ds_dest_gs)[*]), C_ssm_port_gi=$var(C_ssm_port_gi) , C_si_var_gs=$var(C_si_var_gs) , C_ssm_ip_gs=$var(C_ssm_ip_gs), C_ri_var_gs=$var(C_ri_var_gs) , C_wan_ip_gs=$avp(C_wan_ip_gs)\n");

    route(VARIABLE_INIT_ROUTE);
    $var(C_ssm_msg_gb) = 0;

    resetsflag(0);


    if (is_method("REGISTER"))
    {
      if ($T_reply_code == 401 || $T_reply_code == 423 || $T_reply_code == 407)
      {

        if(($avp(S_hdr_tmp_ct_gs) != $null && $avp(S_hdr_tmp_ct_gs) != ""))
        {
           $var(S_exp_as_li) = -2;
           if ($avp(S_exp_as_gi) > 0 && $avp(S_pmap_sub_expiry_gs) > $Ts)
           {
               $var(S_exp_as_li) = -5;
               xlog("L_INFO", "CI=$ci - FR1 - Already registered and not expired, accept one register after code $T_reply_code - exp=$avp(S_exp_as_gi)\n");
           }
           osb_memdb_update("port_map,*|$avp(C_src_ip_gs)|$avp(S_hdr_tmp_ct_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,","*|*|*|*|*|*|$var(S_exp_as_li)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*");
        }

        xlog("L_INFO", "CI=$ci - FR1 - port_map update with id=$avp(S_pmap_id_gi), avp(S_exp_as_gi)=$avp(S_exp_as_gi) to -2. avp(S_hdr_tmp_ct_gs)=$avp(S_hdr_tmp_ct_gs), avp(C_port_gi)=$avp(C_port_gi),var(S_expire_gi)=-2\n");
      }
      else if ($T_reply_code  =~"[4-9][0-9][0-9]")
      {
        xlog("L_INFO", "CI=$ci - FR1 - $T_reply_code - Registration failed - deleting from PM: avp(S_hdr_tmp_ct_gs)=$avp(S_hdr_tmp_ct_gs)\n");
        if(($avp(S_hdr_tmp_ct_gs) != $null && $avp(S_hdr_tmp_ct_gs) != ""))
        {
            osb_memdb_delete("port_map,*|*|$avp(S_hdr_tmp_ct_gs)|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*,");
        }
        else
           xlog("L_INFO", "CI=$ci - FR1 - temp_contact was null, how about using avp(S_pmap_id_gi)=$avp(S_pmap_id_gi) \n");
        route(NM_REGISTER_FAILURE_ROUTE);
      }
    }
    if( !isflagset(10) && ( is_method("INVITE") || is_method("CANCEL") || is_method("ACK") || is_method("BYE") )  && ($T_reply_code == 408) )
    {
        xlog("L_INFO", "CI=$ci - FR1 - Message timed out. Fast Ping Started\n");
        # a request to 8k has failed so SP should start a fast ping
        avp_db_query("NOTIFY FAST_PING_REQUEST");
    }

    # CQ00278536 - RR is always called for incoming responses which does the manipulation. RR is not called for internal responses but response is build using the original request requiring no changes
    # route(SIP_HEADERS_CHANGE_ROUTE);

    if (is_gflag("6"))
    {
        xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
        bm_log_timer("failure_route-1");
    }
    exit;
}

########################################################################
# route NM_SSP_FAILUTE_ROUTE: request - failure-route
# input pseudo-variables: $var(C_si_var_gs)
# output pseudo-variables:
# input headers:
# input flags:  g6
# changed flags:
########################################################################
failure_route[NM_SSP_FAILURE_ROUTE]
{
    if (is_gflag("6"))
        bm_start_timer("failure_route-3");

    route(VARIABLE_INIT_ROUTE);
    xlog("L_INFO", "CI=$ci - FR3 - Entry M=$rm RURI=$ru From=$fu To=$tu RD= $rd IP=$var(C_si_var_gs) Code:$T_reply_code CI=$ci\n");

    route(SSP_STATUS_ROUTE);

    # CQ00278536 - RR is always called for incoming responses which does the manipulation. RR is not called for internal responses but response is build using the original request requiring no changes
    # route(SIP_HEADERS_CHANGE_ROUTE);
    if (is_gflag("6"))
    {
        xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
        bm_log_timer("failure_route-3");
    }
    exit;
}

########################################################################
# route STANDALONE_SSP_FAILURE_ROUTE: request - failure-route
# input pseudo-variables: $var(C_si_var_gs)
# output pseudo-variables:
# input headers:
# input flags:  g6
# changed flags:
########################################################################
failure_route[STANDALONE_SSP_FAILURE_ROUTE]
{
    if (is_gflag("6"))
        bm_start_timer("failure_route-2");

    route(VARIABLE_INIT_ROUTE);
    xlog("L_INFO", "CI=$ci - FR2 - Entry M=$rm RURI=$ru From=$fu To=$tu RD= $rd IP=$var(C_si_var_gs) Code:$T_reply_code CI=$ci\n");

    if($avp(C_ssp_uac_sent_gb) == 0 && (($T_reply_code == 407) || ($T_reply_code == 401)))
    {
        uac_auth();
        xlog("L_INFO", "CI=$ci - FR2 - Replying to $T_reply_code with credentials\n");
        t_drop_replies(); # To avoid send error from previous branches
        revert_header_changes("CSeq");
        route(CSEQ_TRACK_UPDATES_ROUTE);
        if (!t_relay_to("0x03"))
            xlog("L_ERR", "CI=$ci - FR2 - Relay failure - M=$rm RURI=$ru From=$fu To=$tu DU=$du FS=$fs\n");
    }
    else
    {
        if(!isflagset(13))
            sht_rm_name_re("dlg-info=>^$ci-($ft|$tt)::cseq-.*");
    }

    $avp(C_ssp_uac_sent_gb) = 1;

    if (is_gflag("6"))
    {
        xlog("L_INFO", "CI=$ci - bench: $rm-$rs\n");
        bm_log_timer("failure_route-2");
    }
    exit;

}





